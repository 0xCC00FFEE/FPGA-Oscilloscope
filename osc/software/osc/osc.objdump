
osc.elf:     file format elf32-littlenios2
osc.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x001501b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00150000 paddr 0x00150000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00150020 paddr 0x00150020 align 2**12
         filesz 0x000050a8 memsz 0x000050a8 flags r-x
    LOAD off    0x000060c8 vaddr 0x001550c8 paddr 0x00155c64 align 2**12
         filesz 0x00000b9c memsz 0x00000b9c flags rw-
    LOAD off    0x00007800 vaddr 0x00156800 paddr 0x00156800 align 2**12
         filesz 0x00000000 memsz 0x00003618 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00150000  00150000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00150020  00150020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004764  001501b8  001501b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007ac  0015491c  0015491c  0000591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000b9c  001550c8  00155c64  000060c8  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00003618  00156800  00156800  00007800  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00006c64  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000508  00000000  00000000  00006c88  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005f4d  00000000  00000000  00007190  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001da0  00000000  00000000  0000d0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022df  00000000  00000000  0000ee7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000be0  00000000  00000000  0001115c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000015ad  00000000  00000000  00011d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000014f4  00000000  00000000  000132e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  000147e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  00014800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00017713  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00017716  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001771a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001771b  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0001771c  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00017720  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00017724  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  00017728  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0001772c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00017730  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00017734  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000000d  00000000  00000000  00017738  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00088c7d  00000000  00000000  00017745  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00150000 l    d  .entry	00000000 .entry
00150020 l    d  .exceptions	00000000 .exceptions
001501b8 l    d  .text	00000000 .text
0015491c l    d  .rodata	00000000 .rodata
001550c8 l    d  .rwdata	00000000 .rwdata
00156800 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../osc_bsp//obj/HAL/src/crt0.o
001501f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00150094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 char57.c
00000000 l    df *ABS*	00000000 keyproc.c
00000000 l    df *ABS*	00000000 lcdout.c
00000000 l    df *ABS*	00000000 mainloop.c
00000000 l    df *ABS*	00000000 menu.c
00000000 l    df *ABS*	00000000 menuact.c
00000000 l    df *ABS*	00000000 stubfncs.c
00000000 l    df *ABS*	00000000 testcode.c
00000000 l    df *ABS*	00000000 tracutil.c
00000000 l    df *ABS*	00000000 obj/default/keyint.o
000fffff l       *ABS*	00000000 SWITCH_ALL
00000008 l       *ABS*	00000000 PIO_IRQ_MASK
0000000c l       *ABS*	00000000 PIO_EDGE_CAP
00000010 l       *ABS*	00000000 PIO_OUTSET
00000014 l       *ABS*	00000000 PIO_OUTCLR
001550e0 l       .rwdata	00000000 adc_speed
001550e6 l       .rwdata	00000000 trig_level
001550e4 l       .rwdata	00000000 trig_delay
00152d5c l     F .text	00000000 key_handler
00152d44 l       .text	00000000 key_int_installer_done
001550d0 l       .rwdata	00000000 key_press
00152da0 l       .text	00000000 loop_keys
00152db4 l       .text	00000000 key_lookup
00153290 l       .text	00000000 key_map
001550d1 l       .rwdata	00000000 key_value
00152edc l       .text	00000000 inc_speed
00152e40 l       .text	00000000 dec_speed
00153014 l       .text	00000000 inc_level
00152f80 l       .text	00000000 dec_level
0015314c l       .text	00000000 inc_delay
001530bc l       .text	00000000 dec_delay
00152e00 l       .text	00000000 key_lookup_cont
00152e28 l       .text	00000000 key_handler_done
00152f74 l       .text	00000000 set_speed_2
00152e60 l       .text	00000000 dec_speed_cont
00152f6c l       .text	00000000 set_speed_1
00152ef0 l       .text	00000000 inc_speed_cont
001530b0 l       .text	00000000 set_level_2
00152f98 l       .text	00000000 dec_level_cont
001530a8 l       .text	00000000 set_level_1
0015302c l       .text	00000000 inc_level_cont
001531ec l       .text	00000000 set_delay_2
001530d0 l       .text	00000000 dec_delay_cont
001531e0 l       .text	00000000 set_delay_1
00153164 l       .text	00000000 inc_delay_cont
00153214 l       .text	00000000 key_available_done
00153278 l       .text	00000000 getkey_done
00000000 l    df *ABS*	00000000 obj/default/testadc.o
000fffff l       *ABS*	00000000 SWITCH_ALL
00000008 l       *ABS*	00000000 PIO_IRQ_MASK
0000000c l       *ABS*	00000000 PIO_EDGE_CAP
00000010 l       *ABS*	00000000 PIO_OUTSET
00000014 l       *ABS*	00000000 PIO_OUTCLR
001533c4 l       .text	00000000 adc_int_installer_done
001550f4 l       .rwdata	00000000 fifo_clk_src
00153450 l       .text	00000000 adc_int_handler_fast_clk_offset
00153448 l       .text	00000000 adc_int_handler_1M_clk_offset
00153454 l       .text	00000000 adc_int_handler_clear_front
001550f8 l       .rwdata	00000000 sample_buffer_A
001534d0 l       .text	00000000 adc_int_handler_loop
001552d8 l       .rwdata	00000000 sample_buffer_B
001554b8 l       .rwdata	00000000 sample_buffer_L
001550f0 l       .rwdata	00000000 sample_complete
001535b0 l       .text	00000000 adc_int_handler_done
00153600 l       .text	00000000 draw_trace_loop
00153628 l       .text	00000000 draw_trace_col_loop
00153698 l       .text	00000000 draw_grid_pt
001536a8 l       .text	00000000 draw_trace_pt
00153648 l       .text	00000000 draw_trace_col_loop_continue
00153668 l       .text	00000000 draw_trace_done
001536f0 l       .text	00000000 draw_grid_horiz
0015376c l       .text	00000000 draw_pixel
0015372c l       .text	00000000 draw_grid_vert
0015373c l       .text	00000000 draw_grid_done
001537bc l       .text	00000000 draw_pixel_done
00153800 l       .text	00000000 clear_display_loop
0015380c l       .text	00000000 clear_display_done
00153874 l       .text	00000000 plot_pixel_done
001538ec l       .text	00000000 slow_sample_rate
001538ac l       .text	00000000 fast_sample_rate
0015392c l       .text	00000000 set_sample_rate_done
0015398c l       .text	00000000 set_trigger_slope_pos
0015399c l       .text	00000000 set_trigger_done
001539d8 l       .text	00000000 set_delay_done
00153ab0 l       .text	00000000 start_sample_done
00153afc l       .text	00000000 sample_null
00153b18 l       .text	00000000 sample_map
00153b00 l       .text	00000000 sample_done_done
00000000 l    df *ABS*	00000000 obj/default/testdisp.o
00153b34 l       .text	00000000 disp
00153b5c l       .text	00000000 draw_top
00153b68 l       .text	00000000 draw_bot
00153b40 l       .text	00000000 disp_cont
00153ba4 l       .text	00000000 draw_border
00153c4c l       .text	00000000 disp_reset
00153b74 l       .text	00000000 draw_red
00153b80 l       .text	00000000 draw_yellow
00153b8c l       .text	00000000 draw_green
00153b98 l       .text	00000000 draw_blue
00153bb0 l       .text	00000000 draw_border_top
00153bc0 l       .text	00000000 dbt_loop
00153bd4 l       .text	00000000 draw_border_bot
00153bec l       .text	00000000 dbb_loop
00153c00 l       .text	00000000 draw_border_left
00153c0c l       .text	00000000 dbl_loop
00153c20 l       .text	00000000 draw_border_right
00153c38 l       .text	00000000 dbr_loop
00153c58 l       .text	00000000 test_disp_done
00000000 l    df *ABS*	00000000 obj/default/testvram.o
00153cb8 l     F .text	00000000 write_all
00153ce4 l     F .text	00000000 read_all
00153c98 l       .text	00000000 test_vram_fail
00153ca0 l       .text	00000000 test_vram_done
00153cc0 l       .text	00000000 write_all_loop
00153ce0 l       .text	00000000 write_all_done
00153cd8 l       .text	00000000 write_all_reset_cnt
00153cec l       .text	00000000 read_all_loop
00153d10 l       .text	00000000 read_all_done
00153d08 l       .text	00000000 read_all_reset_cnt
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
001540d4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
00154270 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
001543a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00155840 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
001541c0 g     F .text	0000005c alt_main
00159b88 g     O .bss	00000100 alt_irq
0015169c g     F .text	0000004c trg_delay_down
00155c64 g       *ABS*	00000000 __flash_rwdata_start
00151174 g     F .text	00000084 display_scale
00156820 g     O .bss	00000004 cur_scale
00151e6c g     F .text	00000028 trace_rearm
00153ac8 g     F .text	00000000 sample_done
00150f00 g     F .text	00000020 get_trigger_mode
00156854 g     O .bss	00000780 saved_trace_A
00154cd4 g     O .rodata	00000070 menu
00150e74 g     F .text	00000020 no_menu_action
001539b4 g     F .text	00000000 set_delay
00000000  w      *UND*	00000000 __errno
00150000 g     F .entry	0000001c __reset
00150020 g       *ABS*	00000000 __flash_exceptions_start
001501f4 g     F .text	00000024 no_action
00156850 g     O .bss	00000004 errno
00156808 g     O .bss	00000004 trigger_mode
001502f8 g     F .text	00000030 menu_right
001513c4 g     F .text	00000048 set_trg_level
00156848 g     O .bss	00000004 alt_argv
00150940 g     F .text	00000064 init_menu
0015dc40 g       *ABS*	00000000 _gp
00151dd4 g     F .text	00000020 is_sampling
00120000 g       *ABS*	00000000 __alt_mem_RAM_ctrl
001502c8 g     F .text	00000030 menu_left
001556c0 g     O .rwdata	00000180 alt_fd_list
00153d14 g     F .text	000000f8 memcpy
0015145c g     F .text	00000054 trg_level_up
0015491c g       *ABS*	00000000 __DTOR_END__
00150ec0 g     F .text	00000040 set_trigger_mode
00153824 g     F .text	00000000 plot_pixel
00000000  w      *UND*	00000000 malloc
001525f0 g     F .text	00000110 restore_trace
00151a78 g     F .text	00000188 cvt_num_field
00156824 g     O .bss	00000004 trace_status
00154538 g     F .text	0000008c alt_icache_flush
00152530 g     F .text	000000c0 set_save_area
001539f0 g     F .text	00000000 start_sample
001510ac g     F .text	00000064 scale_down
00155c54 g     O .rwdata	00000004 alt_max_fd
001531f4 g     F .text	00000000 key_available
00156800 g     O .bss	00000004 menu_entry
0015135c g     F .text	00000068 display_sweep
00151ec0 g     F .text	000003cc set_display_scale
001535c8 g     F .text	00000000 draw_trace
00152700 g     F .text	00000048 do_trace
00155c5c g     O .rwdata	00000004 _global_impure_ptr
00159e18 g       *ABS*	00000000 __bss_end
00153fe4 g     F .text	000000f0 alt_iic_isr_register
00151d38 g     F .text	00000064 init_trace
00156fd4 g     O .bss	00000780 saved_trace_B
00153f98 g     F .text	0000004c alt_ic_irq_enabled
0015165c g     F .text	00000040 set_trg_delay
00150298 g     F .text	00000030 menu_down
00156840 g     O .bss	00000004 alt_irq_active
00151c00 g     F .text	00000138 get_test_sample
001500ec g     F .exceptions	000000cc alt_irq_handler
00155698 g     O .rwdata	00000028 alt_dev_null
00150328 g     F .text	000000a8 clear_region
0015491c g     O .rodata	00000380 char_patterns
00154388 g     F .text	0000001c alt_dcache_flush_all
00157754 g     O .bss	00000780 trace_A
00150b60 g     F .text	0000006c previous_entry
00155c64 g       *ABS*	00000000 __ram_rwdata_end
00155c4c g     O .rwdata	00000008 alt_dev_list
00151d9c g     F .text	00000038 set_mode
001536b8 g     F .text	00000000 draw_grid
00130000 g       *ABS*	00000000 __alt_mem_FLASH_ctrl
00150da4 g     F .text	000000d0 display_entry
001550c8 g       *ABS*	00000000 __ram_rodata_end
00156828 g     O .bss	00000004 saved_end_y
00150fe8 g     F .text	00000084 display_mode
00156804 g     O .bss	00000004 menu_display
00159e18 g       *ABS*	00000000 end
00150e94 g     F .text	0000002c no_display
001514b0 g     F .text	00000098 display_trg_level
001512d8 g     F .text	00000084 sweep_up
00150a94 g     F .text	0000005c reset_menu
001509a4 g     F .text	00000038 clear_menu
001516e8 g     F .text	0000004c trg_delay_up
0015491c g       *ABS*	00000000 __CTOR_LIST__
0015c000 g       *ABS*	00000000 __alt_stack_pointer
00152cc4 g     F .text	00000000 key_int_installer
00154740 g     F .text	000001a0 __call_exitprocs
001501b8 g     F .text	0000003c _start
00157ed4 g     O .bss	00000780 trace_L
0015680c g     O .bss	00000004 level
0015682c g     O .bss	00000004 saved_pos_y
00151590 g     F .text	00000054 trg_slope_toggle
00154250 g     F .text	00000020 alt_sys_init
00154610 g     F .text	00000130 __register_exitproc
001550c8 g       *ABS*	00000000 __ram_rwdata_start
0015491c g       *ABS*	00000000 __ram_rodata_start
00156830 g     O .bss	00000004 sample_size
00154dec g     O .rodata	000000a8 sweep_rates
001537d4 g     F .text	00000000 clear_display
00156834 g     O .bss	00000004 saved_end_x
001533dc g     F .text	00000000 adc_int_handler
00159e18 g       *ABS*	00000000 __alt_stack_base
0015242c g     F .text	00000104 restore_menu_trace
00151e94 g     F .text	0000002c set_trace_size
00150690 g     F .text	00000098 plot_string
00156800 g       *ABS*	00000000 __bss_start
00156838 g     O .bss	00000004 saved_pos_x
00150728 g     F .text	0000013c main
0015684c g     O .bss	00000004 alt_envp
00151734 g     F .text	000000b8 adjust_trg_delay
00152748 g     F .text	0000057c plot_trace
00159c88 g     O .bss	00000190 _atexit0
00151258 g     F .text	00000080 sweep_down
00155c58 g     O .rwdata	00000004 alt_errno
00156810 g     O .bss	00000004 sweep
00150f20 g     F .text	00000064 mode_down
001532a4 g     F .text	00000000 adc_int_installer
0015388c g     F .text	00000000 set_sample_rate
00153948 g     F .text	00000000 set_trigger
0015491c g       *ABS*	00000000 __CTOR_END__
00150000 g       *ABS*	00000000 __alt_mem_ONCHIP_mem
00150a5c g     F .text	00000038 refresh_menu
0015491c g       *ABS*	00000000 __flash_rodata_start
0015491c g       *ABS*	00000000 __DTOR_LIST__
00150268 g     F .text	00000030 menu_up
00150cb8 g     F .text	000000ec menu_entry_right
00156814 g     O .bss	00000004 delay
0015421c g     F .text	00000034 alt_irq_init
001544b8 g     F .text	00000060 alt_release_fd
001545c4 g     F .text	00000014 atexit
00151e2c g     F .text	00000040 trace_done
00155c60 g     O .rwdata	00000004 _impure_ptr
00156844 g     O .bss	00000004 alt_argc
00151548 g     F .text	00000048 set_trg_slope
0015140c g     F .text	00000050 trg_level_down
0015442c g     F .text	0000005c _do_dtors
0015322c g     F .text	00000000 getkey
00150528 g     F .text	00000168 plot_char
00158654 g     O .bss	000002a0 saved_menu
00150020 g       .exceptions	00000000 alt_irq_entry
00150bcc g     F .text	000000ec menu_entry_left
00155c44 g     O .rwdata	00000008 alt_fs_list
0015228c g     F .text	000001a0 clear_saved_areas
001503d0 g     F .text	000000ac plot_hline
00150020 g       *ABS*	00000000 __ram_exceptions_start
001588f4 g     O .bss	00000780 trace_B
0015106c g     F .text	00000040 set_scale
00153e0c g     F .text	00000050 alt_ic_isr_register
00159074 g     O .bss	00000176 saved_axis_y
00153c5c g     F .text	00000000 test_vram
00155c64 g       *ABS*	00000000 _edata
00159e18 g       *ABS*	00000000 _end
00150f84 g     F .text	00000064 mode_up
001501b8 g       *ABS*	00000000 __ram_exceptions_end
00153ef8 g     F .text	000000a0 alt_ic_irq_disable
001591ea g     O .bss	0000012c saved_axis_x
00154518 g     F .text	00000020 altera_nios2_qsys_irq_init
001545d8 g     F .text	00000038 exit
001517ec g     F .text	0000028c display_trg_delay
00153b24 g     F .text	00000000 test_disp
0015c000 g       *ABS*	00000000 __alt_data_end
00150020 g     F .exceptions	00000000 alt_exception
001515e4 g     F .text	00000078 display_trg_slope
00159316 g     O .bss	000000f0 saved_area
0015683c g     O .bss	00000004 sampling
001548e0 g     F .text	0000003c _exit
00080000 g       *ABS*	00000000 __alt_mem_VRAM_ctrl
00159408 g     O .bss	00000780 saved_trace_L
00156818 g     O .bss	00000004 scale
00150864 g     F .text	000000dc key_lookup
00154488 g     F .text	00000030 alt_icache_flush_all
00155c40 g     O .rwdata	00000004 alt_priority_mask
00153e5c g     F .text	0000009c alt_ic_irq_enable
0015047c g     F .text	000000ac plot_vline
001509dc g     F .text	00000080 display_menu
001543d0 g     F .text	0000005c _do_ctors
00150af0 g     F .text	00000070 next_entry
001542c0 g     F .text	000000c8 close
00151df4 g     F .text	00000038 trace_rdy
0015681c g     O .bss	00000004 slope
00154140 g     F .text	00000080 alt_load
001511f8 g     F .text	00000060 set_sweep
00151110 g     F .text	00000064 scale_up
00150218 g     F .text	00000050 menu_key
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00150000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  150000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  150004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  150008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  15000c:	00bffd16 	blt	zero,r2,150004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  150010:	00400574 	movhi	at,21
    ori r1, r1, %lo(_start)
  150014:	08406e14 	ori	at,at,440
    jmp r1
  150018:	0800683a 	jmp	at
  15001c:	00000000 	call	0 <PIO_IRQ_MASK-0x8>

Disassembly of section .exceptions:

00150020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  150020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  150024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  150028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  15002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  150030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  150034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  150038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  15003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  150040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  150044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  150048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  15004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  150050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  150054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  150058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  15005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  150060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  150064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  150068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  15006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  150070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  150074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  150078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  15007c:	10000326 	beq	r2,zero,15008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  150080:	20000226 	beq	r4,zero,15008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  150084:	01500ec0 	call	1500ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  150088:	00000306 	br	150098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  15008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  150090:	e8bfff17 	ldw	r2,-4(ea)

00150094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  150094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  150098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  15009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1500a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1500a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1500a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1500ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1500b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1500b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1500b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1500bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1500c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1500c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1500c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1500cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1500d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1500d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1500d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1500dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1500e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1500e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1500e8:	ef80083a 	eret

001500ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1500ec:	defff904 	addi	sp,sp,-28
  1500f0:	dfc00615 	stw	ra,24(sp)
  1500f4:	df000515 	stw	fp,20(sp)
  1500f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1500fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  150100:	0005313a 	rdctl	r2,ipending
  150104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  150108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  15010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  150110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  150114:	00800044 	movi	r2,1
  150118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  15011c:	e0fffb17 	ldw	r3,-20(fp)
  150120:	e0bffc17 	ldw	r2,-16(fp)
  150124:	1884703a 	and	r2,r3,r2
  150128:	10001726 	beq	r2,zero,150188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  15012c:	00c005b4 	movhi	r3,22
  150130:	18e6e204 	addi	r3,r3,-25720
  150134:	e0bffd17 	ldw	r2,-12(fp)
  150138:	100490fa 	slli	r2,r2,3
  15013c:	1885883a 	add	r2,r3,r2
  150140:	10c00017 	ldw	r3,0(r2)
  150144:	010005b4 	movhi	r4,22
  150148:	2126e204 	addi	r4,r4,-25720
  15014c:	e0bffd17 	ldw	r2,-12(fp)
  150150:	100490fa 	slli	r2,r2,3
  150154:	2085883a 	add	r2,r4,r2
  150158:	10800104 	addi	r2,r2,4
  15015c:	10800017 	ldw	r2,0(r2)
  150160:	1009883a 	mov	r4,r2
  150164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  150168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  15016c:	0005313a 	rdctl	r2,ipending
  150170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  150174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  150178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  15017c:	e0bffb17 	ldw	r2,-20(fp)
  150180:	103fe31e 	bne	r2,zero,150110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  150184:	00000706 	br	1501a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  150188:	e0bffc17 	ldw	r2,-16(fp)
  15018c:	1085883a 	add	r2,r2,r2
  150190:	e0bffc15 	stw	r2,-16(fp)
      i++;
  150194:	e0bffd17 	ldw	r2,-12(fp)
  150198:	10800044 	addi	r2,r2,1
  15019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1501a0:	003fde06 	br	15011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  1501a4:	e037883a 	mov	sp,fp
  1501a8:	dfc00117 	ldw	ra,4(sp)
  1501ac:	df000017 	ldw	fp,0(sp)
  1501b0:	dec00204 	addi	sp,sp,8
  1501b4:	f800283a 	ret

Disassembly of section .text:

001501b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  1501b8:	06c00574 	movhi	sp,21
    ori sp, sp, %lo(__alt_stack_pointer)
  1501bc:	def00014 	ori	sp,sp,49152
    movhi gp, %hi(_gp)
  1501c0:	06800574 	movhi	gp,21
    ori gp, gp, %lo(_gp)
  1501c4:	d6b71014 	ori	gp,gp,56384
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  1501c8:	00800574 	movhi	r2,21
    ori r2, r2, %lo(__bss_start)
  1501cc:	109a0014 	ori	r2,r2,26624

    movhi r3, %hi(__bss_end)
  1501d0:	00c00574 	movhi	r3,21
    ori r3, r3, %lo(__bss_end)
  1501d4:	18e78614 	ori	r3,r3,40472

    beq r2, r3, 1f
  1501d8:	10c00326 	beq	r2,r3,1501e8 <_start+0x30>

0:
    stw zero, (r2)
  1501dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  1501e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  1501e4:	10fffd36 	bltu	r2,r3,1501dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  1501e8:	01541400 	call	154140 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  1501ec:	01541c00 	call	1541c0 <alt_main>

001501f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  1501f0:	003fff06 	br	1501f0 <alt_after_alt_main>

001501f4 <no_action>:
   Last Modified:    Mar. 8, 1994

*/

enum status  no_action(enum status cur_state)
{
  1501f4:	defffe04 	addi	sp,sp,-8
  1501f8:	df000115 	stw	fp,4(sp)
  1501fc:	df000104 	addi	fp,sp,4
  150200:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* return the current state */
    return  cur_state;
  150204:	e0bfff17 	ldw	r2,-4(fp)

}
  150208:	e037883a 	mov	sp,fp
  15020c:	df000017 	ldw	fp,0(sp)
  150210:	dec00104 	addi	sp,sp,4
  150214:	f800283a 	ret

00150218 <menu_key>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_key(enum status cur_state)
{
  150218:	defffd04 	addi	sp,sp,-12
  15021c:	dfc00215 	stw	ra,8(sp)
  150220:	df000115 	stw	fp,4(sp)
  150224:	df000104 	addi	fp,sp,4
  150228:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* check if need to turn the menu on or off */
    if (cur_state == MENU_ON)
  15022c:	e0bfff17 	ldw	r2,-4(fp)
  150230:	1000021e 	bne	r2,zero,15023c <menu_key+0x24>
        /* currently the menu is on, turn it off */
	clear_menu();
  150234:	01509a40 	call	1509a4 <clear_menu>
  150238:	00000106 	br	150240 <menu_key+0x28>
    else
        /* currently the menu is off, turn it on */
	display_menu();
  15023c:	01509dc0 	call	1509dc <display_menu>


    /* all done, return the "opposite" of the current state */
    if (cur_state == MENU_ON)
  150240:	e0bfff17 	ldw	r2,-4(fp)
  150244:	1000021e 	bne	r2,zero,150250 <menu_key+0x38>
        /* state was MENU_ON, change it to MENU_OFF */
        return  MENU_OFF;
  150248:	00800044 	movi	r2,1
  15024c:	00000106 	br	150254 <menu_key+0x3c>
    else
        /* state was MENU_OFF, change it to MENU_ON */
        return  MENU_ON;
  150250:	0005883a 	mov	r2,zero

}
  150254:	e037883a 	mov	sp,fp
  150258:	dfc00117 	ldw	ra,4(sp)
  15025c:	df000017 	ldw	fp,0(sp)
  150260:	dec00204 	addi	sp,sp,8
  150264:	f800283a 	ret

00150268 <menu_up>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_up(enum status cur_state)
{
  150268:	defffd04 	addi	sp,sp,-12
  15026c:	dfc00215 	stw	ra,8(sp)
  150270:	df000115 	stw	fp,4(sp)
  150274:	df000104 	addi	fp,sp,4
  150278:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the previous menu entry */
    previous_entry();
  15027c:	0150b600 	call	150b60 <previous_entry>


    /* return the current state */
    return  cur_state;
  150280:	e0bfff17 	ldw	r2,-4(fp)

}
  150284:	e037883a 	mov	sp,fp
  150288:	dfc00117 	ldw	ra,4(sp)
  15028c:	df000017 	ldw	fp,0(sp)
  150290:	dec00204 	addi	sp,sp,8
  150294:	f800283a 	ret

00150298 <menu_down>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_down(enum status cur_state)
{
  150298:	defffd04 	addi	sp,sp,-12
  15029c:	dfc00215 	stw	ra,8(sp)
  1502a0:	df000115 	stw	fp,4(sp)
  1502a4:	df000104 	addi	fp,sp,4
  1502a8:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the next menu entry */
    next_entry();
  1502ac:	0150af00 	call	150af0 <next_entry>


    /* return the current state */
    return  cur_state;
  1502b0:	e0bfff17 	ldw	r2,-4(fp)

}
  1502b4:	e037883a 	mov	sp,fp
  1502b8:	dfc00117 	ldw	ra,4(sp)
  1502bc:	df000017 	ldw	fp,0(sp)
  1502c0:	dec00204 	addi	sp,sp,8
  1502c4:	f800283a 	ret

001502c8 <menu_left>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_left(enum status cur_state)
{
  1502c8:	defffd04 	addi	sp,sp,-12
  1502cc:	dfc00215 	stw	ra,8(sp)
  1502d0:	df000115 	stw	fp,4(sp)
  1502d4:	df000104 	addi	fp,sp,4
  1502d8:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Left> key function for the current menu entry */
    menu_entry_left();
  1502dc:	0150bcc0 	call	150bcc <menu_entry_left>


    /* return the current state */
    return  cur_state;
  1502e0:	e0bfff17 	ldw	r2,-4(fp)

}
  1502e4:	e037883a 	mov	sp,fp
  1502e8:	dfc00117 	ldw	ra,4(sp)
  1502ec:	df000017 	ldw	fp,0(sp)
  1502f0:	dec00204 	addi	sp,sp,8
  1502f4:	f800283a 	ret

001502f8 <menu_right>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_right(enum status cur_state)
{
  1502f8:	defffd04 	addi	sp,sp,-12
  1502fc:	dfc00215 	stw	ra,8(sp)
  150300:	df000115 	stw	fp,4(sp)
  150304:	df000104 	addi	fp,sp,4
  150308:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Right> key function for the current menu entry */
    menu_entry_right();
  15030c:	0150cb80 	call	150cb8 <menu_entry_right>


    /* return the current state */
    return  cur_state;
  150310:	e0bfff17 	ldw	r2,-4(fp)

}
  150314:	e037883a 	mov	sp,fp
  150318:	dfc00117 	ldw	ra,4(sp)
  15031c:	df000017 	ldw	fp,0(sp)
  150320:	dec00204 	addi	sp,sp,8
  150324:	f800283a 	ret

00150328 <clear_region>:
   Last Modified:    Mar. 8, 1994

*/

void  clear_region(int x_ul, int y_ul, int x_size, int y_size)
{
  150328:	defff804 	addi	sp,sp,-32
  15032c:	dfc00715 	stw	ra,28(sp)
  150330:	df000615 	stw	fp,24(sp)
  150334:	df000604 	addi	fp,sp,24
  150338:	e13ffc15 	stw	r4,-16(fp)
  15033c:	e17ffd15 	stw	r5,-12(fp)
  150340:	e1bffe15 	stw	r6,-8(fp)
  150344:	e1ffff15 	stw	r7,-4(fp)
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
  150348:	e0bffc17 	ldw	r2,-16(fp)
  15034c:	e0bffa15 	stw	r2,-24(fp)
  150350:	00001406 	br	1503a4 <clear_region+0x7c>
        for (y = y_ul; y < (y_ul + y_size); y++)  {
  150354:	e0bffd17 	ldw	r2,-12(fp)
  150358:	e0bffb15 	stw	r2,-20(fp)
  15035c:	00000906 	br	150384 <clear_region+0x5c>

	    /* clear this pixel */
	    plot_pixel(x, y, PIXEL_BLUE);
  150360:	e0fffa17 	ldw	r3,-24(fp)
  150364:	e0bffb17 	ldw	r2,-20(fp)
  150368:	1809883a 	mov	r4,r3
  15036c:	100b883a 	mov	r5,r2
  150370:	01801f04 	movi	r6,124
  150374:	01538240 	call	153824 <plot_pixel>



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
        for (y = y_ul; y < (y_ul + y_size); y++)  {
  150378:	e0bffb17 	ldw	r2,-20(fp)
  15037c:	10800044 	addi	r2,r2,1
  150380:	e0bffb15 	stw	r2,-20(fp)
  150384:	e0fffd17 	ldw	r3,-12(fp)
  150388:	e0bfff17 	ldw	r2,-4(fp)
  15038c:	1885883a 	add	r2,r3,r2
  150390:	e0fffb17 	ldw	r3,-20(fp)
  150394:	18bff216 	blt	r3,r2,150360 <clear_region+0x38>
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
  150398:	e0bffa17 	ldw	r2,-24(fp)
  15039c:	10800044 	addi	r2,r2,1
  1503a0:	e0bffa15 	stw	r2,-24(fp)
  1503a4:	e0fffc17 	ldw	r3,-16(fp)
  1503a8:	e0bffe17 	ldw	r2,-8(fp)
  1503ac:	1885883a 	add	r2,r3,r2
  1503b0:	e0fffa17 	ldw	r3,-24(fp)
  1503b4:	18bfe716 	blt	r3,r2,150354 <clear_region+0x2c>
        }
    }


    /* done clearing the display region - return */
    return;
  1503b8:	0001883a 	nop

}
  1503bc:	e037883a 	mov	sp,fp
  1503c0:	dfc00117 	ldw	ra,4(sp)
  1503c4:	df000017 	ldw	fp,0(sp)
  1503c8:	dec00204 	addi	sp,sp,8
  1503cc:	f800283a 	ret

001503d0 <plot_hline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_hline(int start_x, int start_y, int length)
{
  1503d0:	defff804 	addi	sp,sp,-32
  1503d4:	dfc00715 	stw	ra,28(sp)
  1503d8:	df000615 	stw	fp,24(sp)
  1503dc:	df000604 	addi	fp,sp,24
  1503e0:	e13ffd15 	stw	r4,-12(fp)
  1503e4:	e17ffe15 	stw	r5,-8(fp)
  1503e8:	e1bfff15 	stw	r6,-4(fp)
    int  end_x;		/* ending x position to plot */



    /* check if a line to the "right" or "left" */
    if (length > 0)  {
  1503ec:	e0bfff17 	ldw	r2,-4(fp)
  1503f0:	0080070e 	bge	zero,r2,150410 <plot_hline+0x40>

        /* line to the "right" - start at start_x, end at start_x + length */
	init_x = start_x;
  1503f4:	e0bffd17 	ldw	r2,-12(fp)
  1503f8:	e0bffb15 	stw	r2,-20(fp)
	end_x = start_x + length;
  1503fc:	e0fffd17 	ldw	r3,-12(fp)
  150400:	e0bfff17 	ldw	r2,-4(fp)
  150404:	1885883a 	add	r2,r3,r2
  150408:	e0bffc15 	stw	r2,-16(fp)
  15040c:	00000606 	br	150428 <plot_hline+0x58>
    }
    else  {

        /* line to the "left" - start at start_x + length, end at start_x */
	init_x = start_x + length;
  150410:	e0fffd17 	ldw	r3,-12(fp)
  150414:	e0bfff17 	ldw	r2,-4(fp)
  150418:	1885883a 	add	r2,r3,r2
  15041c:	e0bffb15 	stw	r2,-20(fp)
	end_x = start_x;
  150420:	e0bffd17 	ldw	r2,-12(fp)
  150424:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
  150428:	e0bffb17 	ldw	r2,-20(fp)
  15042c:	e0bffa15 	stw	r2,-24(fp)
  150430:	00000906 	br	150458 <plot_hline+0x88>
        /* plot a point of the line */
	plot_pixel(x, start_y, PIXEL_RED);
  150434:	e0fffa17 	ldw	r3,-24(fp)
  150438:	e0bffe17 	ldw	r2,-8(fp)
  15043c:	1809883a 	mov	r4,r3
  150440:	100b883a 	mov	r5,r2
  150444:	0187c004 	movi	r6,7936
  150448:	01538240 	call	153824 <plot_pixel>
	end_x = start_x;
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
  15044c:	e0bffa17 	ldw	r2,-24(fp)
  150450:	10800044 	addi	r2,r2,1
  150454:	e0bffa15 	stw	r2,-24(fp)
  150458:	e0fffa17 	ldw	r3,-24(fp)
  15045c:	e0bffc17 	ldw	r2,-16(fp)
  150460:	18bff416 	blt	r3,r2,150434 <plot_hline+0x64>
        /* plot a point of the line */
	plot_pixel(x, start_y, PIXEL_RED);


    /* done plotting the line - return */
    return;
  150464:	0001883a 	nop

}
  150468:	e037883a 	mov	sp,fp
  15046c:	dfc00117 	ldw	ra,4(sp)
  150470:	df000017 	ldw	fp,0(sp)
  150474:	dec00204 	addi	sp,sp,8
  150478:	f800283a 	ret

0015047c <plot_vline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_vline(int start_x, int start_y, int length)
{
  15047c:	defff804 	addi	sp,sp,-32
  150480:	dfc00715 	stw	ra,28(sp)
  150484:	df000615 	stw	fp,24(sp)
  150488:	df000604 	addi	fp,sp,24
  15048c:	e13ffd15 	stw	r4,-12(fp)
  150490:	e17ffe15 	stw	r5,-8(fp)
  150494:	e1bfff15 	stw	r6,-4(fp)
    int  end_y;		/* ending y position to plot */



    /* check if an "up" or "down" line */
    if (length > 0)  {
  150498:	e0bfff17 	ldw	r2,-4(fp)
  15049c:	0080070e 	bge	zero,r2,1504bc <plot_vline+0x40>

        /* line going "down" - start at start_y, end at start_y + length */
	init_y = start_y;
  1504a0:	e0bffe17 	ldw	r2,-8(fp)
  1504a4:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y + length;
  1504a8:	e0fffe17 	ldw	r3,-8(fp)
  1504ac:	e0bfff17 	ldw	r2,-4(fp)
  1504b0:	1885883a 	add	r2,r3,r2
  1504b4:	e0bffc15 	stw	r2,-16(fp)
  1504b8:	00000606 	br	1504d4 <plot_vline+0x58>
    }
    else  {

        /* line going "up" - start at start_y + length, end at start_y */
	init_y = start_y + length;
  1504bc:	e0fffe17 	ldw	r3,-8(fp)
  1504c0:	e0bfff17 	ldw	r2,-4(fp)
  1504c4:	1885883a 	add	r2,r3,r2
  1504c8:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y;
  1504cc:	e0bffe17 	ldw	r2,-8(fp)
  1504d0:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
  1504d4:	e0bffb17 	ldw	r2,-20(fp)
  1504d8:	e0bffa15 	stw	r2,-24(fp)
  1504dc:	00000906 	br	150504 <plot_vline+0x88>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_RED);
  1504e0:	e0fffd17 	ldw	r3,-12(fp)
  1504e4:	e0bffa17 	ldw	r2,-24(fp)
  1504e8:	1809883a 	mov	r4,r3
  1504ec:	100b883a 	mov	r5,r2
  1504f0:	0187c004 	movi	r6,7936
  1504f4:	01538240 	call	153824 <plot_pixel>
	end_y = start_y;
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
  1504f8:	e0bffa17 	ldw	r2,-24(fp)
  1504fc:	10800044 	addi	r2,r2,1
  150500:	e0bffa15 	stw	r2,-24(fp)
  150504:	e0fffa17 	ldw	r3,-24(fp)
  150508:	e0bffc17 	ldw	r2,-16(fp)
  15050c:	18bff416 	blt	r3,r2,1504e0 <plot_vline+0x64>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_RED);


    /* done plotting the line - return */
    return;
  150510:	0001883a 	nop

}
  150514:	e037883a 	mov	sp,fp
  150518:	dfc00117 	ldw	ra,4(sp)
  15051c:	df000017 	ldw	fp,0(sp)
  150520:	dec00204 	addi	sp,sp,8
  150524:	f800283a 	ret

00150528 <plot_char>:
   Last Modified:    May 27, 2008

*/

void  plot_char(int pos_x, int pos_y, char c, enum char_style style)
{
  150528:	defff504 	addi	sp,sp,-44
  15052c:	dfc00a15 	stw	ra,40(sp)
  150530:	df000915 	stw	fp,36(sp)
  150534:	df000904 	addi	fp,sp,36
  150538:	e13ffc15 	stw	r4,-16(fp)
  15053c:	e17ffd15 	stw	r5,-12(fp)
  150540:	3005883a 	mov	r2,r6
  150544:	e1ffff15 	stw	r7,-4(fp)
  150548:	e0bffe05 	stb	r2,-8(fp)
    int  y;		/* y pixel position for the character */



    /* setup the pixel positions for the character */
    x = pos_x * HORIZ_SIZE;
  15054c:	e0bffc17 	ldw	r2,-16(fp)
  150550:	108001a4 	muli	r2,r2,6
  150554:	e0bffb15 	stw	r2,-20(fp)
    y = pos_y * VERT_SIZE;
  150558:	e0bffd17 	ldw	r2,-12(fp)
  15055c:	100490fa 	slli	r2,r2,3
  150560:	e0bffa15 	stw	r2,-24(fp)


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
  150564:	e03ff915 	stw	zero,-28(fp)
  150568:	00004006 	br	15066c <plot_char+0x144>

        /* get the character bits for this row from the character table */
	if (row == (VERT_SIZE - 1))
  15056c:	e0bff917 	ldw	r2,-28(fp)
  150570:	108001d8 	cmpnei	r2,r2,7
  150574:	1000021e 	bne	r2,zero,150580 <plot_char+0x58>
	    /* last row - blank it */
	    bits = 0;
  150578:	e03ff715 	stw	zero,-36(fp)
  15057c:	00000a06 	br	1505a8 <plot_char+0x80>
	else
	    /* in middle of character, get the row from the bit patterns */
            bits = char_patterns[(c * (VERT_SIZE - 1)) + row];
  150580:	e0bffe07 	ldb	r2,-8(fp)
  150584:	10c001e4 	muli	r3,r2,7
  150588:	e0bff917 	ldw	r2,-28(fp)
  15058c:	1885883a 	add	r2,r3,r2
  150590:	00c00574 	movhi	r3,21
  150594:	18d24704 	addi	r3,r3,18716
  150598:	1885883a 	add	r2,r3,r2
  15059c:	10800003 	ldbu	r2,0(r2)
  1505a0:	10803fcc 	andi	r2,r2,255
  1505a4:	e0bff715 	stw	r2,-36(fp)

	/* take care of "normal/reverse video" */
	if (style == REVERSE)
  1505a8:	e0bfff17 	ldw	r2,-4(fp)
  1505ac:	10800058 	cmpnei	r2,r2,1
  1505b0:	1000031e 	bne	r2,zero,1505c0 <plot_char+0x98>
	    /* invert the bits for "reverse video" */
	    bits = ~bits;
  1505b4:	e0bff717 	ldw	r2,-36(fp)
  1505b8:	0084303a 	nor	r2,zero,r2
  1505bc:	e0bff715 	stw	r2,-36(fp)

        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);
  1505c0:	e0bff717 	ldw	r2,-36(fp)
  1505c4:	1085883a 	add	r2,r2,r2
  1505c8:	1085883a 	add	r2,r2,r2
  1505cc:	e0bff715 	stw	r2,-36(fp)


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
  1505d0:	e03ff815 	stw	zero,-32(fp)
  1505d4:	00001c06 	br	150648 <plot_char+0x120>

            /* output this pixel in the appropriate color */
	    if ((bits & 0x80) == 0)
  1505d8:	e0bff717 	ldw	r2,-36(fp)
  1505dc:	1080200c 	andi	r2,r2,128
  1505e0:	10000a1e 	bne	r2,zero,15060c <plot_char+0xe4>
	        /* blank pixel - output in PIXEL_WHITE */
		plot_pixel(x + col, y, PIXEL_BLACK);
  1505e4:	e0fffb17 	ldw	r3,-20(fp)
  1505e8:	e0bff817 	ldw	r2,-32(fp)
  1505ec:	1885883a 	add	r2,r3,r2
  1505f0:	1007883a 	mov	r3,r2
  1505f4:	e0bffa17 	ldw	r2,-24(fp)
  1505f8:	1809883a 	mov	r4,r3
  1505fc:	100b883a 	mov	r5,r2
  150600:	000d883a 	mov	r6,zero
  150604:	01538240 	call	153824 <plot_pixel>
  150608:	00000906 	br	150630 <plot_char+0x108>
	    else
	        /* black pixel - output in PIXEL_BLACK */
		plot_pixel(x + col, y, PIXEL_GREEN);
  15060c:	e0fffb17 	ldw	r3,-20(fp)
  150610:	e0bff817 	ldw	r2,-32(fp)
  150614:	1885883a 	add	r2,r3,r2
  150618:	1007883a 	mov	r3,r2
  15061c:	e0bffa17 	ldw	r2,-24(fp)
  150620:	1809883a 	mov	r4,r3
  150624:	100b883a 	mov	r5,r2
  150628:	01b800d4 	movui	r6,57347
  15062c:	01538240 	call	153824 <plot_pixel>

	    /* shift the next bit into position */
	    bits <<= 1;
  150630:	e0bff717 	ldw	r2,-36(fp)
  150634:	1085883a 	add	r2,r2,r2
  150638:	e0bff715 	stw	r2,-36(fp)
        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
  15063c:	e0bff817 	ldw	r2,-32(fp)
  150640:	10800044 	addi	r2,r2,1
  150644:	e0bff815 	stw	r2,-32(fp)
  150648:	e0bff817 	ldw	r2,-32(fp)
  15064c:	10800190 	cmplti	r2,r2,6
  150650:	103fe11e 	bne	r2,zero,1505d8 <plot_char+0xb0>
	    bits <<= 1;
        }


	/* next row - update the y position */
	y++;
  150654:	e0bffa17 	ldw	r2,-24(fp)
  150658:	10800044 	addi	r2,r2,1
  15065c:	e0bffa15 	stw	r2,-24(fp)
    x = pos_x * HORIZ_SIZE;
    y = pos_y * VERT_SIZE;


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
  150660:	e0bff917 	ldw	r2,-28(fp)
  150664:	10800044 	addi	r2,r2,1
  150668:	e0bff915 	stw	r2,-28(fp)
  15066c:	e0bff917 	ldw	r2,-28(fp)
  150670:	10800210 	cmplti	r2,r2,8
  150674:	103fbd1e 	bne	r2,zero,15056c <plot_char+0x44>
	y++;
    }


    /* all done, return */
    return;
  150678:	0001883a 	nop

}
  15067c:	e037883a 	mov	sp,fp
  150680:	dfc00117 	ldw	ra,4(sp)
  150684:	df000017 	ldw	fp,0(sp)
  150688:	dec00204 	addi	sp,sp,8
  15068c:	f800283a 	ret

00150690 <plot_string>:
   Last Modified:    Mar. 17, 1997

*/

void  plot_string(int pos_x, int pos_y, const char *s, enum char_style style)
{
  150690:	defffa04 	addi	sp,sp,-24
  150694:	dfc00515 	stw	ra,20(sp)
  150698:	df000415 	stw	fp,16(sp)
  15069c:	df000404 	addi	fp,sp,16
  1506a0:	e13ffc15 	stw	r4,-16(fp)
  1506a4:	e17ffd15 	stw	r5,-12(fp)
  1506a8:	e1bffe15 	stw	r6,-8(fp)
  1506ac:	e1ffff15 	stw	r7,-4(fp)
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
  1506b0:	00001106 	br	1506f8 <plot_string+0x68>

        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);
  1506b4:	e0fffc17 	ldw	r3,-16(fp)
  1506b8:	e0bffc17 	ldw	r2,-16(fp)
  1506bc:	10800044 	addi	r2,r2,1
  1506c0:	e0bffc15 	stw	r2,-16(fp)
  1506c4:	e0bffe17 	ldw	r2,-8(fp)
  1506c8:	10800003 	ldbu	r2,0(r2)
  1506cc:	10803fcc 	andi	r2,r2,255
  1506d0:	1080201c 	xori	r2,r2,128
  1506d4:	10bfe004 	addi	r2,r2,-128
  1506d8:	e13ffe17 	ldw	r4,-8(fp)
  1506dc:	21000044 	addi	r4,r4,1
  1506e0:	e13ffe15 	stw	r4,-8(fp)
  1506e4:	1809883a 	mov	r4,r3
  1506e8:	e17ffd17 	ldw	r5,-12(fp)
  1506ec:	100d883a 	mov	r6,r2
  1506f0:	e1ffff17 	ldw	r7,-4(fp)
  1506f4:	01505280 	call	150528 <plot_char>
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
  1506f8:	e0bffe17 	ldw	r2,-8(fp)
  1506fc:	10800003 	ldbu	r2,0(r2)
  150700:	10803fcc 	andi	r2,r2,255
  150704:	1080201c 	xori	r2,r2,128
  150708:	10bfe004 	addi	r2,r2,-128
  15070c:	103fe91e 	bne	r2,zero,1506b4 <plot_string+0x24>
        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);


    /* all done, return */
    return;
  150710:	0001883a 	nop

}
  150714:	e037883a 	mov	sp,fp
  150718:	dfc00117 	ldw	ra,4(sp)
  15071c:	df000017 	ldw	fp,0(sp)
  150720:	dec00204 	addi	sp,sp,8
  150724:	f800283a 	ret

00150728 <main>:

   Author:           Glen George
   Last Modified:    May 27, 2008
*/

int  main() {
  150728:	deffef04 	addi	sp,sp,-68
  15072c:	dfc01015 	stw	ra,64(sp)
  150730:	df000f15 	stw	fp,60(sp)
  150734:	df000f04 	addi	fp,sp,60
    	srampt++;
    	c++;
    	if(c >= 100) c = 0;
    }*/

	key_int_installer();
  150738:	0152cc40 	call	152cc4 <key_int_installer>
	adc_int_installer();
  15073c:	01532a40 	call	1532a4 <adc_int_installer>
	}*/

	/* variables */
    enum keycode        key;		    /* an input key */

    enum status         state = MENU_ON;    /* current program state */
  150740:	e03ff115 	stw	zero,-60(fp)

    unsigned char      *sample;		    /* a captured trace */

    /* key processing functions (one for each system state type and key) */
    enum status  (* const process_key[NUM_KEYCODES][NUM_STATES])(enum status) =
  150744:	00800574 	movhi	r2,21
  150748:	10808604 	addi	r2,r2,536
  15074c:	e0bff415 	stw	r2,-48(fp)
  150750:	00800574 	movhi	r2,21
  150754:	10808604 	addi	r2,r2,536
  150758:	e0bff515 	stw	r2,-44(fp)
  15075c:	00800574 	movhi	r2,21
  150760:	10809a04 	addi	r2,r2,616
  150764:	e0bff615 	stw	r2,-40(fp)
  150768:	00800574 	movhi	r2,21
  15076c:	10807d04 	addi	r2,r2,500
  150770:	e0bff715 	stw	r2,-36(fp)
  150774:	00800574 	movhi	r2,21
  150778:	1080a604 	addi	r2,r2,664
  15077c:	e0bff815 	stw	r2,-32(fp)
  150780:	00800574 	movhi	r2,21
  150784:	10807d04 	addi	r2,r2,500
  150788:	e0bff915 	stw	r2,-28(fp)
  15078c:	00800574 	movhi	r2,21
  150790:	1080b204 	addi	r2,r2,712
  150794:	e0bffa15 	stw	r2,-24(fp)
  150798:	00800574 	movhi	r2,21
  15079c:	10807d04 	addi	r2,r2,500
  1507a0:	e0bffb15 	stw	r2,-20(fp)
  1507a4:	00800574 	movhi	r2,21
  1507a8:	1080be04 	addi	r2,r2,760
  1507ac:	e0bffc15 	stw	r2,-16(fp)
  1507b0:	00800574 	movhi	r2,21
  1507b4:	10807d04 	addi	r2,r2,500
  1507b8:	e0bffd15 	stw	r2,-12(fp)
  1507bc:	00800574 	movhi	r2,21
  1507c0:	10807d04 	addi	r2,r2,500
  1507c4:	e0bffe15 	stw	r2,-8(fp)
  1507c8:	00800574 	movhi	r2,21
  1507cc:	10807d04 	addi	r2,r2,500
  1507d0:	e0bfff15 	stw	r2,-4(fp)
        {  no_action,   no_action   } }; /* illegal key */



    /* first initialize everything */
    clear_display();		/* clear the display */
  1507d4:	01537d40 	call	1537d4 <clear_display>

    init_trace();		/* initialize the trace routines */
  1507d8:	0151d380 	call	151d38 <init_trace>
    init_menu();		/* initialize the menu system */
  1507dc:	01509400 	call	150940 <init_menu>
  1507e0:	00000106 	br	1507e8 <main+0xc0>
			key = key_lookup();

			//execute processing routine for that key
			state = process_key[key][state](state);
		}
    }
  1507e4:	0001883a 	nop
    // infinite loop processing input
	//int x = 0;
    while(TRUE)  {
    	//x += 1;
		// if ready to do a trace, do it
		if (trace_rdy()) do_trace();
  1507e8:	0151df40 	call	151df4 <trace_rdy>
  1507ec:	10000126 	beq	r2,zero,1507f4 <main+0xcc>
  1507f0:	01527000 	call	152700 <do_trace>

		//check if have a trace to display
		if (is_sampling() && ((sample = sample_done()) != NULL))  {
  1507f4:	0151dd40 	call	151dd4 <is_sampling>
  1507f8:	10000726 	beq	r2,zero,150818 <main+0xf0>
  1507fc:	0153ac80 	call	153ac8 <sample_done>
  150800:	e0bff215 	stw	r2,-56(fp)
  150804:	e0bff217 	ldw	r2,-56(fp)
  150808:	10000326 	beq	r2,zero,150818 <main+0xf0>

			//have a trace - output it
			plot_trace(sample);
  15080c:	e13ff217 	ldw	r4,-56(fp)
  150810:	01527480 	call	152748 <plot_trace>
			//done processing this trace
			trace_done();
  150814:	0151e2c0 	call	151e2c <trace_done>
		}

		//now check for keypad input
		if (key_available())  {
  150818:	01531f40 	call	1531f4 <key_available>
  15081c:	10803fcc 	andi	r2,r2,255
  150820:	103ff026 	beq	r2,zero,1507e4 <main+0xbc>

			//have keypad input - get the key
			key = key_lookup();
  150824:	01508640 	call	150864 <key_lookup>
  150828:	e0bff315 	stw	r2,-52(fp)

			//execute processing routine for that key
			state = process_key[key][state](state);
  15082c:	e0bff317 	ldw	r2,-52(fp)
  150830:	1087883a 	add	r3,r2,r2
  150834:	e0bff117 	ldw	r2,-60(fp)
  150838:	1885883a 	add	r2,r3,r2
  15083c:	1085883a 	add	r2,r2,r2
  150840:	1085883a 	add	r2,r2,r2
  150844:	e0fff104 	addi	r3,fp,-60
  150848:	1885883a 	add	r2,r3,r2
  15084c:	10800304 	addi	r2,r2,12
  150850:	10800017 	ldw	r2,0(r2)
  150854:	e13ff117 	ldw	r4,-60(fp)
  150858:	103ee83a 	callr	r2
  15085c:	e0bff115 	stw	r2,-60(fp)
		}
    }
  150860:	003fe006 	br	1507e4 <main+0xbc>

00150864 <key_lookup>:
   Last Modified:    Mar. 17, 1997

*/

enum keycode  	key_lookup()
{
  150864:	defff104 	addi	sp,sp,-60
  150868:	dfc00e15 	stw	ra,56(sp)
  15086c:	df000d15 	stw	fp,52(sp)
  150870:	df000d04 	addi	fp,sp,52
    /* variables */

    const enum keycode  keycodes[] = /* array of keycodes */
  150874:	e03ff515 	stw	zero,-44(fp)
  150878:	00800044 	movi	r2,1
  15087c:	e0bff615 	stw	r2,-40(fp)
  150880:	00800084 	movi	r2,2
  150884:	e0bff715 	stw	r2,-36(fp)
  150888:	008000c4 	movi	r2,3
  15088c:	e0bff815 	stw	r2,-32(fp)
  150890:	00800104 	movi	r2,4
  150894:	e0bff915 	stw	r2,-28(fp)
  150898:	00800144 	movi	r2,5
  15089c:	e0bffa15 	stw	r2,-24(fp)
           KEYCODE_LEFT,      /* <Left>     */
           KEYCODE_RIGHT,     /* <Right>    */
           KEYCODE_ILLEGAL    /* other keys */
        }; 

    const int  keys[] =   /* array of key values */
  1508a0:	e03ffb15 	stw	zero,-20(fp)
  1508a4:	00800044 	movi	r2,1
  1508a8:	e0bffc15 	stw	r2,-16(fp)
  1508ac:	00800084 	movi	r2,2
  1508b0:	e0bffd15 	stw	r2,-12(fp)
  1508b4:	008000c4 	movi	r2,3
  1508b8:	e0bffe15 	stw	r2,-8(fp)
  1508bc:	00800104 	movi	r2,4
  1508c0:	e0bfff15 	stw	r2,-4(fp)
    int  i;           	/* general loop index */



    /* get a key */
    key = getkey();
  1508c4:	015322c0 	call	15322c <getkey>
  1508c8:	e0bff415 	stw	r2,-48(fp)


    /* lookup key in keys array */
    for (i = 0; ((i < (sizeof(keys)/sizeof(int))) && (key != keys[i])); i++);
  1508cc:	e03ff315 	stw	zero,-52(fp)
  1508d0:	00000306 	br	1508e0 <key_lookup+0x7c>
  1508d4:	e0bff317 	ldw	r2,-52(fp)
  1508d8:	10800044 	addi	r2,r2,1
  1508dc:	e0bff315 	stw	r2,-52(fp)
  1508e0:	e0bff317 	ldw	r2,-52(fp)
  1508e4:	10800168 	cmpgeui	r2,r2,5
  1508e8:	1000091e 	bne	r2,zero,150910 <key_lookup+0xac>
  1508ec:	e0bff317 	ldw	r2,-52(fp)
  1508f0:	1085883a 	add	r2,r2,r2
  1508f4:	1085883a 	add	r2,r2,r2
  1508f8:	e0fff304 	addi	r3,fp,-52
  1508fc:	1885883a 	add	r2,r3,r2
  150900:	10800804 	addi	r2,r2,32
  150904:	10c00017 	ldw	r3,0(r2)
  150908:	e0bff417 	ldw	r2,-48(fp)
  15090c:	18bff11e 	bne	r3,r2,1508d4 <key_lookup+0x70>


    /* return the appropriate key type */
    return  keycodes[i];
  150910:	e0bff317 	ldw	r2,-52(fp)
  150914:	1085883a 	add	r2,r2,r2
  150918:	1085883a 	add	r2,r2,r2
  15091c:	e0fff304 	addi	r3,fp,-52
  150920:	1885883a 	add	r2,r3,r2
  150924:	10800204 	addi	r2,r2,8
  150928:	10800017 	ldw	r2,0(r2)

}
  15092c:	e037883a 	mov	sp,fp
  150930:	dfc00117 	ldw	ra,4(sp)
  150934:	df000017 	ldw	fp,0(sp)
  150938:	dec00204 	addi	sp,sp,8
  15093c:	f800283a 	ret

00150940 <init_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  init_menu(void)
{
  150940:	defffe04 	addi	sp,sp,-8
  150944:	dfc00115 	stw	ra,4(sp)
  150948:	df000015 	stw	fp,0(sp)
  15094c:	d839883a 	mov	fp,sp
      /* none */



    /* set the menu parameters */
    menu_entry = 0;		/* first menu entry */
  150950:	d022f015 	stw	zero,-29760(gp)
    menu_display = FALSE;	/* menu is not currently displayed (but it will be shortly) */
  150954:	d022f115 	stw	zero,-29756(gp)


    /* set the scope (option) parameters */
    set_trigger_mode(NORMAL_TRIGGER);	/* normal triggering */
  150958:	0009883a 	mov	r4,zero
  15095c:	0150ec00 	call	150ec0 <set_trigger_mode>
    set_scale(SCALE_AXES);		/* scale is axes */
  150960:	01000044 	movi	r4,1
  150964:	015106c0 	call	15106c <set_scale>
    set_sweep(0);			/* first sweep rate */
  150968:	0009883a 	mov	r4,zero
  15096c:	01511f80 	call	1511f8 <set_sweep>
    set_trg_level((MIN_TRG_LEVEL_SET + MAX_TRG_LEVEL_SET) / 2);	/* middle trigger level */
  150970:	01000fc4 	movi	r4,63
  150974:	01513c40 	call	1513c4 <set_trg_level>
    set_trg_slope(SLOPE_POSITIVE);	/* positive slope */
  150978:	0009883a 	mov	r4,zero
  15097c:	01515480 	call	151548 <set_trg_slope>
    set_trg_delay(0);		/* default delay */
  150980:	0009883a 	mov	r4,zero
  150984:	015165c0 	call	15165c <set_trg_delay>


    /* now display the menu */
    display_menu();
  150988:	01509dc0 	call	1509dc <display_menu>


    /* done initializing, return */
    return;
  15098c:	0001883a 	nop

}
  150990:	e037883a 	mov	sp,fp
  150994:	dfc00117 	ldw	ra,4(sp)
  150998:	df000017 	ldw	fp,0(sp)
  15099c:	dec00204 	addi	sp,sp,8
  1509a0:	f800283a 	ret

001509a4 <clear_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  clear_menu(void)
{
  1509a4:	defffe04 	addi	sp,sp,-8
  1509a8:	dfc00115 	stw	ra,4(sp)
  1509ac:	df000015 	stw	fp,0(sp)
  1509b0:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  1509b4:	d0a2f117 	ldw	r2,-29756(gp)
  1509b8:	10000126 	beq	r2,zero,1509c0 <clear_menu+0x1c>

        /* menu is being displayed - turn it off and restore the trace in that area */
	restore_menu_trace();
  1509bc:	015242c0 	call	15242c <restore_menu_trace>
    }


    /* no longer displaying the menu */
    menu_display = FALSE;
  1509c0:	d022f115 	stw	zero,-29756(gp)


    /* all done, return */
    return;
  1509c4:	0001883a 	nop

}
  1509c8:	e037883a 	mov	sp,fp
  1509cc:	dfc00117 	ldw	ra,4(sp)
  1509d0:	df000017 	ldw	fp,0(sp)
  1509d4:	dec00204 	addi	sp,sp,8
  1509d8:	f800283a 	ret

001509dc <display_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  display_menu(void)
{
  1509dc:	defffd04 	addi	sp,sp,-12
  1509e0:	dfc00215 	stw	ra,8(sp)
  1509e4:	df000115 	stw	fp,4(sp)
  1509e8:	df000104 	addi	fp,sp,4
    int  i;		/* loop index */



    /* check if the menu is currently being displayed */
    if (!menu_display)  {
  1509ec:	d0a2f117 	ldw	r2,-29756(gp)
  1509f0:	1000121e 	bne	r2,zero,150a3c <display_menu+0x60>

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
  1509f4:	e03fff15 	stw	zero,-4(fp)
  1509f8:	00000d06 	br	150a30 <display_menu+0x54>

	    /* display this entry - check if it should be highlighted */
	    if (i == menu_entry)
  1509fc:	d0a2f017 	ldw	r2,-29760(gp)
  150a00:	e0ffff17 	ldw	r3,-4(fp)
  150a04:	1880041e 	bne	r3,r2,150a18 <display_menu+0x3c>
	        /* currently selected entry - highlight it */
	        display_entry(i, TRUE);
  150a08:	e13fff17 	ldw	r4,-4(fp)
  150a0c:	01400044 	movi	r5,1
  150a10:	0150da40 	call	150da4 <display_entry>
  150a14:	00000306 	br	150a24 <display_menu+0x48>
	    else
	        /* not the currently selected entry - "normal video" */
	        display_entry(i, FALSE);
  150a18:	e13fff17 	ldw	r4,-4(fp)
  150a1c:	000b883a 	mov	r5,zero
  150a20:	0150da40 	call	150da4 <display_entry>
    /* check if the menu is currently being displayed */
    if (!menu_display)  {

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
  150a24:	e0bfff17 	ldw	r2,-4(fp)
  150a28:	10800044 	addi	r2,r2,1
  150a2c:	e0bfff15 	stw	r2,-4(fp)
  150a30:	e0bfff17 	ldw	r2,-4(fp)
  150a34:	108001f0 	cmpltui	r2,r2,7
  150a38:	103ff01e 	bne	r2,zero,1509fc <display_menu+0x20>
        }
    }


    /* now are displaying the menu */
    menu_display = TRUE;
  150a3c:	00800044 	movi	r2,1
  150a40:	d0a2f115 	stw	r2,-29756(gp)


    /* all done, return */
    return;
  150a44:	0001883a 	nop

}
  150a48:	e037883a 	mov	sp,fp
  150a4c:	dfc00117 	ldw	ra,4(sp)
  150a50:	df000017 	ldw	fp,0(sp)
  150a54:	dec00204 	addi	sp,sp,8
  150a58:	f800283a 	ret

00150a5c <refresh_menu>:
   Last Modified:    Mar. 8, 1994

*/

void  refresh_menu(void)
{
  150a5c:	defffe04 	addi	sp,sp,-8
  150a60:	dfc00115 	stw	ra,4(sp)
  150a64:	df000015 	stw	fp,0(sp)
  150a68:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  150a6c:	d0a2f117 	ldw	r2,-29756(gp)
  150a70:	10000226 	beq	r2,zero,150a7c <refresh_menu+0x20>

    	/* menu is currently being displayed - need to refresh it */
	/* do this by turning off the display, then forcing it back on */
	menu_display = FALSE;
  150a74:	d022f115 	stw	zero,-29756(gp)
	display_menu();
  150a78:	01509dc0 	call	1509dc <display_menu>
    }


    /* refreshed the menu if it was displayed, now return */
    return;
  150a7c:	0001883a 	nop

}
  150a80:	e037883a 	mov	sp,fp
  150a84:	dfc00117 	ldw	ra,4(sp)
  150a88:	df000017 	ldw	fp,0(sp)
  150a8c:	dec00204 	addi	sp,sp,8
  150a90:	f800283a 	ret

00150a94 <reset_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  reset_menu(void)
{
  150a94:	defffe04 	addi	sp,sp,-8
  150a98:	dfc00115 	stw	ra,4(sp)
  150a9c:	df000015 	stw	fp,0(sp)
  150aa0:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  150aa4:	d0a2f117 	ldw	r2,-29756(gp)
  150aa8:	10000426 	beq	r2,zero,150abc <reset_menu+0x28>

        /* menu is being displayed */
	/* remove highlight from currently selected entry */
	display_entry(menu_entry, FALSE);
  150aac:	d0a2f017 	ldw	r2,-29760(gp)
  150ab0:	1009883a 	mov	r4,r2
  150ab4:	000b883a 	mov	r5,zero
  150ab8:	0150da40 	call	150da4 <display_entry>
    }


    /* reset the currently selected entry */
    menu_entry = 0;
  150abc:	d022f015 	stw	zero,-29760(gp)


    /* finally, highlight the first entry if the menu is being displayed */
    if (menu_display)
  150ac0:	d0a2f117 	ldw	r2,-29756(gp)
  150ac4:	10000426 	beq	r2,zero,150ad8 <reset_menu+0x44>
	display_entry(menu_entry, TRUE);
  150ac8:	d0a2f017 	ldw	r2,-29760(gp)
  150acc:	1009883a 	mov	r4,r2
  150ad0:	01400044 	movi	r5,1
  150ad4:	0150da40 	call	150da4 <display_entry>



    /* all done, return */
    return;
  150ad8:	0001883a 	nop

}
  150adc:	e037883a 	mov	sp,fp
  150ae0:	dfc00117 	ldw	ra,4(sp)
  150ae4:	df000017 	ldw	fp,0(sp)
  150ae8:	dec00204 	addi	sp,sp,8
  150aec:	f800283a 	ret

00150af0 <next_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  next_entry(void)
{
  150af0:	defffe04 	addi	sp,sp,-8
  150af4:	dfc00115 	stw	ra,4(sp)
  150af8:	df000015 	stw	fp,0(sp)
  150afc:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at end of the menu */
    if (menu_entry < (NO_MENU_ENTRIES - 1))  {
  150b00:	d0a2f017 	ldw	r2,-29760(gp)
  150b04:	108001a8 	cmpgeui	r2,r2,6
  150b08:	10000f1e 	bne	r2,zero,150b48 <next_entry+0x58>

        /* not at the end of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
  150b0c:	d0a2f117 	ldw	r2,-29756(gp)
  150b10:	10000426 	beq	r2,zero,150b24 <next_entry+0x34>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
  150b14:	d0a2f017 	ldw	r2,-29760(gp)
  150b18:	1009883a 	mov	r4,r2
  150b1c:	000b883a 	mov	r5,zero
  150b20:	0150da40 	call	150da4 <display_entry>

	/* update the menu entry to the next one */
	menu_entry++;
  150b24:	d0a2f017 	ldw	r2,-29760(gp)
  150b28:	10800044 	addi	r2,r2,1
  150b2c:	d0a2f015 	stw	r2,-29760(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
  150b30:	d0a2f117 	ldw	r2,-29756(gp)
  150b34:	10000426 	beq	r2,zero,150b48 <next_entry+0x58>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
  150b38:	d0a2f017 	ldw	r2,-29760(gp)
  150b3c:	1009883a 	mov	r4,r2
  150b40:	01400044 	movi	r5,1
  150b44:	0150da40 	call	150da4 <display_entry>
    }


    /* all done, return */
    return;
  150b48:	0001883a 	nop

}
  150b4c:	e037883a 	mov	sp,fp
  150b50:	dfc00117 	ldw	ra,4(sp)
  150b54:	df000017 	ldw	fp,0(sp)
  150b58:	dec00204 	addi	sp,sp,8
  150b5c:	f800283a 	ret

00150b60 <previous_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  previous_entry(void)
{
  150b60:	defffe04 	addi	sp,sp,-8
  150b64:	dfc00115 	stw	ra,4(sp)
  150b68:	df000015 	stw	fp,0(sp)
  150b6c:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at the start of the menu */
    if (menu_entry > 0)  {
  150b70:	d0a2f017 	ldw	r2,-29760(gp)
  150b74:	00800f0e 	bge	zero,r2,150bb4 <previous_entry+0x54>

        /* not at the start of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
  150b78:	d0a2f117 	ldw	r2,-29756(gp)
  150b7c:	10000426 	beq	r2,zero,150b90 <previous_entry+0x30>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
  150b80:	d0a2f017 	ldw	r2,-29760(gp)
  150b84:	1009883a 	mov	r4,r2
  150b88:	000b883a 	mov	r5,zero
  150b8c:	0150da40 	call	150da4 <display_entry>

	/* update the menu entry to the previous one */
	menu_entry--;
  150b90:	d0a2f017 	ldw	r2,-29760(gp)
  150b94:	10bfffc4 	addi	r2,r2,-1
  150b98:	d0a2f015 	stw	r2,-29760(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
  150b9c:	d0a2f117 	ldw	r2,-29756(gp)
  150ba0:	10000426 	beq	r2,zero,150bb4 <previous_entry+0x54>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
  150ba4:	d0a2f017 	ldw	r2,-29760(gp)
  150ba8:	1009883a 	mov	r4,r2
  150bac:	01400044 	movi	r5,1
  150bb0:	0150da40 	call	150da4 <display_entry>

    }


    /* all done, return */
    return;
  150bb4:	0001883a 	nop

}
  150bb8:	e037883a 	mov	sp,fp
  150bbc:	dfc00117 	ldw	ra,4(sp)
  150bc0:	df000017 	ldw	fp,0(sp)
  150bc4:	dec00204 	addi	sp,sp,8
  150bc8:	f800283a 	ret

00150bcc <menu_entry_left>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_left(void)
{
  150bcc:	defff704 	addi	sp,sp,-36
  150bd0:	dfc00815 	stw	ra,32(sp)
  150bd4:	df000715 	stw	fp,28(sp)
  150bd8:	df000704 	addi	fp,sp,28
    /* variables */

    /* key processing functions */
    void  (* const process[])(void) =
  150bdc:	00800574 	movhi	r2,21
  150be0:	1083c804 	addi	r2,r2,3872
  150be4:	e0bff915 	stw	r2,-28(fp)
  150be8:	00800574 	movhi	r2,21
  150bec:	10842b04 	addi	r2,r2,4268
  150bf0:	e0bffa15 	stw	r2,-24(fp)
  150bf4:	00800574 	movhi	r2,21
  150bf8:	10849604 	addi	r2,r2,4696
  150bfc:	e0bffb15 	stw	r2,-20(fp)
  150c00:	00800574 	movhi	r2,21
  150c04:	10879b04 	addi	r2,r2,7788
  150c08:	e0bffc15 	stw	r2,-16(fp)
  150c0c:	00800574 	movhi	r2,21
  150c10:	10850304 	addi	r2,r2,5132
  150c14:	e0bffd15 	stw	r2,-12(fp)
  150c18:	00800574 	movhi	r2,21
  150c1c:	10856404 	addi	r2,r2,5520
  150c20:	e0bffe15 	stw	r2,-8(fp)
  150c24:	00800574 	movhi	r2,21
  150c28:	1085a704 	addi	r2,r2,5788
  150c2c:	e0bfff15 	stw	r2,-4(fp)
       /*  Level           Slope             Delay                        */



    /* invoke the appropriate <Left> key function */
    process[menu_entry]();
  150c30:	d0a2f017 	ldw	r2,-29760(gp)
  150c34:	1085883a 	add	r2,r2,r2
  150c38:	1085883a 	add	r2,r2,r2
  150c3c:	e0fff904 	addi	r3,fp,-28
  150c40:	1885883a 	add	r2,r3,r2
  150c44:	10800017 	ldw	r2,0(r2)
  150c48:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
  150c4c:	d0a2f117 	ldw	r2,-29756(gp)
  150c50:	10001426 	beq	r2,zero,150ca4 <menu_entry_left+0xd8>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
  150c54:	d0a2f017 	ldw	r2,-29760(gp)
  150c58:	00c00574 	movhi	r3,21
  150c5c:	18d33504 	addi	r3,r3,19668
  150c60:	1004913a 	slli	r2,r2,4
  150c64:	1885883a 	add	r2,r3,r2
  150c68:	10800304 	addi	r2,r2,12
  150c6c:	11c00017 	ldw	r7,0(r2)
  150c70:	d0a2f017 	ldw	r2,-29760(gp)
  150c74:	00c00574 	movhi	r3,21
  150c78:	18d33504 	addi	r3,r3,19668
  150c7c:	1004913a 	slli	r2,r2,4
  150c80:	1885883a 	add	r2,r3,r2
  150c84:	10800204 	addi	r2,r2,8
  150c88:	10800017 	ldw	r2,0(r2)
  150c8c:	10c00fc4 	addi	r3,r2,63
  150c90:	d0a2f017 	ldw	r2,-29760(gp)
  150c94:	1809883a 	mov	r4,r3
  150c98:	100b883a 	mov	r5,r2
  150c9c:	000d883a 	mov	r6,zero
  150ca0:	383ee83a 	callr	r7


    /* all done, return */
    return;

}
  150ca4:	e037883a 	mov	sp,fp
  150ca8:	dfc00117 	ldw	ra,4(sp)
  150cac:	df000017 	ldw	fp,0(sp)
  150cb0:	dec00204 	addi	sp,sp,8
  150cb4:	f800283a 	ret

00150cb8 <menu_entry_right>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_right(void)
{
  150cb8:	defff704 	addi	sp,sp,-36
  150cbc:	dfc00815 	stw	ra,32(sp)
  150cc0:	df000715 	stw	fp,28(sp)
  150cc4:	df000704 	addi	fp,sp,28
    /* variables */

    /* key processing functions */
    void  (* const process[])(void) =
  150cc8:	00800574 	movhi	r2,21
  150ccc:	1083e104 	addi	r2,r2,3972
  150cd0:	e0bff915 	stw	r2,-28(fp)
  150cd4:	00800574 	movhi	r2,21
  150cd8:	10844404 	addi	r2,r2,4368
  150cdc:	e0bffa15 	stw	r2,-24(fp)
  150ce0:	00800574 	movhi	r2,21
  150ce4:	1084b604 	addi	r2,r2,4824
  150ce8:	e0bffb15 	stw	r2,-20(fp)
  150cec:	00800574 	movhi	r2,21
  150cf0:	10879b04 	addi	r2,r2,7788
  150cf4:	e0bffc15 	stw	r2,-16(fp)
  150cf8:	00800574 	movhi	r2,21
  150cfc:	10851704 	addi	r2,r2,5212
  150d00:	e0bffd15 	stw	r2,-12(fp)
  150d04:	00800574 	movhi	r2,21
  150d08:	10856404 	addi	r2,r2,5520
  150d0c:	e0bffe15 	stw	r2,-8(fp)
  150d10:	00800574 	movhi	r2,21
  150d14:	1085ba04 	addi	r2,r2,5864
  150d18:	e0bfff15 	stw	r2,-4(fp)
       /*  Level         Slope             Delay                        */



    /* invoke the appropriate <Right> key function */
    process[menu_entry]();
  150d1c:	d0a2f017 	ldw	r2,-29760(gp)
  150d20:	1085883a 	add	r2,r2,r2
  150d24:	1085883a 	add	r2,r2,r2
  150d28:	e0fff904 	addi	r3,fp,-28
  150d2c:	1885883a 	add	r2,r3,r2
  150d30:	10800017 	ldw	r2,0(r2)
  150d34:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
  150d38:	d0a2f117 	ldw	r2,-29756(gp)
  150d3c:	10001426 	beq	r2,zero,150d90 <menu_entry_right+0xd8>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
  150d40:	d0a2f017 	ldw	r2,-29760(gp)
  150d44:	00c00574 	movhi	r3,21
  150d48:	18d33504 	addi	r3,r3,19668
  150d4c:	1004913a 	slli	r2,r2,4
  150d50:	1885883a 	add	r2,r3,r2
  150d54:	10800304 	addi	r2,r2,12
  150d58:	11c00017 	ldw	r7,0(r2)
  150d5c:	d0a2f017 	ldw	r2,-29760(gp)
  150d60:	00c00574 	movhi	r3,21
  150d64:	18d33504 	addi	r3,r3,19668
  150d68:	1004913a 	slli	r2,r2,4
  150d6c:	1885883a 	add	r2,r3,r2
  150d70:	10800204 	addi	r2,r2,8
  150d74:	10800017 	ldw	r2,0(r2)
  150d78:	10c00fc4 	addi	r3,r2,63
  150d7c:	d0a2f017 	ldw	r2,-29760(gp)
  150d80:	1809883a 	mov	r4,r3
  150d84:	100b883a 	mov	r5,r2
  150d88:	000d883a 	mov	r6,zero
  150d8c:	383ee83a 	callr	r7


    /* all done, return */
    return;

}
  150d90:	e037883a 	mov	sp,fp
  150d94:	dfc00117 	ldw	ra,4(sp)
  150d98:	df000017 	ldw	fp,0(sp)
  150d9c:	dec00204 	addi	sp,sp,8
  150da0:	f800283a 	ret

00150da4 <display_entry>:
   Last Modified:    Aug. 13, 2004

*/

void  display_entry(int entry, int selected)
{
  150da4:	defffc04 	addi	sp,sp,-16
  150da8:	dfc00315 	stw	ra,12(sp)
  150dac:	df000215 	stw	fp,8(sp)
  150db0:	df000204 	addi	fp,sp,8
  150db4:	e13ffe15 	stw	r4,-8(fp)
  150db8:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* output the menu entry with the appropriate color */
    plot_string((MENU_X + menu[entry].h_off), (MENU_Y + entry), menu[entry].s,
  150dbc:	00c00574 	movhi	r3,21
  150dc0:	18d33504 	addi	r3,r3,19668
  150dc4:	e0bffe17 	ldw	r2,-8(fp)
  150dc8:	1004913a 	slli	r2,r2,4
  150dcc:	1885883a 	add	r2,r3,r2
  150dd0:	10800104 	addi	r2,r2,4
  150dd4:	10800017 	ldw	r2,0(r2)
  150dd8:	11000fc4 	addi	r4,r2,63
  150ddc:	00c00574 	movhi	r3,21
  150de0:	18d33504 	addi	r3,r3,19668
  150de4:	e0bffe17 	ldw	r2,-8(fp)
  150de8:	1004913a 	slli	r2,r2,4
  150dec:	1885883a 	add	r2,r3,r2
  150df0:	10c00017 	ldw	r3,0(r2)
  150df4:	e0bfff17 	ldw	r2,-4(fp)
  150df8:	1004c03a 	cmpne	r2,r2,zero
  150dfc:	10803fcc 	andi	r2,r2,255
  150e00:	e17ffe17 	ldw	r5,-8(fp)
  150e04:	180d883a 	mov	r6,r3
  150e08:	100f883a 	mov	r7,r2
  150e0c:	01506900 	call	150690 <plot_string>
    		(selected ? SELECTED : NORMAL));
    /* also output the menu option with the appropriate color */
    menu[entry].display((MENU_X + menu[entry].opt_off), (MENU_Y + entry),
  150e10:	00c00574 	movhi	r3,21
  150e14:	18d33504 	addi	r3,r3,19668
  150e18:	e0bffe17 	ldw	r2,-8(fp)
  150e1c:	1004913a 	slli	r2,r2,4
  150e20:	1885883a 	add	r2,r3,r2
  150e24:	10800304 	addi	r2,r2,12
  150e28:	10c00017 	ldw	r3,0(r2)
  150e2c:	01000574 	movhi	r4,21
  150e30:	21133504 	addi	r4,r4,19668
  150e34:	e0bffe17 	ldw	r2,-8(fp)
  150e38:	1004913a 	slli	r2,r2,4
  150e3c:	2085883a 	add	r2,r4,r2
  150e40:	10800204 	addi	r2,r2,8
  150e44:	10800017 	ldw	r2,0(r2)
  150e48:	10800fc4 	addi	r2,r2,63
  150e4c:	1009883a 	mov	r4,r2
  150e50:	e17ffe17 	ldw	r5,-8(fp)
  150e54:	000d883a 	mov	r6,zero
  150e58:	183ee83a 	callr	r3
    			(selected ? OPTION_SELECTED : OPTION_NORMAL));


    /* all done outputting this menu entry - return */
    return;
  150e5c:	0001883a 	nop

}
  150e60:	e037883a 	mov	sp,fp
  150e64:	dfc00117 	ldw	ra,4(sp)
  150e68:	df000017 	ldw	fp,0(sp)
  150e6c:	dec00204 	addi	sp,sp,8
  150e70:	f800283a 	ret

00150e74 <no_menu_action>:
   Last Modified:    Mar. 8, 1994

*/

void  no_menu_action()
{
  150e74:	deffff04 	addi	sp,sp,-4
  150e78:	df000015 	stw	fp,0(sp)
  150e7c:	d839883a 	mov	fp,sp
      /* none */



    /* nothing to do - return */
    return;
  150e80:	0001883a 	nop

}
  150e84:	e037883a 	mov	sp,fp
  150e88:	df000017 	ldw	fp,0(sp)
  150e8c:	dec00104 	addi	sp,sp,4
  150e90:	f800283a 	ret

00150e94 <no_display>:
   Last Modified:    Mar. 8, 1994

*/

void  no_display(int x_pos, int y_pos, int style)
{
  150e94:	defffc04 	addi	sp,sp,-16
  150e98:	df000315 	stw	fp,12(sp)
  150e9c:	df000304 	addi	fp,sp,12
  150ea0:	e13ffd15 	stw	r4,-12(fp)
  150ea4:	e17ffe15 	stw	r5,-8(fp)
  150ea8:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* nothing to do - return */
    return;
  150eac:	0001883a 	nop

}
  150eb0:	e037883a 	mov	sp,fp
  150eb4:	df000017 	ldw	fp,0(sp)
  150eb8:	dec00104 	addi	sp,sp,4
  150ebc:	f800283a 	ret

00150ec0 <set_trigger_mode>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trigger_mode(enum trigger_type m)
{
  150ec0:	defffd04 	addi	sp,sp,-12
  150ec4:	dfc00215 	stw	ra,8(sp)
  150ec8:	df000115 	stw	fp,4(sp)
  150ecc:	df000104 	addi	fp,sp,4
  150ed0:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger mode */
    trigger_mode = m;
  150ed4:	e0bfff17 	ldw	r2,-4(fp)
  150ed8:	d0a2f215 	stw	r2,-29752(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  150edc:	d0a2f217 	ldw	r2,-29752(gp)
  150ee0:	1009883a 	mov	r4,r2
  150ee4:	0151d9c0 	call	151d9c <set_mode>


    /* all done setting the trigger mode - return */
    return;
  150ee8:	0001883a 	nop

}
  150eec:	e037883a 	mov	sp,fp
  150ef0:	dfc00117 	ldw	ra,4(sp)
  150ef4:	df000017 	ldw	fp,0(sp)
  150ef8:	dec00204 	addi	sp,sp,8
  150efc:	f800283a 	ret

00150f00 <get_trigger_mode>:
   Last Modified:    May 9, 2006

*/

enum trigger_type  get_trigger_mode()
{
  150f00:	deffff04 	addi	sp,sp,-4
  150f04:	df000015 	stw	fp,0(sp)
  150f08:	d839883a 	mov	fp,sp
      /* none */



    /* return the current trigger mode */
    return  trigger_mode;
  150f0c:	d0a2f217 	ldw	r2,-29752(gp)

}
  150f10:	e037883a 	mov	sp,fp
  150f14:	df000017 	ldw	fp,0(sp)
  150f18:	dec00104 	addi	sp,sp,4
  150f1c:	f800283a 	ret

00150f20 <mode_down>:
   Last Modified:    May 9, 2006

*/

void  mode_down()
{
  150f20:	defffe04 	addi	sp,sp,-8
  150f24:	dfc00115 	stw	ra,4(sp)
  150f28:	df000015 	stw	fp,0(sp)
  150f2c:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "next" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
  150f30:	d0a2f217 	ldw	r2,-29752(gp)
  150f34:	1000031e 	bne	r2,zero,150f44 <mode_down+0x24>
        trigger_mode = AUTO_TRIGGER;
  150f38:	00800044 	movi	r2,1
  150f3c:	d0a2f215 	stw	r2,-29752(gp)
  150f40:	00000706 	br	150f60 <mode_down+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
  150f44:	d0a2f217 	ldw	r2,-29752(gp)
  150f48:	10800058 	cmpnei	r2,r2,1
  150f4c:	1000031e 	bne	r2,zero,150f5c <mode_down+0x3c>
        trigger_mode = ONESHOT_TRIGGER;
  150f50:	00800084 	movi	r2,2
  150f54:	d0a2f215 	stw	r2,-29752(gp)
  150f58:	00000106 	br	150f60 <mode_down+0x40>
    else
        trigger_mode = NORMAL_TRIGGER;
  150f5c:	d022f215 	stw	zero,-29752(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  150f60:	d0a2f217 	ldw	r2,-29752(gp)
  150f64:	1009883a 	mov	r4,r2
  150f68:	0151d9c0 	call	151d9c <set_mode>


    /* all done with the trigger mode - return */
    return;
  150f6c:	0001883a 	nop

}
  150f70:	e037883a 	mov	sp,fp
  150f74:	dfc00117 	ldw	ra,4(sp)
  150f78:	df000017 	ldw	fp,0(sp)
  150f7c:	dec00204 	addi	sp,sp,8
  150f80:	f800283a 	ret

00150f84 <mode_up>:
   Last Modified:    May 9, 2006

*/

void  mode_up()
{
  150f84:	defffe04 	addi	sp,sp,-8
  150f88:	dfc00115 	stw	ra,4(sp)
  150f8c:	df000015 	stw	fp,0(sp)
  150f90:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "previous" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
  150f94:	d0a2f217 	ldw	r2,-29752(gp)
  150f98:	1000031e 	bne	r2,zero,150fa8 <mode_up+0x24>
        trigger_mode = ONESHOT_TRIGGER;
  150f9c:	00800084 	movi	r2,2
  150fa0:	d0a2f215 	stw	r2,-29752(gp)
  150fa4:	00000706 	br	150fc4 <mode_up+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
  150fa8:	d0a2f217 	ldw	r2,-29752(gp)
  150fac:	10800058 	cmpnei	r2,r2,1
  150fb0:	1000021e 	bne	r2,zero,150fbc <mode_up+0x38>
        trigger_mode = NORMAL_TRIGGER;
  150fb4:	d022f215 	stw	zero,-29752(gp)
  150fb8:	00000206 	br	150fc4 <mode_up+0x40>
    else
        trigger_mode = AUTO_TRIGGER;
  150fbc:	00800044 	movi	r2,1
  150fc0:	d0a2f215 	stw	r2,-29752(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  150fc4:	d0a2f217 	ldw	r2,-29752(gp)
  150fc8:	1009883a 	mov	r4,r2
  150fcc:	0151d9c0 	call	151d9c <set_mode>


    /* all done with the trigger mode - return */
    return;
  150fd0:	0001883a 	nop

}
  150fd4:	e037883a 	mov	sp,fp
  150fd8:	dfc00117 	ldw	ra,4(sp)
  150fdc:	df000017 	ldw	fp,0(sp)
  150fe0:	dec00204 	addi	sp,sp,8
  150fe4:	f800283a 	ret

00150fe8 <display_mode>:
   Last Modified:    May 9, 2006

*/

void  display_mode(int x_pos, int y_pos, int style)
{
  150fe8:	defff804 	addi	sp,sp,-32
  150fec:	dfc00715 	stw	ra,28(sp)
  150ff0:	df000615 	stw	fp,24(sp)
  150ff4:	df000604 	addi	fp,sp,24
  150ff8:	e13ffd15 	stw	r4,-12(fp)
  150ffc:	e17ffe15 	stw	r5,-8(fp)
  151000:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the mode strings (must match enumerated type) */
    const char * const  modes[] =  {  " Normal   ",
  151004:	00800574 	movhi	r2,21
  151008:	1093a504 	addi	r2,r2,20116
  15100c:	e0bffa15 	stw	r2,-24(fp)
  151010:	00800574 	movhi	r2,21
  151014:	1093a804 	addi	r2,r2,20128
  151018:	e0bffb15 	stw	r2,-20(fp)
  15101c:	00800574 	movhi	r2,21
  151020:	1093ab04 	addi	r2,r2,20140
  151024:	e0bffc15 	stw	r2,-16(fp)
                                             " One-Shot "  };



    /* display the trigger mode */
    plot_string(x_pos, y_pos, modes[trigger_mode], style);
  151028:	d0a2f217 	ldw	r2,-29752(gp)
  15102c:	1085883a 	add	r2,r2,r2
  151030:	1085883a 	add	r2,r2,r2
  151034:	e0fffa04 	addi	r3,fp,-24
  151038:	1885883a 	add	r2,r3,r2
  15103c:	10c00017 	ldw	r3,0(r2)
  151040:	e0bfff17 	ldw	r2,-4(fp)
  151044:	e13ffd17 	ldw	r4,-12(fp)
  151048:	e17ffe17 	ldw	r5,-8(fp)
  15104c:	180d883a 	mov	r6,r3
  151050:	100f883a 	mov	r7,r2
  151054:	01506900 	call	150690 <plot_string>


    /* all done displaying the trigger mode - return */
    return;

}
  151058:	e037883a 	mov	sp,fp
  15105c:	dfc00117 	ldw	ra,4(sp)
  151060:	df000017 	ldw	fp,0(sp)
  151064:	dec00204 	addi	sp,sp,8
  151068:	f800283a 	ret

0015106c <set_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  set_scale(enum scale_type s)
{
  15106c:	defffd04 	addi	sp,sp,-12
  151070:	dfc00215 	stw	ra,8(sp)
  151074:	df000115 	stw	fp,4(sp)
  151078:	df000104 	addi	fp,sp,4
  15107c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the scale type */
    scale = s;
  151080:	e0bfff17 	ldw	r2,-4(fp)
  151084:	d0a2f615 	stw	r2,-29736(gp)

    /* output the scale appropriately */
    set_display_scale(scale);
  151088:	d0a2f617 	ldw	r2,-29736(gp)
  15108c:	1009883a 	mov	r4,r2
  151090:	0151ec00 	call	151ec0 <set_display_scale>


    /* all done setting the scale type - return */
    return;
  151094:	0001883a 	nop

}
  151098:	e037883a 	mov	sp,fp
  15109c:	dfc00117 	ldw	ra,4(sp)
  1510a0:	df000017 	ldw	fp,0(sp)
  1510a4:	dec00204 	addi	sp,sp,8
  1510a8:	f800283a 	ret

001510ac <scale_down>:
   Last Modified:    May 9, 2006

*/

void  scale_down()
{
  1510ac:	defffe04 	addi	sp,sp,-8
  1510b0:	dfc00115 	stw	ra,4(sp)
  1510b4:	df000015 	stw	fp,0(sp)
  1510b8:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "next" scale type */
    if (scale == SCALE_NONE)
  1510bc:	d0a2f617 	ldw	r2,-29736(gp)
  1510c0:	1000031e 	bne	r2,zero,1510d0 <scale_down+0x24>
        scale = SCALE_AXES;
  1510c4:	00800044 	movi	r2,1
  1510c8:	d0a2f615 	stw	r2,-29736(gp)
  1510cc:	00000706 	br	1510ec <scale_down+0x40>
    else if (scale == SCALE_AXES)
  1510d0:	d0a2f617 	ldw	r2,-29736(gp)
  1510d4:	10800058 	cmpnei	r2,r2,1
  1510d8:	1000031e 	bne	r2,zero,1510e8 <scale_down+0x3c>
        scale = SCALE_GRID;
  1510dc:	00800084 	movi	r2,2
  1510e0:	d0a2f615 	stw	r2,-29736(gp)
  1510e4:	00000106 	br	1510ec <scale_down+0x40>
    else
        scale = SCALE_NONE;
  1510e8:	d022f615 	stw	zero,-29736(gp)

    /* set the scale type */
    set_display_scale(scale);
  1510ec:	d0a2f617 	ldw	r2,-29736(gp)
  1510f0:	1009883a 	mov	r4,r2
  1510f4:	0151ec00 	call	151ec0 <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
  1510f8:	0001883a 	nop

}
  1510fc:	e037883a 	mov	sp,fp
  151100:	dfc00117 	ldw	ra,4(sp)
  151104:	df000017 	ldw	fp,0(sp)
  151108:	dec00204 	addi	sp,sp,8
  15110c:	f800283a 	ret

00151110 <scale_up>:
   Last Modified:    May 9, 2006

*/

void  scale_up()
{
  151110:	defffe04 	addi	sp,sp,-8
  151114:	dfc00115 	stw	ra,4(sp)
  151118:	df000015 	stw	fp,0(sp)
  15111c:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "previous" scale type */
    if (scale == SCALE_NONE)
  151120:	d0a2f617 	ldw	r2,-29736(gp)
  151124:	1000031e 	bne	r2,zero,151134 <scale_up+0x24>
        scale = SCALE_GRID;
  151128:	00800084 	movi	r2,2
  15112c:	d0a2f615 	stw	r2,-29736(gp)
  151130:	00000706 	br	151150 <scale_up+0x40>
    else if (scale == SCALE_AXES)
  151134:	d0a2f617 	ldw	r2,-29736(gp)
  151138:	10800058 	cmpnei	r2,r2,1
  15113c:	1000021e 	bne	r2,zero,151148 <scale_up+0x38>
        scale = SCALE_NONE;
  151140:	d022f615 	stw	zero,-29736(gp)
  151144:	00000206 	br	151150 <scale_up+0x40>
    else
        scale = SCALE_AXES;
  151148:	00800044 	movi	r2,1
  15114c:	d0a2f615 	stw	r2,-29736(gp)

    /* set the scale type */
    set_display_scale(scale);
  151150:	d0a2f617 	ldw	r2,-29736(gp)
  151154:	1009883a 	mov	r4,r2
  151158:	0151ec00 	call	151ec0 <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
  15115c:	0001883a 	nop

}
  151160:	e037883a 	mov	sp,fp
  151164:	dfc00117 	ldw	ra,4(sp)
  151168:	df000017 	ldw	fp,0(sp)
  15116c:	dec00204 	addi	sp,sp,8
  151170:	f800283a 	ret

00151174 <display_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  display_scale(int x_pos, int y_pos, int style)
{
  151174:	defff804 	addi	sp,sp,-32
  151178:	dfc00715 	stw	ra,28(sp)
  15117c:	df000615 	stw	fp,24(sp)
  151180:	df000604 	addi	fp,sp,24
  151184:	e13ffd15 	stw	r4,-12(fp)
  151188:	e17ffe15 	stw	r5,-8(fp)
  15118c:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the scale type strings (must match enumerated type) */
    const char * const  scale_stat[] =  {  " None",
  151190:	00800574 	movhi	r2,21
  151194:	1093ae04 	addi	r2,r2,20152
  151198:	e0bffa15 	stw	r2,-24(fp)
  15119c:	00800574 	movhi	r2,21
  1511a0:	1093b004 	addi	r2,r2,20160
  1511a4:	e0bffb15 	stw	r2,-20(fp)
  1511a8:	00800574 	movhi	r2,21
  1511ac:	1093b204 	addi	r2,r2,20168
  1511b0:	e0bffc15 	stw	r2,-16(fp)
                                                  " Grid"  };



    /* display the scale status */
    plot_string(x_pos, y_pos, scale_stat[scale], style);
  1511b4:	d0a2f617 	ldw	r2,-29736(gp)
  1511b8:	1085883a 	add	r2,r2,r2
  1511bc:	1085883a 	add	r2,r2,r2
  1511c0:	e0fffa04 	addi	r3,fp,-24
  1511c4:	1885883a 	add	r2,r3,r2
  1511c8:	10c00017 	ldw	r3,0(r2)
  1511cc:	e0bfff17 	ldw	r2,-4(fp)
  1511d0:	e13ffd17 	ldw	r4,-12(fp)
  1511d4:	e17ffe17 	ldw	r5,-8(fp)
  1511d8:	180d883a 	mov	r6,r3
  1511dc:	100f883a 	mov	r7,r2
  1511e0:	01506900 	call	150690 <plot_string>


    /* all done displaying the scale status - return */
    return;

}
  1511e4:	e037883a 	mov	sp,fp
  1511e8:	dfc00117 	ldw	ra,4(sp)
  1511ec:	df000017 	ldw	fp,0(sp)
  1511f0:	dec00204 	addi	sp,sp,8
  1511f4:	f800283a 	ret

001511f8 <set_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  set_sweep(int s)
{
  1511f8:	defffc04 	addi	sp,sp,-16
  1511fc:	dfc00315 	stw	ra,12(sp)
  151200:	df000215 	stw	fp,8(sp)
  151204:	df000204 	addi	fp,sp,8
  151208:	e13fff15 	stw	r4,-4(fp)
    int  sample_size;		/* sample size for this sweep rate */



    /* set the new sweep rate */
    sweep = s;
  15120c:	e0bfff17 	ldw	r2,-4(fp)
  151210:	d0a2f415 	stw	r2,-29744(gp)

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  151214:	d0a2f417 	ldw	r2,-29744(gp)
  151218:	00c00574 	movhi	r3,21
  15121c:	18d37b04 	addi	r3,r3,19948
  151220:	100490fa 	slli	r2,r2,3
  151224:	1885883a 	add	r2,r3,r2
  151228:	10800017 	ldw	r2,0(r2)
  15122c:	1009883a 	mov	r4,r2
  151230:	015388c0 	call	15388c <set_sample_rate>
  151234:	e0bffe15 	stw	r2,-8(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  151238:	e13ffe17 	ldw	r4,-8(fp)
  15123c:	0151e940 	call	151e94 <set_trace_size>


    /* all done initializing the sweep rate - return */
    return;
  151240:	0001883a 	nop

}
  151244:	e037883a 	mov	sp,fp
  151248:	dfc00117 	ldw	ra,4(sp)
  15124c:	df000017 	ldw	fp,0(sp)
  151250:	dec00204 	addi	sp,sp,8
  151254:	f800283a 	ret

00151258 <sweep_down>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_down()
{
  151258:	defffd04 	addi	sp,sp,-12
  15125c:	dfc00215 	stw	ra,8(sp)
  151260:	df000115 	stw	fp,4(sp)
  151264:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* decrease the sweep rate, if not already the minimum */
    if (sweep > 0)  {
  151268:	d0a2f417 	ldw	r2,-29744(gp)
  15126c:	0080090e 	bge	zero,r2,151294 <sweep_down+0x3c>
        /* not at minimum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep - 1));
  151270:	d0e2f417 	ldw	r3,-29744(gp)
  151274:	d0a2f417 	ldw	r2,-29744(gp)
  151278:	10bfffc4 	addi	r2,r2,-1
  15127c:	1809883a 	mov	r4,r3
  151280:	100b883a 	mov	r5,r2
  151284:	01517340 	call	151734 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep--;
  151288:	d0a2f417 	ldw	r2,-29744(gp)
  15128c:	10bfffc4 	addi	r2,r2,-1
  151290:	d0a2f415 	stw	r2,-29744(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  151294:	d0a2f417 	ldw	r2,-29744(gp)
  151298:	00c00574 	movhi	r3,21
  15129c:	18d37b04 	addi	r3,r3,19948
  1512a0:	100490fa 	slli	r2,r2,3
  1512a4:	1885883a 	add	r2,r3,r2
  1512a8:	10800017 	ldw	r2,0(r2)
  1512ac:	1009883a 	mov	r4,r2
  1512b0:	015388c0 	call	15388c <set_sample_rate>
  1512b4:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  1512b8:	e13fff17 	ldw	r4,-4(fp)
  1512bc:	0151e940 	call	151e94 <set_trace_size>


    /* all done with lowering the sweep rate - return */
    return;
  1512c0:	0001883a 	nop

}
  1512c4:	e037883a 	mov	sp,fp
  1512c8:	dfc00117 	ldw	ra,4(sp)
  1512cc:	df000017 	ldw	fp,0(sp)
  1512d0:	dec00204 	addi	sp,sp,8
  1512d4:	f800283a 	ret

001512d8 <sweep_up>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_up()
{
  1512d8:	defffd04 	addi	sp,sp,-12
  1512dc:	dfc00215 	stw	ra,8(sp)
  1512e0:	df000115 	stw	fp,4(sp)
  1512e4:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* increase the sweep rate, if not already the maximum */
    if (sweep < (NO_SWEEP_RATES - 1))  {
  1512e8:	d0a2f417 	ldw	r2,-29744(gp)
  1512ec:	10800528 	cmpgeui	r2,r2,20
  1512f0:	1000091e 	bne	r2,zero,151318 <sweep_up+0x40>
        /* not at maximum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep + 1));
  1512f4:	d0e2f417 	ldw	r3,-29744(gp)
  1512f8:	d0a2f417 	ldw	r2,-29744(gp)
  1512fc:	10800044 	addi	r2,r2,1
  151300:	1809883a 	mov	r4,r3
  151304:	100b883a 	mov	r5,r2
  151308:	01517340 	call	151734 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep++;
  15130c:	d0a2f417 	ldw	r2,-29744(gp)
  151310:	10800044 	addi	r2,r2,1
  151314:	d0a2f415 	stw	r2,-29744(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  151318:	d0a2f417 	ldw	r2,-29744(gp)
  15131c:	00c00574 	movhi	r3,21
  151320:	18d37b04 	addi	r3,r3,19948
  151324:	100490fa 	slli	r2,r2,3
  151328:	1885883a 	add	r2,r3,r2
  15132c:	10800017 	ldw	r2,0(r2)
  151330:	1009883a 	mov	r4,r2
  151334:	015388c0 	call	15388c <set_sample_rate>
  151338:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  15133c:	e13fff17 	ldw	r4,-4(fp)
  151340:	0151e940 	call	151e94 <set_trace_size>


    /* all done with raising the sweep rate - return */
    return;
  151344:	0001883a 	nop

}
  151348:	e037883a 	mov	sp,fp
  15134c:	dfc00117 	ldw	ra,4(sp)
  151350:	df000017 	ldw	fp,0(sp)
  151354:	dec00204 	addi	sp,sp,8
  151358:	f800283a 	ret

0015135c <display_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  display_sweep(int x_pos, int y_pos, int style)
{
  15135c:	defffb04 	addi	sp,sp,-20
  151360:	dfc00415 	stw	ra,16(sp)
  151364:	df000315 	stw	fp,12(sp)
  151368:	df000304 	addi	fp,sp,12
  15136c:	e13ffd15 	stw	r4,-12(fp)
  151370:	e17ffe15 	stw	r5,-8(fp)
  151374:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* display the sweep rate */
    plot_string(x_pos, y_pos, sweep_rates[sweep].s, style);
  151378:	d0a2f417 	ldw	r2,-29744(gp)
  15137c:	00c00574 	movhi	r3,21
  151380:	18d37b04 	addi	r3,r3,19948
  151384:	100490fa 	slli	r2,r2,3
  151388:	1885883a 	add	r2,r3,r2
  15138c:	10800104 	addi	r2,r2,4
  151390:	10c00017 	ldw	r3,0(r2)
  151394:	e0bfff17 	ldw	r2,-4(fp)
  151398:	e13ffd17 	ldw	r4,-12(fp)
  15139c:	e17ffe17 	ldw	r5,-8(fp)
  1513a0:	180d883a 	mov	r6,r3
  1513a4:	100f883a 	mov	r7,r2
  1513a8:	01506900 	call	150690 <plot_string>


    /* all done displaying the sweep rate - return */
    return;
  1513ac:	0001883a 	nop

}
  1513b0:	e037883a 	mov	sp,fp
  1513b4:	dfc00117 	ldw	ra,4(sp)
  1513b8:	df000017 	ldw	fp,0(sp)
  1513bc:	dec00204 	addi	sp,sp,8
  1513c0:	f800283a 	ret

001513c4 <set_trg_level>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_level(int l)
{
  1513c4:	defffd04 	addi	sp,sp,-12
  1513c8:	dfc00215 	stw	ra,8(sp)
  1513cc:	df000115 	stw	fp,4(sp)
  1513d0:	df000104 	addi	fp,sp,4
  1513d4:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger level */
    level = l;
  1513d8:	e0bfff17 	ldw	r2,-4(fp)
  1513dc:	d0a2f315 	stw	r2,-29748(gp)

    /* set the trigger level in hardware too */
    set_trigger(level, slope);
  1513e0:	d0e2f317 	ldw	r3,-29748(gp)
  1513e4:	d0a2f717 	ldw	r2,-29732(gp)
  1513e8:	1809883a 	mov	r4,r3
  1513ec:	100b883a 	mov	r5,r2
  1513f0:	01539480 	call	153948 <set_trigger>


    /* all done initializing the trigger level - return */
    return;
  1513f4:	0001883a 	nop

}
  1513f8:	e037883a 	mov	sp,fp
  1513fc:	dfc00117 	ldw	ra,4(sp)
  151400:	df000017 	ldw	fp,0(sp)
  151404:	dec00204 	addi	sp,sp,8
  151408:	f800283a 	ret

0015140c <trg_level_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_down()
{
  15140c:	defffe04 	addi	sp,sp,-8
  151410:	dfc00115 	stw	ra,4(sp)
  151414:	df000015 	stw	fp,0(sp)
  151418:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger level, if not already the minimum */
    if (level > MIN_TRG_LEVEL_SET)
  15141c:	d0a2f317 	ldw	r2,-29748(gp)
  151420:	0080030e 	bge	zero,r2,151430 <trg_level_down+0x24>
        level--;
  151424:	d0a2f317 	ldw	r2,-29748(gp)
  151428:	10bfffc4 	addi	r2,r2,-1
  15142c:	d0a2f315 	stw	r2,-29748(gp)

    /* set the trigger level for the hardware */
    set_trigger(level, slope);
  151430:	d0e2f317 	ldw	r3,-29748(gp)
  151434:	d0a2f717 	ldw	r2,-29732(gp)
  151438:	1809883a 	mov	r4,r3
  15143c:	100b883a 	mov	r5,r2
  151440:	01539480 	call	153948 <set_trigger>


    /* all done with lowering the trigger level - return */
    return;
  151444:	0001883a 	nop

}
  151448:	e037883a 	mov	sp,fp
  15144c:	dfc00117 	ldw	ra,4(sp)
  151450:	df000017 	ldw	fp,0(sp)
  151454:	dec00204 	addi	sp,sp,8
  151458:	f800283a 	ret

0015145c <trg_level_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_up()
{
  15145c:	defffe04 	addi	sp,sp,-8
  151460:	dfc00115 	stw	ra,4(sp)
  151464:	df000015 	stw	fp,0(sp)
  151468:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger level, if not already the maximum */
    if (level < MAX_TRG_LEVEL_SET)
  15146c:	d0a2f317 	ldw	r2,-29748(gp)
  151470:	10801fc8 	cmpgei	r2,r2,127
  151474:	1000031e 	bne	r2,zero,151484 <trg_level_up+0x28>
        level++;
  151478:	d0a2f317 	ldw	r2,-29748(gp)
  15147c:	10800044 	addi	r2,r2,1
  151480:	d0a2f315 	stw	r2,-29748(gp)

    /* tell the hardware the new trigger level */
    set_trigger(level, slope);
  151484:	d0e2f317 	ldw	r3,-29748(gp)
  151488:	d0a2f717 	ldw	r2,-29732(gp)
  15148c:	1809883a 	mov	r4,r3
  151490:	100b883a 	mov	r5,r2
  151494:	01539480 	call	153948 <set_trigger>


    /* all done raising the trigger level - return */
    return;
  151498:	0001883a 	nop

}
  15149c:	e037883a 	mov	sp,fp
  1514a0:	dfc00117 	ldw	ra,4(sp)
  1514a4:	df000017 	ldw	fp,0(sp)
  1514a8:	dec00204 	addi	sp,sp,8
  1514ac:	f800283a 	ret

001514b0 <display_trg_level>:
   Last Modified:    Mar. 10, 1995

*/

void  display_trg_level(int x_pos, int y_pos, int style)
{
  1514b0:	defff704 	addi	sp,sp,-36
  1514b4:	dfc00815 	stw	ra,32(sp)
  1514b8:	df000715 	stw	fp,28(sp)
  1514bc:	df000704 	addi	fp,sp,28
  1514c0:	e13ffd15 	stw	r4,-12(fp)
  1514c4:	e17ffe15 	stw	r5,-8(fp)
  1514c8:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      level_str[] = "        "; /* string containing the trigger level */
  1514cc:	00880834 	movhi	r2,8224
  1514d0:	10880804 	addi	r2,r2,8224
  1514d4:	e0bffa15 	stw	r2,-24(fp)
  1514d8:	00880834 	movhi	r2,8224
  1514dc:	10880804 	addi	r2,r2,8224
  1514e0:	e0bffb15 	stw	r2,-20(fp)
  1514e4:	e03ffc05 	stb	zero,-16(fp)
    long int  l;			/* trigger level in mV */



    /* compute the trigger level in millivolts */
    l = ((long int) MAX_LEVEL - MIN_LEVEL) * level / (MAX_TRG_LEVEL_SET - MIN_TRG_LEVEL_SET) + MIN_LEVEL;
  1514e8:	d0a2f317 	ldw	r2,-29748(gp)
  1514ec:	10c4e224 	muli	r3,r2,5000
  1514f0:	00801fc4 	movi	r2,127
  1514f4:	1885283a 	div	r2,r3,r2
  1514f8:	e0bff915 	stw	r2,-28(fp)

    /* convert the level to the string (leave first character blank) */
    cvt_num_field(l, &level_str[1]);
  1514fc:	e0bffa04 	addi	r2,fp,-24
  151500:	10800044 	addi	r2,r2,1
  151504:	e13ff917 	ldw	r4,-28(fp)
  151508:	100b883a 	mov	r5,r2
  15150c:	0151a780 	call	151a78 <cvt_num_field>

    /* add in the units */
    level_str[7] = 'V';
  151510:	00801584 	movi	r2,86
  151514:	e0bffbc5 	stb	r2,-17(fp)


    /* now finally display the trigger level */
    plot_string(x_pos, y_pos, level_str, style);
  151518:	e0bfff17 	ldw	r2,-4(fp)
  15151c:	e0fffa04 	addi	r3,fp,-24
  151520:	e13ffd17 	ldw	r4,-12(fp)
  151524:	e17ffe17 	ldw	r5,-8(fp)
  151528:	180d883a 	mov	r6,r3
  15152c:	100f883a 	mov	r7,r2
  151530:	01506900 	call	150690 <plot_string>


    /* all done displaying the trigger level - return */
    return;

}
  151534:	e037883a 	mov	sp,fp
  151538:	dfc00117 	ldw	ra,4(sp)
  15153c:	df000017 	ldw	fp,0(sp)
  151540:	dec00204 	addi	sp,sp,8
  151544:	f800283a 	ret

00151548 <set_trg_slope>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_slope(enum slope_type s)
{
  151548:	defffd04 	addi	sp,sp,-12
  15154c:	dfc00215 	stw	ra,8(sp)
  151550:	df000115 	stw	fp,4(sp)
  151554:	df000104 	addi	fp,sp,4
  151558:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the slope type */
    slope = s;
  15155c:	e0bfff17 	ldw	r2,-4(fp)
  151560:	d0a2f715 	stw	r2,-29732(gp)

    /* also tell the hardware what the slope is */
    set_trigger(level, slope);
  151564:	d0e2f317 	ldw	r3,-29748(gp)
  151568:	d0a2f717 	ldw	r2,-29732(gp)
  15156c:	1809883a 	mov	r4,r3
  151570:	100b883a 	mov	r5,r2
  151574:	01539480 	call	153948 <set_trigger>


    /* all done setting the trigger slope - return */
    return;
  151578:	0001883a 	nop

}
  15157c:	e037883a 	mov	sp,fp
  151580:	dfc00117 	ldw	ra,4(sp)
  151584:	df000017 	ldw	fp,0(sp)
  151588:	dec00204 	addi	sp,sp,8
  15158c:	f800283a 	ret

00151590 <trg_slope_toggle>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_slope_toggle()
{
  151590:	defffe04 	addi	sp,sp,-8
  151594:	dfc00115 	stw	ra,4(sp)
  151598:	df000015 	stw	fp,0(sp)
  15159c:	d839883a 	mov	fp,sp
      /* none */



    /* toggle the trigger slope */
    if (slope == SLOPE_POSITIVE)
  1515a0:	d0a2f717 	ldw	r2,-29732(gp)
  1515a4:	1000031e 	bne	r2,zero,1515b4 <trg_slope_toggle+0x24>
        slope = SLOPE_NEGATIVE;
  1515a8:	00800044 	movi	r2,1
  1515ac:	d0a2f715 	stw	r2,-29732(gp)
  1515b0:	00000106 	br	1515b8 <trg_slope_toggle+0x28>
    else
        slope = SLOPE_POSITIVE;
  1515b4:	d022f715 	stw	zero,-29732(gp)

    /* set the new trigger slope */
    set_trigger(level, slope);
  1515b8:	d0e2f317 	ldw	r3,-29748(gp)
  1515bc:	d0a2f717 	ldw	r2,-29732(gp)
  1515c0:	1809883a 	mov	r4,r3
  1515c4:	100b883a 	mov	r5,r2
  1515c8:	01539480 	call	153948 <set_trigger>


    /* all done with the trigger slope - return */
    return;
  1515cc:	0001883a 	nop

}
  1515d0:	e037883a 	mov	sp,fp
  1515d4:	dfc00117 	ldw	ra,4(sp)
  1515d8:	df000017 	ldw	fp,0(sp)
  1515dc:	dec00204 	addi	sp,sp,8
  1515e0:	f800283a 	ret

001515e4 <display_trg_slope>:
   Last Modified:    Mar. 13, 1994

*/

void  display_trg_slope(int x_pos, int y_pos, int style)
{
  1515e4:	defff904 	addi	sp,sp,-28
  1515e8:	dfc00615 	stw	ra,24(sp)
  1515ec:	df000515 	stw	fp,20(sp)
  1515f0:	df000504 	addi	fp,sp,20
  1515f4:	e13ffd15 	stw	r4,-12(fp)
  1515f8:	e17ffe15 	stw	r5,-8(fp)
  1515fc:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the trigger slope strings (must match enumerated type) */
    const char * const  slopes[] =  {  " +", " -"  };
  151600:	00800574 	movhi	r2,21
  151604:	1093b404 	addi	r2,r2,20176
  151608:	e0bffb15 	stw	r2,-20(fp)
  15160c:	00800574 	movhi	r2,21
  151610:	1093b504 	addi	r2,r2,20180
  151614:	e0bffc15 	stw	r2,-16(fp)



    /* display the trigger slope */
    plot_string(x_pos, y_pos, slopes[slope], style);
  151618:	d0a2f717 	ldw	r2,-29732(gp)
  15161c:	1085883a 	add	r2,r2,r2
  151620:	1085883a 	add	r2,r2,r2
  151624:	e0fffb04 	addi	r3,fp,-20
  151628:	1885883a 	add	r2,r3,r2
  15162c:	10c00017 	ldw	r3,0(r2)
  151630:	e0bfff17 	ldw	r2,-4(fp)
  151634:	e13ffd17 	ldw	r4,-12(fp)
  151638:	e17ffe17 	ldw	r5,-8(fp)
  15163c:	180d883a 	mov	r6,r3
  151640:	100f883a 	mov	r7,r2
  151644:	01506900 	call	150690 <plot_string>


    /* all done displaying the trigger slope - return */
    return;

}
  151648:	e037883a 	mov	sp,fp
  15164c:	dfc00117 	ldw	ra,4(sp)
  151650:	df000017 	ldw	fp,0(sp)
  151654:	dec00204 	addi	sp,sp,8
  151658:	f800283a 	ret

0015165c <set_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_delay(long int d)
{
  15165c:	defffd04 	addi	sp,sp,-12
  151660:	dfc00215 	stw	ra,8(sp)
  151664:	df000115 	stw	fp,4(sp)
  151668:	df000104 	addi	fp,sp,4
  15166c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger delay */
    delay = d;
  151670:	e0bfff17 	ldw	r2,-4(fp)
  151674:	d0a2f515 	stw	r2,-29740(gp)

    /* set the trigger delay in hardware too */
    set_delay(delay);
  151678:	d0a2f517 	ldw	r2,-29740(gp)
  15167c:	1009883a 	mov	r4,r2
  151680:	01539b40 	call	1539b4 <set_delay>


    /* all done initializing the trigger delay - return */
    return;
  151684:	0001883a 	nop

}
  151688:	e037883a 	mov	sp,fp
  15168c:	dfc00117 	ldw	ra,4(sp)
  151690:	df000017 	ldw	fp,0(sp)
  151694:	dec00204 	addi	sp,sp,8
  151698:	f800283a 	ret

0015169c <trg_delay_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_down()
{
  15169c:	defffe04 	addi	sp,sp,-8
  1516a0:	dfc00115 	stw	ra,4(sp)
  1516a4:	df000015 	stw	fp,0(sp)
  1516a8:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger delay, if not already the minimum */
    if (delay > MIN_DELAY)
  1516ac:	d0a2f517 	ldw	r2,-29740(gp)
  1516b0:	10bfc450 	cmplti	r2,r2,-239
  1516b4:	1000031e 	bne	r2,zero,1516c4 <trg_delay_down+0x28>
        delay--;
  1516b8:	d0a2f517 	ldw	r2,-29740(gp)
  1516bc:	10bfffc4 	addi	r2,r2,-1
  1516c0:	d0a2f515 	stw	r2,-29740(gp)

    /* set the trigger delay for the hardware */
    set_delay(delay);
  1516c4:	d0a2f517 	ldw	r2,-29740(gp)
  1516c8:	1009883a 	mov	r4,r2
  1516cc:	01539b40 	call	1539b4 <set_delay>


    /* all done with lowering the trigger delay - return */
    return;
  1516d0:	0001883a 	nop

}
  1516d4:	e037883a 	mov	sp,fp
  1516d8:	dfc00117 	ldw	ra,4(sp)
  1516dc:	df000017 	ldw	fp,0(sp)
  1516e0:	dec00204 	addi	sp,sp,8
  1516e4:	f800283a 	ret

001516e8 <trg_delay_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_up()
{
  1516e8:	defffe04 	addi	sp,sp,-8
  1516ec:	dfc00115 	stw	ra,4(sp)
  1516f0:	df000015 	stw	fp,0(sp)
  1516f4:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger delay, if not already the maximum */
    if (delay < MAX_DELAY)
  1516f8:	d0a2f517 	ldw	r2,-29740(gp)
  1516fc:	00f0d3d4 	movui	r3,49999
  151700:	18800316 	blt	r3,r2,151710 <trg_delay_up+0x28>
        delay++;
  151704:	d0a2f517 	ldw	r2,-29740(gp)
  151708:	10800044 	addi	r2,r2,1
  15170c:	d0a2f515 	stw	r2,-29740(gp)

    /* tell the hardware the new trigger delay */
    set_delay(delay);
  151710:	d0a2f517 	ldw	r2,-29740(gp)
  151714:	1009883a 	mov	r4,r2
  151718:	01539b40 	call	1539b4 <set_delay>


    /* all done raising the trigger delay - return */
    return;
  15171c:	0001883a 	nop

}
  151720:	e037883a 	mov	sp,fp
  151724:	dfc00117 	ldw	ra,4(sp)
  151728:	df000017 	ldw	fp,0(sp)
  15172c:	dec00204 	addi	sp,sp,8
  151730:	f800283a 	ret

00151734 <adjust_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  adjust_trg_delay(int old_sweep, int new_sweep)
{
  151734:	defffc04 	addi	sp,sp,-16
  151738:	dfc00315 	stw	ra,12(sp)
  15173c:	df000215 	stw	fp,8(sp)
  151740:	df000204 	addi	fp,sp,8
  151744:	e13ffe15 	stw	r4,-8(fp)
  151748:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* multiply by 10 times the ratio of sweep rates */
    delay *= (10 * sweep_rates[new_sweep].sample_rate) / sweep_rates[old_sweep].sample_rate;
  15174c:	00c00574 	movhi	r3,21
  151750:	18d37b04 	addi	r3,r3,19948
  151754:	e0bfff17 	ldw	r2,-4(fp)
  151758:	100490fa 	slli	r2,r2,3
  15175c:	1885883a 	add	r2,r3,r2
  151760:	10800017 	ldw	r2,0(r2)
  151764:	10c002a4 	muli	r3,r2,10
  151768:	01000574 	movhi	r4,21
  15176c:	21137b04 	addi	r4,r4,19948
  151770:	e0bffe17 	ldw	r2,-8(fp)
  151774:	100490fa 	slli	r2,r2,3
  151778:	2085883a 	add	r2,r4,r2
  15177c:	10800017 	ldw	r2,0(r2)
  151780:	1887283a 	div	r3,r3,r2
  151784:	d0a2f517 	ldw	r2,-29740(gp)
  151788:	1885383a 	mul	r2,r3,r2
  15178c:	d0a2f515 	stw	r2,-29740(gp)
    /* now divide the factor of 10 back out */
    delay /= 10;
  151790:	d0e2f517 	ldw	r3,-29740(gp)
  151794:	00800284 	movi	r2,10
  151798:	1885283a 	div	r2,r3,r2
  15179c:	d0a2f515 	stw	r2,-29740(gp)

    /* make sure delay is not out of range */
    if (delay > MAX_DELAY)
  1517a0:	d0a2f517 	ldw	r2,-29740(gp)
  1517a4:	00f0d414 	movui	r3,50000
  1517a8:	1880020e 	bge	r3,r2,1517b4 <adjust_trg_delay+0x80>
        /* delay is too large - set to maximum */
        delay = MAX_DELAY;
  1517ac:	00b0d414 	movui	r2,50000
  1517b0:	d0a2f515 	stw	r2,-29740(gp)
    if (delay < MIN_DELAY)
  1517b4:	d0a2f517 	ldw	r2,-29740(gp)
  1517b8:	10bfc408 	cmpgei	r2,r2,-240
  1517bc:	1000021e 	bne	r2,zero,1517c8 <adjust_trg_delay+0x94>
        /* delay is too small - set to minimum */
	delay = MIN_DELAY;
  1517c0:	00bfc404 	movi	r2,-240
  1517c4:	d0a2f515 	stw	r2,-29740(gp)


    /* tell the hardware the new trigger delay */
    set_delay(delay);
  1517c8:	d0a2f517 	ldw	r2,-29740(gp)
  1517cc:	1009883a 	mov	r4,r2
  1517d0:	01539b40 	call	1539b4 <set_delay>


    /* all done adjusting the trigger delay - return */
    return;
  1517d4:	0001883a 	nop

}
  1517d8:	e037883a 	mov	sp,fp
  1517dc:	dfc00117 	ldw	ra,4(sp)
  1517e0:	df000017 	ldw	fp,0(sp)
  1517e4:	dec00204 	addi	sp,sp,8
  1517e8:	f800283a 	ret

001517ec <display_trg_delay>:
   Last Modified:    May 3, 2006

*/

void  display_trg_delay(int x_pos, int y_pos, int style)
{
  1517ec:	defff604 	addi	sp,sp,-40
  1517f0:	dfc00915 	stw	ra,36(sp)
  1517f4:	df000815 	stw	fp,32(sp)
  1517f8:	df000804 	addi	fp,sp,32
  1517fc:	e13ffd15 	stw	r4,-12(fp)
  151800:	e17ffe15 	stw	r5,-8(fp)
  151804:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      delay_str[] = "         "; /* string containing the trigger delay */
  151808:	00880834 	movhi	r2,8224
  15180c:	10880804 	addi	r2,r2,8224
  151810:	e0bffa15 	stw	r2,-24(fp)
  151814:	00880834 	movhi	r2,8224
  151818:	10880804 	addi	r2,r2,8224
  15181c:	e0bffb15 	stw	r2,-20(fp)
  151820:	00800804 	movi	r2,32
  151824:	e0bffc0d 	sth	r2,-16(fp)
    long int  d;                         /* delay in appropriate units */


    /* compute the delay in the appropriate units */
    /* have to watch out for overflow, so be careful */
    if (sweep_rates[sweep].sample_rate > 10000000L) {
  151828:	d0a2f417 	ldw	r2,-29744(gp)
  15182c:	00c00574 	movhi	r3,21
  151830:	18d37b04 	addi	r3,r3,19948
  151834:	100490fa 	slli	r2,r2,3
  151838:	1885883a 	add	r2,r3,r2
  15183c:	10800017 	ldw	r2,0(r2)
  151840:	00c02674 	movhi	r3,153
  151844:	18e5a004 	addi	r3,r3,-27008
  151848:	1880100e 	bge	r3,r2,15188c <display_trg_delay+0xa0>
    	d = delay * (1000000000L / sweep_rates[sweep].sample_rate);
  15184c:	d0a2f417 	ldw	r2,-29744(gp)
  151850:	00c00574 	movhi	r3,21
  151854:	18d37b04 	addi	r3,r3,19948
  151858:	100490fa 	slli	r2,r2,3
  15185c:	1885883a 	add	r2,r3,r2
  151860:	10800017 	ldw	r2,0(r2)
  151864:	00cee6f4 	movhi	r3,15259
  151868:	18f28004 	addi	r3,r3,-13824
  15186c:	1887283a 	div	r3,r3,r2
  151870:	d0a2f517 	ldw	r2,-29740(gp)
  151874:	1885383a 	mul	r2,r3,r2
  151878:	e0bff915 	stw	r2,-28(fp)
    	/* need to divide by 1000000 to get milliseconds */
    	units_adj = 1000000;
  15187c:	008003f4 	movhi	r2,15
  151880:	10909004 	addi	r2,r2,16960
  151884:	e0bff815 	stw	r2,-32(fp)
  151888:	00002906 	br	151930 <display_trg_delay+0x144>
    } else if (sweep_rates[sweep].sample_rate > 1000000L)  {
  15188c:	d0a2f417 	ldw	r2,-29744(gp)
  151890:	00c00574 	movhi	r3,21
  151894:	18d37b04 	addi	r3,r3,19948
  151898:	100490fa 	slli	r2,r2,3
  15189c:	1885883a 	add	r2,r3,r2
  1518a0:	10800017 	ldw	r2,0(r2)
  1518a4:	00c003f4 	movhi	r3,15
  1518a8:	18d09004 	addi	r3,r3,16960
  1518ac:	1880120e 	bge	r3,r2,1518f8 <display_trg_delay+0x10c>
        /* have a fast sweep rate, could overflow */
        /* first compute in units of 100 ns */
        d = delay * (10000000L / sweep_rates[sweep].sample_rate);
  1518b0:	d0a2f417 	ldw	r2,-29744(gp)
  1518b4:	00c00574 	movhi	r3,21
  1518b8:	18d37b04 	addi	r3,r3,19948
  1518bc:	100490fa 	slli	r2,r2,3
  1518c0:	1885883a 	add	r2,r3,r2
  1518c4:	10800017 	ldw	r2,0(r2)
  1518c8:	00c02674 	movhi	r3,153
  1518cc:	18e5a004 	addi	r3,r3,-27008
  1518d0:	1887283a 	div	r3,r3,r2
  1518d4:	d0a2f517 	ldw	r2,-29740(gp)
  1518d8:	1885383a 	mul	r2,r3,r2
  1518dc:	e0bff915 	stw	r2,-28(fp)
		/* now convert to nanoseconds */
		d *= 100L;
  1518e0:	e0bff917 	ldw	r2,-28(fp)
  1518e4:	10801924 	muli	r2,r2,100
  1518e8:	e0bff915 	stw	r2,-28(fp)
		/* need to divide by 1000 to get to microseconds */
		units_adj = 1000;
  1518ec:	0080fa04 	movi	r2,1000
  1518f0:	e0bff815 	stw	r2,-32(fp)
  1518f4:	00000e06 	br	151930 <display_trg_delay+0x144>
    } else  {
        /* slow sweep rate, don't have to worry about overflow */
        d = delay * (1000000L / sweep_rates[sweep].sample_rate);
  1518f8:	d0a2f417 	ldw	r2,-29744(gp)
  1518fc:	00c00574 	movhi	r3,21
  151900:	18d37b04 	addi	r3,r3,19948
  151904:	100490fa 	slli	r2,r2,3
  151908:	1885883a 	add	r2,r3,r2
  15190c:	10800017 	ldw	r2,0(r2)
  151910:	00c003f4 	movhi	r3,15
  151914:	18d09004 	addi	r3,r3,16960
  151918:	1887283a 	div	r3,r3,r2
  15191c:	d0a2f517 	ldw	r2,-29740(gp)
  151920:	1885383a 	mul	r2,r3,r2
  151924:	e0bff915 	stw	r2,-28(fp)
		/* already in microseconds, so adjustment is 1 */
		units_adj = 1;
  151928:	00800044 	movi	r2,1
  15192c:	e0bff815 	stw	r2,-32(fp)
    }

    /* convert it to the string (leave first character blank) */
    cvt_num_field(d, &delay_str[1]);
  151930:	e0bffa04 	addi	r2,fp,-24
  151934:	10800044 	addi	r2,r2,1
  151938:	e13ff917 	ldw	r4,-28(fp)
  15193c:	100b883a 	mov	r5,r2
  151940:	0151a780 	call	151a78 <cvt_num_field>

    /* add in the units */
    if (units_adj == 1000000) {
  151944:	e0fff817 	ldw	r3,-32(fp)
  151948:	008003f4 	movhi	r2,15
  15194c:	10909004 	addi	r2,r2,16960
  151950:	1880051e 	bne	r3,r2,151968 <display_trg_delay+0x17c>
        /* delay is in nanoseconds */
		delay_str[7] = '\004';
  151954:	00800104 	movi	r2,4
  151958:	e0bffbc5 	stb	r2,-17(fp)
		delay_str[8] = 's';
  15195c:	00801cc4 	movi	r2,115
  151960:	e0bffc05 	stb	r2,-16(fp)
  151964:	00003806 	br	151a48 <display_trg_delay+0x25c>
    } else if (((d / units_adj) < 1000) && ((d / units_adj) > -1000) && (units_adj == 1000)) {
  151968:	e0fff917 	ldw	r3,-28(fp)
  15196c:	e0bff817 	ldw	r2,-32(fp)
  151970:	1885283a 	div	r2,r3,r2
  151974:	1080fa08 	cmpgei	r2,r2,1000
  151978:	10000d1e 	bne	r2,zero,1519b0 <display_trg_delay+0x1c4>
  15197c:	e0fff917 	ldw	r3,-28(fp)
  151980:	e0bff817 	ldw	r2,-32(fp)
  151984:	1885283a 	div	r2,r3,r2
  151988:	10bf0650 	cmplti	r2,r2,-999
  15198c:	1000081e 	bne	r2,zero,1519b0 <display_trg_delay+0x1c4>
  151990:	e0bff817 	ldw	r2,-32(fp)
  151994:	1080fa18 	cmpnei	r2,r2,1000
  151998:	1000051e 	bne	r2,zero,1519b0 <display_trg_delay+0x1c4>
        /* delay is in microseconds */
		delay_str[7] = '\004';
  15199c:	00800104 	movi	r2,4
  1519a0:	e0bffbc5 	stb	r2,-17(fp)
		delay_str[8] = 's';
  1519a4:	00801cc4 	movi	r2,115
  1519a8:	e0bffc05 	stb	r2,-16(fp)
  1519ac:	00002606 	br	151a48 <display_trg_delay+0x25c>
    } else if (((d / units_adj) < 1000000) && ((d / units_adj) > -1000000)) {
  1519b0:	e0fff917 	ldw	r3,-28(fp)
  1519b4:	e0bff817 	ldw	r2,-32(fp)
  1519b8:	1885283a 	div	r2,r3,r2
  1519bc:	00c003f4 	movhi	r3,15
  1519c0:	18d08fc4 	addi	r3,r3,16959
  1519c4:	18800b16 	blt	r3,r2,1519f4 <display_trg_delay+0x208>
  1519c8:	e0fff917 	ldw	r3,-28(fp)
  1519cc:	e0bff817 	ldw	r2,-32(fp)
  1519d0:	1887283a 	div	r3,r3,r2
  1519d4:	00bffc74 	movhi	r2,65521
  1519d8:	10af7044 	addi	r2,r2,-16959
  1519dc:	18800516 	blt	r3,r2,1519f4 <display_trg_delay+0x208>
        /* delay is in milliseconds */
		delay_str[7] = 'm';
  1519e0:	00801b44 	movi	r2,109
  1519e4:	e0bffbc5 	stb	r2,-17(fp)
		delay_str[8] = 's';
  1519e8:	00801cc4 	movi	r2,115
  1519ec:	e0bffc05 	stb	r2,-16(fp)
  1519f0:	00001506 	br	151a48 <display_trg_delay+0x25c>
    } else if (((d / units_adj) < 1000000000) && ((d / units_adj) > -1000000000))  {
  1519f4:	e0fff917 	ldw	r3,-28(fp)
  1519f8:	e0bff817 	ldw	r2,-32(fp)
  1519fc:	1885283a 	div	r2,r3,r2
  151a00:	00cee6f4 	movhi	r3,15259
  151a04:	18f27fc4 	addi	r3,r3,-13825
  151a08:	18800b16 	blt	r3,r2,151a38 <display_trg_delay+0x24c>
  151a0c:	e0fff917 	ldw	r3,-28(fp)
  151a10:	e0bff817 	ldw	r2,-32(fp)
  151a14:	1887283a 	div	r3,r3,r2
  151a18:	00b11974 	movhi	r2,50277
  151a1c:	108d8044 	addi	r2,r2,13825
  151a20:	18800516 	blt	r3,r2,151a38 <display_trg_delay+0x24c>
        /* delay is in seconds */
		delay_str[7] = 's';
  151a24:	00801cc4 	movi	r2,115
  151a28:	e0bffbc5 	stb	r2,-17(fp)
		delay_str[8] = ' ';
  151a2c:	00800804 	movi	r2,32
  151a30:	e0bffc05 	stb	r2,-16(fp)
  151a34:	00000406 	br	151a48 <display_trg_delay+0x25c>
    } else  {
        /* delay is in kiloseconds */
		delay_str[7] = 'k';
  151a38:	00801ac4 	movi	r2,107
  151a3c:	e0bffbc5 	stb	r2,-17(fp)
		delay_str[8] = 's';
  151a40:	00801cc4 	movi	r2,115
  151a44:	e0bffc05 	stb	r2,-16(fp)
    }


    /* now actually display the trigger delay */
    plot_string(x_pos, y_pos, delay_str, style);
  151a48:	e0bfff17 	ldw	r2,-4(fp)
  151a4c:	e0fffa04 	addi	r3,fp,-24
  151a50:	e13ffd17 	ldw	r4,-12(fp)
  151a54:	e17ffe17 	ldw	r5,-8(fp)
  151a58:	180d883a 	mov	r6,r3
  151a5c:	100f883a 	mov	r7,r2
  151a60:	01506900 	call	150690 <plot_string>


    /* all done displaying the trigger delay - return */
    return;

}
  151a64:	e037883a 	mov	sp,fp
  151a68:	dfc00117 	ldw	ra,4(sp)
  151a6c:	df000017 	ldw	fp,0(sp)
  151a70:	dec00204 	addi	sp,sp,8
  151a74:	f800283a 	ret

00151a78 <cvt_num_field>:
   Last Modified:    Mar. 8, 1994

*/

void  cvt_num_field(long int n, char *s)
{
  151a78:	defffa04 	addi	sp,sp,-24
  151a7c:	df000515 	stw	fp,20(sp)
  151a80:	df000504 	addi	fp,sp,20
  151a84:	e13ffe15 	stw	r4,-8(fp)
  151a88:	e17fff15 	stw	r5,-4(fp)
    /* variables */
    int  dp = 3;		/* digits to right of decimal point */
  151a8c:	008000c4 	movi	r2,3
  151a90:	e0bffb15 	stw	r2,-20(fp)
    int  d;			/* digit weight (power of 10) */

    int  i = 0;			/* string index */
  151a94:	e03ffd15 	stw	zero,-12(fp)



    /* first get the sign (and make n positive for conversion) */
    if (n < 0)  {
  151a98:	e0bffe17 	ldw	r2,-8(fp)
  151a9c:	10000c0e 	bge	r2,zero,151ad0 <cvt_num_field+0x58>
        /* n is negative, set sign and convert to positive */
	s[i++] = '-';
  151aa0:	e0bffd17 	ldw	r2,-12(fp)
  151aa4:	e0ffff17 	ldw	r3,-4(fp)
  151aa8:	1885883a 	add	r2,r3,r2
  151aac:	00c00b44 	movi	r3,45
  151ab0:	10c00005 	stb	r3,0(r2)
  151ab4:	e0bffd17 	ldw	r2,-12(fp)
  151ab8:	10800044 	addi	r2,r2,1
  151abc:	e0bffd15 	stw	r2,-12(fp)
	n = -n;
  151ac0:	e0bffe17 	ldw	r2,-8(fp)
  151ac4:	0085c83a 	sub	r2,zero,r2
  151ac8:	e0bffe15 	stw	r2,-8(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  151acc:	00001006 	br	151b10 <cvt_num_field+0x98>
	s[i++] = '-';
	n = -n;
    }
    else  {
        /* n is positive, set sign only */
	s[i++] = '+';
  151ad0:	e0bffd17 	ldw	r2,-12(fp)
  151ad4:	e0ffff17 	ldw	r3,-4(fp)
  151ad8:	1885883a 	add	r2,r3,r2
  151adc:	00c00ac4 	movi	r3,43
  151ae0:	10c00005 	stb	r3,0(r2)
  151ae4:	e0bffd17 	ldw	r2,-12(fp)
  151ae8:	10800044 	addi	r2,r2,1
  151aec:	e0bffd15 	stw	r2,-12(fp)
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  151af0:	00000706 	br	151b10 <cvt_num_field+0x98>
        /* have more than 4 digits - get rid of one */
	n /= 10;
  151af4:	e0fffe17 	ldw	r3,-8(fp)
  151af8:	00800284 	movi	r2,10
  151afc:	1885283a 	div	r2,r3,r2
  151b00:	e0bffe15 	stw	r2,-8(fp)
	/* adjust the decimal point */
	dp--;
  151b04:	e0bffb17 	ldw	r2,-20(fp)
  151b08:	10bfffc4 	addi	r2,r2,-1
  151b0c:	e0bffb15 	stw	r2,-20(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  151b10:	e0bffe17 	ldw	r2,-8(fp)
  151b14:	1089c408 	cmpgei	r2,r2,10000
  151b18:	103ff61e 	bne	r2,zero,151af4 <cvt_num_field+0x7c>
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
  151b1c:	00000306 	br	151b2c <cvt_num_field+0xb4>
       dp += 3;
  151b20:	e0bffb17 	ldw	r2,-20(fp)
  151b24:	108000c4 	addi	r2,r2,3
  151b28:	e0bffb15 	stw	r2,-20(fp)
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
  151b2c:	e0bffb17 	ldw	r2,-20(fp)
  151b30:	00bffb0e 	bge	zero,r2,151b20 <cvt_num_field+0xa8>
       dp += 3;


    /* adjust dp to be digits to the right of the decimal point */
    /* (assuming 4 digits) */
    dp = 4 - dp;
  151b34:	00c00104 	movi	r3,4
  151b38:	e0bffb17 	ldw	r2,-20(fp)
  151b3c:	1885c83a 	sub	r2,r3,r2
  151b40:	e0bffb15 	stw	r2,-20(fp)


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
  151b44:	0080fa04 	movi	r2,1000
  151b48:	e0bffc15 	stw	r2,-16(fp)
  151b4c:	00002506 	br	151be4 <cvt_num_field+0x16c>

        /* check if need decimal the decimal point now */
	if (dp-- == 0)
  151b50:	e0bffb17 	ldw	r2,-20(fp)
  151b54:	1005003a 	cmpeq	r2,r2,zero
  151b58:	e0fffb17 	ldw	r3,-20(fp)
  151b5c:	18ffffc4 	addi	r3,r3,-1
  151b60:	e0fffb15 	stw	r3,-20(fp)
  151b64:	10803fcc 	andi	r2,r2,255
  151b68:	10000826 	beq	r2,zero,151b8c <cvt_num_field+0x114>
	    /* time for decimal point */
	    s[i++] = '.';
  151b6c:	e0bffd17 	ldw	r2,-12(fp)
  151b70:	e0ffff17 	ldw	r3,-4(fp)
  151b74:	1885883a 	add	r2,r3,r2
  151b78:	00c00b84 	movi	r3,46
  151b7c:	10c00005 	stb	r3,0(r2)
  151b80:	e0bffd17 	ldw	r2,-12(fp)
  151b84:	10800044 	addi	r2,r2,1
  151b88:	e0bffd15 	stw	r2,-12(fp)

	/* get and convert this digit */
	s[i++] = (n / d) + '0';
  151b8c:	e0bffd17 	ldw	r2,-12(fp)
  151b90:	e0ffff17 	ldw	r3,-4(fp)
  151b94:	1885883a 	add	r2,r3,r2
  151b98:	e13ffe17 	ldw	r4,-8(fp)
  151b9c:	e0fffc17 	ldw	r3,-16(fp)
  151ba0:	20c7283a 	div	r3,r4,r3
  151ba4:	18c00c04 	addi	r3,r3,48
  151ba8:	10c00005 	stb	r3,0(r2)
  151bac:	e0bffd17 	ldw	r2,-12(fp)
  151bb0:	10800044 	addi	r2,r2,1
  151bb4:	e0bffd15 	stw	r2,-12(fp)
	/* remove this digit from n */
	n %= d;
  151bb8:	e0bffe17 	ldw	r2,-8(fp)
  151bbc:	e0fffc17 	ldw	r3,-16(fp)
  151bc0:	10c9283a 	div	r4,r2,r3
  151bc4:	e0fffc17 	ldw	r3,-16(fp)
  151bc8:	20c7383a 	mul	r3,r4,r3
  151bcc:	10c5c83a 	sub	r2,r2,r3
  151bd0:	e0bffe15 	stw	r2,-8(fp)
    /* (assuming 4 digits) */
    dp = 4 - dp;


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
  151bd4:	e0fffc17 	ldw	r3,-16(fp)
  151bd8:	00800284 	movi	r2,10
  151bdc:	1885283a 	div	r2,r3,r2
  151be0:	e0bffc15 	stw	r2,-16(fp)
  151be4:	e0bffc17 	ldw	r2,-16(fp)
  151be8:	00bfd916 	blt	zero,r2,151b50 <cvt_num_field+0xd8>
	n %= d;
    }


    /* all done converting the number, return */
    return;
  151bec:	0001883a 	nop

}
  151bf0:	e037883a 	mov	sp,fp
  151bf4:	df000017 	ldw	fp,0(sp)
  151bf8:	dec00104 	addi	sp,sp,4
  151bfc:	f800283a 	ret

00151c00 <get_test_sample>:
   Last Modified:    May 3, 2006

*/

void  get_test_sample(long int sample_rate, int sample_size, unsigned char *sample)
{
  151c00:	deff8104 	addi	sp,sp,-508
  151c04:	dfc07e15 	stw	ra,504(sp)
  151c08:	df007d15 	stw	fp,500(sp)
  151c0c:	df007d04 	addi	fp,sp,500
  151c10:	e13ffd15 	stw	r4,-12(fp)
  151c14:	e17ffe15 	stw	r5,-8(fp)
  151c18:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* a half-cycle of the ringing square wave */
    const unsigned char  waveform[] =
  151c1c:	00800574 	movhi	r2,21
  151c20:	1093b604 	addi	r2,r2,20184
  151c24:	e13f8504 	addi	r4,fp,-492
  151c28:	1007883a 	mov	r3,r2
  151c2c:	00807804 	movi	r2,480
  151c30:	180b883a 	mov	r5,r3
  151c34:	100d883a 	mov	r6,r2
  151c38:	0153d140 	call	153d14 <memcpy>
	    63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,
	    63,  63,  63,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,
	    64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64
	  };

    long int  sample_pt = 0;	/* current sample within the waveform */
  151c3c:	e03f8315 	stw	zero,-500(fp)

    int       sample_sign = 1;	/* sample waveform sign */
  151c40:	00800044 	movi	r2,1
  151c44:	e0bf8415 	stw	r2,-496(fp)



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
  151c48:	00002f06 	br	151d08 <get_test_sample+0x108>

        /* get this sample point (value based on sign) */
	if (sample_sign > 0)
  151c4c:	e0bf8417 	ldw	r2,-496(fp)
  151c50:	00800e0e 	bge	zero,r2,151c8c <get_test_sample+0x8c>
	    *sample++ = waveform[sample_pt/20] + 127;
  151c54:	e0ff8317 	ldw	r3,-500(fp)
  151c58:	00800504 	movi	r2,20
  151c5c:	1885283a 	div	r2,r3,r2
  151c60:	e0ff8504 	addi	r3,fp,-492
  151c64:	1885883a 	add	r2,r3,r2
  151c68:	10800003 	ldbu	r2,0(r2)
  151c6c:	10801fc4 	addi	r2,r2,127
  151c70:	1007883a 	mov	r3,r2
  151c74:	e0bfff17 	ldw	r2,-4(fp)
  151c78:	10c00005 	stb	r3,0(r2)
  151c7c:	e0bfff17 	ldw	r2,-4(fp)
  151c80:	10800044 	addi	r2,r2,1
  151c84:	e0bfff15 	stw	r2,-4(fp)
  151c88:	00000e06 	br	151cc4 <get_test_sample+0xc4>
	else
	    *sample++ = 128 - waveform[sample_pt/20];
  151c8c:	e0ff8317 	ldw	r3,-500(fp)
  151c90:	00800504 	movi	r2,20
  151c94:	1885283a 	div	r2,r3,r2
  151c98:	e0ff8504 	addi	r3,fp,-492
  151c9c:	1885883a 	add	r2,r3,r2
  151ca0:	10800003 	ldbu	r2,0(r2)
  151ca4:	00ffe004 	movi	r3,-128
  151ca8:	1885c83a 	sub	r2,r3,r2
  151cac:	1007883a 	mov	r3,r2
  151cb0:	e0bfff17 	ldw	r2,-4(fp)
  151cb4:	10c00005 	stb	r3,0(r2)
  151cb8:	e0bfff17 	ldw	r2,-4(fp)
  151cbc:	10800044 	addi	r2,r2,1
  151cc0:	e0bfff15 	stw	r2,-4(fp)

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
  151cc4:	00c02674 	movhi	r3,153
  151cc8:	18e5a004 	addi	r3,r3,-27008
  151ccc:	e0bffd17 	ldw	r2,-12(fp)
  151cd0:	1885283a 	div	r2,r3,r2
  151cd4:	e0ff8317 	ldw	r3,-500(fp)
  151cd8:	1885883a 	add	r2,r3,r2
  151cdc:	e0bf8315 	stw	r2,-500(fp)
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
  151ce0:	00000606 	br	151cfc <get_test_sample+0xfc>
	    /* keep sample_pt within the test waveform */
	    sample_pt -= (20 * NO_TEST_PTS);
  151ce4:	e0bf8317 	ldw	r2,-500(fp)
  151ce8:	10b6a004 	addi	r2,r2,-9600
  151cec:	e0bf8315 	stw	r2,-500(fp)
	    /* each time through the waveform, invert it */
	    sample_sign = -sample_sign;
  151cf0:	e0bf8417 	ldw	r2,-496(fp)
  151cf4:	0085c83a 	sub	r2,zero,r2
  151cf8:	e0bf8415 	stw	r2,-496(fp)
	    *sample++ = 128 - waveform[sample_pt/20];

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
  151cfc:	e0bf8317 	ldw	r2,-500(fp)
  151d00:	10896028 	cmpgeui	r2,r2,9600
  151d04:	103ff71e 	bne	r2,zero,151ce4 <get_test_sample+0xe4>
    int       sample_sign = 1;	/* sample waveform sign */



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
  151d08:	e0bffe17 	ldw	r2,-8(fp)
  151d0c:	0084803a 	cmplt	r2,zero,r2
  151d10:	e0fffe17 	ldw	r3,-8(fp)
  151d14:	18ffffc4 	addi	r3,r3,-1
  151d18:	e0fffe15 	stw	r3,-8(fp)
  151d1c:	10803fcc 	andi	r2,r2,255
  151d20:	103fca1e 	bne	r2,zero,151c4c <get_test_sample+0x4c>


    /* done getting the sample - return */
    return;

}
  151d24:	e037883a 	mov	sp,fp
  151d28:	dfc00117 	ldw	ra,4(sp)
  151d2c:	df000017 	ldw	fp,0(sp)
  151d30:	dec00204 	addi	sp,sp,8
  151d34:	f800283a 	ret

00151d38 <init_trace>:
   Last Modified:    May 9, 2006

*/

void  init_trace()
{
  151d38:	defffe04 	addi	sp,sp,-8
  151d3c:	dfc00115 	stw	ra,4(sp)
  151d40:	df000015 	stw	fp,0(sp)
  151d44:	d839883a 	mov	fp,sp


    /* initialize system status variables */

    /* ready for a trace */
    trace_status = TRUE;
  151d48:	00800044 	movi	r2,1
  151d4c:	d0a2f915 	stw	r2,-29724(gp)

    /* not currently sampling data */
    sampling = FALSE;
  151d50:	d022ff15 	stw	zero,-29700(gp)

    /* turn off the displayed scale */
    cur_scale = SCALE_NONE;
  151d54:	d022f815 	stw	zero,-29728(gp)

    /* sample size is the screen size */
    sample_size = SIZE_X;
  151d58:	00807804 	movi	r2,480
  151d5c:	d0a2fc15 	stw	r2,-29712(gp)


    /* clear save areas */
    clear_saved_areas();
  151d60:	015228c0 	call	15228c <clear_saved_areas>

    /* also clear the general saved area location variables (off-screen) */
    saved_pos_x = SIZE_X + 1;
  151d64:	00807844 	movi	r2,481
  151d68:	d0a2fe15 	stw	r2,-29704(gp)
    saved_pos_y = SIZE_Y + 1;
  151d6c:	00804444 	movi	r2,273
  151d70:	d0a2fb15 	stw	r2,-29716(gp)
    saved_end_x = SIZE_X + 1;
  151d74:	00807844 	movi	r2,481
  151d78:	d0a2fd15 	stw	r2,-29708(gp)
    saved_end_y = SIZE_Y + 1;
  151d7c:	00804444 	movi	r2,273
  151d80:	d0a2fa15 	stw	r2,-29720(gp)


    /* done initializing, return */
    return;
  151d84:	0001883a 	nop

}
  151d88:	e037883a 	mov	sp,fp
  151d8c:	dfc00117 	ldw	ra,4(sp)
  151d90:	df000017 	ldw	fp,0(sp)
  151d94:	dec00204 	addi	sp,sp,8
  151d98:	f800283a 	ret

00151d9c <set_mode>:
   Last Modified:    May 27, 2008

*/

void  set_mode(enum trigger_type trigger_mode)
{
  151d9c:	defffe04 	addi	sp,sp,-8
  151da0:	df000115 	stw	fp,4(sp)
  151da4:	df000104 	addi	fp,sp,4
  151da8:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* if not one-shot triggering - ready for trace too */
    trace_status = (trigger_mode != ONESHOT_TRIGGER);
  151dac:	e0bfff17 	ldw	r2,-4(fp)
  151db0:	10800098 	cmpnei	r2,r2,2
  151db4:	10803fcc 	andi	r2,r2,255
  151db8:	d0a2f915 	stw	r2,-29724(gp)


    /* turn off the sampling flag so will start a new sample */
    sampling = FALSE;
  151dbc:	d022ff15 	stw	zero,-29700(gp)


    /* all done, return */
    return;
  151dc0:	0001883a 	nop

}
  151dc4:	e037883a 	mov	sp,fp
  151dc8:	df000017 	ldw	fp,0(sp)
  151dcc:	dec00104 	addi	sp,sp,4
  151dd0:	f800283a 	ret

00151dd4 <is_sampling>:
   Last Modified:    May 27, 2008

*/

int  is_sampling()
{
  151dd4:	deffff04 	addi	sp,sp,-4
  151dd8:	df000015 	stw	fp,0(sp)
  151ddc:	d839883a 	mov	fp,sp
      /* none */



    /* currently sampling if sampling flag is set */
    return  sampling;
  151de0:	d0a2ff17 	ldw	r2,-29700(gp)

}
  151de4:	e037883a 	mov	sp,fp
  151de8:	df000017 	ldw	fp,0(sp)
  151dec:	dec00104 	addi	sp,sp,4
  151df0:	f800283a 	ret

00151df4 <trace_rdy>:
   Last Modified:    Mar. 13, 1994

*/

int  trace_rdy()
{
  151df4:	deffff04 	addi	sp,sp,-4
  151df8:	df000015 	stw	fp,0(sp)
  151dfc:	d839883a 	mov	fp,sp
      /* none */



    /* ready for another trace if not sampling and trace is ready */
    return  (!sampling && trace_status);
  151e00:	d0a2ff17 	ldw	r2,-29700(gp)
  151e04:	1000041e 	bne	r2,zero,151e18 <trace_rdy+0x24>
  151e08:	d0a2f917 	ldw	r2,-29724(gp)
  151e0c:	10000226 	beq	r2,zero,151e18 <trace_rdy+0x24>
  151e10:	00800044 	movi	r2,1
  151e14:	00000106 	br	151e1c <trace_rdy+0x28>
  151e18:	0005883a 	mov	r2,zero

}
  151e1c:	e037883a 	mov	sp,fp
  151e20:	df000017 	ldw	fp,0(sp)
  151e24:	dec00104 	addi	sp,sp,4
  151e28:	f800283a 	ret

00151e2c <trace_done>:
   Last Modified:    May 9, 2006

*/

void  trace_done()
{
  151e2c:	defffe04 	addi	sp,sp,-8
  151e30:	dfc00115 	stw	ra,4(sp)
  151e34:	df000015 	stw	fp,0(sp)
  151e38:	d839883a 	mov	fp,sp
      /* none */



    /* done with a trace - if retriggering, ready for another one */
    if (get_trigger_mode() != ONESHOT_TRIGGER)
  151e3c:	0150f000 	call	150f00 <get_trigger_mode>
  151e40:	108000a0 	cmpeqi	r2,r2,2
  151e44:	1000021e 	bne	r2,zero,151e50 <trace_done+0x24>
        /* in a retriggering mode - set trace_status to TRUE (ready) */
	trace_status = TRUE;
  151e48:	00800044 	movi	r2,1
  151e4c:	d0a2f915 	stw	r2,-29724(gp)

    /* no longer sampling data */
    sampling = FALSE;
  151e50:	d022ff15 	stw	zero,-29700(gp)


    /* done so return */
    return;
  151e54:	0001883a 	nop

}
  151e58:	e037883a 	mov	sp,fp
  151e5c:	dfc00117 	ldw	ra,4(sp)
  151e60:	df000017 	ldw	fp,0(sp)
  151e64:	dec00204 	addi	sp,sp,8
  151e68:	f800283a 	ret

00151e6c <trace_rearm>:
   Last Modified:    Mar. 8, 1994

*/

void  trace_rearm()
{
  151e6c:	deffff04 	addi	sp,sp,-4
  151e70:	df000015 	stw	fp,0(sp)
  151e74:	d839883a 	mov	fp,sp
      /* none */



    /* rearm the trace - set status to ready (TRUE) */
    trace_status = TRUE;
  151e78:	00800044 	movi	r2,1
  151e7c:	d0a2f915 	stw	r2,-29724(gp)


    /* all done - return */
    return;
  151e80:	0001883a 	nop

}
  151e84:	e037883a 	mov	sp,fp
  151e88:	df000017 	ldw	fp,0(sp)
  151e8c:	dec00104 	addi	sp,sp,4
  151e90:	f800283a 	ret

00151e94 <set_trace_size>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trace_size(int size)
{
  151e94:	defffe04 	addi	sp,sp,-8
  151e98:	df000115 	stw	fp,4(sp)
  151e9c:	df000104 	addi	fp,sp,4
  151ea0:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the locally global sample size */
    sample_size = size;
  151ea4:	e0bfff17 	ldw	r2,-4(fp)
  151ea8:	d0a2fc15 	stw	r2,-29712(gp)


    /* all done, return */
    return;
  151eac:	0001883a 	nop

}
  151eb0:	e037883a 	mov	sp,fp
  151eb4:	df000017 	ldw	fp,0(sp)
  151eb8:	dec00104 	addi	sp,sp,4
  151ebc:	f800283a 	ret

00151ec0 <set_display_scale>:
   Last Modified:    May 9, 2006

*/

void  set_display_scale(enum scale_type scale)
{
  151ec0:	defffa04 	addi	sp,sp,-24
  151ec4:	dfc00515 	stw	ra,20(sp)
  151ec8:	df000415 	stw	fp,16(sp)
  151ecc:	df000404 	addi	fp,sp,16
  151ed0:	e13fff15 	stw	r4,-4(fp)



    /* whenever change scale type, need to clear out previous scale */
    /* unnecessary if going to SCALE_GRID or from SCALE_NONE or not changing the scale */
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {
  151ed4:	e0bfff17 	ldw	r2,-4(fp)
  151ed8:	108000a0 	cmpeqi	r2,r2,2
  151edc:	10008d1e 	bne	r2,zero,152114 <set_display_scale+0x254>
  151ee0:	d0a2f817 	ldw	r2,-29728(gp)
  151ee4:	10008b26 	beq	r2,zero,152114 <set_display_scale+0x254>
  151ee8:	d0a2f817 	ldw	r2,-29728(gp)
  151eec:	e0ffff17 	ldw	r3,-4(fp)
  151ef0:	18808826 	beq	r3,r2,152114 <set_display_scale+0x254>

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  151ef4:	00bfff84 	movi	r2,-2
  151ef8:	e0bffe15 	stw	r2,-8(fp)
  151efc:	00003e06 	br	151ff8 <set_display_scale+0x138>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
  151f00:	e0bffe17 	ldw	r2,-8(fp)
  151f04:	10800c24 	muli	r2,r2,48
  151f08:	10802204 	addi	r2,r2,136
  151f0c:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
  151f10:	e0bffc17 	ldw	r2,-16(fp)
  151f14:	10804410 	cmplti	r2,r2,272
  151f18:	1000021e 	bne	r2,zero,151f24 <set_display_scale+0x64>
	        p = PLOT_SIZE_Y - 1;
  151f1c:	008043c4 	movi	r2,271
  151f20:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
  151f24:	e0bffc17 	ldw	r2,-16(fp)
  151f28:	1000010e 	bge	r2,zero,151f30 <set_display_scale+0x70>
	        p = 0;
  151f2c:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
  151f30:	e03ffd15 	stw	zero,-12(fp)
  151f34:	00002a06 	br	151fe0 <set_display_scale+0x120>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_x[j + Y_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
  151f38:	e0bffe17 	ldw	r2,-8(fp)
  151f3c:	11000084 	addi	r4,r2,2
  151f40:	e0bffd17 	ldw	r2,-12(fp)
  151f44:	1000010e 	bge	r2,zero,151f4c <set_display_scale+0x8c>
  151f48:	108001c4 	addi	r2,r2,7
  151f4c:	1005d0fa 	srai	r2,r2,3
  151f50:	00c005b4 	movhi	r3,22
  151f54:	18e47a84 	addi	r3,r3,-28182
  151f58:	21000f24 	muli	r4,r4,60
  151f5c:	2085883a 	add	r2,r4,r2
  151f60:	1885883a 	add	r2,r3,r2
  151f64:	10800003 	ldbu	r2,0(r2)
  151f68:	10c03fcc 	andi	r3,r2,255
  151f6c:	e13ffd17 	ldw	r4,-12(fp)
  151f70:	00a00034 	movhi	r2,32768
  151f74:	108001c4 	addi	r2,r2,7
  151f78:	2084703a 	and	r2,r4,r2
  151f7c:	1000040e 	bge	r2,zero,151f90 <set_display_scale+0xd0>
  151f80:	10bfffc4 	addi	r2,r2,-1
  151f84:	013ffe04 	movi	r4,-8
  151f88:	1104b03a 	or	r2,r2,r4
  151f8c:	10800044 	addi	r2,r2,1
  151f90:	01002004 	movi	r4,128
  151f94:	2085d83a 	sra	r2,r4,r2
  151f98:	1884703a 	and	r2,r3,r2
  151f9c:	1000071e 	bne	r2,zero,151fbc <set_display_scale+0xfc>
		    /* saved pixel is off */
		    plot_pixel(i, p, PIXEL_WHITE);
  151fa0:	e0fffd17 	ldw	r3,-12(fp)
  151fa4:	e0bffc17 	ldw	r2,-16(fp)
  151fa8:	1809883a 	mov	r4,r3
  151fac:	100b883a 	mov	r5,r2
  151fb0:	01bfdfd4 	movui	r6,65407
  151fb4:	01538240 	call	153824 <plot_pixel>
  151fb8:	00000606 	br	151fd4 <set_display_scale+0x114>
		else
		    /* saved pixel is on */
		    plot_pixel(i, p, PIXEL_BLACK);
  151fbc:	e0fffd17 	ldw	r3,-12(fp)
  151fc0:	e0bffc17 	ldw	r2,-16(fp)
  151fc4:	1809883a 	mov	r4,r3
  151fc8:	100b883a 	mov	r5,r2
  151fcc:	000d883a 	mov	r6,zero
  151fd0:	01538240 	call	153824 <plot_pixel>
	        p = PLOT_SIZE_Y - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
  151fd4:	e0bffd17 	ldw	r2,-12(fp)
  151fd8:	10800044 	addi	r2,r2,1
  151fdc:	e0bffd15 	stw	r2,-12(fp)
  151fe0:	e0bffd17 	ldw	r2,-12(fp)
  151fe4:	10807810 	cmplti	r2,r2,480
  151fe8:	103fd31e 	bne	r2,zero,151f38 <set_display_scale+0x78>
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  151fec:	e0bffe17 	ldw	r2,-8(fp)
  151ff0:	10800044 	addi	r2,r2,1
  151ff4:	e0bffe15 	stw	r2,-8(fp)
  151ff8:	e0bffe17 	ldw	r2,-8(fp)
  151ffc:	108000d0 	cmplti	r2,r2,3
  152000:	103fbf1e 	bne	r2,zero,151f00 <set_display_scale+0x40>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  152004:	00bffec4 	movi	r2,-5
  152008:	e0bffe15 	stw	r2,-8(fp)
  15200c:	00003e06 	br	152108 <set_display_scale+0x248>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
  152010:	e0bffe17 	ldw	r2,-8(fp)
  152014:	10800c24 	muli	r2,r2,48
  152018:	10803c04 	addi	r2,r2,240
  15201c:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
  152020:	e0bffc17 	ldw	r2,-16(fp)
  152024:	10807810 	cmplti	r2,r2,480
  152028:	1000021e 	bne	r2,zero,152034 <set_display_scale+0x174>
	        p = PLOT_SIZE_X - 1;
  15202c:	008077c4 	movi	r2,479
  152030:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
  152034:	e0bffc17 	ldw	r2,-16(fp)
  152038:	1000010e 	bge	r2,zero,152040 <set_display_scale+0x180>
	        p = 0;
  15203c:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
  152040:	e03ffd15 	stw	zero,-12(fp)
  152044:	00002a06 	br	1520f0 <set_display_scale+0x230>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_y[j + X_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
  152048:	e0bffe17 	ldw	r2,-8(fp)
  15204c:	11000144 	addi	r4,r2,5
  152050:	e0bffd17 	ldw	r2,-12(fp)
  152054:	1000010e 	bge	r2,zero,15205c <set_display_scale+0x19c>
  152058:	108001c4 	addi	r2,r2,7
  15205c:	1005d0fa 	srai	r2,r2,3
  152060:	00c005b4 	movhi	r3,22
  152064:	18e41d04 	addi	r3,r3,-28556
  152068:	210008a4 	muli	r4,r4,34
  15206c:	2085883a 	add	r2,r4,r2
  152070:	1885883a 	add	r2,r3,r2
  152074:	10800003 	ldbu	r2,0(r2)
  152078:	10c03fcc 	andi	r3,r2,255
  15207c:	e13ffd17 	ldw	r4,-12(fp)
  152080:	00a00034 	movhi	r2,32768
  152084:	108001c4 	addi	r2,r2,7
  152088:	2084703a 	and	r2,r4,r2
  15208c:	1000040e 	bge	r2,zero,1520a0 <set_display_scale+0x1e0>
  152090:	10bfffc4 	addi	r2,r2,-1
  152094:	013ffe04 	movi	r4,-8
  152098:	1104b03a 	or	r2,r2,r4
  15209c:	10800044 	addi	r2,r2,1
  1520a0:	01002004 	movi	r4,128
  1520a4:	2085d83a 	sra	r2,r4,r2
  1520a8:	1884703a 	and	r2,r3,r2
  1520ac:	1000071e 	bne	r2,zero,1520cc <set_display_scale+0x20c>
		    /* saved pixel is off */
		    plot_pixel(p, i, PIXEL_WHITE);
  1520b0:	e0fffc17 	ldw	r3,-16(fp)
  1520b4:	e0bffd17 	ldw	r2,-12(fp)
  1520b8:	1809883a 	mov	r4,r3
  1520bc:	100b883a 	mov	r5,r2
  1520c0:	01bfdfd4 	movui	r6,65407
  1520c4:	01538240 	call	153824 <plot_pixel>
  1520c8:	00000606 	br	1520e4 <set_display_scale+0x224>
		else
		    /* saved pixel is on */
		    plot_pixel(p, i, PIXEL_BLACK);
  1520cc:	e0fffc17 	ldw	r3,-16(fp)
  1520d0:	e0bffd17 	ldw	r2,-12(fp)
  1520d4:	1809883a 	mov	r4,r3
  1520d8:	100b883a 	mov	r5,r2
  1520dc:	000d883a 	mov	r6,zero
  1520e0:	01538240 	call	153824 <plot_pixel>
	        p = PLOT_SIZE_X - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
  1520e4:	e0bffd17 	ldw	r2,-12(fp)
  1520e8:	10800044 	addi	r2,r2,1
  1520ec:	e0bffd15 	stw	r2,-12(fp)
  1520f0:	e0bffd17 	ldw	r2,-12(fp)
  1520f4:	10804410 	cmplti	r2,r2,272
  1520f8:	103fd31e 	bne	r2,zero,152048 <set_display_scale+0x188>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  1520fc:	e0bffe17 	ldw	r2,-8(fp)
  152100:	10800044 	addi	r2,r2,1
  152104:	e0bffe15 	stw	r2,-8(fp)
  152108:	e0bffe17 	ldw	r2,-8(fp)
  15210c:	10800190 	cmplti	r2,r2,6
  152110:	103fbf1e 	bne	r2,zero,152010 <set_display_scale+0x150>
	}
    }


    /* now handle the scale type appropriately */
    switch (scale)  {
  152114:	e0bfff17 	ldw	r2,-4(fp)
  152118:	10005326 	beq	r2,zero,152268 <set_display_scale+0x3a8>
  15211c:	108000e8 	cmpgeui	r2,r2,3
  152120:	1000521e 	bne	r2,zero,15226c <set_display_scale+0x3ac>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
  152124:	00bfff84 	movi	r2,-2
  152128:	e0bffd15 	stw	r2,-12(fp)
  15212c:	00002206 	br	1521b8 <set_display_scale+0x2f8>

				/* get y position of the line */
				p = X_AXIS_POS + i * Y_TICK_SIZE;
  152130:	e0bffd17 	ldw	r2,-12(fp)
  152134:	10800c24 	muli	r2,r2,48
  152138:	10802204 	addi	r2,r2,136
  15213c:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_Y)
  152140:	e0bffc17 	ldw	r2,-16(fp)
  152144:	10804410 	cmplti	r2,r2,272
  152148:	1000021e 	bne	r2,zero,152154 <set_display_scale+0x294>
				    p = PLOT_SIZE_Y - 1;
  15214c:	008043c4 	movi	r2,271
  152150:	e0bffc15 	stw	r2,-16(fp)
				if (p < 0)
  152154:	e0bffc17 	ldw	r2,-16(fp)
  152158:	1000010e 	bge	r2,zero,152160 <set_display_scale+0x2a0>
				    p = 0;
  15215c:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
  152160:	e0bfff17 	ldw	r2,-4(fp)
  152164:	10800098 	cmpnei	r2,r2,2
  152168:	1000051e 	bne	r2,zero,152180 <set_display_scale+0x2c0>
				    /* drawing a grid line */
			            plot_hline(X_GRID_START, p, (X_GRID_END - X_GRID_START));
  15216c:	0009883a 	mov	r4,zero
  152170:	e17ffc17 	ldw	r5,-16(fp)
  152174:	018077c4 	movi	r6,479
  152178:	01503d00 	call	1503d0 <plot_hline>
  15217c:	00000b06 	br	1521ac <set_display_scale+0x2ec>
				else if (i == 0)
  152180:	e0bffd17 	ldw	r2,-12(fp)
  152184:	1000051e 	bne	r2,zero,15219c <set_display_scale+0x2dc>
				    /* drawing the x axis */
			            plot_hline(X_AXIS_START, p, (X_AXIS_END - X_AXIS_START));
  152188:	0009883a 	mov	r4,zero
  15218c:	e17ffc17 	ldw	r5,-16(fp)
  152190:	018077c4 	movi	r6,479
  152194:	01503d00 	call	1503d0 <plot_hline>
  152198:	00000406 	br	1521ac <set_display_scale+0x2ec>
				else
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
  15219c:	01003b84 	movi	r4,238
  1521a0:	e17ffc17 	ldw	r5,-16(fp)
  1521a4:	01800144 	movi	r6,5
  1521a8:	01503d00 	call	1503d0 <plot_hline>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
  1521ac:	e0bffd17 	ldw	r2,-12(fp)
  1521b0:	10800044 	addi	r2,r2,1
  1521b4:	e0bffd15 	stw	r2,-12(fp)
  1521b8:	e0bffd17 	ldw	r2,-12(fp)
  1521bc:	108000d0 	cmplti	r2,r2,3
  1521c0:	103fdb1e 	bne	r2,zero,152130 <set_display_scale+0x270>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
  1521c4:	00bffec4 	movi	r2,-5
  1521c8:	e0bffd15 	stw	r2,-12(fp)
  1521cc:	00002206 	br	152258 <set_display_scale+0x398>

				/* get x position of the line */
				p = Y_AXIS_POS + i * X_TICK_SIZE;
  1521d0:	e0bffd17 	ldw	r2,-12(fp)
  1521d4:	10800c24 	muli	r2,r2,48
  1521d8:	10803c04 	addi	r2,r2,240
  1521dc:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_X)
  1521e0:	e0bffc17 	ldw	r2,-16(fp)
  1521e4:	10807810 	cmplti	r2,r2,480
  1521e8:	1000021e 	bne	r2,zero,1521f4 <set_display_scale+0x334>
				    p = PLOT_SIZE_X - 1;
  1521ec:	008077c4 	movi	r2,479
  1521f0:	e0bffc15 	stw	r2,-16(fp)
			        if (p < 0)
  1521f4:	e0bffc17 	ldw	r2,-16(fp)
  1521f8:	1000010e 	bge	r2,zero,152200 <set_display_scale+0x340>
				    p = 0;
  1521fc:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
  152200:	e0bfff17 	ldw	r2,-4(fp)
  152204:	10800098 	cmpnei	r2,r2,2
  152208:	1000051e 	bne	r2,zero,152220 <set_display_scale+0x360>
				    /* drawing a grid line */
			            plot_vline(p, Y_GRID_START, (Y_GRID_END - Y_GRID_START));
  15220c:	e13ffc17 	ldw	r4,-16(fp)
  152210:	000b883a 	mov	r5,zero
  152214:	018043c4 	movi	r6,271
  152218:	015047c0 	call	15047c <plot_vline>
  15221c:	00000b06 	br	15224c <set_display_scale+0x38c>
				else if (i == 0)
  152220:	e0bffd17 	ldw	r2,-12(fp)
  152224:	1000051e 	bne	r2,zero,15223c <set_display_scale+0x37c>
				    /* drawing the y axis */
			            plot_vline(p, Y_AXIS_START, (Y_AXIS_END - Y_AXIS_START));
  152228:	e13ffc17 	ldw	r4,-16(fp)
  15222c:	000b883a 	mov	r5,zero
  152230:	018043c4 	movi	r6,271
  152234:	015047c0 	call	15047c <plot_vline>
  152238:	00000406 	br	15224c <set_display_scale+0x38c>
				else
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
  15223c:	e13ffc17 	ldw	r4,-16(fp)
  152240:	01402184 	movi	r5,134
  152244:	01800144 	movi	r6,5
  152248:	015047c0 	call	15047c <plot_vline>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
  15224c:	e0bffd17 	ldw	r2,-12(fp)
  152250:	10800044 	addi	r2,r2,1
  152254:	e0bffd15 	stw	r2,-12(fp)
  152258:	e0bffd17 	ldw	r2,-12(fp)
  15225c:	10800190 	cmplti	r2,r2,6
  152260:	103fdb1e 	bne	r2,zero,1521d0 <set_display_scale+0x310>
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
			    }

			    /* done with the axes */
			    break;
  152264:	00000106 	br	15226c <set_display_scale+0x3ac>

        case SCALE_NONE:    /* there is no scale */
			    /* already restored plot so nothing to do */
			    break;
  152268:	0001883a 	nop

    }


    /* now remember the new (now current) scale type */
    cur_scale = scale;
  15226c:	e0bfff17 	ldw	r2,-4(fp)
  152270:	d0a2f815 	stw	r2,-29728(gp)


    /* scale is taken care of, return */
    return;
  152274:	0001883a 	nop

}
  152278:	e037883a 	mov	sp,fp
  15227c:	dfc00117 	ldw	ra,4(sp)
  152280:	df000017 	ldw	fp,0(sp)
  152284:	dec00204 	addi	sp,sp,8
  152288:	f800283a 	ret

0015228c <clear_saved_areas>:
   Last Modified:    May 9, 2006

*/

void  clear_saved_areas()
{
  15228c:	defffd04 	addi	sp,sp,-12
  152290:	df000215 	stw	fp,8(sp)
  152294:	df000204 	addi	fp,sp,8
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
  152298:	e03fff15 	stw	zero,-4(fp)
  15229c:	00001306 	br	1522ec <clear_saved_areas+0x60>
        for (i = 0; i < (SIZE_X / 8); i++)
  1522a0:	e03ffe15 	stw	zero,-8(fp)
  1522a4:	00000b06 	br	1522d4 <clear_saved_areas+0x48>
            saved_axis_x[j][i] = 0;
  1522a8:	00c005b4 	movhi	r3,22
  1522ac:	18e47a84 	addi	r3,r3,-28182
  1522b0:	e0bfff17 	ldw	r2,-4(fp)
  1522b4:	11000f24 	muli	r4,r2,60
  1522b8:	e0bffe17 	ldw	r2,-8(fp)
  1522bc:	2085883a 	add	r2,r4,r2
  1522c0:	1885883a 	add	r2,r3,r2
  1522c4:	10000005 	stb	zero,0(r2)



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
  1522c8:	e0bffe17 	ldw	r2,-8(fp)
  1522cc:	10800044 	addi	r2,r2,1
  1522d0:	e0bffe15 	stw	r2,-8(fp)
  1522d4:	e0bffe17 	ldw	r2,-8(fp)
  1522d8:	10800f10 	cmplti	r2,r2,60
  1522dc:	103ff21e 	bne	r2,zero,1522a8 <clear_saved_areas+0x1c>
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
  1522e0:	e0bfff17 	ldw	r2,-4(fp)
  1522e4:	10800044 	addi	r2,r2,1
  1522e8:	e0bfff15 	stw	r2,-4(fp)
  1522ec:	e0bfff17 	ldw	r2,-4(fp)
  1522f0:	10800150 	cmplti	r2,r2,5
  1522f4:	103fea1e 	bne	r2,zero,1522a0 <clear_saved_areas+0x14>
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
  1522f8:	e03fff15 	stw	zero,-4(fp)
  1522fc:	00001306 	br	15234c <clear_saved_areas+0xc0>
        for (i = 0; i < (SIZE_Y / 8); i++)
  152300:	e03ffe15 	stw	zero,-8(fp)
  152304:	00000b06 	br	152334 <clear_saved_areas+0xa8>
            saved_axis_y[j][i] = 0;
  152308:	00c005b4 	movhi	r3,22
  15230c:	18e41d04 	addi	r3,r3,-28556
  152310:	e0bfff17 	ldw	r2,-4(fp)
  152314:	110008a4 	muli	r4,r2,34
  152318:	e0bffe17 	ldw	r2,-8(fp)
  15231c:	2085883a 	add	r2,r4,r2
  152320:	1885883a 	add	r2,r3,r2
  152324:	10000005 	stb	zero,0(r2)
    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
  152328:	e0bffe17 	ldw	r2,-8(fp)
  15232c:	10800044 	addi	r2,r2,1
  152330:	e0bffe15 	stw	r2,-8(fp)
  152334:	e0bffe17 	ldw	r2,-8(fp)
  152338:	10800890 	cmplti	r2,r2,34
  15233c:	103ff21e 	bne	r2,zero,152308 <clear_saved_areas+0x7c>

    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
  152340:	e0bfff17 	ldw	r2,-4(fp)
  152344:	10800044 	addi	r2,r2,1
  152348:	e0bfff15 	stw	r2,-4(fp)
  15234c:	e0bfff17 	ldw	r2,-4(fp)
  152350:	108002d0 	cmplti	r2,r2,11
  152354:	103fea1e 	bne	r2,zero,152300 <clear_saved_areas+0x74>
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
  152358:	e03ffe15 	stw	zero,-8(fp)
  15235c:	00001306 	br	1523ac <clear_saved_areas+0x120>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
  152360:	e03fff15 	stw	zero,-4(fp)
  152364:	00000b06 	br	152394 <clear_saved_areas+0x108>
	    saved_menu[i][j] = 0;
  152368:	00c005b4 	movhi	r3,22
  15236c:	18e19504 	addi	r3,r3,-31148
  152370:	e0bffe17 	ldw	r2,-8(fp)
  152374:	11000324 	muli	r4,r2,12
  152378:	e0bfff17 	ldw	r2,-4(fp)
  15237c:	2085883a 	add	r2,r4,r2
  152380:	1885883a 	add	r2,r3,r2
  152384:	10000005 	stb	zero,0(r2)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
  152388:	e0bfff17 	ldw	r2,-4(fp)
  15238c:	10800044 	addi	r2,r2,1
  152390:	e0bfff15 	stw	r2,-4(fp)
  152394:	e0bfff17 	ldw	r2,-4(fp)
  152398:	10800310 	cmplti	r2,r2,12
  15239c:	103ff21e 	bne	r2,zero,152368 <clear_saved_areas+0xdc>
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
  1523a0:	e0bffe17 	ldw	r2,-8(fp)
  1523a4:	10800044 	addi	r2,r2,1
  1523a8:	e0bffe15 	stw	r2,-8(fp)
  1523ac:	e0bffe17 	ldw	r2,-8(fp)
  1523b0:	10800e10 	cmplti	r2,r2,56
  1523b4:	103fea1e 	bne	r2,zero,152360 <clear_saved_areas+0xd4>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
  1523b8:	e03ffe15 	stw	zero,-8(fp)
  1523bc:	00001306 	br	15240c <clear_saved_areas+0x180>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
  1523c0:	e03fff15 	stw	zero,-4(fp)
  1523c4:	00000b06 	br	1523f4 <clear_saved_areas+0x168>
	    saved_area[i][j] = 0;
  1523c8:	00c005b4 	movhi	r3,22
  1523cc:	18e4c584 	addi	r3,r3,-27882
  1523d0:	e0bffe17 	ldw	r2,-8(fp)
  1523d4:	110003e4 	muli	r4,r2,15
  1523d8:	e0bfff17 	ldw	r2,-4(fp)
  1523dc:	2085883a 	add	r2,r4,r2
  1523e0:	1885883a 	add	r2,r3,r2
  1523e4:	10000005 	stb	zero,0(r2)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
  1523e8:	e0bfff17 	ldw	r2,-4(fp)
  1523ec:	10800044 	addi	r2,r2,1
  1523f0:	e0bfff15 	stw	r2,-4(fp)
  1523f4:	e0bfff17 	ldw	r2,-4(fp)
  1523f8:	108003d0 	cmplti	r2,r2,15
  1523fc:	103ff21e 	bne	r2,zero,1523c8 <clear_saved_areas+0x13c>
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
  152400:	e0bffe17 	ldw	r2,-8(fp)
  152404:	10800044 	addi	r2,r2,1
  152408:	e0bffe15 	stw	r2,-8(fp)
  15240c:	e0bffe17 	ldw	r2,-8(fp)
  152410:	10800410 	cmplti	r2,r2,16
  152414:	103fea1e 	bne	r2,zero,1523c0 <clear_saved_areas+0x134>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
	    saved_area[i][j] = 0;


    /* done clearing the saved areas - return */
    return;
  152418:	0001883a 	nop

}
  15241c:	e037883a 	mov	sp,fp
  152420:	df000017 	ldw	fp,0(sp)
  152424:	dec00104 	addi	sp,sp,4
  152428:	f800283a 	ret

0015242c <restore_menu_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_menu_trace()
{
  15242c:	defffa04 	addi	sp,sp,-24
  152430:	dfc00515 	stw	ra,20(sp)
  152434:	df000415 	stw	fp,16(sp)
  152438:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
  15243c:	e03fff15 	stw	zero,-4(fp)
  152440:	00003206 	br	15250c <restore_menu_trace+0xe0>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
  152444:	00802004 	movi	r2,128
  152448:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
  15244c:	e03ffd15 	stw	zero,-12(fp)

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
  152450:	00805e84 	movi	r2,378
  152454:	e0bffe15 	stw	r2,-8(fp)
  152458:	00002606 	br	1524f4 <restore_menu_trace+0xc8>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_menu[y - MENU_UL_Y][bit_offset] & bit_position) == 0)
  15245c:	00c005b4 	movhi	r3,22
  152460:	18e19504 	addi	r3,r3,-31148
  152464:	e0bfff17 	ldw	r2,-4(fp)
  152468:	11000324 	muli	r4,r2,12
  15246c:	e0bffd17 	ldw	r2,-12(fp)
  152470:	2085883a 	add	r2,r4,r2
  152474:	1885883a 	add	r2,r3,r2
  152478:	10800003 	ldbu	r2,0(r2)
  15247c:	10c03fcc 	andi	r3,r2,255
  152480:	e0bffc17 	ldw	r2,-16(fp)
  152484:	1884703a 	and	r2,r3,r2
  152488:	1000071e 	bne	r2,zero,1524a8 <restore_menu_trace+0x7c>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
  15248c:	e0fffe17 	ldw	r3,-8(fp)
  152490:	e0bfff17 	ldw	r2,-4(fp)
  152494:	1809883a 	mov	r4,r3
  152498:	100b883a 	mov	r5,r2
  15249c:	01bfdfd4 	movui	r6,65407
  1524a0:	01538240 	call	153824 <plot_pixel>
  1524a4:	00000606 	br	1524c0 <restore_menu_trace+0x94>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
  1524a8:	e0fffe17 	ldw	r3,-8(fp)
  1524ac:	e0bfff17 	ldw	r2,-4(fp)
  1524b0:	1809883a 	mov	r4,r3
  1524b4:	100b883a 	mov	r5,r2
  1524b8:	000d883a 	mov	r6,zero
  1524bc:	01538240 	call	153824 <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
  1524c0:	e0bffc17 	ldw	r2,-16(fp)
  1524c4:	1005d07a 	srai	r2,r2,1
  1524c8:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
  1524cc:	e0bffc17 	ldw	r2,-16(fp)
  1524d0:	1000051e 	bne	r2,zero,1524e8 <restore_menu_trace+0xbc>
	        /* now on high bit of next byte */
		bit_position = 0x80;
  1524d4:	00802004 	movi	r2,128
  1524d8:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
  1524dc:	e0bffd17 	ldw	r2,-12(fp)
  1524e0:	10800044 	addi	r2,r2,1
  1524e4:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
  1524e8:	e0bffe17 	ldw	r2,-8(fp)
  1524ec:	10800044 	addi	r2,r2,1
  1524f0:	e0bffe15 	stw	r2,-8(fp)
  1524f4:	e0bffe17 	ldw	r2,-8(fp)
  1524f8:	10807690 	cmplti	r2,r2,474
  1524fc:	103fd71e 	bne	r2,zero,15245c <restore_menu_trace+0x30>
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
  152500:	e0bfff17 	ldw	r2,-4(fp)
  152504:	10800044 	addi	r2,r2,1
  152508:	e0bfff15 	stw	r2,-4(fp)
  15250c:	e0bfff17 	ldw	r2,-4(fp)
  152510:	10800e10 	cmplti	r2,r2,56
  152514:	103fcb1e 	bne	r2,zero,152444 <restore_menu_trace+0x18>
        }
    }


    /* restored menu area - return */
    return;
  152518:	0001883a 	nop

}
  15251c:	e037883a 	mov	sp,fp
  152520:	dfc00117 	ldw	ra,4(sp)
  152524:	df000017 	ldw	fp,0(sp)
  152528:	dec00204 	addi	sp,sp,8
  15252c:	f800283a 	ret

00152530 <set_save_area>:
   Last Modified:    Mar. 8, 1994

*/

void  set_save_area(int pos_x, int pos_y, int size_x, int size_y)
{
  152530:	defff904 	addi	sp,sp,-28
  152534:	df000615 	stw	fp,24(sp)
  152538:	df000604 	addi	fp,sp,24
  15253c:	e13ffc15 	stw	r4,-16(fp)
  152540:	e17ffd15 	stw	r5,-12(fp)
  152544:	e1bffe15 	stw	r6,-8(fp)
  152548:	e1ffff15 	stw	r7,-4(fp)
    int  y;



    /* just setup all the locally global variables from the passed values */
    saved_pos_x = pos_x;
  15254c:	e0bffc17 	ldw	r2,-16(fp)
  152550:	d0a2fe15 	stw	r2,-29704(gp)
    saved_pos_y = pos_y;
  152554:	e0bffd17 	ldw	r2,-12(fp)
  152558:	d0a2fb15 	stw	r2,-29716(gp)
    saved_end_x = pos_x + size_x;
  15255c:	e0fffc17 	ldw	r3,-16(fp)
  152560:	e0bffe17 	ldw	r2,-8(fp)
  152564:	1885883a 	add	r2,r3,r2
  152568:	d0a2fd15 	stw	r2,-29708(gp)
    saved_end_y = pos_y + size_y;
  15256c:	e0fffd17 	ldw	r3,-12(fp)
  152570:	e0bfff17 	ldw	r2,-4(fp)
  152574:	1885883a 	add	r2,r3,r2
  152578:	d0a2fa15 	stw	r2,-29720(gp)


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
  15257c:	e03ffb15 	stw	zero,-20(fp)
  152580:	00001306 	br	1525d0 <set_save_area+0xa0>
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
  152584:	e03ffa15 	stw	zero,-24(fp)
  152588:	00000b06 	br	1525b8 <set_save_area+0x88>
	    saved_area[y][x] = 0;
  15258c:	00c005b4 	movhi	r3,22
  152590:	18e4c584 	addi	r3,r3,-27882
  152594:	e0bffb17 	ldw	r2,-20(fp)
  152598:	110003e4 	muli	r4,r2,15
  15259c:	e0bffa17 	ldw	r2,-24(fp)
  1525a0:	2085883a 	add	r2,r4,r2
  1525a4:	1885883a 	add	r2,r3,r2
  1525a8:	10000005 	stb	zero,0(r2)
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
  1525ac:	e0bffa17 	ldw	r2,-24(fp)
  1525b0:	10800044 	addi	r2,r2,1
  1525b4:	e0bffa15 	stw	r2,-24(fp)
  1525b8:	e0bffa17 	ldw	r2,-24(fp)
  1525bc:	108003d0 	cmplti	r2,r2,15
  1525c0:	103ff21e 	bne	r2,zero,15258c <set_save_area+0x5c>
    saved_end_x = pos_x + size_x;
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
  1525c4:	e0bffb17 	ldw	r2,-20(fp)
  1525c8:	10800044 	addi	r2,r2,1
  1525cc:	e0bffb15 	stw	r2,-20(fp)
  1525d0:	e0bffb17 	ldw	r2,-20(fp)
  1525d4:	10800410 	cmplti	r2,r2,16
  1525d8:	103fea1e 	bne	r2,zero,152584 <set_save_area+0x54>
        }
    }


    /* setup the saved area - return */
    return;
  1525dc:	0001883a 	nop

}
  1525e0:	e037883a 	mov	sp,fp
  1525e4:	df000017 	ldw	fp,0(sp)
  1525e8:	dec00104 	addi	sp,sp,4
  1525ec:	f800283a 	ret

001525f0 <restore_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_trace()
{
  1525f0:	defffa04 	addi	sp,sp,-24
  1525f4:	dfc00515 	stw	ra,20(sp)
  1525f8:	df000415 	stw	fp,16(sp)
  1525fc:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
  152600:	d0a2fb17 	ldw	r2,-29716(gp)
  152604:	e0bfff15 	stw	r2,-4(fp)
  152608:	00003406 	br	1526dc <restore_trace+0xec>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
  15260c:	00802004 	movi	r2,128
  152610:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
  152614:	e03ffd15 	stw	zero,-12(fp)

        for (x = saved_pos_x; x < saved_end_x; x++)  {
  152618:	d0a2fe17 	ldw	r2,-29704(gp)
  15261c:	e0bffe15 	stw	r2,-8(fp)
  152620:	00002806 	br	1526c4 <restore_trace+0xd4>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_area[y - saved_pos_y][bit_offset] & bit_position) == 0)
  152624:	d0a2fb17 	ldw	r2,-29716(gp)
  152628:	e0ffff17 	ldw	r3,-4(fp)
  15262c:	1885c83a 	sub	r2,r3,r2
  152630:	00c005b4 	movhi	r3,22
  152634:	18e4c584 	addi	r3,r3,-27882
  152638:	110003e4 	muli	r4,r2,15
  15263c:	e0bffd17 	ldw	r2,-12(fp)
  152640:	2085883a 	add	r2,r4,r2
  152644:	1885883a 	add	r2,r3,r2
  152648:	10800003 	ldbu	r2,0(r2)
  15264c:	10c03fcc 	andi	r3,r2,255
  152650:	e0bffc17 	ldw	r2,-16(fp)
  152654:	1884703a 	and	r2,r3,r2
  152658:	1000071e 	bne	r2,zero,152678 <restore_trace+0x88>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
  15265c:	e0fffe17 	ldw	r3,-8(fp)
  152660:	e0bfff17 	ldw	r2,-4(fp)
  152664:	1809883a 	mov	r4,r3
  152668:	100b883a 	mov	r5,r2
  15266c:	01bfdfd4 	movui	r6,65407
  152670:	01538240 	call	153824 <plot_pixel>
  152674:	00000606 	br	152690 <restore_trace+0xa0>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
  152678:	e0fffe17 	ldw	r3,-8(fp)
  15267c:	e0bfff17 	ldw	r2,-4(fp)
  152680:	1809883a 	mov	r4,r3
  152684:	100b883a 	mov	r5,r2
  152688:	000d883a 	mov	r6,zero
  15268c:	01538240 	call	153824 <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
  152690:	e0bffc17 	ldw	r2,-16(fp)
  152694:	1005d07a 	srai	r2,r2,1
  152698:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
  15269c:	e0bffc17 	ldw	r2,-16(fp)
  1526a0:	1000051e 	bne	r2,zero,1526b8 <restore_trace+0xc8>
	        /* now on high bit of next byte */
		bit_position = 0x80;
  1526a4:	00802004 	movi	r2,128
  1526a8:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
  1526ac:	e0bffd17 	ldw	r2,-12(fp)
  1526b0:	10800044 	addi	r2,r2,1
  1526b4:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = saved_pos_x; x < saved_end_x; x++)  {
  1526b8:	e0bffe17 	ldw	r2,-8(fp)
  1526bc:	10800044 	addi	r2,r2,1
  1526c0:	e0bffe15 	stw	r2,-8(fp)
  1526c4:	d0a2fd17 	ldw	r2,-29708(gp)
  1526c8:	e0fffe17 	ldw	r3,-8(fp)
  1526cc:	18bfd516 	blt	r3,r2,152624 <restore_trace+0x34>
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
  1526d0:	e0bfff17 	ldw	r2,-4(fp)
  1526d4:	10800044 	addi	r2,r2,1
  1526d8:	e0bfff15 	stw	r2,-4(fp)
  1526dc:	d0a2fa17 	ldw	r2,-29720(gp)
  1526e0:	e0ffff17 	ldw	r3,-4(fp)
  1526e4:	18bfc916 	blt	r3,r2,15260c <restore_trace+0x1c>
        }
    }


    /* restored the saved area - return */
    return;
  1526e8:	0001883a 	nop

}
  1526ec:	e037883a 	mov	sp,fp
  1526f0:	dfc00117 	ldw	ra,4(sp)
  1526f4:	df000017 	ldw	fp,0(sp)
  1526f8:	dec00204 	addi	sp,sp,8
  1526fc:	f800283a 	ret

00152700 <do_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  do_trace()
{
  152700:	defffe04 	addi	sp,sp,-8
  152704:	dfc00115 	stw	ra,4(sp)
  152708:	df000015 	stw	fp,0(sp)
  15270c:	d839883a 	mov	fp,sp



    /* start up the trace */
    /* indicate whether using automatic triggering or not */
    start_sample(get_trigger_mode() == AUTO_TRIGGER);
  152710:	0150f000 	call	150f00 <get_trigger_mode>
  152714:	10800060 	cmpeqi	r2,r2,1
  152718:	10803fcc 	andi	r2,r2,255
  15271c:	1009883a 	mov	r4,r2
  152720:	01539f00 	call	1539f0 <start_sample>

    /* now not ready for another trace (currently doing one) */
    trace_status = FALSE;
  152724:	d022f915 	stw	zero,-29724(gp)

    /* and are currently sampling data */
    sampling = TRUE;
  152728:	00800044 	movi	r2,1
  15272c:	d0a2ff15 	stw	r2,-29700(gp)


    /* trace is going, return */
    return;
  152730:	0001883a 	nop

}
  152734:	e037883a 	mov	sp,fp
  152738:	dfc00117 	ldw	ra,4(sp)
  15273c:	df000017 	ldw	fp,0(sp)
  152740:	dec00204 	addi	sp,sp,8
  152744:	f800283a 	ret

00152748 <plot_trace>:
   Last Modified:    May 9, 2006

*/

void  plot_trace(unsigned char **sample)
{
  152748:	deffe604 	addi	sp,sp,-104
  15274c:	dfc01915 	stw	ra,100(sp)
  152750:	df001815 	stw	fp,96(sp)
  152754:	df001804 	addi	fp,sp,96
  152758:	e13fff15 	stw	r4,-4(fp)
    /* variables */
    int x = 0;						/* current x position to plot */
  15275c:	e03fea15 	stw	zero,-88(fp)
    int x_pos = (PLOT_SIZE_X / 2);	/* "fine" x position for multiple point plotting */
  152760:	00803c04 	movi	r2,240
  152764:	e0bfeb15 	stw	r2,-84(fp)
    //clear_saved_areas();

    /* re-display the menu (if it was on) */
    //refresh_menu();

    unsigned char *sample_A = sample[0];
  152768:	e0bfff17 	ldw	r2,-4(fp)
  15276c:	10800017 	ldw	r2,0(r2)
  152770:	e0bfec15 	stw	r2,-80(fp)
    unsigned char *sample_B = sample[1];
  152774:	e0bfff17 	ldw	r2,-4(fp)
  152778:	10800117 	ldw	r2,4(r2)
  15277c:	e0bfed15 	stw	r2,-76(fp)
    unsigned char *sample_L = sample[2];
  152780:	e0bfff17 	ldw	r2,-4(fp)
  152784:	10800217 	ldw	r2,8(r2)
  152788:	e0bfee15 	stw	r2,-72(fp)

    // Get the screen coordinates.
    for (i = 0; i < sample_size; i++)  {
  15278c:	e03fe815 	stw	zero,-96(fp)
  152790:	00001f06 	br	152810 <plot_trace+0xc8>
        // Determine y position of point (note: screen coordinates invert).
    	trace_A[i] = 255 - sample_A[i] + 8;
  152794:	e0bfe817 	ldw	r2,-96(fp)
  152798:	e0ffec17 	ldw	r3,-80(fp)
  15279c:	1885883a 	add	r2,r3,r2
  1527a0:	10800003 	ldbu	r2,0(r2)
  1527a4:	10803fcc 	andi	r2,r2,255
  1527a8:	00c041c4 	movi	r3,263
  1527ac:	1887c83a 	sub	r3,r3,r2
  1527b0:	01000574 	movhi	r4,21
  1527b4:	211dd504 	addi	r4,r4,30548
  1527b8:	e0bfe817 	ldw	r2,-96(fp)
  1527bc:	1085883a 	add	r2,r2,r2
  1527c0:	1085883a 	add	r2,r2,r2
  1527c4:	2085883a 	add	r2,r4,r2
  1527c8:	10c00015 	stw	r3,0(r2)
    	trace_B[i] = 255 - sample_B[i] + 8;
  1527cc:	e0bfe817 	ldw	r2,-96(fp)
  1527d0:	e0ffed17 	ldw	r3,-76(fp)
  1527d4:	1885883a 	add	r2,r3,r2
  1527d8:	10800003 	ldbu	r2,0(r2)
  1527dc:	10803fcc 	andi	r2,r2,255
  1527e0:	00c041c4 	movi	r3,263
  1527e4:	1887c83a 	sub	r3,r3,r2
  1527e8:	010005b4 	movhi	r4,22
  1527ec:	21223d04 	addi	r4,r4,-30476
  1527f0:	e0bfe817 	ldw	r2,-96(fp)
  1527f4:	1085883a 	add	r2,r2,r2
  1527f8:	1085883a 	add	r2,r2,r2
  1527fc:	2085883a 	add	r2,r4,r2
  152800:	10c00015 	stw	r3,0(r2)
    unsigned char *sample_A = sample[0];
    unsigned char *sample_B = sample[1];
    unsigned char *sample_L = sample[2];

    // Get the screen coordinates.
    for (i = 0; i < sample_size; i++)  {
  152804:	e0bfe817 	ldw	r2,-96(fp)
  152808:	10800044 	addi	r2,r2,1
  15280c:	e0bfe815 	stw	r2,-96(fp)
  152810:	d0a2fc17 	ldw	r2,-29712(gp)
  152814:	e0ffe817 	ldw	r3,-96(fp)
  152818:	18bfde16 	blt	r3,r2,152794 <plot_trace+0x4c>
    	trace_A[i] = 255 - sample_A[i] + 8;
    	trace_B[i] = 255 - sample_B[i] + 8;
    }

    // Clear the last trace.
    for (i = 0; i < sample_size - 1; i++) {
  15281c:	e03fe815 	stw	zero,-96(fp)
  152820:	00007106 	br	1529e8 <plot_trace+0x2a0>
        for (j = min(saved_trace_A[i], saved_trace_A[i+1]); j <= max(saved_trace_A[i], saved_trace_A[i+1]); j++) {
  152824:	00c00574 	movhi	r3,21
  152828:	18da1504 	addi	r3,r3,26708
  15282c:	e0bfe817 	ldw	r2,-96(fp)
  152830:	1085883a 	add	r2,r2,r2
  152834:	1085883a 	add	r2,r2,r2
  152838:	1885883a 	add	r2,r3,r2
  15283c:	10800017 	ldw	r2,0(r2)
  152840:	e0bfef15 	stw	r2,-68(fp)
  152844:	e0bfe817 	ldw	r2,-96(fp)
  152848:	10800044 	addi	r2,r2,1
  15284c:	00c00574 	movhi	r3,21
  152850:	18da1504 	addi	r3,r3,26708
  152854:	1085883a 	add	r2,r2,r2
  152858:	1085883a 	add	r2,r2,r2
  15285c:	1885883a 	add	r2,r3,r2
  152860:	10800017 	ldw	r2,0(r2)
  152864:	e0bff015 	stw	r2,-64(fp)
  152868:	e0ffef17 	ldw	r3,-68(fp)
  15286c:	e0bff017 	ldw	r2,-64(fp)
  152870:	1880010e 	bge	r3,r2,152878 <plot_trace+0x130>
  152874:	1805883a 	mov	r2,r3
  152878:	e0bfe915 	stw	r2,-92(fp)
  15287c:	00000906 	br	1528a4 <plot_trace+0x15c>
        	plot_pixel(i, j, PIXEL_BGND);
  152880:	e0ffe817 	ldw	r3,-96(fp)
  152884:	e0bfe917 	ldw	r2,-92(fp)
  152888:	1809883a 	mov	r4,r3
  15288c:	100b883a 	mov	r5,r2
  152890:	01800704 	movi	r6,28
  152894:	01538240 	call	153824 <plot_pixel>
    	trace_B[i] = 255 - sample_B[i] + 8;
    }

    // Clear the last trace.
    for (i = 0; i < sample_size - 1; i++) {
        for (j = min(saved_trace_A[i], saved_trace_A[i+1]); j <= max(saved_trace_A[i], saved_trace_A[i+1]); j++) {
  152898:	e0bfe917 	ldw	r2,-92(fp)
  15289c:	10800044 	addi	r2,r2,1
  1528a0:	e0bfe915 	stw	r2,-92(fp)
  1528a4:	00c00574 	movhi	r3,21
  1528a8:	18da1504 	addi	r3,r3,26708
  1528ac:	e0bfe817 	ldw	r2,-96(fp)
  1528b0:	1085883a 	add	r2,r2,r2
  1528b4:	1085883a 	add	r2,r2,r2
  1528b8:	1885883a 	add	r2,r3,r2
  1528bc:	10800017 	ldw	r2,0(r2)
  1528c0:	e0bff115 	stw	r2,-60(fp)
  1528c4:	e0bfe817 	ldw	r2,-96(fp)
  1528c8:	10800044 	addi	r2,r2,1
  1528cc:	00c00574 	movhi	r3,21
  1528d0:	18da1504 	addi	r3,r3,26708
  1528d4:	1085883a 	add	r2,r2,r2
  1528d8:	1085883a 	add	r2,r2,r2
  1528dc:	1885883a 	add	r2,r3,r2
  1528e0:	10800017 	ldw	r2,0(r2)
  1528e4:	e0bff215 	stw	r2,-56(fp)
  1528e8:	e0fff117 	ldw	r3,-60(fp)
  1528ec:	e0bff217 	ldw	r2,-56(fp)
  1528f0:	10c0010e 	bge	r2,r3,1528f8 <plot_trace+0x1b0>
  1528f4:	1805883a 	mov	r2,r3
  1528f8:	e0ffe917 	ldw	r3,-92(fp)
  1528fc:	10ffe00e 	bge	r2,r3,152880 <plot_trace+0x138>
        	plot_pixel(i, j, PIXEL_BGND);
        }
        for (j = min(saved_trace_B[i], saved_trace_B[i+1]); j <= max(saved_trace_B[i], saved_trace_B[i+1]); j++) {
  152900:	00c00574 	movhi	r3,21
  152904:	18dbf504 	addi	r3,r3,28628
  152908:	e0bfe817 	ldw	r2,-96(fp)
  15290c:	1085883a 	add	r2,r2,r2
  152910:	1085883a 	add	r2,r2,r2
  152914:	1885883a 	add	r2,r3,r2
  152918:	10800017 	ldw	r2,0(r2)
  15291c:	e0bff315 	stw	r2,-52(fp)
  152920:	e0bfe817 	ldw	r2,-96(fp)
  152924:	10800044 	addi	r2,r2,1
  152928:	00c00574 	movhi	r3,21
  15292c:	18dbf504 	addi	r3,r3,28628
  152930:	1085883a 	add	r2,r2,r2
  152934:	1085883a 	add	r2,r2,r2
  152938:	1885883a 	add	r2,r3,r2
  15293c:	10800017 	ldw	r2,0(r2)
  152940:	e0bff415 	stw	r2,-48(fp)
  152944:	e0fff317 	ldw	r3,-52(fp)
  152948:	e0bff417 	ldw	r2,-48(fp)
  15294c:	1880010e 	bge	r3,r2,152954 <plot_trace+0x20c>
  152950:	1805883a 	mov	r2,r3
  152954:	e0bfe915 	stw	r2,-92(fp)
  152958:	00000906 	br	152980 <plot_trace+0x238>
        	plot_pixel(i, j, PIXEL_BGND);
  15295c:	e0ffe817 	ldw	r3,-96(fp)
  152960:	e0bfe917 	ldw	r2,-92(fp)
  152964:	1809883a 	mov	r4,r3
  152968:	100b883a 	mov	r5,r2
  15296c:	01800704 	movi	r6,28
  152970:	01538240 	call	153824 <plot_pixel>
    // Clear the last trace.
    for (i = 0; i < sample_size - 1; i++) {
        for (j = min(saved_trace_A[i], saved_trace_A[i+1]); j <= max(saved_trace_A[i], saved_trace_A[i+1]); j++) {
        	plot_pixel(i, j, PIXEL_BGND);
        }
        for (j = min(saved_trace_B[i], saved_trace_B[i+1]); j <= max(saved_trace_B[i], saved_trace_B[i+1]); j++) {
  152974:	e0bfe917 	ldw	r2,-92(fp)
  152978:	10800044 	addi	r2,r2,1
  15297c:	e0bfe915 	stw	r2,-92(fp)
  152980:	00c00574 	movhi	r3,21
  152984:	18dbf504 	addi	r3,r3,28628
  152988:	e0bfe817 	ldw	r2,-96(fp)
  15298c:	1085883a 	add	r2,r2,r2
  152990:	1085883a 	add	r2,r2,r2
  152994:	1885883a 	add	r2,r3,r2
  152998:	10800017 	ldw	r2,0(r2)
  15299c:	e0bff515 	stw	r2,-44(fp)
  1529a0:	e0bfe817 	ldw	r2,-96(fp)
  1529a4:	10800044 	addi	r2,r2,1
  1529a8:	00c00574 	movhi	r3,21
  1529ac:	18dbf504 	addi	r3,r3,28628
  1529b0:	1085883a 	add	r2,r2,r2
  1529b4:	1085883a 	add	r2,r2,r2
  1529b8:	1885883a 	add	r2,r3,r2
  1529bc:	10800017 	ldw	r2,0(r2)
  1529c0:	e0bff615 	stw	r2,-40(fp)
  1529c4:	e0fff517 	ldw	r3,-44(fp)
  1529c8:	e0bff617 	ldw	r2,-40(fp)
  1529cc:	10c0010e 	bge	r2,r3,1529d4 <plot_trace+0x28c>
  1529d0:	1805883a 	mov	r2,r3
  1529d4:	e0ffe917 	ldw	r3,-92(fp)
  1529d8:	10ffe00e 	bge	r2,r3,15295c <plot_trace+0x214>
    	trace_A[i] = 255 - sample_A[i] + 8;
    	trace_B[i] = 255 - sample_B[i] + 8;
    }

    // Clear the last trace.
    for (i = 0; i < sample_size - 1; i++) {
  1529dc:	e0bfe817 	ldw	r2,-96(fp)
  1529e0:	10800044 	addi	r2,r2,1
  1529e4:	e0bfe815 	stw	r2,-96(fp)
  1529e8:	d0a2fc17 	ldw	r2,-29712(gp)
  1529ec:	10bfffc4 	addi	r2,r2,-1
  1529f0:	e0ffe817 	ldw	r3,-96(fp)
  1529f4:	18bf8b16 	blt	r3,r2,152824 <plot_trace+0xdc>
    }

    // Clear logic analyzer.

    // Update the saved trace arrays.
    for (i = 0; i < sample_size; i++) {
  1529f8:	e03fe815 	stw	zero,-96(fp)
  1529fc:	00002d06 	br	152ab4 <plot_trace+0x36c>
    	saved_trace_A[i] = trace_A[i];
  152a00:	00c00574 	movhi	r3,21
  152a04:	18ddd504 	addi	r3,r3,30548
  152a08:	e0bfe817 	ldw	r2,-96(fp)
  152a0c:	1085883a 	add	r2,r2,r2
  152a10:	1085883a 	add	r2,r2,r2
  152a14:	1885883a 	add	r2,r3,r2
  152a18:	10c00017 	ldw	r3,0(r2)
  152a1c:	01000574 	movhi	r4,21
  152a20:	211a1504 	addi	r4,r4,26708
  152a24:	e0bfe817 	ldw	r2,-96(fp)
  152a28:	1085883a 	add	r2,r2,r2
  152a2c:	1085883a 	add	r2,r2,r2
  152a30:	2085883a 	add	r2,r4,r2
  152a34:	10c00015 	stw	r3,0(r2)
    	saved_trace_B[i] = trace_B[i];
  152a38:	00c005b4 	movhi	r3,22
  152a3c:	18e23d04 	addi	r3,r3,-30476
  152a40:	e0bfe817 	ldw	r2,-96(fp)
  152a44:	1085883a 	add	r2,r2,r2
  152a48:	1085883a 	add	r2,r2,r2
  152a4c:	1885883a 	add	r2,r3,r2
  152a50:	10c00017 	ldw	r3,0(r2)
  152a54:	01000574 	movhi	r4,21
  152a58:	211bf504 	addi	r4,r4,28628
  152a5c:	e0bfe817 	ldw	r2,-96(fp)
  152a60:	1085883a 	add	r2,r2,r2
  152a64:	1085883a 	add	r2,r2,r2
  152a68:	2085883a 	add	r2,r4,r2
  152a6c:	10c00015 	stw	r3,0(r2)
    	saved_trace_L[i] = trace_L[i];
  152a70:	00c00574 	movhi	r3,21
  152a74:	18dfb504 	addi	r3,r3,32468
  152a78:	e0bfe817 	ldw	r2,-96(fp)
  152a7c:	1085883a 	add	r2,r2,r2
  152a80:	1085883a 	add	r2,r2,r2
  152a84:	1885883a 	add	r2,r3,r2
  152a88:	10c00017 	ldw	r3,0(r2)
  152a8c:	010005b4 	movhi	r4,22
  152a90:	21250204 	addi	r4,r4,-27640
  152a94:	e0bfe817 	ldw	r2,-96(fp)
  152a98:	1085883a 	add	r2,r2,r2
  152a9c:	1085883a 	add	r2,r2,r2
  152aa0:	2085883a 	add	r2,r4,r2
  152aa4:	10c00015 	stw	r3,0(r2)
    }

    // Clear logic analyzer.

    // Update the saved trace arrays.
    for (i = 0; i < sample_size; i++) {
  152aa8:	e0bfe817 	ldw	r2,-96(fp)
  152aac:	10800044 	addi	r2,r2,1
  152ab0:	e0bfe815 	stw	r2,-96(fp)
  152ab4:	d0a2fc17 	ldw	r2,-29712(gp)
  152ab8:	e0ffe817 	ldw	r3,-96(fp)
  152abc:	18bfd016 	blt	r3,r2,152a00 <plot_trace+0x2b8>
    	saved_trace_B[i] = trace_B[i];
    	saved_trace_L[i] = trace_L[i];
    }

    // Draw the line.
    for (i = 1; i < sample_size - 1; i++) {
  152ac0:	00800044 	movi	r2,1
  152ac4:	e0bfe815 	stw	r2,-96(fp)
  152ac8:	00007106 	br	152c90 <plot_trace+0x548>
        for (j = min(saved_trace_A[i], saved_trace_A[i+1]); j <= max(saved_trace_A[i], saved_trace_A[i+1]); j++) {
  152acc:	00c00574 	movhi	r3,21
  152ad0:	18da1504 	addi	r3,r3,26708
  152ad4:	e0bfe817 	ldw	r2,-96(fp)
  152ad8:	1085883a 	add	r2,r2,r2
  152adc:	1085883a 	add	r2,r2,r2
  152ae0:	1885883a 	add	r2,r3,r2
  152ae4:	10800017 	ldw	r2,0(r2)
  152ae8:	e0bff715 	stw	r2,-36(fp)
  152aec:	e0bfe817 	ldw	r2,-96(fp)
  152af0:	10800044 	addi	r2,r2,1
  152af4:	00c00574 	movhi	r3,21
  152af8:	18da1504 	addi	r3,r3,26708
  152afc:	1085883a 	add	r2,r2,r2
  152b00:	1085883a 	add	r2,r2,r2
  152b04:	1885883a 	add	r2,r3,r2
  152b08:	10800017 	ldw	r2,0(r2)
  152b0c:	e0bff815 	stw	r2,-32(fp)
  152b10:	e0fff717 	ldw	r3,-36(fp)
  152b14:	e0bff817 	ldw	r2,-32(fp)
  152b18:	1880010e 	bge	r3,r2,152b20 <plot_trace+0x3d8>
  152b1c:	1805883a 	mov	r2,r3
  152b20:	e0bfe915 	stw	r2,-92(fp)
  152b24:	00000906 	br	152b4c <plot_trace+0x404>
        	plot_pixel(i, j, PIXEL_A);
  152b28:	e0ffe817 	ldw	r3,-96(fp)
  152b2c:	e0bfe917 	ldw	r2,-92(fp)
  152b30:	1809883a 	mov	r4,r3
  152b34:	100b883a 	mov	r5,r2
  152b38:	01801fc4 	movi	r6,127
  152b3c:	01538240 	call	153824 <plot_pixel>
    	saved_trace_L[i] = trace_L[i];
    }

    // Draw the line.
    for (i = 1; i < sample_size - 1; i++) {
        for (j = min(saved_trace_A[i], saved_trace_A[i+1]); j <= max(saved_trace_A[i], saved_trace_A[i+1]); j++) {
  152b40:	e0bfe917 	ldw	r2,-92(fp)
  152b44:	10800044 	addi	r2,r2,1
  152b48:	e0bfe915 	stw	r2,-92(fp)
  152b4c:	00c00574 	movhi	r3,21
  152b50:	18da1504 	addi	r3,r3,26708
  152b54:	e0bfe817 	ldw	r2,-96(fp)
  152b58:	1085883a 	add	r2,r2,r2
  152b5c:	1085883a 	add	r2,r2,r2
  152b60:	1885883a 	add	r2,r3,r2
  152b64:	10800017 	ldw	r2,0(r2)
  152b68:	e0bff915 	stw	r2,-28(fp)
  152b6c:	e0bfe817 	ldw	r2,-96(fp)
  152b70:	10800044 	addi	r2,r2,1
  152b74:	00c00574 	movhi	r3,21
  152b78:	18da1504 	addi	r3,r3,26708
  152b7c:	1085883a 	add	r2,r2,r2
  152b80:	1085883a 	add	r2,r2,r2
  152b84:	1885883a 	add	r2,r3,r2
  152b88:	10800017 	ldw	r2,0(r2)
  152b8c:	e0bffa15 	stw	r2,-24(fp)
  152b90:	e0fff917 	ldw	r3,-28(fp)
  152b94:	e0bffa17 	ldw	r2,-24(fp)
  152b98:	10c0010e 	bge	r2,r3,152ba0 <plot_trace+0x458>
  152b9c:	1805883a 	mov	r2,r3
  152ba0:	e0ffe917 	ldw	r3,-92(fp)
  152ba4:	10ffe00e 	bge	r2,r3,152b28 <plot_trace+0x3e0>
        	plot_pixel(i, j, PIXEL_A);
        }
        for (j = min(saved_trace_B[i], saved_trace_B[i+1]); j <= max(saved_trace_B[i], saved_trace_B[i+1]); j++) {
  152ba8:	00c00574 	movhi	r3,21
  152bac:	18dbf504 	addi	r3,r3,28628
  152bb0:	e0bfe817 	ldw	r2,-96(fp)
  152bb4:	1085883a 	add	r2,r2,r2
  152bb8:	1085883a 	add	r2,r2,r2
  152bbc:	1885883a 	add	r2,r3,r2
  152bc0:	10800017 	ldw	r2,0(r2)
  152bc4:	e0bffb15 	stw	r2,-20(fp)
  152bc8:	e0bfe817 	ldw	r2,-96(fp)
  152bcc:	10800044 	addi	r2,r2,1
  152bd0:	00c00574 	movhi	r3,21
  152bd4:	18dbf504 	addi	r3,r3,28628
  152bd8:	1085883a 	add	r2,r2,r2
  152bdc:	1085883a 	add	r2,r2,r2
  152be0:	1885883a 	add	r2,r3,r2
  152be4:	10800017 	ldw	r2,0(r2)
  152be8:	e0bffc15 	stw	r2,-16(fp)
  152bec:	e0fffb17 	ldw	r3,-20(fp)
  152bf0:	e0bffc17 	ldw	r2,-16(fp)
  152bf4:	1880010e 	bge	r3,r2,152bfc <plot_trace+0x4b4>
  152bf8:	1805883a 	mov	r2,r3
  152bfc:	e0bfe915 	stw	r2,-92(fp)
  152c00:	00000906 	br	152c28 <plot_trace+0x4e0>
        	plot_pixel(i, j, PIXEL_B);
  152c04:	e0ffe817 	ldw	r3,-96(fp)
  152c08:	e0bfe917 	ldw	r2,-92(fp)
  152c0c:	1809883a 	mov	r4,r3
  152c10:	100b883a 	mov	r5,r2
  152c14:	019fc044 	movi	r6,32513
  152c18:	01538240 	call	153824 <plot_pixel>
    // Draw the line.
    for (i = 1; i < sample_size - 1; i++) {
        for (j = min(saved_trace_A[i], saved_trace_A[i+1]); j <= max(saved_trace_A[i], saved_trace_A[i+1]); j++) {
        	plot_pixel(i, j, PIXEL_A);
        }
        for (j = min(saved_trace_B[i], saved_trace_B[i+1]); j <= max(saved_trace_B[i], saved_trace_B[i+1]); j++) {
  152c1c:	e0bfe917 	ldw	r2,-92(fp)
  152c20:	10800044 	addi	r2,r2,1
  152c24:	e0bfe915 	stw	r2,-92(fp)
  152c28:	00c00574 	movhi	r3,21
  152c2c:	18dbf504 	addi	r3,r3,28628
  152c30:	e0bfe817 	ldw	r2,-96(fp)
  152c34:	1085883a 	add	r2,r2,r2
  152c38:	1085883a 	add	r2,r2,r2
  152c3c:	1885883a 	add	r2,r3,r2
  152c40:	10800017 	ldw	r2,0(r2)
  152c44:	e0bffd15 	stw	r2,-12(fp)
  152c48:	e0bfe817 	ldw	r2,-96(fp)
  152c4c:	10800044 	addi	r2,r2,1
  152c50:	00c00574 	movhi	r3,21
  152c54:	18dbf504 	addi	r3,r3,28628
  152c58:	1085883a 	add	r2,r2,r2
  152c5c:	1085883a 	add	r2,r2,r2
  152c60:	1885883a 	add	r2,r3,r2
  152c64:	10800017 	ldw	r2,0(r2)
  152c68:	e0bffe15 	stw	r2,-8(fp)
  152c6c:	e0fffd17 	ldw	r3,-12(fp)
  152c70:	e0bffe17 	ldw	r2,-8(fp)
  152c74:	10c0010e 	bge	r2,r3,152c7c <plot_trace+0x534>
  152c78:	1805883a 	mov	r2,r3
  152c7c:	e0ffe917 	ldw	r3,-92(fp)
  152c80:	10ffe00e 	bge	r2,r3,152c04 <plot_trace+0x4bc>
    	saved_trace_B[i] = trace_B[i];
    	saved_trace_L[i] = trace_L[i];
    }

    // Draw the line.
    for (i = 1; i < sample_size - 1; i++) {
  152c84:	e0bfe817 	ldw	r2,-96(fp)
  152c88:	10800044 	addi	r2,r2,1
  152c8c:	e0bfe815 	stw	r2,-96(fp)
  152c90:	d0a2fc17 	ldw	r2,-29712(gp)
  152c94:	10bfffc4 	addi	r2,r2,-1
  152c98:	e0ffe817 	ldw	r3,-96(fp)
  152c9c:	18bf8b16 	blt	r3,r2,152acc <plot_trace+0x384>
    }

    // Draw logic analyzer output.

    /* finally, output the scale if need be */
    set_display_scale(cur_scale);
  152ca0:	d0a2f817 	ldw	r2,-29728(gp)
  152ca4:	1009883a 	mov	r4,r2
  152ca8:	0151ec00 	call	151ec0 <set_display_scale>

    /* done with plot, return */
    return;
  152cac:	0001883a 	nop

}
  152cb0:	e037883a 	mov	sp,fp
  152cb4:	dfc00117 	ldw	ra,4(sp)
  152cb8:	df000017 	ldw	fp,0(sp)
  152cbc:	dec00204 	addi	sp,sp,8
  152cc0:	f800283a 	ret

00152cc4 <key_int_installer>:

.global key_int_installer
.type	key_int_installer, @function

key_int_installer:
	SAVE
  152cc4:	deffff04 	addi	sp,sp,-4
  152cc8:	dfc00015 	stw	ra,0(sp)
  152ccc:	deffff04 	addi	sp,sp,-4
  152cd0:	df000015 	stw	fp,0(sp)
  152cd4:	d839883a 	mov	fp,sp
  152cd8:	02000574 	movhi	r8,21

	# asdf
	movia	r8, adc_speed
  152cdc:	42143804 	addi	r8,r8,20704
	movi	r9, 0x040000
  152ce0:	02400134 	movhi	r9,4
	stw		r9, (r8)
  152ce4:	42400015 	stw	r9,0(r8)
  152ce8:	02000574 	movhi	r8,21
	movia	r8, trig_level
  152cec:	42143984 	addi	r8,r8,20710
	movi	r9, 0
  152cf0:	02400004 	movi	r9,0
	stb		r9, (r8)
  152cf4:	42400005 	stb	r9,0(r8)
  152cf8:	02000574 	movhi	r8,21
	movia	r8, trig_delay
  152cfc:	42143904 	addi	r8,r8,20708
	movi	r9, 240
  152d00:	02403c04 	movi	r9,240
	sth		r9, (r8)
  152d04:	4240000d 	sth	r9,0(r8)
	# asdf

	# Enable all switch interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  152d08:	020005b4 	movhi	r8,22
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  152d0c:	42046c14 	ori	r8,r8,4528
	movhi	r9, %hi(SWITCH_ALL)
  152d10:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  152d14:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_IRQ_MASK(r8)
  152d18:	42400215 	stw	r9,8(r8)

	# Install the interrupt handler
	mov		r4, r0
  152d1c:	0009883a 	mov	r4,zero
	movi	r5, KEY_INPUT_IRQ
  152d20:	01400144 	movi	r5,5
	movhi	r6, %hi(key_handler)
  152d24:	01800574 	movhi	r6,21
	ori		r6, r6, %lo(key_handler)
  152d28:	318b5714 	ori	r6,r6,11612
	mov		r7, r0
  152d2c:	000f883a 	mov	r7,zero
	PUSH	r0
  152d30:	deffff04 	addi	sp,sp,-4
  152d34:	d8000015 	stw	zero,0(sp)
	call	alt_ic_isr_register
  152d38:	0153e0c0 	call	153e0c <alt_ic_isr_register>
	POP		r0
  152d3c:	d8000017 	ldw	zero,0(sp)
  152d40:	dec00104 	addi	sp,sp,4

00152d44 <key_int_installer_done>:

key_int_installer_done:
	RESTORE
  152d44:	e037883a 	mov	sp,fp
  152d48:	df000017 	ldw	fp,0(sp)
  152d4c:	dec00104 	addi	sp,sp,4
  152d50:	dfc00017 	ldw	ra,0(sp)
  152d54:	dec00104 	addi	sp,sp,4
	ret
  152d58:	f800283a 	ret

00152d5c <key_handler>:
 */

.type key_handler,@function

key_handler:
	SAVE
  152d5c:	deffff04 	addi	sp,sp,-4
  152d60:	dfc00015 	stw	ra,0(sp)
  152d64:	deffff04 	addi	sp,sp,-4
  152d68:	df000015 	stw	fp,0(sp)
  152d6c:	d839883a 	mov	fp,sp

	# Key should now be available. Update key_press.
	movi	r8, 1
  152d70:	02000044 	movi	r8,1
  152d74:	02400574 	movhi	r9,21
	movia	r9, key_press
  152d78:	4a543404 	addi	r9,r9,20688
	stb		r8, (r9)
  152d7c:	4a000005 	stb	r8,0(r9)

	# Clear interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  152d80:	020005b4 	movhi	r8,22
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  152d84:	42046c14 	ori	r8,r8,4528
	stw		r0, PIO_IRQ_MASK(r8)
  152d88:	40000215 	stw	zero,8(r8)

	# Get the edge capture register.
	movhi	r8, %hi(KEY_INPUT_BASE)
  152d8c:	020005b4 	movhi	r8,22
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  152d90:	42046c14 	ori	r8,r8,4528
	ldw		r8, PIO_EDGE_CAP(r8)
  152d94:	42000317 	ldw	r8,12(r8)

	# Check each bit (starting at 0) and see if set.
	movi	r9, 1
  152d98:	02400044 	movi	r9,1
	movi	r11, 0
  152d9c:	02c00004 	movi	r11,0

00152da0 <loop_keys>:

loop_keys:
	and		r10, r8, r9
  152da0:	4254703a 	and	r10,r8,r9
	bne		r10, r0, key_lookup
  152da4:	5000031e 	bne	r10,zero,152db4 <key_lookup>
	slli	r9, r9, 1
  152da8:	4812907a 	slli	r9,r9,1
	addi	r11, r11, 1
  152dac:	5ac00044 	addi	r11,r11,1
	br		loop_keys
  152db0:	003ffb06 	br	152da0 <loop_keys>

00152db4 <key_lookup>:
  152db4:	02000574 	movhi	r8,21

	# Once the key is found (r11), use the lookup table to set key_value.
key_lookup:
	movia	r8, key_map
  152db8:	420ca404 	addi	r8,r8,12944
	add		r8, r8, r11
  152dbc:	42d1883a 	add	r8,r8,r11
	ldb		r8,	(r8)
  152dc0:	42000007 	ldb	r8,0(r8)
  152dc4:	02800574 	movhi	r10,21

	movia	r10, key_value
  152dc8:	52943444 	addi	r10,r10,20689
	stb		r8, (r10)
  152dcc:	52000005 	stb	r8,0(r10)

	# Remove later!!!
	movi	r12, 10
  152dd0:	03000284 	movi	r12,10
	beq		r11, r12, inc_speed
  152dd4:	5b004126 	beq	r11,r12,152edc <inc_speed>
	movi	r12, 11
  152dd8:	030002c4 	movi	r12,11
	beq		r11, r12, dec_speed
  152ddc:	5b001826 	beq	r11,r12,152e40 <dec_speed>

	movi	r12, 16
  152de0:	03000404 	movi	r12,16
	beq		r11, r12, inc_level
  152de4:	5b008b26 	beq	r11,r12,153014 <inc_level>
	movi	r12, 17
  152de8:	03000444 	movi	r12,17
	beq		r11, r12, dec_level
  152dec:	5b006426 	beq	r11,r12,152f80 <dec_level>

	movi	r12, 18
  152df0:	03000484 	movi	r12,18
	beq		r11, r12, inc_delay
  152df4:	5b00d526 	beq	r11,r12,15314c <inc_delay>
	movi	r12, 19
  152df8:	030004c4 	movi	r12,19
	beq		r11, r12, dec_delay
  152dfc:	5b00af26 	beq	r11,r12,1530bc <dec_delay>

00152e00 <key_lookup_cont>:
key_lookup_cont:
	# <END Remove later!!!>

	# Clear the edge capture register (write 1 to clear).
	movhi	r8, %hi(KEY_INPUT_BASE)
  152e00:	020005b4 	movhi	r8,22
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  152e04:	42046c14 	ori	r8,r8,4528
	movhi	r9, %hi(SWITCH_ALL)
  152e08:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  152e0c:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  152e10:	42400315 	stw	r9,12(r8)

	# Re-enable interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  152e14:	020005b4 	movhi	r8,22
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  152e18:	42046c14 	ori	r8,r8,4528
	movhi	r9, %hi(SWITCH_ALL)
  152e1c:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  152e20:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_IRQ_MASK(r8)
  152e24:	42400215 	stw	r9,8(r8)

00152e28 <key_handler_done>:

key_handler_done:
	RESTORE
  152e28:	e037883a 	mov	sp,fp
  152e2c:	df000017 	ldw	fp,0(sp)
  152e30:	dec00104 	addi	sp,sp,4
  152e34:	dfc00017 	ldw	ra,0(sp)
  152e38:	dec00104 	addi	sp,sp,4
	ret
  152e3c:	f800283a 	ret

00152e40 <dec_speed>:
  152e40:	03400574 	movhi	r13,21

# hashtag
dec_speed:
	movia	r13, adc_speed
  152e44:	6b543804 	addi	r13,r13,20704
	ldw		r14, (r13)
  152e48:	6b800017 	ldw	r14,0(r13)
	slli	r14, r14, 1
  152e4c:	701c907a 	slli	r14,r14,1
	MOVWI	r15, 0x00FFFFFF
  152e50:	03c03ff4 	movhi	r15,255
  152e54:	7bffffd4 	ori	r15,r15,65535
	and		r14, r14, r15
  152e58:	73dc703a 	and	r14,r14,r15
	beq		r14, r0, set_speed_2
  152e5c:	70004526 	beq	r14,zero,152f74 <set_speed_2>

00152e60 <dec_speed_cont>:
dec_speed_cont:
	MOVWI	r15, ADC_RATE_BASE
  152e60:	03c005b4 	movhi	r15,22
  152e64:	7bc46414 	ori	r15,r15,4496
	stw		r14, (r15)
  152e68:	7b800015 	stw	r14,0(r15)
	stw		r14, (r13)
  152e6c:	6b800015 	stw	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x04
  152e70:	deffff04 	addi	sp,sp,-4
  152e74:	da400015 	stw	r9,0(sp)
  152e78:	deffff04 	addi	sp,sp,-4
  152e7c:	da800015 	stw	r10,0(sp)
  152e80:	024005b4 	movhi	r9,22
  152e84:	4a444014 	ori	r9,r9,4352
  152e88:	02800034 	movhi	r10,0
  152e8c:	52800114 	ori	r10,r10,4
  152e90:	4a800035 	stwio	r10,0(r9)
  152e94:	da800017 	ldw	r10,0(sp)
  152e98:	dec00104 	addi	sp,sp,4
  152e9c:	da400017 	ldw	r9,0(sp)
  152ea0:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  152ea4:	deffff04 	addi	sp,sp,-4
  152ea8:	da400015 	stw	r9,0(sp)
  152eac:	deffff04 	addi	sp,sp,-4
  152eb0:	da800015 	stw	r10,0(sp)
  152eb4:	024005b4 	movhi	r9,22
  152eb8:	4a444014 	ori	r9,r9,4352
  152ebc:	02800034 	movhi	r10,0
  152ec0:	52800094 	ori	r10,r10,2
  152ec4:	4a800035 	stwio	r10,0(r9)
  152ec8:	da800017 	ldw	r10,0(sp)
  152ecc:	dec00104 	addi	sp,sp,4
  152ed0:	da400017 	ldw	r9,0(sp)
  152ed4:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  152ed8:	003fc906 	br	152e00 <key_lookup_cont>

00152edc <inc_speed>:
  152edc:	03400574 	movhi	r13,21

inc_speed:
	movia	r13, adc_speed
  152ee0:	6b543804 	addi	r13,r13,20704
	ldwio	r14, (r13)
  152ee4:	6b800037 	ldwio	r14,0(r13)
	srli	r14, r14, 1
  152ee8:	701cd07a 	srli	r14,r14,1
	beq		r14, r0, set_speed_1
  152eec:	70001f26 	beq	r14,zero,152f6c <set_speed_1>

00152ef0 <inc_speed_cont>:
inc_speed_cont:
	MOVWI	r15, ADC_RATE_BASE
  152ef0:	03c005b4 	movhi	r15,22
  152ef4:	7bc46414 	ori	r15,r15,4496
	stwio	r14, (r15)
  152ef8:	7b800035 	stwio	r14,0(r15)
	stwio	r14, (r13)
  152efc:	6b800035 	stwio	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x04
  152f00:	deffff04 	addi	sp,sp,-4
  152f04:	da400015 	stw	r9,0(sp)
  152f08:	deffff04 	addi	sp,sp,-4
  152f0c:	da800015 	stw	r10,0(sp)
  152f10:	024005b4 	movhi	r9,22
  152f14:	4a444014 	ori	r9,r9,4352
  152f18:	02800034 	movhi	r10,0
  152f1c:	52800114 	ori	r10,r10,4
  152f20:	4a800035 	stwio	r10,0(r9)
  152f24:	da800017 	ldw	r10,0(sp)
  152f28:	dec00104 	addi	sp,sp,4
  152f2c:	da400017 	ldw	r9,0(sp)
  152f30:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  152f34:	deffff04 	addi	sp,sp,-4
  152f38:	da400015 	stw	r9,0(sp)
  152f3c:	deffff04 	addi	sp,sp,-4
  152f40:	da800015 	stw	r10,0(sp)
  152f44:	024005b4 	movhi	r9,22
  152f48:	4a444014 	ori	r9,r9,4352
  152f4c:	02800034 	movhi	r10,0
  152f50:	52800094 	ori	r10,r10,2
  152f54:	4a800035 	stwio	r10,0(r9)
  152f58:	da800017 	ldw	r10,0(sp)
  152f5c:	dec00104 	addi	sp,sp,4
  152f60:	da400017 	ldw	r9,0(sp)
  152f64:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  152f68:	003fa506 	br	152e00 <key_lookup_cont>

00152f6c <set_speed_1>:

set_speed_1:
	movi	r14, 1
  152f6c:	03800044 	movi	r14,1
	br		inc_speed_cont
  152f70:	003fdf06 	br	152ef0 <inc_speed_cont>

00152f74 <set_speed_2>:

set_speed_2:
	MOVWI	r14, 0x00800000
  152f74:	03802034 	movhi	r14,128
  152f78:	73802034 	orhi	r14,r14,128
	br		dec_speed_cont
  152f7c:	003fb806 	br	152e60 <dec_speed_cont>

00152f80 <dec_level>:
  152f80:	03400574 	movhi	r13,21



dec_level:
	movia	r13, trig_level
  152f84:	6b543984 	addi	r13,r13,20710
	ldb		r14, (r13)
  152f88:	6b800007 	ldb	r14,0(r13)
	subi	r14, r14, 5
  152f8c:	73bffec4 	addi	r14,r14,-5
	movi	r15, -128
  152f90:	03ffe004 	movi	r15,-128
	blt		r14, r15, set_level_2
  152f94:	73c04616 	blt	r14,r15,1530b0 <set_level_2>

00152f98 <dec_level_cont>:
dec_level_cont:
	MOVWI	r15, TRIG_LEVEL_BASE
  152f98:	03c005b4 	movhi	r15,22
  152f9c:	7bc43014 	ori	r15,r15,4288
	stw		r14, (r15)
  152fa0:	7b800015 	stw	r14,0(r15)
	stb		r14, (r13)
  152fa4:	6b800005 	stb	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x04
  152fa8:	deffff04 	addi	sp,sp,-4
  152fac:	da400015 	stw	r9,0(sp)
  152fb0:	deffff04 	addi	sp,sp,-4
  152fb4:	da800015 	stw	r10,0(sp)
  152fb8:	024005b4 	movhi	r9,22
  152fbc:	4a444014 	ori	r9,r9,4352
  152fc0:	02800034 	movhi	r10,0
  152fc4:	52800114 	ori	r10,r10,4
  152fc8:	4a800035 	stwio	r10,0(r9)
  152fcc:	da800017 	ldw	r10,0(sp)
  152fd0:	dec00104 	addi	sp,sp,4
  152fd4:	da400017 	ldw	r9,0(sp)
  152fd8:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  152fdc:	deffff04 	addi	sp,sp,-4
  152fe0:	da400015 	stw	r9,0(sp)
  152fe4:	deffff04 	addi	sp,sp,-4
  152fe8:	da800015 	stw	r10,0(sp)
  152fec:	024005b4 	movhi	r9,22
  152ff0:	4a444014 	ori	r9,r9,4352
  152ff4:	02800034 	movhi	r10,0
  152ff8:	52800094 	ori	r10,r10,2
  152ffc:	4a800035 	stwio	r10,0(r9)
  153000:	da800017 	ldw	r10,0(sp)
  153004:	dec00104 	addi	sp,sp,4
  153008:	da400017 	ldw	r9,0(sp)
  15300c:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  153010:	003f7b06 	br	152e00 <key_lookup_cont>

00153014 <inc_level>:
  153014:	03400574 	movhi	r13,21

inc_level:
	movia	r13, trig_level
  153018:	6b543984 	addi	r13,r13,20710
	ldb		r14, (r13)
  15301c:	6b800007 	ldb	r14,0(r13)
	addi	r14, r14, 5
  153020:	73800144 	addi	r14,r14,5
	movi	r15, 127
  153024:	03c01fc4 	movi	r15,127
	bgt		r14, r15, set_level_1
  153028:	7b801f16 	blt	r15,r14,1530a8 <set_level_1>

0015302c <inc_level_cont>:
inc_level_cont:
	MOVWI	r15, TRIG_LEVEL_BASE
  15302c:	03c005b4 	movhi	r15,22
  153030:	7bc43014 	ori	r15,r15,4288
	stw		r14, (r15)
  153034:	7b800015 	stw	r14,0(r15)
	stb		r14, (r13)
  153038:	6b800005 	stb	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x04
  15303c:	deffff04 	addi	sp,sp,-4
  153040:	da400015 	stw	r9,0(sp)
  153044:	deffff04 	addi	sp,sp,-4
  153048:	da800015 	stw	r10,0(sp)
  15304c:	024005b4 	movhi	r9,22
  153050:	4a444014 	ori	r9,r9,4352
  153054:	02800034 	movhi	r10,0
  153058:	52800114 	ori	r10,r10,4
  15305c:	4a800035 	stwio	r10,0(r9)
  153060:	da800017 	ldw	r10,0(sp)
  153064:	dec00104 	addi	sp,sp,4
  153068:	da400017 	ldw	r9,0(sp)
  15306c:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  153070:	deffff04 	addi	sp,sp,-4
  153074:	da400015 	stw	r9,0(sp)
  153078:	deffff04 	addi	sp,sp,-4
  15307c:	da800015 	stw	r10,0(sp)
  153080:	024005b4 	movhi	r9,22
  153084:	4a444014 	ori	r9,r9,4352
  153088:	02800034 	movhi	r10,0
  15308c:	52800094 	ori	r10,r10,2
  153090:	4a800035 	stwio	r10,0(r9)
  153094:	da800017 	ldw	r10,0(sp)
  153098:	dec00104 	addi	sp,sp,4
  15309c:	da400017 	ldw	r9,0(sp)
  1530a0:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  1530a4:	003f5606 	br	152e00 <key_lookup_cont>

001530a8 <set_level_1>:

set_level_1:
	movi	r14, 127
  1530a8:	03801fc4 	movi	r14,127
	br		inc_level_cont
  1530ac:	003fdf06 	br	15302c <inc_level_cont>

001530b0 <set_level_2>:

set_level_2:
	MOVWI	r14, -128
  1530b0:	03bffff4 	movhi	r14,65535
  1530b4:	73bfe014 	ori	r14,r14,65408
	br		dec_level_cont
  1530b8:	003fb706 	br	152f98 <dec_level_cont>

001530bc <dec_delay>:
  1530bc:	03400574 	movhi	r13,21



dec_delay:
	movia	r13, trig_delay
  1530c0:	6b543904 	addi	r13,r13,20708
	ldh		r14, (r13)
  1530c4:	6b80000f 	ldh	r14,0(r13)
	subi	r14, r14, 10
  1530c8:	73bffd84 	addi	r14,r14,-10
	ble		r14, r0, set_delay_2
  1530cc:	0380470e 	bge	zero,r14,1531ec <set_delay_2>

001530d0 <dec_delay_cont>:
dec_delay_cont:
	MOVWI	r15, TRIG_DELAY_BASE
  1530d0:	03c005b4 	movhi	r15,22
  1530d4:	7bc42814 	ori	r15,r15,4256
	stw		r14, (r15)
  1530d8:	7b800015 	stw	r14,0(r15)
	sth		r14, (r13)
  1530dc:	6b80000d 	sth	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x04
  1530e0:	deffff04 	addi	sp,sp,-4
  1530e4:	da400015 	stw	r9,0(sp)
  1530e8:	deffff04 	addi	sp,sp,-4
  1530ec:	da800015 	stw	r10,0(sp)
  1530f0:	024005b4 	movhi	r9,22
  1530f4:	4a444014 	ori	r9,r9,4352
  1530f8:	02800034 	movhi	r10,0
  1530fc:	52800114 	ori	r10,r10,4
  153100:	4a800035 	stwio	r10,0(r9)
  153104:	da800017 	ldw	r10,0(sp)
  153108:	dec00104 	addi	sp,sp,4
  15310c:	da400017 	ldw	r9,0(sp)
  153110:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  153114:	deffff04 	addi	sp,sp,-4
  153118:	da400015 	stw	r9,0(sp)
  15311c:	deffff04 	addi	sp,sp,-4
  153120:	da800015 	stw	r10,0(sp)
  153124:	024005b4 	movhi	r9,22
  153128:	4a444014 	ori	r9,r9,4352
  15312c:	02800034 	movhi	r10,0
  153130:	52800094 	ori	r10,r10,2
  153134:	4a800035 	stwio	r10,0(r9)
  153138:	da800017 	ldw	r10,0(sp)
  15313c:	dec00104 	addi	sp,sp,4
  153140:	da400017 	ldw	r9,0(sp)
  153144:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  153148:	003f2d06 	br	152e00 <key_lookup_cont>

0015314c <inc_delay>:
  15314c:	03400574 	movhi	r13,21

inc_delay:
	movia	r13, trig_delay
  153150:	6b543904 	addi	r13,r13,20708
	ldh		r14, (r13)
  153154:	6b80000f 	ldh	r14,0(r13)
	addi	r14, r14, 10
  153158:	73800284 	addi	r14,r14,10
	movi	r15, 1000
  15315c:	03c0fa04 	movi	r15,1000
	bgeu	r14, r15, set_delay_1
  153160:	73c01f2e 	bgeu	r14,r15,1531e0 <set_delay_1>

00153164 <inc_delay_cont>:
inc_delay_cont:
	MOVWI	r15, TRIG_DELAY_BASE
  153164:	03c005b4 	movhi	r15,22
  153168:	7bc42814 	ori	r15,r15,4256
	stw		r14, (r15)
  15316c:	7b800015 	stw	r14,0(r15)
	sth		r14, (r13)
  153170:	6b80000d 	sth	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x04
  153174:	deffff04 	addi	sp,sp,-4
  153178:	da400015 	stw	r9,0(sp)
  15317c:	deffff04 	addi	sp,sp,-4
  153180:	da800015 	stw	r10,0(sp)
  153184:	024005b4 	movhi	r9,22
  153188:	4a444014 	ori	r9,r9,4352
  15318c:	02800034 	movhi	r10,0
  153190:	52800114 	ori	r10,r10,4
  153194:	4a800035 	stwio	r10,0(r9)
  153198:	da800017 	ldw	r10,0(sp)
  15319c:	dec00104 	addi	sp,sp,4
  1531a0:	da400017 	ldw	r9,0(sp)
  1531a4:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  1531a8:	deffff04 	addi	sp,sp,-4
  1531ac:	da400015 	stw	r9,0(sp)
  1531b0:	deffff04 	addi	sp,sp,-4
  1531b4:	da800015 	stw	r10,0(sp)
  1531b8:	024005b4 	movhi	r9,22
  1531bc:	4a444014 	ori	r9,r9,4352
  1531c0:	02800034 	movhi	r10,0
  1531c4:	52800094 	ori	r10,r10,2
  1531c8:	4a800035 	stwio	r10,0(r9)
  1531cc:	da800017 	ldw	r10,0(sp)
  1531d0:	dec00104 	addi	sp,sp,4
  1531d4:	da400017 	ldw	r9,0(sp)
  1531d8:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  1531dc:	003f0806 	br	152e00 <key_lookup_cont>

001531e0 <set_delay_1>:

set_delay_1:
	MOVWI	r14, 50000
  1531e0:	03800034 	movhi	r14,0
  1531e4:	73b0d414 	ori	r14,r14,50000
	br		inc_delay_cont
  1531e8:	003fde06 	br	153164 <inc_delay_cont>

001531ec <set_delay_2>:

set_delay_2:
	mov		r14, r0
  1531ec:	001d883a 	mov	r14,zero
	br		dec_delay_cont
  1531f0:	003fb706 	br	1530d0 <dec_delay_cont>

001531f4 <key_available>:

.global key_available
.type	key_available, @function

key_available:
	SAVE
  1531f4:	deffff04 	addi	sp,sp,-4
  1531f8:	dfc00015 	stw	ra,0(sp)
  1531fc:	deffff04 	addi	sp,sp,-4
  153200:	df000015 	stw	fp,0(sp)
  153204:	d839883a 	mov	fp,sp
  153208:	00800574 	movhi	r2,21

	# Simply return the value in key_press.
	movia	r2, key_press
  15320c:	10943404 	addi	r2,r2,20688
	ldb		r2, (r2)
  153210:	10800007 	ldb	r2,0(r2)

00153214 <key_available_done>:

key_available_done:
	RESTORE
  153214:	e037883a 	mov	sp,fp
  153218:	df000017 	ldw	fp,0(sp)
  15321c:	dec00104 	addi	sp,sp,4
  153220:	dfc00017 	ldw	ra,0(sp)
  153224:	dec00104 	addi	sp,sp,4
	ret
  153228:	f800283a 	ret

0015322c <getkey>:

.global	getkey
.type	getkey, @function

getkey:
	SAVE
  15322c:	deffff04 	addi	sp,sp,-4
  153230:	dfc00015 	stw	ra,0(sp)
  153234:	deffff04 	addi	sp,sp,-4
  153238:	df000015 	stw	fp,0(sp)
  15323c:	d839883a 	mov	fp,sp
  153240:	02000574 	movhi	r8,21

	# Block until legal key arrives (which is also when key_press = TRUE).
	movia	r8, key_value
  153244:	42143444 	addi	r8,r8,20689
	ldb		r8, (r8)
  153248:	42000007 	ldb	r8,0(r8)
	movi	r9, KEY_ILLEGAL
  15324c:	02400184 	movi	r9,6
	beq		r8, r9, getkey
  153250:	427ff626 	beq	r8,r9,15322c <getkey>
  153254:	00800574 	movhi	r2,21

	# Get return value.
	movia	r2, key_value
  153258:	10943444 	addi	r2,r2,20689
	ldb		r2, (r2)
  15325c:	10800007 	ldb	r2,0(r2)
  153260:	02800574 	movhi	r10,21

	# Update key_value with KEY_ILLEGAL.
	movia	r10, key_value
  153264:	52943444 	addi	r10,r10,20689
	stb		r9, (r10)
  153268:	52400005 	stb	r9,0(r10)
  15326c:	02800574 	movhi	r10,21

	# Update key_press with FALSE.
	movia	r10, key_press
  153270:	52943404 	addi	r10,r10,20688
	stb		r0, (r10)
  153274:	50000005 	stb	zero,0(r10)

00153278 <getkey_done>:

getkey_done:
	RESTORE
  153278:	e037883a 	mov	sp,fp
  15327c:	df000017 	ldw	fp,0(sp)
  153280:	dec00104 	addi	sp,sp,4
  153284:	dfc00017 	ldw	ra,0(sp)
  153288:	dec00104 	addi	sp,sp,4
	ret
  15328c:	f800283a 	ret

00153290 <key_map>:
  153290:	03020100 	call	302010 <_gp+0x1a43d0>
  153294:	00000004 	movi	zero,0
	...
  1532a0:	06000000 	call	600000 <_gp+0x4a23c0>

001532a4 <adc_int_installer>:

.global adc_int_installer
.type	adc_int_installer, @function

adc_int_installer:
	SAVE
  1532a4:	deffff04 	addi	sp,sp,-4
  1532a8:	dfc00015 	stw	ra,0(sp)
  1532ac:	deffff04 	addi	sp,sp,-4
  1532b0:	df000015 	stw	fp,0(sp)
  1532b4:	d839883a 	mov	fp,sp

	# Set FIFO speed
	STWI	ADC_RATE_BASE, 0x040000
  1532b8:	deffff04 	addi	sp,sp,-4
  1532bc:	da400015 	stw	r9,0(sp)
  1532c0:	deffff04 	addi	sp,sp,-4
  1532c4:	da800015 	stw	r10,0(sp)
  1532c8:	024005b4 	movhi	r9,22
  1532cc:	4a446414 	ori	r9,r9,4496
  1532d0:	02800134 	movhi	r10,4
  1532d4:	52800134 	orhi	r10,r10,4
  1532d8:	4a800035 	stwio	r10,0(r9)
  1532dc:	da800017 	ldw	r10,0(sp)
  1532e0:	dec00104 	addi	sp,sp,4
  1532e4:	da400017 	ldw	r9,0(sp)
  1532e8:	dec00104 	addi	sp,sp,4

	# Set Trigger default level (2's complement), delay
	STWI	TRIG_LEVEL_BASE, 0
  1532ec:	deffff04 	addi	sp,sp,-4
  1532f0:	da400015 	stw	r9,0(sp)
  1532f4:	deffff04 	addi	sp,sp,-4
  1532f8:	da800015 	stw	r10,0(sp)
  1532fc:	024005b4 	movhi	r9,22
  153300:	4a443014 	ori	r9,r9,4288
  153304:	02800034 	movhi	r10,0
  153308:	52800014 	ori	r10,r10,0
  15330c:	4a800035 	stwio	r10,0(r9)
  153310:	da800017 	ldw	r10,0(sp)
  153314:	dec00104 	addi	sp,sp,4
  153318:	da400017 	ldw	r9,0(sp)
  15331c:	dec00104 	addi	sp,sp,4
	STWI	TRIG_DELAY_BASE, 240
  153320:	deffff04 	addi	sp,sp,-4
  153324:	da400015 	stw	r9,0(sp)
  153328:	deffff04 	addi	sp,sp,-4
  15332c:	da800015 	stw	r10,0(sp)
  153330:	024005b4 	movhi	r9,22
  153334:	4a442814 	ori	r9,r9,4256
  153338:	02800034 	movhi	r10,0
  15333c:	52803c14 	ori	r10,r10,240
  153340:	4a800035 	stwio	r10,0(r9)
  153344:	da800017 	ldw	r10,0(sp)
  153348:	dec00104 	addi	sp,sp,4
  15334c:	da400017 	ldw	r9,0(sp)
  153350:	dec00104 	addi	sp,sp,4
	STWI	TRIG_ERROR_BASE, 5
  153354:	deffff04 	addi	sp,sp,-4
  153358:	da400015 	stw	r9,0(sp)
  15335c:	deffff04 	addi	sp,sp,-4
  153360:	da800015 	stw	r10,0(sp)
  153364:	024005b4 	movhi	r9,22
  153368:	4a446014 	ori	r9,r9,4480
  15336c:	02800034 	movhi	r10,0
  153370:	52800154 	ori	r10,r10,5
  153374:	4a800035 	stwio	r10,0(r9)
  153378:	da800017 	ldw	r10,0(sp)
  15337c:	dec00104 	addi	sp,sp,4
  153380:	da400017 	ldw	r9,0(sp)
  153384:	dec00104 	addi	sp,sp,4

	# Install the interrupt handler
	mov		r4, r0
  153388:	0009883a 	mov	r4,zero
	movi	r5, 6
  15338c:	01400184 	movi	r5,6
	MOVWI	r6, adc_int_handler
  153390:	01800574 	movhi	r6,21
  153394:	318cf714 	ori	r6,r6,13276
	mov		r7, r0
  153398:	000f883a 	mov	r7,zero
	PUSH	r0
  15339c:	deffff04 	addi	sp,sp,-4
  1533a0:	d8000015 	stw	zero,0(sp)
	call	alt_ic_isr_register
  1533a4:	0153e0c0 	call	153e0c <alt_ic_isr_register>
	POP		r0
  1533a8:	d8000017 	ldw	zero,0(sp)
  1533ac:	dec00104 	addi	sp,sp,4

	# Clear the edge capture register (write 1 to clear).
	MOVWI	r8, TRIG_INT_BASE
  1533b0:	020005b4 	movhi	r8,22
  1533b4:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0xFFFFFFFF
  1533b8:	027ffff4 	movhi	r9,65535
  1533bc:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  1533c0:	42400315 	stw	r9,12(r8)

001533c4 <adc_int_installer_done>:

adc_int_installer_done:
	RESTORE
  1533c4:	e037883a 	mov	sp,fp
  1533c8:	df000017 	ldw	fp,0(sp)
  1533cc:	dec00104 	addi	sp,sp,4
  1533d0:	dfc00017 	ldw	ra,0(sp)
  1533d4:	dec00104 	addi	sp,sp,4
	ret
  1533d8:	f800283a 	ret

001533dc <adc_int_handler>:

.global adc_int_handler
.type adc_int_handler, @function

adc_int_handler:
	SAVE
  1533dc:	deffff04 	addi	sp,sp,-4
  1533e0:	dfc00015 	stw	ra,0(sp)
  1533e4:	deffff04 	addi	sp,sp,-4
  1533e8:	df000015 	stw	fp,0(sp)
  1533ec:	d839883a 	mov	fp,sp

	# Clear interrupts.
	MOVWI	r8, TRIG_INT_BASE
  1533f0:	020005b4 	movhi	r8,22
  1533f4:	42044814 	ori	r8,r8,4384
	stw		r0, PIO_IRQ_MASK(r8)
  1533f8:	40000215 	stw	zero,8(r8)

	# Get the edge capture register.
	ldw		r9, PIO_EDGE_CAP(r8)
  1533fc:	42400317 	ldw	r9,12(r8)

	# Pause FIFO write.
	STWI	ADC_CTRL_BASE, 0x00
  153400:	deffff04 	addi	sp,sp,-4
  153404:	da400015 	stw	r9,0(sp)
  153408:	deffff04 	addi	sp,sp,-4
  15340c:	da800015 	stw	r10,0(sp)
  153410:	024005b4 	movhi	r9,22
  153414:	4a444014 	ori	r9,r9,4352
  153418:	02800034 	movhi	r10,0
  15341c:	52800014 	ori	r10,r10,0
  153420:	4a800035 	stwio	r10,0(r9)
  153424:	da800017 	ldw	r10,0(sp)
  153428:	dec00104 	addi	sp,sp,4
  15342c:	da400017 	ldw	r9,0(sp)
  153430:	dec00104 	addi	sp,sp,4

	# Loop variable to clear front of fifo
	mov		r10, r0
  153434:	0015883a 	mov	r10,zero
  153438:	02000574 	movhi	r8,21

	# Set specially-designed delay offsets based on which fifo source clock is being used.
	movia	r8, fifo_clk_src
  15343c:	42143d04 	addi	r8,r8,20724
	ldb		r9, (r8)
  153440:	42400007 	ldb	r9,0(r8)
	beq		r9, r0, adc_int_handler_fast_clk_offset
  153444:	48000226 	beq	r9,zero,153450 <adc_int_handler_fast_clk_offset>

00153448 <adc_int_handler_1M_clk_offset>:

adc_int_handler_1M_clk_offset:
	movi	r13, 15
  153448:	034003c4 	movi	r13,15
	br		adc_int_handler_clear_front
  15344c:	00000106 	br	153454 <adc_int_handler_clear_front>

00153450 <adc_int_handler_fast_clk_offset>:

adc_int_handler_fast_clk_offset:
	movi	r13, 22
  153450:	03400584 	movi	r13,22

00153454 <adc_int_handler_clear_front>:

adc_int_handler_clear_front:
	# Bitbang clock pulse.
	STWI	ADC_CTRL_BASE, 0x01
  153454:	deffff04 	addi	sp,sp,-4
  153458:	da400015 	stw	r9,0(sp)
  15345c:	deffff04 	addi	sp,sp,-4
  153460:	da800015 	stw	r10,0(sp)
  153464:	024005b4 	movhi	r9,22
  153468:	4a444014 	ori	r9,r9,4352
  15346c:	02800034 	movhi	r10,0
  153470:	52800054 	ori	r10,r10,1
  153474:	4a800035 	stwio	r10,0(r9)
  153478:	da800017 	ldw	r10,0(sp)
  15347c:	dec00104 	addi	sp,sp,4
  153480:	da400017 	ldw	r9,0(sp)
  153484:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x00
  153488:	deffff04 	addi	sp,sp,-4
  15348c:	da400015 	stw	r9,0(sp)
  153490:	deffff04 	addi	sp,sp,-4
  153494:	da800015 	stw	r10,0(sp)
  153498:	024005b4 	movhi	r9,22
  15349c:	4a444014 	ori	r9,r9,4352
  1534a0:	02800034 	movhi	r10,0
  1534a4:	52800014 	ori	r10,r10,0
  1534a8:	4a800035 	stwio	r10,0(r9)
  1534ac:	da800017 	ldw	r10,0(sp)
  1534b0:	dec00104 	addi	sp,sp,4
  1534b4:	da400017 	ldw	r9,0(sp)
  1534b8:	dec00104 	addi	sp,sp,4

	# Keep going until 480 good remaining points (for display)
	addi	r10, r10, 1
  1534bc:	52800044 	addi	r10,r10,1
	bltu	r10, r13, adc_int_handler_clear_front
  1534c0:	537fe436 	bltu	r10,r13,153454 <adc_int_handler_clear_front>
  1534c4:	02000574 	movhi	r8,21

	movia	r8, sample_buffer_A
  1534c8:	42143e04 	addi	r8,r8,20728
	mov		r10, r0
  1534cc:	0015883a 	mov	r10,zero

001534d0 <adc_int_handler_loop>:

adc_int_handler_loop:
	# Bitbang clock pulse.
	STWI	ADC_CTRL_BASE, 0x01
  1534d0:	deffff04 	addi	sp,sp,-4
  1534d4:	da400015 	stw	r9,0(sp)
  1534d8:	deffff04 	addi	sp,sp,-4
  1534dc:	da800015 	stw	r10,0(sp)
  1534e0:	024005b4 	movhi	r9,22
  1534e4:	4a444014 	ori	r9,r9,4352
  1534e8:	02800034 	movhi	r10,0
  1534ec:	52800054 	ori	r10,r10,1
  1534f0:	4a800035 	stwio	r10,0(r9)
  1534f4:	da800017 	ldw	r10,0(sp)
  1534f8:	dec00104 	addi	sp,sp,4
  1534fc:	da400017 	ldw	r9,0(sp)
  153500:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x00
  153504:	deffff04 	addi	sp,sp,-4
  153508:	da400015 	stw	r9,0(sp)
  15350c:	deffff04 	addi	sp,sp,-4
  153510:	da800015 	stw	r10,0(sp)
  153514:	024005b4 	movhi	r9,22
  153518:	4a444014 	ori	r9,r9,4352
  15351c:	02800034 	movhi	r10,0
  153520:	52800014 	ori	r10,r10,0
  153524:	4a800035 	stwio	r10,0(r9)
  153528:	da800017 	ldw	r10,0(sp)
  15352c:	dec00104 	addi	sp,sp,4
  153530:	da400017 	ldw	r9,0(sp)
  153534:	dec00104 	addi	sp,sp,4

	# Get ch. A, ch. B, and logic data.
	MOVWI	r11, ADC_RAW_BASE
  153538:	02c005b4 	movhi	r11,22
  15353c:	5ac46814 	ori	r11,r11,4512
	ldwio	r12, (r11)
  153540:	5b000037 	ldwio	r12,0(r11)

	# r12 for ch. A, r13 for ch. B, r14 for logic.
	srli	r13, r12, 8
  153544:	601ad23a 	srli	r13,r12,8
	srli	r14, r12, 16
  153548:	601cd43a 	srli	r14,r12,16
	movui	r15, 128
  15354c:	03c02014 	movui	r15,128

	# Convert analog channels to non-signed values.
	add		r12, r12, r15
  153550:	63d9883a 	add	r12,r12,r15
	add		r13, r13, r15
  153554:	6bdb883a 	add	r13,r13,r15

	# Keep only the bottom byte.
	andi	r12, r12, 0xFF
  153558:	63003fcc 	andi	r12,r12,255
	andi	r13, r13, 0xFF
  15355c:	6b403fcc 	andi	r13,r13,255
	andi	r14, r14, 0xFF
  153560:	73803fcc 	andi	r14,r14,255
  153564:	02000574 	movhi	r8,21

	# CH. A
	# Retrieve the current buffer contents.
	# Then update the current buffer with the new value.
	movia	r8, sample_buffer_A
  153568:	42143e04 	addi	r8,r8,20728
	add		r8, r8, r10
  15356c:	4291883a 	add	r8,r8,r10
	stb		r12, (r8)
  153570:	43000005 	stb	r12,0(r8)
  153574:	02000574 	movhi	r8,21

	# CH. B
	# Retrieve the current buffer contents.
	# Then update the current buffer with the new value.
	movia	r8, sample_buffer_B
  153578:	4214b604 	addi	r8,r8,21208
	add		r8, r8, r10
  15357c:	4291883a 	add	r8,r8,r10
	stb		r13, (r8)
  153580:	43400005 	stb	r13,0(r8)
  153584:	02000574 	movhi	r8,21

	# LOGIC ANALYZER
	# Retrieve the current buffer contents.
	# Then update the current buffer with the new value.
	movia	r8, sample_buffer_L
  153588:	42152e04 	addi	r8,r8,21688
	add		r8, r8, r10
  15358c:	4291883a 	add	r8,r8,r10
	stb		r14, (r8)
  153590:	43800005 	stb	r14,0(r8)

	addi	r10, r10, 1
  153594:	52800044 	addi	r10,r10,1
	movi	r15, 480
  153598:	03c07804 	movi	r15,480
	bltu	r10, r15, adc_int_handler_loop
  15359c:	53ffcc36 	bltu	r10,r15,1534d0 <adc_int_handler_loop>
  1535a0:	02000574 	movhi	r8,21

	# Sample done.
	movia	r8, sample_complete
  1535a4:	42143c04 	addi	r8,r8,20720
	movi	r9, 1
  1535a8:	02400044 	movi	r9,1
	stb		r9, (r8)
  1535ac:	42400005 	stb	r9,0(r8)

001535b0 <adc_int_handler_done>:

adc_int_handler_done:

	RESTORE
  1535b0:	e037883a 	mov	sp,fp
  1535b4:	df000017 	ldw	fp,0(sp)
  1535b8:	dec00104 	addi	sp,sp,4
  1535bc:	dfc00017 	ldw	ra,0(sp)
  1535c0:	dec00104 	addi	sp,sp,4
	ret
  1535c4:	f800283a 	ret

001535c8 <draw_trace>:

.global draw_trace
.type draw_trace, @function

draw_trace:
	SAVE
  1535c8:	deffff04 	addi	sp,sp,-4
  1535cc:	dfc00015 	stw	ra,0(sp)
  1535d0:	deffff04 	addi	sp,sp,-4
  1535d4:	df000015 	stw	fp,0(sp)
  1535d8:	d839883a 	mov	fp,sp
	push	r4
  1535dc:	deffff04 	addi	sp,sp,-4
  1535e0:	d9000015 	stw	r4,0(sp)
	push	r5
  1535e4:	deffff04 	addi	sp,sp,-4
  1535e8:	d9400015 	stw	r5,0(sp)
	push	r6
  1535ec:	deffff04 	addi	sp,sp,-4
  1535f0:	d9800015 	stw	r6,0(sp)
  1535f4:	02000574 	movhi	r8,21

	movia	r8, sample_buffer_A
  1535f8:	42143e04 	addi	r8,r8,20728
	mov		r10, r0
  1535fc:	0015883a 	mov	r10,zero

00153600 <draw_trace_loop>:

draw_trace_loop:
	ldb		r12, (r8)
  153600:	43000007 	ldb	r12,0(r8)
	movui	r15, 255
  153604:	03c03fd4 	movui	r15,255
	sub		r12, r15, r12
  153608:	7b19c83a 	sub	r12,r15,r12
	andi	r12, r12, 0xFF
  15360c:	63003fcc 	andi	r12,r12,255
	addi	r12, r12, 8
  153610:	63000204 	addi	r12,r12,8

	MOVWI	r9, VRAM_CTRL_BASE
  153614:	02400234 	movhi	r9,8
  153618:	4a400234 	orhi	r9,r9,8
	add		r9, r9, r10
  15361c:	4a93883a 	add	r9,r9,r10
	add		r9, r9, r10
  153620:	4a93883a 	add	r9,r9,r10

	mov		r11, r0
  153624:	0017883a 	mov	r11,zero

00153628 <draw_trace_col_loop>:
draw_trace_col_loop:
	MOVWI	r15, 0x001C
  153628:	03c00034 	movhi	r15,0
  15362c:	7bc00714 	ori	r15,r15,28
	sthio	r15, (r9)
  153630:	4bc0002d 	sthio	r15,0(r9)

	movi	r15, 136
  153634:	03c02204 	movi	r15,136
	beq		r11, r15, draw_grid_pt
  153638:	5bc01726 	beq	r11,r15,153698 <draw_grid_pt>

	movi	r15, 240
  15363c:	03c03c04 	movi	r15,240
	beq		r10, r15, draw_grid_pt
  153640:	53c01526 	beq	r10,r15,153698 <draw_grid_pt>

	beq		r11, r12, draw_trace_pt
  153644:	5b001826 	beq	r11,r12,1536a8 <draw_trace_pt>

00153648 <draw_trace_col_loop_continue>:

draw_trace_col_loop_continue:
	addi	r9, r9, 0x400
  153648:	4a410004 	addi	r9,r9,1024
	addi	r11, r11, 1
  15364c:	5ac00044 	addi	r11,r11,1
	movi	r15, 272
  153650:	03c04404 	movi	r15,272
	bltu	r11, r15, draw_trace_col_loop
  153654:	5bfff436 	bltu	r11,r15,153628 <draw_trace_col_loop>

	addi	r8, r8, 1
  153658:	42000044 	addi	r8,r8,1
	addi	r10, r10, 1
  15365c:	52800044 	addi	r10,r10,1
	movi	r15, 480
  153660:	03c07804 	movi	r15,480
	bltu	r10, r15, draw_trace_loop
  153664:	53ffe636 	bltu	r10,r15,153600 <draw_trace_loop>

00153668 <draw_trace_done>:

draw_trace_done:
	pop		r6
  153668:	d9800017 	ldw	r6,0(sp)
  15366c:	dec00104 	addi	sp,sp,4
	pop		r5
  153670:	d9400017 	ldw	r5,0(sp)
  153674:	dec00104 	addi	sp,sp,4
	pop		r4
  153678:	d9000017 	ldw	r4,0(sp)
  15367c:	dec00104 	addi	sp,sp,4
	RESTORE
  153680:	e037883a 	mov	sp,fp
  153684:	df000017 	ldw	fp,0(sp)
  153688:	dec00104 	addi	sp,sp,4
  15368c:	dfc00017 	ldw	ra,0(sp)
  153690:	dec00104 	addi	sp,sp,4
	ret
  153694:	f800283a 	ret

00153698 <draw_grid_pt>:

draw_grid_pt:
	MOVWI	r15, 0x1F00
  153698:	03c00034 	movhi	r15,0
  15369c:	7bc7c014 	ori	r15,r15,7936
	sthio	r15, (r9)
  1536a0:	4bc0002d 	sthio	r15,0(r9)
	br		draw_trace_col_loop_continue
  1536a4:	003fe806 	br	153648 <draw_trace_col_loop_continue>

001536a8 <draw_trace_pt>:

draw_trace_pt:
	MOVWI	r15, 0xE07F
  1536a8:	03c00034 	movhi	r15,0
  1536ac:	7bf81fd4 	ori	r15,r15,57471
	sthio	r15, (r9)
  1536b0:	4bc0002d 	sthio	r15,0(r9)
	br		draw_trace_col_loop_continue
  1536b4:	003fe406 	br	153648 <draw_trace_col_loop_continue>

001536b8 <draw_grid>:

.global draw_grid
.type draw_grid, @function

draw_grid:
	SAVE
  1536b8:	deffff04 	addi	sp,sp,-4
  1536bc:	dfc00015 	stw	ra,0(sp)
  1536c0:	deffff04 	addi	sp,sp,-4
  1536c4:	df000015 	stw	fp,0(sp)
  1536c8:	d839883a 	mov	fp,sp
	push	r4
  1536cc:	deffff04 	addi	sp,sp,-4
  1536d0:	d9000015 	stw	r4,0(sp)
	push	r5
  1536d4:	deffff04 	addi	sp,sp,-4
  1536d8:	d9400015 	stw	r5,0(sp)
	push	r6
  1536dc:	deffff04 	addi	sp,sp,-4
  1536e0:	d9800015 	stw	r6,0(sp)

	movui	r6, 0x1F00
  1536e4:	0187c014 	movui	r6,7936

	movui	r4, 136
  1536e8:	01002214 	movui	r4,136
	mov		r5, r0
  1536ec:	000b883a 	mov	r5,zero

001536f0 <draw_grid_horiz>:
draw_grid_horiz:
	call	draw_pixel
  1536f0:	015376c0 	call	15376c <draw_pixel>
	movui	r6, 0x003C
  1536f4:	01800f14 	movui	r6,60
	addi	r4, r4, 1
  1536f8:	21000044 	addi	r4,r4,1
	call	draw_pixel
  1536fc:	015376c0 	call	15376c <draw_pixel>
	addi	r4, r4, 1
  153700:	21000044 	addi	r4,r4,1
	call	draw_pixel
  153704:	015376c0 	call	15376c <draw_pixel>
	addi	r4, r4, 1
  153708:	21000044 	addi	r4,r4,1
	call	draw_pixel
  15370c:	015376c0 	call	15376c <draw_pixel>
	movui	r6, 0x1F00
  153710:	0187c014 	movui	r6,7936
	subi	r4, r4, 3
  153714:	213fff44 	addi	r4,r4,-3

	addi	r5, r5, 1
  153718:	29400044 	addi	r5,r5,1
	movi	r8, 480
  15371c:	02007804 	movi	r8,480
	bltu	r5, r8, draw_grid_horiz
  153720:	2a3ff336 	bltu	r5,r8,1536f0 <draw_grid_horiz>

	mov		r4, r0
  153724:	0009883a 	mov	r4,zero
	movui	r5, 240
  153728:	01403c14 	movui	r5,240

0015372c <draw_grid_vert>:
draw_grid_vert:
	call	draw_pixel
  15372c:	015376c0 	call	15376c <draw_pixel>

	addi	r4, r4, 1
  153730:	21000044 	addi	r4,r4,1
	movi	r8, 272
  153734:	02004404 	movi	r8,272
	bltu	r4, r8, draw_grid_vert
  153738:	223ffc36 	bltu	r4,r8,15372c <draw_grid_vert>

0015373c <draw_grid_done>:

draw_grid_done:
	pop		r6
  15373c:	d9800017 	ldw	r6,0(sp)
  153740:	dec00104 	addi	sp,sp,4
	pop		r5
  153744:	d9400017 	ldw	r5,0(sp)
  153748:	dec00104 	addi	sp,sp,4
	pop		r4
  15374c:	d9000017 	ldw	r4,0(sp)
  153750:	dec00104 	addi	sp,sp,4
	RESTORE
  153754:	e037883a 	mov	sp,fp
  153758:	df000017 	ldw	fp,0(sp)
  15375c:	dec00104 	addi	sp,sp,4
  153760:	dfc00017 	ldw	ra,0(sp)
  153764:	dec00104 	addi	sp,sp,4
	ret
  153768:	f800283a 	ret

0015376c <draw_pixel>:


draw_pixel:
	SAVE
  15376c:	deffff04 	addi	sp,sp,-4
  153770:	dfc00015 	stw	ra,0(sp)
  153774:	deffff04 	addi	sp,sp,-4
  153778:	df000015 	stw	fp,0(sp)
  15377c:	d839883a 	mov	fp,sp

	push	r4
  153780:	deffff04 	addi	sp,sp,-4
  153784:	d9000015 	stw	r4,0(sp)
	push	r5
  153788:	deffff04 	addi	sp,sp,-4
  15378c:	d9400015 	stw	r5,0(sp)

	slli	r4, r4, 10
  153790:	200892ba 	slli	r4,r4,10
	add		r4, r4, r5
  153794:	2149883a 	add	r4,r4,r5
	add		r4, r4, r5
  153798:	2149883a 	add	r4,r4,r5
	MOVWI	r5, VRAM_CTRL_BASE
  15379c:	01400234 	movhi	r5,8
  1537a0:	29400234 	orhi	r5,r5,8
	add		r4, r4, r5
  1537a4:	2149883a 	add	r4,r4,r5
	sth		r6, (r4)
  1537a8:	2180000d 	sth	r6,0(r4)

	pop		r5
  1537ac:	d9400017 	ldw	r5,0(sp)
  1537b0:	dec00104 	addi	sp,sp,4
	pop		r4
  1537b4:	d9000017 	ldw	r4,0(sp)
  1537b8:	dec00104 	addi	sp,sp,4

001537bc <draw_pixel_done>:

draw_pixel_done:
	RESTORE
  1537bc:	e037883a 	mov	sp,fp
  1537c0:	df000017 	ldw	fp,0(sp)
  1537c4:	dec00104 	addi	sp,sp,4
  1537c8:	dfc00017 	ldw	ra,0(sp)
  1537cc:	dec00104 	addi	sp,sp,4
	ret
  1537d0:	f800283a 	ret

001537d4 <clear_display>:

.global clear_display
.type clear_display, @function

clear_display:
	SAVE
  1537d4:	deffff04 	addi	sp,sp,-4
  1537d8:	dfc00015 	stw	ra,0(sp)
  1537dc:	deffff04 	addi	sp,sp,-4
  1537e0:	df000015 	stw	fp,0(sp)
  1537e4:	d839883a 	mov	fp,sp

	# Get display address and background color.
	MOVWI	r8, VRAM_CTRL_BASE
  1537e8:	02000234 	movhi	r8,8
  1537ec:	42000234 	orhi	r8,r8,8
	movui	r9, 272
  1537f0:	02404414 	movui	r9,272
	slli	r9, r9, 10
  1537f4:	481292ba 	slli	r9,r9,10
	add		r9, r8, r9
  1537f8:	4253883a 	add	r9,r8,r9
	movui	r15, 0x001C
  1537fc:	03c00714 	movui	r15,28

00153800 <clear_display_loop>:

	# Loop over all screen pixels, clearing them.
clear_display_loop:
	sthio 	r15, (r8)
  153800:	43c0002d 	sthio	r15,0(r8)
	addi	r8, r8, 2
  153804:	42000084 	addi	r8,r8,2
	bltu	r8, r9, clear_display_loop
  153808:	427ffd36 	bltu	r8,r9,153800 <clear_display_loop>

0015380c <clear_display_done>:

clear_display_done:
	RESTORE
  15380c:	e037883a 	mov	sp,fp
  153810:	df000017 	ldw	fp,0(sp)
  153814:	dec00104 	addi	sp,sp,4
  153818:	dfc00017 	ldw	ra,0(sp)
  15381c:	dec00104 	addi	sp,sp,4
	ret
  153820:	f800283a 	ret

00153824 <plot_pixel>:

.global plot_pixel
.type plot_pixel, @function

plot_pixel:
	SAVE
  153824:	deffff04 	addi	sp,sp,-4
  153828:	dfc00015 	stw	ra,0(sp)
  15382c:	deffff04 	addi	sp,sp,-4
  153830:	df000015 	stw	fp,0(sp)
  153834:	d839883a 	mov	fp,sp

	push	r4
  153838:	deffff04 	addi	sp,sp,-4
  15383c:	d9000015 	stw	r4,0(sp)
	push	r5
  153840:	deffff04 	addi	sp,sp,-4
  153844:	d9400015 	stw	r5,0(sp)

	# Each row takes 1024 bytes, so shift row var by 10 bits.
	slli	r5, r5, 10
  153848:	280a92ba 	slli	r5,r5,10
	# Add twice to account for 16-bit VRAM storage.
	add		r5, r5, r4
  15384c:	290b883a 	add	r5,r5,r4
	add		r5, r5, r4
  153850:	290b883a 	add	r5,r5,r4
	# Now get the absolute address.
	MOVWI	r4, VRAM_CTRL_BASE
  153854:	01000234 	movhi	r4,8
  153858:	21000234 	orhi	r4,r4,8
	add		r5, r5, r4
  15385c:	290b883a 	add	r5,r5,r4
	# Store the color.
	sth		r6, (r5)
  153860:	2980000d 	sth	r6,0(r5)

	pop		r5
  153864:	d9400017 	ldw	r5,0(sp)
  153868:	dec00104 	addi	sp,sp,4
	pop		r4
  15386c:	d9000017 	ldw	r4,0(sp)
  153870:	dec00104 	addi	sp,sp,4

00153874 <plot_pixel_done>:

plot_pixel_done:
	RESTORE
  153874:	e037883a 	mov	sp,fp
  153878:	df000017 	ldw	fp,0(sp)
  15387c:	dec00104 	addi	sp,sp,4
  153880:	dfc00017 	ldw	ra,0(sp)
  153884:	dec00104 	addi	sp,sp,4
	ret
  153888:	f800283a 	ret

0015388c <set_sample_rate>:

.global set_sample_rate
.type set_sample_rate, @function

set_sample_rate:
	SAVE
  15388c:	deffff04 	addi	sp,sp,-4
  153890:	dfc00015 	stw	ra,0(sp)
  153894:	deffff04 	addi	sp,sp,-4
  153898:	df000015 	stw	fp,0(sp)
  15389c:	d839883a 	mov	fp,sp

	MOVWI	r9, 100000
  1538a0:	02400074 	movhi	r9,1
  1538a4:	4a61a814 	ori	r9,r9,34464
	bleu	r4, r9, slow_sample_rate
  1538a8:	4900102e 	bgeu	r9,r4,1538ec <slow_sample_rate>

001538ac <fast_sample_rate>:

fast_sample_rate:
	# Divide fastest sample rate by desired sample rate
	# to get number of ticks to pause (not collect samples)
	# between collecting samples.
	MOVWI	r8, ADC_RATE_BASE
  1538ac:	020005b4 	movhi	r8,22
  1538b0:	42046414 	ori	r8,r8,4496
	MOVWI	r9, 400000000
  1538b4:	0245f5f4 	movhi	r9,6103
  1538b8:	4a610014 	ori	r9,r9,33792
	divu	r9, r9, r4
  1538bc:	4913203a 	divu	r9,r9,r4
	subi	r9, r9, 1
  1538c0:	4a7fffc4 	addi	r9,r9,-1
	stw		r9, (r8)
  1538c4:	42400015 	stw	r9,0(r8)

	# Set fast clock for FIFO clock counter.
	MOVWI	r8, TRIG_CTRL_BASE
  1538c8:	020005b4 	movhi	r8,22
  1538cc:	42043814 	ori	r8,r8,4320
	MOVWI	r9, 0x00000080
  1538d0:	02400034 	movhi	r9,0
  1538d4:	4a402014 	ori	r9,r9,128
	stw		r9, PIO_OUTCLR(r8)
  1538d8:	42400515 	stw	r9,20(r8)
  1538dc:	02000574 	movhi	r8,21

	# Update fifo source flag.
	movia	r8, fifo_clk_src
  1538e0:	42143d04 	addi	r8,r8,20724
	stb		r0, (r8)
  1538e4:	40000005 	stb	zero,0(r8)

	br		set_sample_rate_done
  1538e8:	00001006 	br	15392c <set_sample_rate_done>

001538ec <slow_sample_rate>:

slow_sample_rate:
	# Divide fastest sample rate by desired sample rate
	# to get number of ticks to pause (not collect samples)
	# between collecting samples.
	MOVWI	r8, ADC_RATE_BASE
  1538ec:	020005b4 	movhi	r8,22
  1538f0:	42046414 	ori	r8,r8,4496
	MOVWI	r9, 1000000
  1538f4:	024003f4 	movhi	r9,15
  1538f8:	4a509014 	ori	r9,r9,16960
	divu	r9, r9, r4
  1538fc:	4913203a 	divu	r9,r9,r4
	subi	r9, r9, 1
  153900:	4a7fffc4 	addi	r9,r9,-1
	stw		r9, (r8)
  153904:	42400015 	stw	r9,0(r8)

	# Set 1MHz clock for FIFO clock counter.
	MOVWI	r8, TRIG_CTRL_BASE
  153908:	020005b4 	movhi	r8,22
  15390c:	42043814 	ori	r8,r8,4320
	MOVWI	r9, 0x00000080
  153910:	02400034 	movhi	r9,0
  153914:	4a402014 	ori	r9,r9,128
	stw		r9, PIO_OUTSET(r8)
  153918:	42400415 	stw	r9,16(r8)
  15391c:	02000574 	movhi	r8,21

	# Update fifo source flag.
	movia	r8, fifo_clk_src
  153920:	42143d04 	addi	r8,r8,20724
	movi	r9, 1
  153924:	02400044 	movi	r9,1
	stb		r9, (r8)
  153928:	42400005 	stb	r9,0(r8)

0015392c <set_sample_rate_done>:

set_sample_rate_done:
	# Always return 480 samples.
	movui	r2, 480
  15392c:	00807814 	movui	r2,480

	RESTORE
  153930:	e037883a 	mov	sp,fp
  153934:	df000017 	ldw	fp,0(sp)
  153938:	dec00104 	addi	sp,sp,4
  15393c:	dfc00017 	ldw	ra,0(sp)
  153940:	dec00104 	addi	sp,sp,4
	ret
  153944:	f800283a 	ret

00153948 <set_trigger>:

.global set_trigger
.type set_trigger, @function

set_trigger:
	SAVE
  153948:	deffff04 	addi	sp,sp,-4
  15394c:	dfc00015 	stw	ra,0(sp)
  153950:	deffff04 	addi	sp,sp,-4
  153954:	df000015 	stw	fp,0(sp)
  153958:	d839883a 	mov	fp,sp

	# Convert [0 to 127] to signed 8-bit [-127 to 127].
	# Then update trigger level.
	MOVWI	r8, TRIG_LEVEL_BASE
  15395c:	020005b4 	movhi	r8,22
  153960:	42043014 	ori	r8,r8,4288
	slli	r9, r4, 1
  153964:	2012907a 	slli	r9,r4,1
	subi	r9, r9, 127
  153968:	4a7fe044 	addi	r9,r9,-127
	andi	r9, r9, 0xFF
  15396c:	4a403fcc 	andi	r9,r9,255
	stw		r9, (r8)
  153970:	42400015 	stw	r9,0(r8)

	# Slope is second bit of TRIG_CTRL. Modify the given
	# argument, then update slope.
	beq		r5, r0, set_trigger_slope_pos
  153974:	28000526 	beq	r5,zero,15398c <set_trigger_slope_pos>
	movi	r8, 0x02
  153978:	02000084 	movi	r8,2
	MOVWI	r9, TRIG_CTRL_BASE
  15397c:	024005b4 	movhi	r9,22
  153980:	4a443814 	ori	r9,r9,4320
	stw		r8, PIO_OUTSET(r9)
  153984:	4a000415 	stw	r8,16(r9)
	br		set_trigger_done
  153988:	00000406 	br	15399c <set_trigger_done>

0015398c <set_trigger_slope_pos>:

set_trigger_slope_pos:
	movi	r8, 0x02
  15398c:	02000084 	movi	r8,2
	MOVWI	r9, TRIG_CTRL_BASE
  153990:	024005b4 	movhi	r9,22
  153994:	4a443814 	ori	r9,r9,4320
	stw		r8, PIO_OUTCLR(r9)
  153998:	4a000515 	stw	r8,20(r9)

0015399c <set_trigger_done>:

set_trigger_done:
	RESTORE
  15399c:	e037883a 	mov	sp,fp
  1539a0:	df000017 	ldw	fp,0(sp)
  1539a4:	dec00104 	addi	sp,sp,4
  1539a8:	dfc00017 	ldw	ra,0(sp)
  1539ac:	dec00104 	addi	sp,sp,4
	ret
  1539b0:	f800283a 	ret

001539b4 <set_delay>:

.global set_delay
.type set_delay, @function

set_delay:
	SAVE
  1539b4:	deffff04 	addi	sp,sp,-4
  1539b8:	dfc00015 	stw	ra,0(sp)
  1539bc:	deffff04 	addi	sp,sp,-4
  1539c0:	df000015 	stw	fp,0(sp)
  1539c4:	d839883a 	mov	fp,sp

	# Simply set the delay (240 offset means delay 0 is in the middle).
	addi	r9, r4, 240
  1539c8:	22403c04 	addi	r9,r4,240
	MOVWI	r8, TRIG_DELAY_BASE
  1539cc:	020005b4 	movhi	r8,22
  1539d0:	42042814 	ori	r8,r8,4256
	stw		r9, (r8)
  1539d4:	42400015 	stw	r9,0(r8)

001539d8 <set_delay_done>:

set_delay_done:
	RESTORE
  1539d8:	e037883a 	mov	sp,fp
  1539dc:	df000017 	ldw	fp,0(sp)
  1539e0:	dec00104 	addi	sp,sp,4
  1539e4:	dfc00017 	ldw	ra,0(sp)
  1539e8:	dec00104 	addi	sp,sp,4
	ret
  1539ec:	f800283a 	ret

001539f0 <start_sample>:

.global start_sample
.type start_sample, @function

start_sample:
	SAVE
  1539f0:	deffff04 	addi	sp,sp,-4
  1539f4:	dfc00015 	stw	ra,0(sp)
  1539f8:	deffff04 	addi	sp,sp,-4
  1539fc:	df000015 	stw	fp,0(sp)
  153a00:	d839883a 	mov	fp,sp

	# Clear the edge capture register (write 1 to clear).
	MOVWI	r8, TRIG_INT_BASE
  153a04:	020005b4 	movhi	r8,22
  153a08:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0xFFFFFFFF
  153a0c:	027ffff4 	movhi	r9,65535
  153a10:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  153a14:	42400315 	stw	r9,12(r8)

	# Enable trigger interrupts.
	MOVWI	r9, 0x00000002
  153a18:	02400034 	movhi	r9,0
  153a1c:	4a400094 	ori	r9,r9,2
	# If auto-trigger, enable time-outs as well.
	slli	r8, r4, 2
  153a20:	201090ba 	slli	r8,r4,2
	add		r9, r8, r9
  153a24:	4253883a 	add	r9,r8,r9

	MOVWI	r8, TRIG_INT_BASE
  153a28:	020005b4 	movhi	r8,22
  153a2c:	42044814 	ori	r8,r8,4384
	stw		r9, PIO_IRQ_MASK(r8)
  153a30:	42400215 	stw	r9,8(r8)

	# Clear FIFO, turn on FIFO write.
	STWI	ADC_CTRL_BASE, 0x04
  153a34:	deffff04 	addi	sp,sp,-4
  153a38:	da400015 	stw	r9,0(sp)
  153a3c:	deffff04 	addi	sp,sp,-4
  153a40:	da800015 	stw	r10,0(sp)
  153a44:	024005b4 	movhi	r9,22
  153a48:	4a444014 	ori	r9,r9,4352
  153a4c:	02800034 	movhi	r10,0
  153a50:	52800114 	ori	r10,r10,4
  153a54:	4a800035 	stwio	r10,0(r9)
  153a58:	da800017 	ldw	r10,0(sp)
  153a5c:	dec00104 	addi	sp,sp,4
  153a60:	da400017 	ldw	r9,0(sp)
  153a64:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  153a68:	deffff04 	addi	sp,sp,-4
  153a6c:	da400015 	stw	r9,0(sp)
  153a70:	deffff04 	addi	sp,sp,-4
  153a74:	da800015 	stw	r10,0(sp)
  153a78:	024005b4 	movhi	r9,22
  153a7c:	4a444014 	ori	r9,r9,4352
  153a80:	02800034 	movhi	r10,0
  153a84:	52800094 	ori	r10,r10,2
  153a88:	4a800035 	stwio	r10,0(r9)
  153a8c:	da800017 	ldw	r10,0(sp)
  153a90:	dec00104 	addi	sp,sp,4
  153a94:	da400017 	ldw	r9,0(sp)
  153a98:	dec00104 	addi	sp,sp,4

	# Restart trigger counter [ch. A], [+ slope]
	MOVWI	r8, TRIG_CTRL_BASE
  153a9c:	020005b4 	movhi	r8,22
  153aa0:	42043814 	ori	r8,r8,4320
	movi	r9, 1
  153aa4:	02400044 	movi	r9,1
	stw		r9, PIO_OUTSET(r8)
  153aa8:	42400415 	stw	r9,16(r8)
	stw		r9, PIO_OUTCLR(r8)
  153aac:	42400515 	stw	r9,20(r8)

00153ab0 <start_sample_done>:

start_sample_done:
	RESTORE
  153ab0:	e037883a 	mov	sp,fp
  153ab4:	df000017 	ldw	fp,0(sp)
  153ab8:	dec00104 	addi	sp,sp,4
  153abc:	dfc00017 	ldw	ra,0(sp)
  153ac0:	dec00104 	addi	sp,sp,4
	ret
  153ac4:	f800283a 	ret

00153ac8 <sample_done>:

.global sample_done
.type sample_done, @function

sample_done:
	SAVE
  153ac8:	deffff04 	addi	sp,sp,-4
  153acc:	dfc00015 	stw	ra,0(sp)
  153ad0:	deffff04 	addi	sp,sp,-4
  153ad4:	df000015 	stw	fp,0(sp)
  153ad8:	d839883a 	mov	fp,sp
  153adc:	02000574 	movhi	r8,21

	# Test if sample occurred.
	movia	r8, sample_complete
  153ae0:	42143c04 	addi	r8,r8,20720
	ldb		r9, (r8)
  153ae4:	42400007 	ldb	r9,0(r8)
	beq		r9, r0, sample_null
  153ae8:	48000426 	beq	r9,zero,153afc <sample_null>

	# If so, reset sample complete variable and return map to buffers.
	stb		r0, (r8)
  153aec:	40000005 	stb	zero,0(r8)
  153af0:	00800574 	movhi	r2,21
	movia	r2, sample_map
  153af4:	108ec604 	addi	r2,r2,15128
	br		sample_done_done
  153af8:	00000106 	br	153b00 <sample_done_done>

00153afc <sample_null>:

sample_null:
	# Otherwise, return null.
	mov		r2, r0
  153afc:	0005883a 	mov	r2,zero

00153b00 <sample_done_done>:

sample_done_done:
	RESTORE
  153b00:	e037883a 	mov	sp,fp
  153b04:	df000017 	ldw	fp,0(sp)
  153b08:	dec00104 	addi	sp,sp,4
  153b0c:	dfc00017 	ldw	ra,0(sp)
  153b10:	dec00104 	addi	sp,sp,4
	ret
  153b14:	f800283a 	ret

00153b18 <sample_map>:
  153b18:	001550f8 	rdprs	zero,zero,21827
  153b1c:	001552d8 	cmpnei	zero,zero,21835
  153b20:	001554b8 	rdprs	zero,zero,21842

00153b24 <test_disp>:

.global test_disp
.type test_disp,@function

test_disp:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  153b24:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  153b28:	42000234 	orhi	r8,r8,8
	mov		r11, r0
  153b2c:	0017883a 	mov	r11,zero
	mov		r12, r0
  153b30:	0019883a 	mov	r12,zero

00153b34 <disp>:

disp:
	movi	r13, 136
  153b34:	03402204 	movi	r13,136
	bltu	r12, r13, draw_top
  153b38:	63400836 	bltu	r12,r13,153b5c <draw_top>
	br 		draw_bot
  153b3c:	00000a06 	br	153b68 <draw_bot>

00153b40 <disp_cont>:
disp_cont:
	addi	r8, r8, 2
  153b40:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  153b44:	5ac00044 	addi	r11,r11,1
	movi	r13, 272
  153b48:	03404404 	movi	r13,272
	bgeu	r12, r13, draw_border
  153b4c:	6340152e 	bgeu	r12,r13,153ba4 <draw_border>
	movi	r13, 0x0200
  153b50:	03408004 	movi	r13,512
	bgeu	r11, r13, disp_reset
  153b54:	5b403d2e 	bgeu	r11,r13,153c4c <disp_reset>
	br		disp
  153b58:	003ff606 	br	153b34 <disp>

00153b5c <draw_top>:

draw_top:
	movi	r13, 240
  153b5c:	03403c04 	movi	r13,240
	bltu	r11, r13, draw_red
  153b60:	5b400436 	bltu	r11,r13,153b74 <draw_red>
	br		draw_yellow
  153b64:	00000606 	br	153b80 <draw_yellow>

00153b68 <draw_bot>:

draw_bot:
	movi	r13, 240
  153b68:	03403c04 	movi	r13,240
	bltu	r11, r13, draw_green
  153b6c:	5b400736 	bltu	r11,r13,153b8c <draw_green>
	br		draw_blue
  153b70:	00000906 	br	153b98 <draw_blue>

00153b74 <draw_red>:

draw_red:
	movi	r9, 0x1F00
  153b74:	0247c004 	movi	r9,7936
	sthio	r9, (r8)
  153b78:	4240002d 	sthio	r9,0(r8)
	br 		disp_cont
  153b7c:	003ff006 	br	153b40 <disp_cont>

00153b80 <draw_yellow>:

draw_yellow:
	movui	r9, 0xFF03
  153b80:	027fc0d4 	movui	r9,65283
	sthio 	r9, (r8)
  153b84:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  153b88:	003fed06 	br	153b40 <disp_cont>

00153b8c <draw_green>:

draw_green:
	movui	r9, 0xE003
  153b8c:	027800d4 	movui	r9,57347
	sthio 	r9, (r8)
  153b90:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  153b94:	003fea06 	br	153b40 <disp_cont>

00153b98 <draw_blue>:

draw_blue:
	movi	r9, 0x007C
  153b98:	02401f04 	movi	r9,124
	sthio 	r9, (r8)
  153b9c:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  153ba0:	003fe706 	br	153b40 <disp_cont>

00153ba4 <draw_border>:

draw_border:
	movi	r9, 0x1F7C
  153ba4:	0247df04 	movi	r9,8060
	movi	r12, 272
  153ba8:	03004404 	movi	r12,272
	movi	r13, 480
  153bac:	03407804 	movi	r13,480

00153bb0 <draw_border_top>:

draw_border_top:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  153bb0:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  153bb4:	42000234 	orhi	r8,r8,8
	addi	r8, r8, 0x0400
  153bb8:	42010004 	addi	r8,r8,1024
	mov		r11, r0
  153bbc:	0017883a 	mov	r11,zero

00153bc0 <dbt_loop>:
dbt_loop:
	sthio	r9, (r8)
  153bc0:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 2
  153bc4:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  153bc8:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r13, draw_border_bot
  153bcc:	5b40012e 	bgeu	r11,r13,153bd4 <draw_border_bot>
	br		dbt_loop
  153bd0:	003ffb06 	br	153bc0 <dbt_loop>

00153bd4 <draw_border_bot>:

draw_border_bot:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  153bd4:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  153bd8:	42000234 	orhi	r8,r8,8
	movhi	r14, %hi(277504)
  153bdc:	03800134 	movhi	r14,4
	ori		r14, r14, %lo(277504)
  153be0:	738f0014 	ori	r14,r14,15360
	add		r8, r8, r14
  153be4:	4391883a 	add	r8,r8,r14
	mov		r11, r0
  153be8:	0017883a 	mov	r11,zero

00153bec <dbb_loop>:
dbb_loop:
	sthio	r9, (r8)
  153bec:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 2
  153bf0:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  153bf4:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r13, draw_border_left
  153bf8:	5b40012e 	bgeu	r11,r13,153c00 <draw_border_left>
	br		dbb_loop
  153bfc:	003ffb06 	br	153bec <dbb_loop>

00153c00 <draw_border_left>:

draw_border_left:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  153c00:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  153c04:	42000234 	orhi	r8,r8,8
	mov		r11, r0
  153c08:	0017883a 	mov	r11,zero

00153c0c <dbl_loop>:
dbl_loop:
	sthio	r9, (r8)
  153c0c:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 0x0400
  153c10:	42010004 	addi	r8,r8,1024
	addi	r11, r11, 1
  153c14:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r12, draw_border_right
  153c18:	5b00012e 	bgeu	r11,r12,153c20 <draw_border_right>
	br		dbl_loop
  153c1c:	003ffb06 	br	153c0c <dbl_loop>

00153c20 <draw_border_right>:

draw_border_right:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  153c20:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  153c24:	42000234 	orhi	r8,r8,8
	add		r8, r8, r13
  153c28:	4351883a 	add	r8,r8,r13
	add		r8, r8, r13
  153c2c:	4351883a 	add	r8,r8,r13
	subi	r8, r8, 1
  153c30:	423fffc4 	addi	r8,r8,-1
	mov		r11, r0
  153c34:	0017883a 	mov	r11,zero

00153c38 <dbr_loop>:
dbr_loop:
	sthio	r9, (r8)
  153c38:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 0x0400
  153c3c:	42010004 	addi	r8,r8,1024
	addi	r11, r11, 1
  153c40:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r12, test_disp_done
  153c44:	5b00042e 	bgeu	r11,r12,153c58 <test_disp_done>
	br		dbr_loop
  153c48:	003ffb06 	br	153c38 <dbr_loop>

00153c4c <disp_reset>:

disp_reset:
	mov		r11, r0
  153c4c:	0017883a 	mov	r11,zero
	addi	r12, r12, 1
  153c50:	63000044 	addi	r12,r12,1
	br		disp
  153c54:	003fb706 	br	153b34 <disp>

00153c58 <test_disp_done>:

test_disp_done:
	ret
  153c58:	f800283a 	ret

00153c5c <test_vram>:

.global test_vram
.type test_vram,@function

test_vram:
	SAVE
  153c5c:	deffff04 	addi	sp,sp,-4
  153c60:	dfc00015 	stw	ra,0(sp)
  153c64:	deffff04 	addi	sp,sp,-4
  153c68:	df000015 	stw	fp,0(sp)
  153c6c:	d839883a 	mov	fp,sp

	movhi	r8, %hi(VRAM_CTRL_BASE)
  153c70:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  153c74:	42000234 	orhi	r8,r8,8
	movhi	r9, %hi(VRAM_CTRL_SPAN)
  153c78:	02400234 	movhi	r9,8
	ori		r9, r9, %lo(VRAM_CTRL_SPAN)
  153c7c:	4a400234 	orhi	r9,r9,8
	add		r9, r8, r9
  153c80:	4253883a 	add	r9,r8,r9
	movui	r12, 0x7000
  153c84:	031c0014 	movui	r12,28672

	#call	write_read_all

	call	write_all
  153c88:	0153cb80 	call	153cb8 <write_all>
	call	read_all
  153c8c:	0153ce40 	call	153ce4 <read_all>

	nop
  153c90:	0001883a 	nop
	call	read_all
  153c94:	0153ce40 	call	153ce4 <read_all>

00153c98 <test_vram_fail>:

test_vram_fail:
	nop
  153c98:	0001883a 	nop
	br 		test_vram_fail
  153c9c:	003ffe06 	br	153c98 <test_vram_fail>

00153ca0 <test_vram_done>:

test_vram_done:
	RESTORE
  153ca0:	e037883a 	mov	sp,fp
  153ca4:	df000017 	ldw	fp,0(sp)
  153ca8:	dec00104 	addi	sp,sp,4
  153cac:	dfc00017 	ldw	ra,0(sp)
  153cb0:	dec00104 	addi	sp,sp,4
	ret
  153cb4:	f800283a 	ret

00153cb8 <write_all>:


.type write_all, @function

write_all:
	mov		r10, r8
  153cb8:	4015883a 	mov	r10,r8
	mov		r11, r0
  153cbc:	0017883a 	mov	r11,zero

00153cc0 <write_all_loop>:

write_all_loop:
	sthio	r11, (r10)
  153cc0:	52c0002d 	sthio	r11,0(r10)
	addi	r10, r10, 2
  153cc4:	52800084 	addi	r10,r10,2
	addi	r11, r11, 1
  153cc8:	5ac00044 	addi	r11,r11,1
	bgeu	r10, r9, write_all_done
  153ccc:	5240042e 	bgeu	r10,r9,153ce0 <write_all_done>
	bgeu	r11, r12, write_all_reset_cnt
  153cd0:	5b00012e 	bgeu	r11,r12,153cd8 <write_all_reset_cnt>
	br		write_all_loop
  153cd4:	003ffa06 	br	153cc0 <write_all_loop>

00153cd8 <write_all_reset_cnt>:

write_all_reset_cnt:
	mov		r11, r0
  153cd8:	0017883a 	mov	r11,zero
	br		write_all_loop
  153cdc:	003ff806 	br	153cc0 <write_all_loop>

00153ce0 <write_all_done>:

write_all_done:
	ret
  153ce0:	f800283a 	ret

00153ce4 <read_all>:


.type read_all, @function

read_all:
	mov		r10, r8
  153ce4:	4015883a 	mov	r10,r8
	mov		r11, r0
  153ce8:	0017883a 	mov	r11,zero

00153cec <read_all_loop>:

read_all_loop:
	ldhio	r13, (r10)
  153cec:	5340002f 	ldhio	r13,0(r10)
	bne		r13, r11, test_vram_fail
  153cf0:	6affe91e 	bne	r13,r11,153c98 <test_vram_fail>
	addi	r10, r10, 2
  153cf4:	52800084 	addi	r10,r10,2
	addi	r11, r11, 1
  153cf8:	5ac00044 	addi	r11,r11,1
	bgeu	r10, r9, read_all_done
  153cfc:	5240042e 	bgeu	r10,r9,153d10 <read_all_done>
	bgeu	r11, r12, read_all_reset_cnt
  153d00:	5b00012e 	bgeu	r11,r12,153d08 <read_all_reset_cnt>
	br		read_all_loop
  153d04:	003ff906 	br	153cec <read_all_loop>

00153d08 <read_all_reset_cnt>:

read_all_reset_cnt:
	mov		r11, r0
  153d08:	0017883a 	mov	r11,zero
	br		write_all_loop
  153d0c:	003fec06 	br	153cc0 <write_all_loop>

00153d10 <read_all_done>:

read_all_done:
	ret
  153d10:	f800283a 	ret

00153d14 <memcpy>:
  153d14:	00c003c4 	movi	r3,15
  153d18:	2005883a 	mov	r2,r4
  153d1c:	3009883a 	mov	r4,r6
  153d20:	1980032e 	bgeu	r3,r6,153d30 <memcpy+0x1c>
  153d24:	2886b03a 	or	r3,r5,r2
  153d28:	18c000cc 	andi	r3,r3,3
  153d2c:	18000926 	beq	r3,zero,153d54 <memcpy+0x40>
  153d30:	1007883a 	mov	r3,r2
  153d34:	290f883a 	add	r7,r5,r4
  153d38:	20000526 	beq	r4,zero,153d50 <memcpy+0x3c>
  153d3c:	29800003 	ldbu	r6,0(r5)
  153d40:	18c00044 	addi	r3,r3,1
  153d44:	29400044 	addi	r5,r5,1
  153d48:	19bfffc5 	stb	r6,-1(r3)
  153d4c:	29fffb1e 	bne	r5,r7,153d3c <memcpy+0x28>
  153d50:	f800283a 	ret
  153d54:	327ffc04 	addi	r9,r6,-16
  153d58:	4812d13a 	srli	r9,r9,4
  153d5c:	11000404 	addi	r4,r2,16
  153d60:	1007883a 	mov	r3,r2
  153d64:	4810913a 	slli	r8,r9,4
  153d68:	280f883a 	mov	r7,r5
  153d6c:	2209883a 	add	r4,r4,r8
  153d70:	3a000017 	ldw	r8,0(r7)
  153d74:	18c00404 	addi	r3,r3,16
  153d78:	39c00404 	addi	r7,r7,16
  153d7c:	1a3ffc15 	stw	r8,-16(r3)
  153d80:	3a3ffd17 	ldw	r8,-12(r7)
  153d84:	1a3ffd15 	stw	r8,-12(r3)
  153d88:	3a3ffe17 	ldw	r8,-8(r7)
  153d8c:	1a3ffe15 	stw	r8,-8(r3)
  153d90:	3a3fff17 	ldw	r8,-4(r7)
  153d94:	1a3fff15 	stw	r8,-4(r3)
  153d98:	193ff51e 	bne	r3,r4,153d70 <memcpy+0x5c>
  153d9c:	49c00044 	addi	r7,r9,1
  153da0:	380e913a 	slli	r7,r7,4
  153da4:	310003cc 	andi	r4,r6,15
  153da8:	018000c4 	movi	r6,3
  153dac:	11c7883a 	add	r3,r2,r7
  153db0:	29cb883a 	add	r5,r5,r7
  153db4:	313fdf2e 	bgeu	r6,r4,153d34 <memcpy+0x20>
  153db8:	213fff04 	addi	r4,r4,-4
  153dbc:	2014d0ba 	srli	r10,r4,2
  153dc0:	1a400104 	addi	r9,r3,4
  153dc4:	180d883a 	mov	r6,r3
  153dc8:	528f883a 	add	r7,r10,r10
  153dcc:	39cf883a 	add	r7,r7,r7
  153dd0:	49d3883a 	add	r9,r9,r7
  153dd4:	280f883a 	mov	r7,r5
  153dd8:	3a000017 	ldw	r8,0(r7)
  153ddc:	31800104 	addi	r6,r6,4
  153de0:	39c00104 	addi	r7,r7,4
  153de4:	323fff15 	stw	r8,-4(r6)
  153de8:	327ffb1e 	bne	r6,r9,153dd8 <memcpy+0xc4>
  153dec:	51800044 	addi	r6,r10,1
  153df0:	52bfff24 	muli	r10,r10,-4
  153df4:	318d883a 	add	r6,r6,r6
  153df8:	318d883a 	add	r6,r6,r6
  153dfc:	5109883a 	add	r4,r10,r4
  153e00:	298b883a 	add	r5,r5,r6
  153e04:	1987883a 	add	r3,r3,r6
  153e08:	003fca06 	br	153d34 <memcpy+0x20>

00153e0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  153e0c:	defff904 	addi	sp,sp,-28
  153e10:	dfc00615 	stw	ra,24(sp)
  153e14:	df000515 	stw	fp,20(sp)
  153e18:	df000504 	addi	fp,sp,20
  153e1c:	e13ffc15 	stw	r4,-16(fp)
  153e20:	e17ffd15 	stw	r5,-12(fp)
  153e24:	e1bffe15 	stw	r6,-8(fp)
  153e28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  153e2c:	e0800217 	ldw	r2,8(fp)
  153e30:	d8800015 	stw	r2,0(sp)
  153e34:	e13ffc17 	ldw	r4,-16(fp)
  153e38:	e17ffd17 	ldw	r5,-12(fp)
  153e3c:	e1bffe17 	ldw	r6,-8(fp)
  153e40:	e1ffff17 	ldw	r7,-4(fp)
  153e44:	0153fe40 	call	153fe4 <alt_iic_isr_register>
}  
  153e48:	e037883a 	mov	sp,fp
  153e4c:	dfc00117 	ldw	ra,4(sp)
  153e50:	df000017 	ldw	fp,0(sp)
  153e54:	dec00204 	addi	sp,sp,8
  153e58:	f800283a 	ret

00153e5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  153e5c:	defff904 	addi	sp,sp,-28
  153e60:	df000615 	stw	fp,24(sp)
  153e64:	df000604 	addi	fp,sp,24
  153e68:	e13ffe15 	stw	r4,-8(fp)
  153e6c:	e17fff15 	stw	r5,-4(fp)
  153e70:	e0bfff17 	ldw	r2,-4(fp)
  153e74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  153e78:	0005303a 	rdctl	r2,status
  153e7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  153e80:	e0fffb17 	ldw	r3,-20(fp)
  153e84:	00bfff84 	movi	r2,-2
  153e88:	1884703a 	and	r2,r3,r2
  153e8c:	1001703a 	wrctl	status,r2
  
  return context;
  153e90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  153e94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  153e98:	e0bffa17 	ldw	r2,-24(fp)
  153e9c:	00c00044 	movi	r3,1
  153ea0:	1884983a 	sll	r2,r3,r2
  153ea4:	1007883a 	mov	r3,r2
  153ea8:	00800574 	movhi	r2,21
  153eac:	109a1004 	addi	r2,r2,26688
  153eb0:	10800017 	ldw	r2,0(r2)
  153eb4:	1886b03a 	or	r3,r3,r2
  153eb8:	00800574 	movhi	r2,21
  153ebc:	109a1004 	addi	r2,r2,26688
  153ec0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  153ec4:	00800574 	movhi	r2,21
  153ec8:	109a1004 	addi	r2,r2,26688
  153ecc:	10800017 	ldw	r2,0(r2)
  153ed0:	100170fa 	wrctl	ienable,r2
  153ed4:	e0bffc17 	ldw	r2,-16(fp)
  153ed8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  153edc:	e0bffd17 	ldw	r2,-12(fp)
  153ee0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  153ee4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  153ee8:	e037883a 	mov	sp,fp
  153eec:	df000017 	ldw	fp,0(sp)
  153ef0:	dec00104 	addi	sp,sp,4
  153ef4:	f800283a 	ret

00153ef8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  153ef8:	defff904 	addi	sp,sp,-28
  153efc:	df000615 	stw	fp,24(sp)
  153f00:	df000604 	addi	fp,sp,24
  153f04:	e13ffe15 	stw	r4,-8(fp)
  153f08:	e17fff15 	stw	r5,-4(fp)
  153f0c:	e0bfff17 	ldw	r2,-4(fp)
  153f10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  153f14:	0005303a 	rdctl	r2,status
  153f18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  153f1c:	e0fffb17 	ldw	r3,-20(fp)
  153f20:	00bfff84 	movi	r2,-2
  153f24:	1884703a 	and	r2,r3,r2
  153f28:	1001703a 	wrctl	status,r2
  
  return context;
  153f2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  153f30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  153f34:	e0bffa17 	ldw	r2,-24(fp)
  153f38:	00c00044 	movi	r3,1
  153f3c:	1884983a 	sll	r2,r3,r2
  153f40:	0084303a 	nor	r2,zero,r2
  153f44:	1007883a 	mov	r3,r2
  153f48:	00800574 	movhi	r2,21
  153f4c:	109a1004 	addi	r2,r2,26688
  153f50:	10800017 	ldw	r2,0(r2)
  153f54:	1886703a 	and	r3,r3,r2
  153f58:	00800574 	movhi	r2,21
  153f5c:	109a1004 	addi	r2,r2,26688
  153f60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  153f64:	00800574 	movhi	r2,21
  153f68:	109a1004 	addi	r2,r2,26688
  153f6c:	10800017 	ldw	r2,0(r2)
  153f70:	100170fa 	wrctl	ienable,r2
  153f74:	e0bffc17 	ldw	r2,-16(fp)
  153f78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  153f7c:	e0bffd17 	ldw	r2,-12(fp)
  153f80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  153f84:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  153f88:	e037883a 	mov	sp,fp
  153f8c:	df000017 	ldw	fp,0(sp)
  153f90:	dec00104 	addi	sp,sp,4
  153f94:	f800283a 	ret

00153f98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  153f98:	defffc04 	addi	sp,sp,-16
  153f9c:	df000315 	stw	fp,12(sp)
  153fa0:	df000304 	addi	fp,sp,12
  153fa4:	e13ffe15 	stw	r4,-8(fp)
  153fa8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  153fac:	000530fa 	rdctl	r2,ienable
  153fb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  153fb4:	e0bfff17 	ldw	r2,-4(fp)
  153fb8:	00c00044 	movi	r3,1
  153fbc:	1884983a 	sll	r2,r3,r2
  153fc0:	1007883a 	mov	r3,r2
  153fc4:	e0bffd17 	ldw	r2,-12(fp)
  153fc8:	1884703a 	and	r2,r3,r2
  153fcc:	1004c03a 	cmpne	r2,r2,zero
  153fd0:	10803fcc 	andi	r2,r2,255
}
  153fd4:	e037883a 	mov	sp,fp
  153fd8:	df000017 	ldw	fp,0(sp)
  153fdc:	dec00104 	addi	sp,sp,4
  153fe0:	f800283a 	ret

00153fe4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  153fe4:	defff504 	addi	sp,sp,-44
  153fe8:	dfc00a15 	stw	ra,40(sp)
  153fec:	df000915 	stw	fp,36(sp)
  153ff0:	df000904 	addi	fp,sp,36
  153ff4:	e13ffc15 	stw	r4,-16(fp)
  153ff8:	e17ffd15 	stw	r5,-12(fp)
  153ffc:	e1bffe15 	stw	r6,-8(fp)
  154000:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  154004:	00bffa84 	movi	r2,-22
  154008:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  15400c:	e0bffd17 	ldw	r2,-12(fp)
  154010:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  154014:	e0bff817 	ldw	r2,-32(fp)
  154018:	10800808 	cmpgei	r2,r2,32
  15401c:	1000271e 	bne	r2,zero,1540bc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  154020:	0005303a 	rdctl	r2,status
  154024:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  154028:	e0fffa17 	ldw	r3,-24(fp)
  15402c:	00bfff84 	movi	r2,-2
  154030:	1884703a 	and	r2,r3,r2
  154034:	1001703a 	wrctl	status,r2
  
  return context;
  154038:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  15403c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  154040:	00c005b4 	movhi	r3,22
  154044:	18e6e204 	addi	r3,r3,-25720
  154048:	e0bff817 	ldw	r2,-32(fp)
  15404c:	100490fa 	slli	r2,r2,3
  154050:	1885883a 	add	r2,r3,r2
  154054:	e0fffe17 	ldw	r3,-8(fp)
  154058:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  15405c:	00c005b4 	movhi	r3,22
  154060:	18e6e204 	addi	r3,r3,-25720
  154064:	e0bff817 	ldw	r2,-32(fp)
  154068:	100490fa 	slli	r2,r2,3
  15406c:	1885883a 	add	r2,r3,r2
  154070:	10800104 	addi	r2,r2,4
  154074:	e0ffff17 	ldw	r3,-4(fp)
  154078:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  15407c:	e0bffe17 	ldw	r2,-8(fp)
  154080:	10000526 	beq	r2,zero,154098 <alt_iic_isr_register+0xb4>
  154084:	e0bff817 	ldw	r2,-32(fp)
  154088:	e13ffc17 	ldw	r4,-16(fp)
  15408c:	100b883a 	mov	r5,r2
  154090:	0153e5c0 	call	153e5c <alt_ic_irq_enable>
  154094:	00000406 	br	1540a8 <alt_iic_isr_register+0xc4>
  154098:	e0bff817 	ldw	r2,-32(fp)
  15409c:	e13ffc17 	ldw	r4,-16(fp)
  1540a0:	100b883a 	mov	r5,r2
  1540a4:	0153ef80 	call	153ef8 <alt_ic_irq_disable>
  1540a8:	e0bff715 	stw	r2,-36(fp)
  1540ac:	e0bff917 	ldw	r2,-28(fp)
  1540b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1540b4:	e0bffb17 	ldw	r2,-20(fp)
  1540b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  1540bc:	e0bff717 	ldw	r2,-36(fp)
}
  1540c0:	e037883a 	mov	sp,fp
  1540c4:	dfc00117 	ldw	ra,4(sp)
  1540c8:	df000017 	ldw	fp,0(sp)
  1540cc:	dec00204 	addi	sp,sp,8
  1540d0:	f800283a 	ret

001540d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  1540d4:	defffc04 	addi	sp,sp,-16
  1540d8:	df000315 	stw	fp,12(sp)
  1540dc:	df000304 	addi	fp,sp,12
  1540e0:	e13ffd15 	stw	r4,-12(fp)
  1540e4:	e17ffe15 	stw	r5,-8(fp)
  1540e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  1540ec:	e0fffe17 	ldw	r3,-8(fp)
  1540f0:	e0bffd17 	ldw	r2,-12(fp)
  1540f4:	18800e26 	beq	r3,r2,154130 <alt_load_section+0x5c>
  {
    while( to != end )
  1540f8:	00000a06 	br	154124 <alt_load_section+0x50>
    {
      *to++ = *from++;
  1540fc:	e0bffd17 	ldw	r2,-12(fp)
  154100:	10c00017 	ldw	r3,0(r2)
  154104:	e0bffe17 	ldw	r2,-8(fp)
  154108:	10c00015 	stw	r3,0(r2)
  15410c:	e0bffe17 	ldw	r2,-8(fp)
  154110:	10800104 	addi	r2,r2,4
  154114:	e0bffe15 	stw	r2,-8(fp)
  154118:	e0bffd17 	ldw	r2,-12(fp)
  15411c:	10800104 	addi	r2,r2,4
  154120:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  154124:	e0fffe17 	ldw	r3,-8(fp)
  154128:	e0bfff17 	ldw	r2,-4(fp)
  15412c:	18bff31e 	bne	r3,r2,1540fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  154130:	e037883a 	mov	sp,fp
  154134:	df000017 	ldw	fp,0(sp)
  154138:	dec00104 	addi	sp,sp,4
  15413c:	f800283a 	ret

00154140 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  154140:	defffe04 	addi	sp,sp,-8
  154144:	dfc00115 	stw	ra,4(sp)
  154148:	df000015 	stw	fp,0(sp)
  15414c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  154150:	01000574 	movhi	r4,21
  154154:	21171904 	addi	r4,r4,23652
  154158:	01400574 	movhi	r5,21
  15415c:	29543204 	addi	r5,r5,20680
  154160:	01800574 	movhi	r6,21
  154164:	31971904 	addi	r6,r6,23652
  154168:	01540d40 	call	1540d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  15416c:	01000574 	movhi	r4,21
  154170:	21000804 	addi	r4,r4,32
  154174:	01400574 	movhi	r5,21
  154178:	29400804 	addi	r5,r5,32
  15417c:	01800574 	movhi	r6,21
  154180:	31806e04 	addi	r6,r6,440
  154184:	01540d40 	call	1540d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  154188:	01000574 	movhi	r4,21
  15418c:	21124704 	addi	r4,r4,18716
  154190:	01400574 	movhi	r5,21
  154194:	29524704 	addi	r5,r5,18716
  154198:	01800574 	movhi	r6,21
  15419c:	31943204 	addi	r6,r6,20680
  1541a0:	01540d40 	call	1540d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  1541a4:	01543880 	call	154388 <alt_dcache_flush_all>
  alt_icache_flush_all();
  1541a8:	01544880 	call	154488 <alt_icache_flush_all>
}
  1541ac:	e037883a 	mov	sp,fp
  1541b0:	dfc00117 	ldw	ra,4(sp)
  1541b4:	df000017 	ldw	fp,0(sp)
  1541b8:	dec00204 	addi	sp,sp,8
  1541bc:	f800283a 	ret

001541c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  1541c0:	defffd04 	addi	sp,sp,-12
  1541c4:	dfc00215 	stw	ra,8(sp)
  1541c8:	df000115 	stw	fp,4(sp)
  1541cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  1541d0:	0009883a 	mov	r4,zero
  1541d4:	015421c0 	call	15421c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  1541d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  1541dc:	01542500 	call	154250 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  1541e0:	01543d00 	call	1543d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  1541e4:	01000574 	movhi	r4,21
  1541e8:	21110b04 	addi	r4,r4,17452
  1541ec:	01545c40 	call	1545c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  1541f0:	d1230117 	ldw	r4,-29692(gp)
  1541f4:	d0e30217 	ldw	r3,-29688(gp)
  1541f8:	d0a30317 	ldw	r2,-29684(gp)
  1541fc:	180b883a 	mov	r5,r3
  154200:	100d883a 	mov	r6,r2
  154204:	01507280 	call	150728 <main>
  154208:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  15420c:	01000044 	movi	r4,1
  154210:	01542c00 	call	1542c0 <close>
  exit (result);
  154214:	e13fff17 	ldw	r4,-4(fp)
  154218:	01545d80 	call	1545d8 <exit>

0015421c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  15421c:	defffd04 	addi	sp,sp,-12
  154220:	dfc00215 	stw	ra,8(sp)
  154224:	df000115 	stw	fp,4(sp)
  154228:	df000104 	addi	fp,sp,4
  15422c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( PROC, PROC);
  154230:	01545180 	call	154518 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  154234:	00800044 	movi	r2,1
  154238:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  15423c:	e037883a 	mov	sp,fp
  154240:	dfc00117 	ldw	ra,4(sp)
  154244:	df000017 	ldw	fp,0(sp)
  154248:	dec00204 	addi	sp,sp,8
  15424c:	f800283a 	ret

00154250 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  154250:	deffff04 	addi	sp,sp,-4
  154254:	df000015 	stw	fp,0(sp)
  154258:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  15425c:	0001883a 	nop
}
  154260:	e037883a 	mov	sp,fp
  154264:	df000017 	ldw	fp,0(sp)
  154268:	dec00104 	addi	sp,sp,4
  15426c:	f800283a 	ret

00154270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  154270:	defffe04 	addi	sp,sp,-8
  154274:	dfc00115 	stw	ra,4(sp)
  154278:	df000015 	stw	fp,0(sp)
  15427c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  154280:	00800574 	movhi	r2,21
  154284:	10971604 	addi	r2,r2,23640
  154288:	10800017 	ldw	r2,0(r2)
  15428c:	10000526 	beq	r2,zero,1542a4 <alt_get_errno+0x34>
  154290:	00800574 	movhi	r2,21
  154294:	10971604 	addi	r2,r2,23640
  154298:	10800017 	ldw	r2,0(r2)
  15429c:	103ee83a 	callr	r2
  1542a0:	00000206 	br	1542ac <alt_get_errno+0x3c>
  1542a4:	00800574 	movhi	r2,21
  1542a8:	109a1404 	addi	r2,r2,26704
}
  1542ac:	e037883a 	mov	sp,fp
  1542b0:	dfc00117 	ldw	ra,4(sp)
  1542b4:	df000017 	ldw	fp,0(sp)
  1542b8:	dec00204 	addi	sp,sp,8
  1542bc:	f800283a 	ret

001542c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  1542c0:	defffb04 	addi	sp,sp,-20
  1542c4:	dfc00415 	stw	ra,16(sp)
  1542c8:	df000315 	stw	fp,12(sp)
  1542cc:	df000304 	addi	fp,sp,12
  1542d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  1542d4:	e0bfff17 	ldw	r2,-4(fp)
  1542d8:	10000616 	blt	r2,zero,1542f4 <close+0x34>
  1542dc:	e0bfff17 	ldw	r2,-4(fp)
  1542e0:	10c00324 	muli	r3,r2,12
  1542e4:	00800574 	movhi	r2,21
  1542e8:	1095b004 	addi	r2,r2,22208
  1542ec:	1885883a 	add	r2,r3,r2
  1542f0:	00000106 	br	1542f8 <close+0x38>
  1542f4:	0005883a 	mov	r2,zero
  1542f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  1542fc:	e0bffd17 	ldw	r2,-12(fp)
  154300:	10001826 	beq	r2,zero,154364 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  154304:	e0bffd17 	ldw	r2,-12(fp)
  154308:	10800017 	ldw	r2,0(r2)
  15430c:	10800417 	ldw	r2,16(r2)
  154310:	10000626 	beq	r2,zero,15432c <close+0x6c>
  154314:	e0bffd17 	ldw	r2,-12(fp)
  154318:	10800017 	ldw	r2,0(r2)
  15431c:	10800417 	ldw	r2,16(r2)
  154320:	e13ffd17 	ldw	r4,-12(fp)
  154324:	103ee83a 	callr	r2
  154328:	00000106 	br	154330 <close+0x70>
  15432c:	0005883a 	mov	r2,zero
  154330:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  154334:	e13fff17 	ldw	r4,-4(fp)
  154338:	01544b80 	call	1544b8 <alt_release_fd>
    if (rval < 0)
  15433c:	e0bffe17 	ldw	r2,-8(fp)
  154340:	1000060e 	bge	r2,zero,15435c <close+0x9c>
    {
      ALT_ERRNO = -rval;
  154344:	01542700 	call	154270 <alt_get_errno>
  154348:	e0fffe17 	ldw	r3,-8(fp)
  15434c:	00c7c83a 	sub	r3,zero,r3
  154350:	10c00015 	stw	r3,0(r2)
      return -1;
  154354:	00bfffc4 	movi	r2,-1
  154358:	00000606 	br	154374 <close+0xb4>
    }
    return 0;
  15435c:	0005883a 	mov	r2,zero
  154360:	00000406 	br	154374 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  154364:	01542700 	call	154270 <alt_get_errno>
  154368:	00c01444 	movi	r3,81
  15436c:	10c00015 	stw	r3,0(r2)
    return -1;
  154370:	00bfffc4 	movi	r2,-1
  }
}
  154374:	e037883a 	mov	sp,fp
  154378:	dfc00117 	ldw	ra,4(sp)
  15437c:	df000017 	ldw	fp,0(sp)
  154380:	dec00204 	addi	sp,sp,8
  154384:	f800283a 	ret

00154388 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  154388:	deffff04 	addi	sp,sp,-4
  15438c:	df000015 	stw	fp,0(sp)
  154390:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  154394:	e037883a 	mov	sp,fp
  154398:	df000017 	ldw	fp,0(sp)
  15439c:	dec00104 	addi	sp,sp,4
  1543a0:	f800283a 	ret

001543a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  1543a4:	defffc04 	addi	sp,sp,-16
  1543a8:	df000315 	stw	fp,12(sp)
  1543ac:	df000304 	addi	fp,sp,12
  1543b0:	e13ffd15 	stw	r4,-12(fp)
  1543b4:	e17ffe15 	stw	r5,-8(fp)
  1543b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  1543bc:	e0bfff17 	ldw	r2,-4(fp)
}
  1543c0:	e037883a 	mov	sp,fp
  1543c4:	df000017 	ldw	fp,0(sp)
  1543c8:	dec00104 	addi	sp,sp,4
  1543cc:	f800283a 	ret

001543d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  1543d0:	defffd04 	addi	sp,sp,-12
  1543d4:	dfc00215 	stw	ra,8(sp)
  1543d8:	df000115 	stw	fp,4(sp)
  1543dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  1543e0:	00800574 	movhi	r2,21
  1543e4:	10924604 	addi	r2,r2,18712
  1543e8:	e0bfff15 	stw	r2,-4(fp)
  1543ec:	00000606 	br	154408 <_do_ctors+0x38>
        (*ctor) (); 
  1543f0:	e0bfff17 	ldw	r2,-4(fp)
  1543f4:	10800017 	ldw	r2,0(r2)
  1543f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  1543fc:	e0bfff17 	ldw	r2,-4(fp)
  154400:	10bfff04 	addi	r2,r2,-4
  154404:	e0bfff15 	stw	r2,-4(fp)
  154408:	e0ffff17 	ldw	r3,-4(fp)
  15440c:	00800574 	movhi	r2,21
  154410:	10924704 	addi	r2,r2,18716
  154414:	18bff62e 	bgeu	r3,r2,1543f0 <_do_ctors+0x20>
        (*ctor) (); 
}
  154418:	e037883a 	mov	sp,fp
  15441c:	dfc00117 	ldw	ra,4(sp)
  154420:	df000017 	ldw	fp,0(sp)
  154424:	dec00204 	addi	sp,sp,8
  154428:	f800283a 	ret

0015442c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  15442c:	defffd04 	addi	sp,sp,-12
  154430:	dfc00215 	stw	ra,8(sp)
  154434:	df000115 	stw	fp,4(sp)
  154438:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  15443c:	00800574 	movhi	r2,21
  154440:	10924604 	addi	r2,r2,18712
  154444:	e0bfff15 	stw	r2,-4(fp)
  154448:	00000606 	br	154464 <_do_dtors+0x38>
        (*dtor) (); 
  15444c:	e0bfff17 	ldw	r2,-4(fp)
  154450:	10800017 	ldw	r2,0(r2)
  154454:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  154458:	e0bfff17 	ldw	r2,-4(fp)
  15445c:	10bfff04 	addi	r2,r2,-4
  154460:	e0bfff15 	stw	r2,-4(fp)
  154464:	e0ffff17 	ldw	r3,-4(fp)
  154468:	00800574 	movhi	r2,21
  15446c:	10924704 	addi	r2,r2,18716
  154470:	18bff62e 	bgeu	r3,r2,15444c <_do_dtors+0x20>
        (*dtor) (); 
}
  154474:	e037883a 	mov	sp,fp
  154478:	dfc00117 	ldw	ra,4(sp)
  15447c:	df000017 	ldw	fp,0(sp)
  154480:	dec00204 	addi	sp,sp,8
  154484:	f800283a 	ret

00154488 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  154488:	defffe04 	addi	sp,sp,-8
  15448c:	dfc00115 	stw	ra,4(sp)
  154490:	df000015 	stw	fp,0(sp)
  154494:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  154498:	0009883a 	mov	r4,zero
  15449c:	01440004 	movi	r5,4096
  1544a0:	01545380 	call	154538 <alt_icache_flush>
#endif
}
  1544a4:	e037883a 	mov	sp,fp
  1544a8:	dfc00117 	ldw	ra,4(sp)
  1544ac:	df000017 	ldw	fp,0(sp)
  1544b0:	dec00204 	addi	sp,sp,8
  1544b4:	f800283a 	ret

001544b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  1544b8:	defffe04 	addi	sp,sp,-8
  1544bc:	df000115 	stw	fp,4(sp)
  1544c0:	df000104 	addi	fp,sp,4
  1544c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  1544c8:	e0bfff17 	ldw	r2,-4(fp)
  1544cc:	108000d0 	cmplti	r2,r2,3
  1544d0:	10000d1e 	bne	r2,zero,154508 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  1544d4:	00c00574 	movhi	r3,21
  1544d8:	18d5b004 	addi	r3,r3,22208
  1544dc:	e0bfff17 	ldw	r2,-4(fp)
  1544e0:	10800324 	muli	r2,r2,12
  1544e4:	1885883a 	add	r2,r3,r2
  1544e8:	10800204 	addi	r2,r2,8
  1544ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  1544f0:	00c00574 	movhi	r3,21
  1544f4:	18d5b004 	addi	r3,r3,22208
  1544f8:	e0bfff17 	ldw	r2,-4(fp)
  1544fc:	10800324 	muli	r2,r2,12
  154500:	1885883a 	add	r2,r3,r2
  154504:	10000015 	stw	zero,0(r2)
  }
}
  154508:	e037883a 	mov	sp,fp
  15450c:	df000017 	ldw	fp,0(sp)
  154510:	dec00104 	addi	sp,sp,4
  154514:	f800283a 	ret

00154518 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  154518:	deffff04 	addi	sp,sp,-4
  15451c:	df000015 	stw	fp,0(sp)
  154520:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  154524:	000170fa 	wrctl	ienable,zero
}
  154528:	e037883a 	mov	sp,fp
  15452c:	df000017 	ldw	fp,0(sp)
  154530:	dec00104 	addi	sp,sp,4
  154534:	f800283a 	ret

00154538 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  154538:	defffb04 	addi	sp,sp,-20
  15453c:	df000415 	stw	fp,16(sp)
  154540:	df000404 	addi	fp,sp,16
  154544:	e13ffe15 	stw	r4,-8(fp)
  154548:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  15454c:	e0bfff17 	ldw	r2,-4(fp)
  154550:	10840070 	cmpltui	r2,r2,4097
  154554:	1000021e 	bne	r2,zero,154560 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  154558:	00840004 	movi	r2,4096
  15455c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  154560:	e0fffe17 	ldw	r3,-8(fp)
  154564:	e0bfff17 	ldw	r2,-4(fp)
  154568:	1885883a 	add	r2,r3,r2
  15456c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  154570:	e0bffe17 	ldw	r2,-8(fp)
  154574:	e0bffc15 	stw	r2,-16(fp)
  154578:	00000506 	br	154590 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  15457c:	e0bffc17 	ldw	r2,-16(fp)
  154580:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  154584:	e0bffc17 	ldw	r2,-16(fp)
  154588:	10800804 	addi	r2,r2,32
  15458c:	e0bffc15 	stw	r2,-16(fp)
  154590:	e0fffc17 	ldw	r3,-16(fp)
  154594:	e0bffd17 	ldw	r2,-12(fp)
  154598:	18bff836 	bltu	r3,r2,15457c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  15459c:	e0bffe17 	ldw	r2,-8(fp)
  1545a0:	108007cc 	andi	r2,r2,31
  1545a4:	10000226 	beq	r2,zero,1545b0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  1545a8:	e0bffc17 	ldw	r2,-16(fp)
  1545ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  1545b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  1545b4:	e037883a 	mov	sp,fp
  1545b8:	df000017 	ldw	fp,0(sp)
  1545bc:	dec00104 	addi	sp,sp,4
  1545c0:	f800283a 	ret

001545c4 <atexit>:
  1545c4:	200b883a 	mov	r5,r4
  1545c8:	000d883a 	mov	r6,zero
  1545cc:	0009883a 	mov	r4,zero
  1545d0:	000f883a 	mov	r7,zero
  1545d4:	01546101 	jmpi	154610 <__register_exitproc>

001545d8 <exit>:
  1545d8:	defffe04 	addi	sp,sp,-8
  1545dc:	000b883a 	mov	r5,zero
  1545e0:	dc000015 	stw	r16,0(sp)
  1545e4:	dfc00115 	stw	ra,4(sp)
  1545e8:	2021883a 	mov	r16,r4
  1545ec:	01547400 	call	154740 <__call_exitprocs>
  1545f0:	00800574 	movhi	r2,21
  1545f4:	10971704 	addi	r2,r2,23644
  1545f8:	11000017 	ldw	r4,0(r2)
  1545fc:	20800f17 	ldw	r2,60(r4)
  154600:	10000126 	beq	r2,zero,154608 <exit+0x30>
  154604:	103ee83a 	callr	r2
  154608:	8009883a 	mov	r4,r16
  15460c:	01548e00 	call	1548e0 <_exit>

00154610 <__register_exitproc>:
  154610:	defffa04 	addi	sp,sp,-24
  154614:	00800574 	movhi	r2,21
  154618:	10971704 	addi	r2,r2,23644
  15461c:	dc000315 	stw	r16,12(sp)
  154620:	14000017 	ldw	r16,0(r2)
  154624:	dc400415 	stw	r17,16(sp)
  154628:	dfc00515 	stw	ra,20(sp)
  15462c:	80805217 	ldw	r2,328(r16)
  154630:	2023883a 	mov	r17,r4
  154634:	10003e26 	beq	r2,zero,154730 <__register_exitproc+0x120>
  154638:	10c00117 	ldw	r3,4(r2)
  15463c:	020007c4 	movi	r8,31
  154640:	40c0180e 	bge	r8,r3,1546a4 <__register_exitproc+0x94>
  154644:	00800034 	movhi	r2,0
  154648:	10800004 	addi	r2,r2,0
  15464c:	1000061e 	bne	r2,zero,154668 <__register_exitproc+0x58>
  154650:	00bfffc4 	movi	r2,-1
  154654:	dfc00517 	ldw	ra,20(sp)
  154658:	dc400417 	ldw	r17,16(sp)
  15465c:	dc000317 	ldw	r16,12(sp)
  154660:	dec00604 	addi	sp,sp,24
  154664:	f800283a 	ret
  154668:	01006404 	movi	r4,400
  15466c:	d9400015 	stw	r5,0(sp)
  154670:	d9800115 	stw	r6,4(sp)
  154674:	d9c00215 	stw	r7,8(sp)
  154678:	00000000 	call	0 <PIO_IRQ_MASK-0x8>
  15467c:	d9400017 	ldw	r5,0(sp)
  154680:	d9800117 	ldw	r6,4(sp)
  154684:	d9c00217 	ldw	r7,8(sp)
  154688:	103ff126 	beq	r2,zero,154650 <__register_exitproc+0x40>
  15468c:	80c05217 	ldw	r3,328(r16)
  154690:	10000115 	stw	zero,4(r2)
  154694:	10c00015 	stw	r3,0(r2)
  154698:	80805215 	stw	r2,328(r16)
  15469c:	10006215 	stw	zero,392(r2)
  1546a0:	10006315 	stw	zero,396(r2)
  1546a4:	10c00117 	ldw	r3,4(r2)
  1546a8:	88000d1e 	bne	r17,zero,1546e0 <__register_exitproc+0xd0>
  1546ac:	19000084 	addi	r4,r3,2
  1546b0:	2109883a 	add	r4,r4,r4
  1546b4:	18c00044 	addi	r3,r3,1
  1546b8:	2109883a 	add	r4,r4,r4
  1546bc:	1109883a 	add	r4,r2,r4
  1546c0:	10c00115 	stw	r3,4(r2)
  1546c4:	0005883a 	mov	r2,zero
  1546c8:	21400015 	stw	r5,0(r4)
  1546cc:	dfc00517 	ldw	ra,20(sp)
  1546d0:	dc400417 	ldw	r17,16(sp)
  1546d4:	dc000317 	ldw	r16,12(sp)
  1546d8:	dec00604 	addi	sp,sp,24
  1546dc:	f800283a 	ret
  1546e0:	02400044 	movi	r9,1
  1546e4:	12806217 	ldw	r10,392(r2)
  1546e8:	48d2983a 	sll	r9,r9,r3
  1546ec:	19000804 	addi	r4,r3,32
  1546f0:	18d1883a 	add	r8,r3,r3
  1546f4:	2109883a 	add	r4,r4,r4
  1546f8:	4211883a 	add	r8,r8,r8
  1546fc:	2109883a 	add	r4,r4,r4
  154700:	1109883a 	add	r4,r2,r4
  154704:	1211883a 	add	r8,r2,r8
  154708:	5254b03a 	or	r10,r10,r9
  15470c:	21c02215 	stw	r7,136(r4)
  154710:	41802215 	stw	r6,136(r8)
  154714:	12806215 	stw	r10,392(r2)
  154718:	01000084 	movi	r4,2
  15471c:	893fe31e 	bne	r17,r4,1546ac <__register_exitproc+0x9c>
  154720:	11006317 	ldw	r4,396(r2)
  154724:	2252b03a 	or	r9,r4,r9
  154728:	12406315 	stw	r9,396(r2)
  15472c:	003fdf06 	br	1546ac <__register_exitproc+0x9c>
  154730:	008005b4 	movhi	r2,22
  154734:	10a72204 	addi	r2,r2,-25464
  154738:	80805215 	stw	r2,328(r16)
  15473c:	003fbe06 	br	154638 <__register_exitproc+0x28>

00154740 <__call_exitprocs>:
  154740:	00800574 	movhi	r2,21
  154744:	10971704 	addi	r2,r2,23644
  154748:	10800017 	ldw	r2,0(r2)
  15474c:	defff304 	addi	sp,sp,-52
  154750:	df000b15 	stw	fp,44(sp)
  154754:	d8800015 	stw	r2,0(sp)
  154758:	10805204 	addi	r2,r2,328
  15475c:	dd400815 	stw	r21,32(sp)
  154760:	dfc00c15 	stw	ra,48(sp)
  154764:	ddc00a15 	stw	r23,40(sp)
  154768:	dd800915 	stw	r22,36(sp)
  15476c:	dd000715 	stw	r20,28(sp)
  154770:	dcc00615 	stw	r19,24(sp)
  154774:	dc800515 	stw	r18,20(sp)
  154778:	dc400415 	stw	r17,16(sp)
  15477c:	dc000315 	stw	r16,12(sp)
  154780:	d9000115 	stw	r4,4(sp)
  154784:	2839883a 	mov	fp,r5
  154788:	d8800215 	stw	r2,8(sp)
  15478c:	057fffc4 	movi	r21,-1
  154790:	d8800017 	ldw	r2,0(sp)
  154794:	ddc00217 	ldw	r23,8(sp)
  154798:	14805217 	ldw	r18,328(r2)
  15479c:	90001726 	beq	r18,zero,1547fc <__call_exitprocs+0xbc>
  1547a0:	94400117 	ldw	r17,4(r18)
  1547a4:	8c3fffc4 	addi	r16,r17,-1
  1547a8:	80001116 	blt	r16,zero,1547f0 <__call_exitprocs+0xb0>
  1547ac:	8c400044 	addi	r17,r17,1
  1547b0:	8427883a 	add	r19,r16,r16
  1547b4:	8c63883a 	add	r17,r17,r17
  1547b8:	95802204 	addi	r22,r18,136
  1547bc:	9ce7883a 	add	r19,r19,r19
  1547c0:	8c63883a 	add	r17,r17,r17
  1547c4:	b4e7883a 	add	r19,r22,r19
  1547c8:	9463883a 	add	r17,r18,r17
  1547cc:	e0001726 	beq	fp,zero,15482c <__call_exitprocs+0xec>
  1547d0:	8c87c83a 	sub	r3,r17,r18
  1547d4:	b0c7883a 	add	r3,r22,r3
  1547d8:	18c01e17 	ldw	r3,120(r3)
  1547dc:	1f001326 	beq	r3,fp,15482c <__call_exitprocs+0xec>
  1547e0:	843fffc4 	addi	r16,r16,-1
  1547e4:	9cffff04 	addi	r19,r19,-4
  1547e8:	8c7fff04 	addi	r17,r17,-4
  1547ec:	857ff71e 	bne	r16,r21,1547cc <__call_exitprocs+0x8c>
  1547f0:	00800034 	movhi	r2,0
  1547f4:	10800004 	addi	r2,r2,0
  1547f8:	10002a1e 	bne	r2,zero,1548a4 <__call_exitprocs+0x164>
  1547fc:	dfc00c17 	ldw	ra,48(sp)
  154800:	df000b17 	ldw	fp,44(sp)
  154804:	ddc00a17 	ldw	r23,40(sp)
  154808:	dd800917 	ldw	r22,36(sp)
  15480c:	dd400817 	ldw	r21,32(sp)
  154810:	dd000717 	ldw	r20,28(sp)
  154814:	dcc00617 	ldw	r19,24(sp)
  154818:	dc800517 	ldw	r18,20(sp)
  15481c:	dc400417 	ldw	r17,16(sp)
  154820:	dc000317 	ldw	r16,12(sp)
  154824:	dec00d04 	addi	sp,sp,52
  154828:	f800283a 	ret
  15482c:	91000117 	ldw	r4,4(r18)
  154830:	88c00017 	ldw	r3,0(r17)
  154834:	213fffc4 	addi	r4,r4,-1
  154838:	24001526 	beq	r4,r16,154890 <__call_exitprocs+0x150>
  15483c:	88000015 	stw	zero,0(r17)
  154840:	183fe726 	beq	r3,zero,1547e0 <__call_exitprocs+0xa0>
  154844:	00800044 	movi	r2,1
  154848:	1408983a 	sll	r4,r2,r16
  15484c:	91406217 	ldw	r5,392(r18)
  154850:	95000117 	ldw	r20,4(r18)
  154854:	214a703a 	and	r5,r4,r5
  154858:	28000b26 	beq	r5,zero,154888 <__call_exitprocs+0x148>
  15485c:	91406317 	ldw	r5,396(r18)
  154860:	2148703a 	and	r4,r4,r5
  154864:	20000c1e 	bne	r4,zero,154898 <__call_exitprocs+0x158>
  154868:	99400017 	ldw	r5,0(r19)
  15486c:	d9000117 	ldw	r4,4(sp)
  154870:	183ee83a 	callr	r3
  154874:	90c00117 	ldw	r3,4(r18)
  154878:	1d3fc51e 	bne	r3,r20,154790 <__call_exitprocs+0x50>
  15487c:	b8c00017 	ldw	r3,0(r23)
  154880:	1cbfd726 	beq	r3,r18,1547e0 <__call_exitprocs+0xa0>
  154884:	003fc206 	br	154790 <__call_exitprocs+0x50>
  154888:	183ee83a 	callr	r3
  15488c:	003ff906 	br	154874 <__call_exitprocs+0x134>
  154890:	94000115 	stw	r16,4(r18)
  154894:	003fea06 	br	154840 <__call_exitprocs+0x100>
  154898:	99000017 	ldw	r4,0(r19)
  15489c:	183ee83a 	callr	r3
  1548a0:	003ff406 	br	154874 <__call_exitprocs+0x134>
  1548a4:	90c00117 	ldw	r3,4(r18)
  1548a8:	1800071e 	bne	r3,zero,1548c8 <__call_exitprocs+0x188>
  1548ac:	90c00017 	ldw	r3,0(r18)
  1548b0:	18000926 	beq	r3,zero,1548d8 <__call_exitprocs+0x198>
  1548b4:	9009883a 	mov	r4,r18
  1548b8:	b8c00015 	stw	r3,0(r23)
  1548bc:	00000000 	call	0 <PIO_IRQ_MASK-0x8>
  1548c0:	bc800017 	ldw	r18,0(r23)
  1548c4:	003fb506 	br	15479c <__call_exitprocs+0x5c>
  1548c8:	90c00017 	ldw	r3,0(r18)
  1548cc:	902f883a 	mov	r23,r18
  1548d0:	1825883a 	mov	r18,r3
  1548d4:	003fb106 	br	15479c <__call_exitprocs+0x5c>
  1548d8:	0007883a 	mov	r3,zero
  1548dc:	003ffb06 	br	1548cc <__call_exitprocs+0x18c>

001548e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  1548e0:	defffc04 	addi	sp,sp,-16
  1548e4:	df000315 	stw	fp,12(sp)
  1548e8:	df000304 	addi	fp,sp,12
  1548ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  1548f0:	0001883a 	nop
  1548f4:	e0bfff17 	ldw	r2,-4(fp)
  1548f8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  1548fc:	e0bffd17 	ldw	r2,-12(fp)
  154900:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  154904:	e0bffe17 	ldw	r2,-8(fp)
  154908:	10000226 	beq	r2,zero,154914 <_exit+0x34>
    ALT_SIM_FAIL();
  15490c:	002af070 	cmpltui	zero,zero,43969
  154910:	00000106 	br	154918 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
  154914:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  154918:	003fff06 	br	154918 <_exit+0x38>
