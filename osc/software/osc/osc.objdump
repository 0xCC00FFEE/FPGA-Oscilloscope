
osc.elf:     file format elf32-littlenios2
osc.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00120000

Program Header:
    LOAD off    0x00001000 vaddr 0x00120000 paddr 0x00120000 align 2**12
         filesz 0x000059cc memsz 0x000061a4 flags rwx
    LOAD off    0x00007000 vaddr 0x00148000 paddr 0x00148000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00007020 vaddr 0x00148020 paddr 0x00148020 align 2**12
         filesz 0x00000198 memsz 0x00000198 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00148000  00148000  00007000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00148020  00148020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004630  00120000  00120000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009ec  00124630  00124630  00005630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000009ac  00125020  00125020  00006020  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000007d8  001259cc  001259cc  000069cc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000071b8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000004e0  00000000  00000000  000071e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00006001  00000000  00000000  000076c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001e60  00000000  00000000  0000d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002241  00000000  00000000  0000f521  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000cac  00000000  00000000  00011764  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001656  00000000  00000000  00012410  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000019bf  00000000  00000000  00013a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00015428  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b0  00000000  00000000  00015438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00017e10  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00017e13  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00017e17  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00017e18  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00017e19  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00017e1d  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00017e21  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  00017e25  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  00017e29  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00017e2d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00017e31  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000036  00000000  00000000  00017e35  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00082337  00000000  00000000  00017e6b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00148000 l    d  .entry	00000000 .entry
00148020 l    d  .exceptions	00000000 .exceptions
00120000 l    d  .text	00000000 .text
00124630 l    d  .rodata	00000000 .rodata
00125020 l    d  .rwdata	00000000 .rwdata
001259cc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../osc_bsp//obj/HAL/src/crt0.o
00120034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00148094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 char712.c
00000000 l    df *ABS*	00000000 keyproc.c
00000000 l    df *ABS*	00000000 lcdout.c
00000000 l    df *ABS*	00000000 mainloop.c
00000000 l    df *ABS*	00000000 menu.c
00000000 l    df *ABS*	00000000 menuact.c
00000000 l    df *ABS*	00000000 stubfncs.c
00000000 l    df *ABS*	00000000 testcode.c
00000000 l    df *ABS*	00000000 tracutil.c
00000000 l    df *ABS*	00000000 obj/default/keyint.o
000fffff l       *ABS*	00000000 SWITCH_ALL
00000008 l       *ABS*	00000000 PIO_IRQ_MASK
0000000c l       *ABS*	00000000 PIO_EDGE_CAP
00125030 l       .rwdata	00000000 adc_speed
00125036 l       .rwdata	00000000 trig_level
00125034 l       .rwdata	00000000 trig_delay
00122b38 l     F .text	00000000 key_handler
00122b20 l       .text	00000000 key_int_installer_done
00125020 l       .rwdata	00000000 key_press
00122b7c l       .text	00000000 loop_keys
00122b90 l       .text	00000000 key_lookup
0012306c l       .text	00000000 key_map
00125021 l       .rwdata	00000000 key_value
00122cb8 l       .text	00000000 inc_speed
00122c1c l       .text	00000000 dec_speed
00122df0 l       .text	00000000 inc_level
00122d5c l       .text	00000000 dec_level
00122f28 l       .text	00000000 inc_delay
00122e98 l       .text	00000000 dec_delay
00122bdc l       .text	00000000 key_lookup_cont
00122c04 l       .text	00000000 key_handler_done
00122d50 l       .text	00000000 set_speed_2
00122c3c l       .text	00000000 dec_speed_cont
00122d48 l       .text	00000000 set_speed_1
00122ccc l       .text	00000000 inc_speed_cont
00122e8c l       .text	00000000 set_level_2
00122d74 l       .text	00000000 dec_level_cont
00122e84 l       .text	00000000 set_level_1
00122e08 l       .text	00000000 inc_level_cont
00122fc8 l       .text	00000000 set_delay_2
00122eac l       .text	00000000 dec_delay_cont
00122fbc l       .text	00000000 set_delay_1
00122f40 l       .text	00000000 inc_delay_cont
00122ff0 l       .text	00000000 key_available_done
00123054 l       .text	00000000 getkey_done
00000000 l    df *ABS*	00000000 obj/default/testadc.o
000fffff l       *ABS*	00000000 SWITCH_ALL
00000008 l       *ABS*	00000000 PIO_IRQ_MASK
0000000c l       *ABS*	00000000 PIO_EDGE_CAP
00123250 l       .text	00000000 adc_int_installer_done
001233e4 l       .text	00000000 adc_int_handler_done
001232cc l       .text	00000000 adc_int_handler_clear_front
00125040 l       .rwdata	00000000 sample_buffer_A
0012334c l       .text	00000000 adc_int_handler_loop
00125220 l       .rwdata	00000000 sample_buffer_Ao
0012351c l       .text	00000000 draw_trace_loop
00123710 l       .text	00000000 draw_pixel
00123644 l       .text	00000000 draw_trace_done
00123694 l       .text	00000000 draw_grid_horiz
001236d0 l       .text	00000000 draw_grid_vert
001236e0 l       .text	00000000 draw_grid_done
00123760 l       .text	00000000 draw_pixel_done
001237a0 l       .text	00000000 loop_clr_x
00123800 l       .text	00000000 loop_clr_y
00000000 l    df *ABS*	00000000 obj/default/testdisp.o
00123848 l       .text	00000000 disp
00123870 l       .text	00000000 draw_top
0012387c l       .text	00000000 draw_bot
00123854 l       .text	00000000 disp_cont
001238b8 l       .text	00000000 draw_border
00123960 l       .text	00000000 disp_reset
00123888 l       .text	00000000 draw_red
00123894 l       .text	00000000 draw_yellow
001238a0 l       .text	00000000 draw_green
001238ac l       .text	00000000 draw_blue
001238c4 l       .text	00000000 draw_border_top
001238d4 l       .text	00000000 dbt_loop
001238e8 l       .text	00000000 draw_border_bot
00123900 l       .text	00000000 dbb_loop
00123914 l       .text	00000000 draw_border_left
00123920 l       .text	00000000 dbl_loop
00123934 l       .text	00000000 draw_border_right
0012394c l       .text	00000000 dbr_loop
0012396c l       .text	00000000 test_disp_done
00000000 l    df *ABS*	00000000 obj/default/testvram.o
001239cc l     F .text	00000000 write_all
001239f8 l     F .text	00000000 read_all
001239ac l       .text	00000000 test_vram_fail
001239b4 l       .text	00000000 test_vram_done
001239d4 l       .text	00000000 write_all_loop
001239f4 l       .text	00000000 write_all_done
001239ec l       .text	00000000 write_all_reset_cnt
00123a00 l       .text	00000000 read_all_loop
00123a24 l       .text	00000000 read_all_done
00123a1c l       .text	00000000 read_all_reset_cnt
00000000 l    df *ABS*	00000000 lib2-divmod.c
00123a28 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
00124038 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00124154 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
001255a8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00123f88 g     F .text	0000005c alt_main
00125f14 g     O .bss	00000100 alt_irq
001213e4 g     F .text	00000048 trg_delay_down
00120eb0 g     F .text	00000084 display_scale
001259ec g     O .bss	00000004 cur_scale
00121c88 g     F .text	00000028 trace_rearm
001219f4 g     F .text	00000020 sample_done
00120c3c g     F .text	00000020 get_trigger_mode
00124c68 g     O .rodata	00000070 menu
00120bb0 g     F .text	00000020 no_menu_action
001219ac g     F .text	00000024 set_delay
00000000  w      *UND*	00000000 __errno
00148000 g     F .entry	00000000 __reset
00120038 g     F .text	00000024 no_action
00125a1c g     O .bss	00000004 errno
001259d4 g     O .bss	00000004 trigger_mode
0012013c g     F .text	00000030 menu_right
00121100 g     F .text	00000048 set_trg_level
00125a14 g     O .bss	00000004 alt_argv
0012067c g     F .text	00000064 init_menu
0012d9a8 g       *ABS*	00000000 _gp
00121bf0 g     F .text	00000020 is_sampling
00120000 g       *ABS*	00000000 __alt_mem_RAM_ctrl
0012010c g     F .text	00000030 menu_left
00125428 g     O .rwdata	00000180 alt_fd_list
001237d8 g     F .text	00000000 clear_display_y
00123b80 g     F .text	00000140 memcpy
00121198 g     F .text	00000054 trg_level_up
00124630 g       *ABS*	00000000 __DTOR_END__
00120bfc g     F .text	00000040 set_trigger_mode
00121934 g     F .text	0000002c plot_pixel
00000000  w      *UND*	00000000 malloc
00123b48 g     F .text	00000008 __udivsi3
00122488 g     F .text	00000120 restore_trace
0012177c g     F .text	00000198 cvt_num_field
001259f0 g     O .bss	00000004 trace_status
001223b0 g     F .text	000000d8 set_save_area
001219d0 g     F .text	00000024 start_sample
00120de8 g     F .text	00000064 scale_down
001259bc g     O .rwdata	00000004 alt_max_fd
00122fd0 g     F .text	00000000 key_available
001259cc g     O .bss	00000004 menu_entry
00130000 g       *ABS*	00000000 __alt_mem_ROM_ctrl
00121098 g     F .text	00000068 display_sweep
00121cdc g     F .text	000003f8 set_display_scale
001234f4 g     F .text	00000000 draw_trace
001225a8 g     F .text	00000048 do_trace
001259c4 g     O .rwdata	00000004 _global_impure_ptr
001261a4 g       *ABS*	00000000 __bss_end
00123e98 g     F .text	000000f0 alt_iic_isr_register
00121b54 g     F .text	00000064 init_trace
00123e4c g     F .text	0000004c alt_ic_irq_enabled
001213a4 g     F .text	00000040 set_trg_delay
001200dc g     F .text	00000030 menu_down
00125a0c g     O .bss	00000004 alt_irq_active
00121a14 g     F .text	00000140 get_test_sample
001480ec g     F .exceptions	000000cc alt_irq_handler
00125400 g     O .rwdata	00000028 alt_dev_null
0012016c g     F .text	000000a8 clear_region
00124630 g     O .rodata	00000600 char_patterns
0012089c g     F .text	0000006c previous_entry
001259b4 g     O .rwdata	00000008 alt_dev_list
00121bb8 g     F .text	00000038 set_mode
0012365c g     F .text	00000000 draw_grid
00120ae0 g     F .text	000000d0 display_entry
001259f4 g     O .bss	00000004 saved_end_y
00123b50 g     F .text	00000008 __umodsi3
00120d24 g     F .text	00000084 display_mode
001259d0 g     O .bss	00000004 menu_display
001261a4 g       *ABS*	00000000 end
00120bd0 g     F .text	0000002c no_display
001211ec g     F .text	000000a4 display_trg_level
00121014 g     F .text	00000084 sweep_up
001207d0 g     F .text	0000005c reset_menu
001206e0 g     F .text	00000038 clear_menu
0012142c g     F .text	0000004c trg_delay_up
00124630 g       *ABS*	00000000 __CTOR_LIST__
00130000 g       *ABS*	00000000 __alt_stack_pointer
00122aa0 g     F .text	00000000 key_int_installer
00124454 g     F .text	000001a0 __call_exitprocs
00120000 g     F .text	00000038 _start
001259d8 g     O .bss	00000004 level
001259f8 g     O .bss	00000004 saved_pos_y
001212d8 g     F .text	00000054 trg_slope_toggle
00124018 g     F .text	00000020 alt_sys_init
00124324 g     F .text	00000130 __register_exitproc
00123b58 g     F .text	00000028 __mulsi3
001259fc g     O .bss	00000004 sample_size
00124d60 g     O .rodata	00000088 sweep_rates
00121914 g     F .text	00000020 clear_display
00125a00 g     O .bss	00000004 saved_end_x
00123268 g     F .text	00000000 adc_int_handler
001261a4 g       *ABS*	00000000 __alt_stack_base
0012229c g     F .text	00000114 restore_menu_trace
00121cb0 g     F .text	0000002c set_trace_size
001204e4 g     F .text	00000098 plot_string
001259cc g       *ABS*	00000000 __bss_start
00125a04 g     O .bss	00000004 saved_pos_x
0012057c g     F .text	00000024 main
00125a18 g     O .bss	00000004 alt_envp
00121478 g     F .text	000000d4 adjust_trg_delay
001225f0 g     F .text	000004b0 plot_trace
00126014 g     O .bss	00000190 _atexit0
00120f94 g     F .text	00000080 sweep_down
001259c0 g     O .rwdata	00000004 alt_errno
001259dc g     O .bss	00000004 sweep
00123778 g     F .text	00000000 clear_display_x
00120c5c g     F .text	00000064 mode_down
00123080 g     F .text	00000000 adc_int_installer
00121960 g     F .text	00000024 set_sample_rate
00123a9c g     F .text	00000050 __divsi3
00121984 g     F .text	00000028 set_trigger
00124630 g       *ABS*	00000000 __CTOR_END__
00148000 g       *ABS*	00000000 __alt_mem_ONCHIP_mem
00120798 g     F .text	00000038 refresh_menu
00124630 g       *ABS*	00000000 __DTOR_LIST__
001200ac g     F .text	00000030 menu_up
001209f4 g     F .text	000000ec menu_entry_right
001259e0 g     O .bss	00000004 delay
00123fe4 g     F .text	00000034 alt_irq_init
00124238 g     F .text	00000080 alt_release_fd
001242d8 g     F .text	00000014 atexit
00121c48 g     F .text	00000040 trace_done
001259c8 g     O .rwdata	00000004 _impure_ptr
00125a10 g     O .bss	00000004 alt_argc
00121290 g     F .text	00000048 set_trg_slope
00121148 g     F .text	00000050 trg_level_down
001241dc g     F .text	0000005c _do_dtors
00123008 g     F .text	00000000 getkey
0012036c g     F .text	00000178 plot_char
00125a20 g     O .bss	000002a0 saved_menu
00148020 g       .exceptions	00000000 alt_irq_entry
00120908 g     F .text	000000ec menu_entry_left
001259ac g     O .rwdata	00000008 alt_fs_list
001220d4 g     F .text	000001c8 clear_saved_areas
00120214 g     F .text	000000ac plot_hline
00120da8 g     F .text	00000040 set_scale
00123cc0 g     F .text	00000050 alt_ic_isr_register
00125cc0 g     O .bss	000000b0 saved_axis_y
00123970 g     F .text	00000000 test_vram
001259cc g       *ABS*	00000000 _edata
001261a4 g       *ABS*	00000000 _end
00120cc0 g     F .text	00000064 mode_up
00123dac g     F .text	000000a0 alt_ic_irq_disable
00125d70 g     O .bss	000000b4 saved_axis_x
001242b8 g     F .text	00000020 altera_nios2_qsys_irq_init
001242ec g     F .text	00000038 exit
0012154c g     F .text	00000230 display_trg_delay
00123aec g     F .text	0000005c __modsi3
00123838 g     F .text	00000000 test_disp
00130000 g       *ABS*	00000000 __alt_data_end
00148020 g     F .exceptions	00000000 alt_exception
0012132c g     F .text	00000078 display_trg_slope
00125e24 g     O .bss	000000f0 saved_area
00125a08 g     O .bss	00000004 sampling
001245f4 g     F .text	0000003c _exit
00080000 g       *ABS*	00000000 __alt_mem_VRAM_ctrl
001259e4 g     O .bss	00000004 scale
001205a0 g     F .text	000000dc key_lookup
001259a8 g     O .rwdata	00000004 alt_priority_mask
00123d10 g     F .text	0000009c alt_ic_irq_enable
001202c0 g     F .text	000000ac plot_vline
00120718 g     F .text	00000080 display_menu
00124180 g     F .text	0000005c _do_ctors
0012082c g     F .text	00000070 next_entry
00124088 g     F .text	000000cc close
00121c10 g     F .text	00000038 trace_rdy
001259e8 g     O .bss	00000004 slope
00120f34 g     F .text	00000060 set_sweep
00120e4c g     F .text	00000064 scale_up
0012005c g     F .text	00000050 menu_key
00000000  w      *UND*	00000000 free



Disassembly of section .exceptions:

00148020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  148020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  148024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  148028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  14802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  148030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  148034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  148038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  14803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  148040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  148044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  148048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  14804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  148050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  148054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  148058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  14805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  148060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  148064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  148068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  14806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  148070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  148074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  148078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  14807c:	10000326 	beq	r2,zero,14808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  148080:	20000226 	beq	r4,zero,14808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  148084:	01480ec0 	call	1480ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  148088:	00000306 	br	148098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  14808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  148090:	e8bfff17 	ldw	r2,-4(ea)

00148094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  148094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  148098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  14809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1480a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1480a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1480a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1480ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1480b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1480b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1480b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1480bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1480c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1480c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1480c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1480cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1480d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1480d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1480d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1480dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1480e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1480e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1480e8:	ef80083a 	eret

001480ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1480ec:	defff904 	addi	sp,sp,-28
  1480f0:	dfc00615 	stw	ra,24(sp)
  1480f4:	df000515 	stw	fp,20(sp)
  1480f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1480fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  148100:	0005313a 	rdctl	r2,ipending
  148104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  148108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  14810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  148110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  148114:	00800044 	movi	r2,1
  148118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  14811c:	e0fffb17 	ldw	r3,-20(fp)
  148120:	e0bffc17 	ldw	r2,-16(fp)
  148124:	1884703a 	and	r2,r3,r2
  148128:	10001726 	beq	r2,zero,148188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  14812c:	00c004b4 	movhi	r3,18
  148130:	18d7c504 	addi	r3,r3,24340
  148134:	e0bffd17 	ldw	r2,-12(fp)
  148138:	100490fa 	slli	r2,r2,3
  14813c:	1885883a 	add	r2,r3,r2
  148140:	10c00017 	ldw	r3,0(r2)
  148144:	010004b4 	movhi	r4,18
  148148:	2117c504 	addi	r4,r4,24340
  14814c:	e0bffd17 	ldw	r2,-12(fp)
  148150:	100490fa 	slli	r2,r2,3
  148154:	2085883a 	add	r2,r4,r2
  148158:	10800104 	addi	r2,r2,4
  14815c:	10800017 	ldw	r2,0(r2)
  148160:	1009883a 	mov	r4,r2
  148164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  148168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  14816c:	0005313a 	rdctl	r2,ipending
  148170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  148174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  148178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  14817c:	e0bffb17 	ldw	r2,-20(fp)
  148180:	103fe31e 	bne	r2,zero,148110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  148184:	00000706 	br	1481a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  148188:	e0bffc17 	ldw	r2,-16(fp)
  14818c:	1085883a 	add	r2,r2,r2
  148190:	e0bffc15 	stw	r2,-16(fp)
      i++;
  148194:	e0bffd17 	ldw	r2,-12(fp)
  148198:	10800044 	addi	r2,r2,1
  14819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1481a0:	003fde06 	br	14811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  1481a4:	e037883a 	mov	sp,fp
  1481a8:	dfc00117 	ldw	ra,4(sp)
  1481ac:	df000017 	ldw	fp,0(sp)
  1481b0:	dec00204 	addi	sp,sp,8
  1481b4:	f800283a 	ret

Disassembly of section .text:

00120000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  120000:	06c004f4 	movhi	sp,19
    ori sp, sp, %lo(__alt_stack_pointer)
  120004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  120008:	068004b4 	movhi	gp,18
    ori gp, gp, %lo(_gp)
  12000c:	d6b66a14 	ori	gp,gp,55720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  120010:	008004b4 	movhi	r2,18
    ori r2, r2, %lo(__bss_start)
  120014:	10967314 	ori	r2,r2,22988

    movhi r3, %hi(__bss_end)
  120018:	00c004b4 	movhi	r3,18
    ori r3, r3, %lo(__bss_end)
  12001c:	18d86914 	ori	r3,r3,24996

    beq r2, r3, 1f
  120020:	10c00326 	beq	r2,r3,120030 <_start+0x30>

0:
    stw zero, (r2)
  120024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  120028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  12002c:	10fffd36 	bltu	r2,r3,120024 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  120030:	0123f880 	call	123f88 <alt_main>

00120034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  120034:	003fff06 	br	120034 <alt_after_alt_main>

00120038 <no_action>:
   Last Modified:    Mar. 8, 1994

*/

enum status  no_action(enum status cur_state)
{
  120038:	defffe04 	addi	sp,sp,-8
  12003c:	df000115 	stw	fp,4(sp)
  120040:	df000104 	addi	fp,sp,4
  120044:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* return the current state */
    return  cur_state;
  120048:	e0bfff17 	ldw	r2,-4(fp)

}
  12004c:	e037883a 	mov	sp,fp
  120050:	df000017 	ldw	fp,0(sp)
  120054:	dec00104 	addi	sp,sp,4
  120058:	f800283a 	ret

0012005c <menu_key>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_key(enum status cur_state)
{
  12005c:	defffd04 	addi	sp,sp,-12
  120060:	dfc00215 	stw	ra,8(sp)
  120064:	df000115 	stw	fp,4(sp)
  120068:	df000104 	addi	fp,sp,4
  12006c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* check if need to turn the menu on or off */
    if (cur_state == MENU_ON)
  120070:	e0bfff17 	ldw	r2,-4(fp)
  120074:	1000021e 	bne	r2,zero,120080 <menu_key+0x24>
        /* currently the menu is on, turn it off */
	clear_menu();
  120078:	01206e00 	call	1206e0 <clear_menu>
  12007c:	00000106 	br	120084 <menu_key+0x28>
    else
        /* currently the menu is off, turn it on */
	display_menu();
  120080:	01207180 	call	120718 <display_menu>


    /* all done, return the "opposite" of the current state */
    if (cur_state == MENU_ON)
  120084:	e0bfff17 	ldw	r2,-4(fp)
  120088:	1000021e 	bne	r2,zero,120094 <menu_key+0x38>
        /* state was MENU_ON, change it to MENU_OFF */
        return  MENU_OFF;
  12008c:	00800044 	movi	r2,1
  120090:	00000106 	br	120098 <menu_key+0x3c>
    else
        /* state was MENU_OFF, change it to MENU_ON */
        return  MENU_ON;
  120094:	0005883a 	mov	r2,zero

}
  120098:	e037883a 	mov	sp,fp
  12009c:	dfc00117 	ldw	ra,4(sp)
  1200a0:	df000017 	ldw	fp,0(sp)
  1200a4:	dec00204 	addi	sp,sp,8
  1200a8:	f800283a 	ret

001200ac <menu_up>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_up(enum status cur_state)
{
  1200ac:	defffd04 	addi	sp,sp,-12
  1200b0:	dfc00215 	stw	ra,8(sp)
  1200b4:	df000115 	stw	fp,4(sp)
  1200b8:	df000104 	addi	fp,sp,4
  1200bc:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the previous menu entry */
    previous_entry();
  1200c0:	012089c0 	call	12089c <previous_entry>


    /* return the current state */
    return  cur_state;
  1200c4:	e0bfff17 	ldw	r2,-4(fp)

}
  1200c8:	e037883a 	mov	sp,fp
  1200cc:	dfc00117 	ldw	ra,4(sp)
  1200d0:	df000017 	ldw	fp,0(sp)
  1200d4:	dec00204 	addi	sp,sp,8
  1200d8:	f800283a 	ret

001200dc <menu_down>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_down(enum status cur_state)
{
  1200dc:	defffd04 	addi	sp,sp,-12
  1200e0:	dfc00215 	stw	ra,8(sp)
  1200e4:	df000115 	stw	fp,4(sp)
  1200e8:	df000104 	addi	fp,sp,4
  1200ec:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the next menu entry */
    next_entry();
  1200f0:	012082c0 	call	12082c <next_entry>


    /* return the current state */
    return  cur_state;
  1200f4:	e0bfff17 	ldw	r2,-4(fp)

}
  1200f8:	e037883a 	mov	sp,fp
  1200fc:	dfc00117 	ldw	ra,4(sp)
  120100:	df000017 	ldw	fp,0(sp)
  120104:	dec00204 	addi	sp,sp,8
  120108:	f800283a 	ret

0012010c <menu_left>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_left(enum status cur_state)
{
  12010c:	defffd04 	addi	sp,sp,-12
  120110:	dfc00215 	stw	ra,8(sp)
  120114:	df000115 	stw	fp,4(sp)
  120118:	df000104 	addi	fp,sp,4
  12011c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Left> key function for the current menu entry */
    menu_entry_left();
  120120:	01209080 	call	120908 <menu_entry_left>


    /* return the current state */
    return  cur_state;
  120124:	e0bfff17 	ldw	r2,-4(fp)

}
  120128:	e037883a 	mov	sp,fp
  12012c:	dfc00117 	ldw	ra,4(sp)
  120130:	df000017 	ldw	fp,0(sp)
  120134:	dec00204 	addi	sp,sp,8
  120138:	f800283a 	ret

0012013c <menu_right>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_right(enum status cur_state)
{
  12013c:	defffd04 	addi	sp,sp,-12
  120140:	dfc00215 	stw	ra,8(sp)
  120144:	df000115 	stw	fp,4(sp)
  120148:	df000104 	addi	fp,sp,4
  12014c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Right> key function for the current menu entry */
    menu_entry_right();
  120150:	01209f40 	call	1209f4 <menu_entry_right>


    /* return the current state */
    return  cur_state;
  120154:	e0bfff17 	ldw	r2,-4(fp)

}
  120158:	e037883a 	mov	sp,fp
  12015c:	dfc00117 	ldw	ra,4(sp)
  120160:	df000017 	ldw	fp,0(sp)
  120164:	dec00204 	addi	sp,sp,8
  120168:	f800283a 	ret

0012016c <clear_region>:
   Last Modified:    Mar. 8, 1994

*/

void  clear_region(int x_ul, int y_ul, int x_size, int y_size)
{
  12016c:	defff804 	addi	sp,sp,-32
  120170:	dfc00715 	stw	ra,28(sp)
  120174:	df000615 	stw	fp,24(sp)
  120178:	df000604 	addi	fp,sp,24
  12017c:	e13ffc15 	stw	r4,-16(fp)
  120180:	e17ffd15 	stw	r5,-12(fp)
  120184:	e1bffe15 	stw	r6,-8(fp)
  120188:	e1ffff15 	stw	r7,-4(fp)
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
  12018c:	e0bffc17 	ldw	r2,-16(fp)
  120190:	e0bffa15 	stw	r2,-24(fp)
  120194:	00001406 	br	1201e8 <clear_region+0x7c>
        for (y = y_ul; y < (y_ul + y_size); y++)  {
  120198:	e0bffd17 	ldw	r2,-12(fp)
  12019c:	e0bffb15 	stw	r2,-20(fp)
  1201a0:	00000906 	br	1201c8 <clear_region+0x5c>

	    /* clear this pixel */
	    plot_pixel(x, y, PIXEL_WHITE);
  1201a4:	e0fffa17 	ldw	r3,-24(fp)
  1201a8:	e0bffb17 	ldw	r2,-20(fp)
  1201ac:	1809883a 	mov	r4,r3
  1201b0:	100b883a 	mov	r5,r2
  1201b4:	000d883a 	mov	r6,zero
  1201b8:	01219340 	call	121934 <plot_pixel>



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
        for (y = y_ul; y < (y_ul + y_size); y++)  {
  1201bc:	e0bffb17 	ldw	r2,-20(fp)
  1201c0:	10800044 	addi	r2,r2,1
  1201c4:	e0bffb15 	stw	r2,-20(fp)
  1201c8:	e0fffd17 	ldw	r3,-12(fp)
  1201cc:	e0bfff17 	ldw	r2,-4(fp)
  1201d0:	1885883a 	add	r2,r3,r2
  1201d4:	e0fffb17 	ldw	r3,-20(fp)
  1201d8:	18bff216 	blt	r3,r2,1201a4 <clear_region+0x38>
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
  1201dc:	e0bffa17 	ldw	r2,-24(fp)
  1201e0:	10800044 	addi	r2,r2,1
  1201e4:	e0bffa15 	stw	r2,-24(fp)
  1201e8:	e0fffc17 	ldw	r3,-16(fp)
  1201ec:	e0bffe17 	ldw	r2,-8(fp)
  1201f0:	1885883a 	add	r2,r3,r2
  1201f4:	e0fffa17 	ldw	r3,-24(fp)
  1201f8:	18bfe716 	blt	r3,r2,120198 <clear_region+0x2c>
        }
    }


    /* done clearing the display region - return */
    return;
  1201fc:	0001883a 	nop

}
  120200:	e037883a 	mov	sp,fp
  120204:	dfc00117 	ldw	ra,4(sp)
  120208:	df000017 	ldw	fp,0(sp)
  12020c:	dec00204 	addi	sp,sp,8
  120210:	f800283a 	ret

00120214 <plot_hline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_hline(int start_x, int start_y, int length)
{
  120214:	defff804 	addi	sp,sp,-32
  120218:	dfc00715 	stw	ra,28(sp)
  12021c:	df000615 	stw	fp,24(sp)
  120220:	df000604 	addi	fp,sp,24
  120224:	e13ffd15 	stw	r4,-12(fp)
  120228:	e17ffe15 	stw	r5,-8(fp)
  12022c:	e1bfff15 	stw	r6,-4(fp)
    int  end_x;		/* ending x position to plot */



    /* check if a line to the "right" or "left" */
    if (length > 0)  {
  120230:	e0bfff17 	ldw	r2,-4(fp)
  120234:	0080070e 	bge	zero,r2,120254 <plot_hline+0x40>

        /* line to the "right" - start at start_x, end at start_x + length */
	init_x = start_x;
  120238:	e0bffd17 	ldw	r2,-12(fp)
  12023c:	e0bffb15 	stw	r2,-20(fp)
	end_x = start_x + length;
  120240:	e0fffd17 	ldw	r3,-12(fp)
  120244:	e0bfff17 	ldw	r2,-4(fp)
  120248:	1885883a 	add	r2,r3,r2
  12024c:	e0bffc15 	stw	r2,-16(fp)
  120250:	00000606 	br	12026c <plot_hline+0x58>
    }
    else  {

        /* line to the "left" - start at start_x + length, end at start_x */
	init_x = start_x + length;
  120254:	e0fffd17 	ldw	r3,-12(fp)
  120258:	e0bfff17 	ldw	r2,-4(fp)
  12025c:	1885883a 	add	r2,r3,r2
  120260:	e0bffb15 	stw	r2,-20(fp)
	end_x = start_x;
  120264:	e0bffd17 	ldw	r2,-12(fp)
  120268:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
  12026c:	e0bffb17 	ldw	r2,-20(fp)
  120270:	e0bffa15 	stw	r2,-24(fp)
  120274:	00000906 	br	12029c <plot_hline+0x88>
        /* plot a point of the line */
	plot_pixel(x, start_y, PIXEL_BLACK);
  120278:	e0fffa17 	ldw	r3,-24(fp)
  12027c:	e0bffe17 	ldw	r2,-8(fp)
  120280:	1809883a 	mov	r4,r3
  120284:	100b883a 	mov	r5,r2
  120288:	01800044 	movi	r6,1
  12028c:	01219340 	call	121934 <plot_pixel>
	end_x = start_x;
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
  120290:	e0bffa17 	ldw	r2,-24(fp)
  120294:	10800044 	addi	r2,r2,1
  120298:	e0bffa15 	stw	r2,-24(fp)
  12029c:	e0fffa17 	ldw	r3,-24(fp)
  1202a0:	e0bffc17 	ldw	r2,-16(fp)
  1202a4:	18bff416 	blt	r3,r2,120278 <plot_hline+0x64>
        /* plot a point of the line */
	plot_pixel(x, start_y, PIXEL_BLACK);


    /* done plotting the line - return */
    return;
  1202a8:	0001883a 	nop

}
  1202ac:	e037883a 	mov	sp,fp
  1202b0:	dfc00117 	ldw	ra,4(sp)
  1202b4:	df000017 	ldw	fp,0(sp)
  1202b8:	dec00204 	addi	sp,sp,8
  1202bc:	f800283a 	ret

001202c0 <plot_vline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_vline(int start_x, int start_y, int length)
{
  1202c0:	defff804 	addi	sp,sp,-32
  1202c4:	dfc00715 	stw	ra,28(sp)
  1202c8:	df000615 	stw	fp,24(sp)
  1202cc:	df000604 	addi	fp,sp,24
  1202d0:	e13ffd15 	stw	r4,-12(fp)
  1202d4:	e17ffe15 	stw	r5,-8(fp)
  1202d8:	e1bfff15 	stw	r6,-4(fp)
    int  end_y;		/* ending y position to plot */



    /* check if an "up" or "down" line */
    if (length > 0)  {
  1202dc:	e0bfff17 	ldw	r2,-4(fp)
  1202e0:	0080070e 	bge	zero,r2,120300 <plot_vline+0x40>

        /* line going "down" - start at start_y, end at start_y + length */
	init_y = start_y;
  1202e4:	e0bffe17 	ldw	r2,-8(fp)
  1202e8:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y + length;
  1202ec:	e0fffe17 	ldw	r3,-8(fp)
  1202f0:	e0bfff17 	ldw	r2,-4(fp)
  1202f4:	1885883a 	add	r2,r3,r2
  1202f8:	e0bffc15 	stw	r2,-16(fp)
  1202fc:	00000606 	br	120318 <plot_vline+0x58>
    }
    else  {

        /* line going "up" - start at start_y + length, end at start_y */
	init_y = start_y + length;
  120300:	e0fffe17 	ldw	r3,-8(fp)
  120304:	e0bfff17 	ldw	r2,-4(fp)
  120308:	1885883a 	add	r2,r3,r2
  12030c:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y;
  120310:	e0bffe17 	ldw	r2,-8(fp)
  120314:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
  120318:	e0bffb17 	ldw	r2,-20(fp)
  12031c:	e0bffa15 	stw	r2,-24(fp)
  120320:	00000906 	br	120348 <plot_vline+0x88>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_BLACK);
  120324:	e0fffd17 	ldw	r3,-12(fp)
  120328:	e0bffa17 	ldw	r2,-24(fp)
  12032c:	1809883a 	mov	r4,r3
  120330:	100b883a 	mov	r5,r2
  120334:	01800044 	movi	r6,1
  120338:	01219340 	call	121934 <plot_pixel>
	end_y = start_y;
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
  12033c:	e0bffa17 	ldw	r2,-24(fp)
  120340:	10800044 	addi	r2,r2,1
  120344:	e0bffa15 	stw	r2,-24(fp)
  120348:	e0fffa17 	ldw	r3,-24(fp)
  12034c:	e0bffc17 	ldw	r2,-16(fp)
  120350:	18bff416 	blt	r3,r2,120324 <plot_vline+0x64>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_BLACK);


    /* done plotting the line - return */
    return;
  120354:	0001883a 	nop

}
  120358:	e037883a 	mov	sp,fp
  12035c:	dfc00117 	ldw	ra,4(sp)
  120360:	df000017 	ldw	fp,0(sp)
  120364:	dec00204 	addi	sp,sp,8
  120368:	f800283a 	ret

0012036c <plot_char>:
   Last Modified:    May 27, 2008

*/

void  plot_char(int pos_x, int pos_y, char c, enum char_style style)
{
  12036c:	defff504 	addi	sp,sp,-44
  120370:	dfc00a15 	stw	ra,40(sp)
  120374:	df000915 	stw	fp,36(sp)
  120378:	df000904 	addi	fp,sp,36
  12037c:	e13ffc15 	stw	r4,-16(fp)
  120380:	e17ffd15 	stw	r5,-12(fp)
  120384:	3005883a 	mov	r2,r6
  120388:	e1ffff15 	stw	r7,-4(fp)
  12038c:	e0bffe05 	stb	r2,-8(fp)
    int  y;		/* y pixel position for the character */



    /* setup the pixel positions for the character */
    x = pos_x * HORIZ_SIZE;
  120390:	e13ffc17 	ldw	r4,-16(fp)
  120394:	01400184 	movi	r5,6
  120398:	0123b580 	call	123b58 <__mulsi3>
  12039c:	e0bffb15 	stw	r2,-20(fp)
    y = pos_y * VERT_SIZE;
  1203a0:	e0bffd17 	ldw	r2,-12(fp)
  1203a4:	100490fa 	slli	r2,r2,3
  1203a8:	e0bffa15 	stw	r2,-24(fp)


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
  1203ac:	e03ff915 	stw	zero,-28(fp)
  1203b0:	00004306 	br	1204c0 <plot_char+0x154>

        /* get the character bits for this row from the character table */
	if (row == (VERT_SIZE - 1))
  1203b4:	e0bff917 	ldw	r2,-28(fp)
  1203b8:	108001d8 	cmpnei	r2,r2,7
  1203bc:	1000021e 	bne	r2,zero,1203c8 <plot_char+0x5c>
	    /* last row - blank it */
	    bits = 0;
  1203c0:	e03ff715 	stw	zero,-36(fp)
  1203c4:	00000d06 	br	1203fc <plot_char+0x90>
	else
	    /* in middle of character, get the row from the bit patterns */
            bits = char_patterns[(c * (VERT_SIZE - 1)) + row];
  1203c8:	e0bffe07 	ldb	r2,-8(fp)
  1203cc:	1009883a 	mov	r4,r2
  1203d0:	014001c4 	movi	r5,7
  1203d4:	0123b580 	call	123b58 <__mulsi3>
  1203d8:	1007883a 	mov	r3,r2
  1203dc:	e0bff917 	ldw	r2,-28(fp)
  1203e0:	1885883a 	add	r2,r3,r2
  1203e4:	00c004b4 	movhi	r3,18
  1203e8:	18d18c04 	addi	r3,r3,17968
  1203ec:	1885883a 	add	r2,r3,r2
  1203f0:	10800003 	ldbu	r2,0(r2)
  1203f4:	10803fcc 	andi	r2,r2,255
  1203f8:	e0bff715 	stw	r2,-36(fp)

	/* take care of "normal/reverse video" */
	if (style == REVERSE)
  1203fc:	e0bfff17 	ldw	r2,-4(fp)
  120400:	10800058 	cmpnei	r2,r2,1
  120404:	1000031e 	bne	r2,zero,120414 <plot_char+0xa8>
	    /* invert the bits for "reverse video" */
	    bits = ~bits;
  120408:	e0bff717 	ldw	r2,-36(fp)
  12040c:	0084303a 	nor	r2,zero,r2
  120410:	e0bff715 	stw	r2,-36(fp)

        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);
  120414:	e0bff717 	ldw	r2,-36(fp)
  120418:	1085883a 	add	r2,r2,r2
  12041c:	1085883a 	add	r2,r2,r2
  120420:	e0bff715 	stw	r2,-36(fp)


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
  120424:	e03ff815 	stw	zero,-32(fp)
  120428:	00001c06 	br	12049c <plot_char+0x130>

            /* output this pixel in the appropriate color */
	    if ((bits & 0x80) == 0)
  12042c:	e0bff717 	ldw	r2,-36(fp)
  120430:	1080200c 	andi	r2,r2,128
  120434:	10000a1e 	bne	r2,zero,120460 <plot_char+0xf4>
	        /* blank pixel - output in PIXEL_WHITE */
		plot_pixel(x + col, y, PIXEL_WHITE);
  120438:	e0fffb17 	ldw	r3,-20(fp)
  12043c:	e0bff817 	ldw	r2,-32(fp)
  120440:	1885883a 	add	r2,r3,r2
  120444:	1007883a 	mov	r3,r2
  120448:	e0bffa17 	ldw	r2,-24(fp)
  12044c:	1809883a 	mov	r4,r3
  120450:	100b883a 	mov	r5,r2
  120454:	000d883a 	mov	r6,zero
  120458:	01219340 	call	121934 <plot_pixel>
  12045c:	00000906 	br	120484 <plot_char+0x118>
	    else
	        /* black pixel - output in PIXEL_BLACK */
		plot_pixel(x + col, y, PIXEL_BLACK);
  120460:	e0fffb17 	ldw	r3,-20(fp)
  120464:	e0bff817 	ldw	r2,-32(fp)
  120468:	1885883a 	add	r2,r3,r2
  12046c:	1007883a 	mov	r3,r2
  120470:	e0bffa17 	ldw	r2,-24(fp)
  120474:	1809883a 	mov	r4,r3
  120478:	100b883a 	mov	r5,r2
  12047c:	01800044 	movi	r6,1
  120480:	01219340 	call	121934 <plot_pixel>

	    /* shift the next bit into position */
	    bits <<= 1;
  120484:	e0bff717 	ldw	r2,-36(fp)
  120488:	1085883a 	add	r2,r2,r2
  12048c:	e0bff715 	stw	r2,-36(fp)
        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
  120490:	e0bff817 	ldw	r2,-32(fp)
  120494:	10800044 	addi	r2,r2,1
  120498:	e0bff815 	stw	r2,-32(fp)
  12049c:	e0bff817 	ldw	r2,-32(fp)
  1204a0:	10800190 	cmplti	r2,r2,6
  1204a4:	103fe11e 	bne	r2,zero,12042c <plot_char+0xc0>
	    bits <<= 1;
        }


	/* next row - update the y position */
	y++;
  1204a8:	e0bffa17 	ldw	r2,-24(fp)
  1204ac:	10800044 	addi	r2,r2,1
  1204b0:	e0bffa15 	stw	r2,-24(fp)
    x = pos_x * HORIZ_SIZE;
    y = pos_y * VERT_SIZE;


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
  1204b4:	e0bff917 	ldw	r2,-28(fp)
  1204b8:	10800044 	addi	r2,r2,1
  1204bc:	e0bff915 	stw	r2,-28(fp)
  1204c0:	e0bff917 	ldw	r2,-28(fp)
  1204c4:	10800210 	cmplti	r2,r2,8
  1204c8:	103fba1e 	bne	r2,zero,1203b4 <plot_char+0x48>
	y++;
    }


    /* all done, return */
    return;
  1204cc:	0001883a 	nop

}
  1204d0:	e037883a 	mov	sp,fp
  1204d4:	dfc00117 	ldw	ra,4(sp)
  1204d8:	df000017 	ldw	fp,0(sp)
  1204dc:	dec00204 	addi	sp,sp,8
  1204e0:	f800283a 	ret

001204e4 <plot_string>:
   Last Modified:    Mar. 17, 1997

*/

void  plot_string(int pos_x, int pos_y, const char *s, enum char_style style)
{
  1204e4:	defffa04 	addi	sp,sp,-24
  1204e8:	dfc00515 	stw	ra,20(sp)
  1204ec:	df000415 	stw	fp,16(sp)
  1204f0:	df000404 	addi	fp,sp,16
  1204f4:	e13ffc15 	stw	r4,-16(fp)
  1204f8:	e17ffd15 	stw	r5,-12(fp)
  1204fc:	e1bffe15 	stw	r6,-8(fp)
  120500:	e1ffff15 	stw	r7,-4(fp)
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
  120504:	00001106 	br	12054c <plot_string+0x68>

        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);
  120508:	e0fffc17 	ldw	r3,-16(fp)
  12050c:	e0bffc17 	ldw	r2,-16(fp)
  120510:	10800044 	addi	r2,r2,1
  120514:	e0bffc15 	stw	r2,-16(fp)
  120518:	e0bffe17 	ldw	r2,-8(fp)
  12051c:	10800003 	ldbu	r2,0(r2)
  120520:	10803fcc 	andi	r2,r2,255
  120524:	1080201c 	xori	r2,r2,128
  120528:	10bfe004 	addi	r2,r2,-128
  12052c:	e13ffe17 	ldw	r4,-8(fp)
  120530:	21000044 	addi	r4,r4,1
  120534:	e13ffe15 	stw	r4,-8(fp)
  120538:	1809883a 	mov	r4,r3
  12053c:	e17ffd17 	ldw	r5,-12(fp)
  120540:	100d883a 	mov	r6,r2
  120544:	e1ffff17 	ldw	r7,-4(fp)
  120548:	012036c0 	call	12036c <plot_char>
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
  12054c:	e0bffe17 	ldw	r2,-8(fp)
  120550:	10800003 	ldbu	r2,0(r2)
  120554:	10803fcc 	andi	r2,r2,255
  120558:	1080201c 	xori	r2,r2,128
  12055c:	10bfe004 	addi	r2,r2,-128
  120560:	103fe91e 	bne	r2,zero,120508 <plot_string+0x24>
        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);


    /* all done, return */
    return;
  120564:	0001883a 	nop

}
  120568:	e037883a 	mov	sp,fp
  12056c:	dfc00117 	ldw	ra,4(sp)
  120570:	df000017 	ldw	fp,0(sp)
  120574:	dec00204 	addi	sp,sp,8
  120578:	f800283a 	ret

0012057c <main>:

   Author:           Glen George
   Last Modified:    May 27, 2008
*/

int  main() {
  12057c:	defff204 	addi	sp,sp,-56
  120580:	dfc00d15 	stw	ra,52(sp)
  120584:	df000c15 	stw	fp,48(sp)
  120588:	df000c04 	addi	fp,sp,48
    	srampt++;
    	c++;
    	if(c >= 100) c = 0;
    }*/

	clear_display_x();
  12058c:	01237780 	call	123778 <clear_display_x>
	adc_int_installer();
  120590:	01230800 	call	123080 <adc_int_installer>
	key_int_installer();
  120594:	0122aa00 	call	122aa0 <key_int_installer>

	//test_adc2();
	while(1) {
		//clear_display_x();
		draw_grid();
  120598:	012365c0 	call	12365c <draw_grid>
		//clear_display_x();
		//clear_display_y();
	}
  12059c:	003ffe06 	br	120598 <main+0x1c>

001205a0 <key_lookup>:
   Last Modified:    Mar. 17, 1997

*/

enum keycode  	key_lookup()
{
  1205a0:	defff104 	addi	sp,sp,-60
  1205a4:	dfc00e15 	stw	ra,56(sp)
  1205a8:	df000d15 	stw	fp,52(sp)
  1205ac:	df000d04 	addi	fp,sp,52
    /* variables */

    const enum keycode  keycodes[] = /* array of keycodes */
  1205b0:	e03ff515 	stw	zero,-44(fp)
  1205b4:	00800044 	movi	r2,1
  1205b8:	e0bff615 	stw	r2,-40(fp)
  1205bc:	00800084 	movi	r2,2
  1205c0:	e0bff715 	stw	r2,-36(fp)
  1205c4:	008000c4 	movi	r2,3
  1205c8:	e0bff815 	stw	r2,-32(fp)
  1205cc:	00800104 	movi	r2,4
  1205d0:	e0bff915 	stw	r2,-28(fp)
  1205d4:	00800144 	movi	r2,5
  1205d8:	e0bffa15 	stw	r2,-24(fp)
	   KEYCODE_LEFT,      /* <Left>     */
	   KEYCODE_RIGHT,     /* <Right>    */
	   KEYCODE_ILLEGAL    /* other keys */
        }; 

    const int  keys[] =   /* array of key values */
  1205dc:	e03ffb15 	stw	zero,-20(fp)
  1205e0:	00800044 	movi	r2,1
  1205e4:	e0bffc15 	stw	r2,-16(fp)
  1205e8:	00800084 	movi	r2,2
  1205ec:	e0bffd15 	stw	r2,-12(fp)
  1205f0:	008000c4 	movi	r2,3
  1205f4:	e0bffe15 	stw	r2,-8(fp)
  1205f8:	00800104 	movi	r2,4
  1205fc:	e0bfff15 	stw	r2,-4(fp)
    int  i;           	/* general loop index */



    /* get a key */
    key = getkey();
  120600:	01230080 	call	123008 <getkey>
  120604:	e0bff415 	stw	r2,-48(fp)


    /* lookup key in keys array */
    for (i = 0; ((i < (sizeof(keys)/sizeof(int))) && (key != keys[i])); i++);
  120608:	e03ff315 	stw	zero,-52(fp)
  12060c:	00000306 	br	12061c <key_lookup+0x7c>
  120610:	e0bff317 	ldw	r2,-52(fp)
  120614:	10800044 	addi	r2,r2,1
  120618:	e0bff315 	stw	r2,-52(fp)
  12061c:	e0bff317 	ldw	r2,-52(fp)
  120620:	10800168 	cmpgeui	r2,r2,5
  120624:	1000091e 	bne	r2,zero,12064c <key_lookup+0xac>
  120628:	e0bff317 	ldw	r2,-52(fp)
  12062c:	1085883a 	add	r2,r2,r2
  120630:	1085883a 	add	r2,r2,r2
  120634:	e0fff304 	addi	r3,fp,-52
  120638:	1885883a 	add	r2,r3,r2
  12063c:	10800804 	addi	r2,r2,32
  120640:	10c00017 	ldw	r3,0(r2)
  120644:	e0bff417 	ldw	r2,-48(fp)
  120648:	18bff11e 	bne	r3,r2,120610 <key_lookup+0x70>


    /* return the appropriate key type */
    return  keycodes[i];
  12064c:	e0bff317 	ldw	r2,-52(fp)
  120650:	1085883a 	add	r2,r2,r2
  120654:	1085883a 	add	r2,r2,r2
  120658:	e0fff304 	addi	r3,fp,-52
  12065c:	1885883a 	add	r2,r3,r2
  120660:	10800204 	addi	r2,r2,8
  120664:	10800017 	ldw	r2,0(r2)

}
  120668:	e037883a 	mov	sp,fp
  12066c:	dfc00117 	ldw	ra,4(sp)
  120670:	df000017 	ldw	fp,0(sp)
  120674:	dec00204 	addi	sp,sp,8
  120678:	f800283a 	ret

0012067c <init_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  init_menu(void)
{
  12067c:	defffe04 	addi	sp,sp,-8
  120680:	dfc00115 	stw	ra,4(sp)
  120684:	df000015 	stw	fp,0(sp)
  120688:	d839883a 	mov	fp,sp
      /* none */



    /* set the menu parameters */
    menu_entry = 0;		/* first menu entry */
  12068c:	d0200915 	stw	zero,-32732(gp)
    menu_display = FALSE;	/* menu is not currently displayed (but it will be shortly) */
  120690:	d0200a15 	stw	zero,-32728(gp)


    /* set the scope (option) parameters */
    set_trigger_mode(NORMAL_TRIGGER);	/* normal triggering */
  120694:	0009883a 	mov	r4,zero
  120698:	0120bfc0 	call	120bfc <set_trigger_mode>
    set_scale(SCALE_AXES);		/* scale is axes */
  12069c:	01000044 	movi	r4,1
  1206a0:	0120da80 	call	120da8 <set_scale>
    set_sweep(0);			/* first sweep rate */
  1206a4:	0009883a 	mov	r4,zero
  1206a8:	0120f340 	call	120f34 <set_sweep>
    set_trg_level((MIN_TRG_LEVEL_SET + MAX_TRG_LEVEL_SET) / 2);	/* middle trigger level */
  1206ac:	01000fc4 	movi	r4,63
  1206b0:	01211000 	call	121100 <set_trg_level>
    set_trg_slope(SLOPE_POSITIVE);	/* positive slope */
  1206b4:	0009883a 	mov	r4,zero
  1206b8:	01212900 	call	121290 <set_trg_slope>
    set_trg_delay(MIN_DELAY);		/* minimum delay */
  1206bc:	0009883a 	mov	r4,zero
  1206c0:	01213a40 	call	1213a4 <set_trg_delay>


    /* now display the menu */
    display_menu();
  1206c4:	01207180 	call	120718 <display_menu>


    /* done initializing, return */
    return;
  1206c8:	0001883a 	nop

}
  1206cc:	e037883a 	mov	sp,fp
  1206d0:	dfc00117 	ldw	ra,4(sp)
  1206d4:	df000017 	ldw	fp,0(sp)
  1206d8:	dec00204 	addi	sp,sp,8
  1206dc:	f800283a 	ret

001206e0 <clear_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  clear_menu(void)
{
  1206e0:	defffe04 	addi	sp,sp,-8
  1206e4:	dfc00115 	stw	ra,4(sp)
  1206e8:	df000015 	stw	fp,0(sp)
  1206ec:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  1206f0:	d0a00a17 	ldw	r2,-32728(gp)
  1206f4:	10000126 	beq	r2,zero,1206fc <clear_menu+0x1c>

        /* menu is being displayed - turn it off and restore the trace in that area */
	restore_menu_trace();
  1206f8:	012229c0 	call	12229c <restore_menu_trace>
    }


    /* no longer displaying the menu */
    menu_display = FALSE;
  1206fc:	d0200a15 	stw	zero,-32728(gp)


    /* all done, return */
    return;
  120700:	0001883a 	nop

}
  120704:	e037883a 	mov	sp,fp
  120708:	dfc00117 	ldw	ra,4(sp)
  12070c:	df000017 	ldw	fp,0(sp)
  120710:	dec00204 	addi	sp,sp,8
  120714:	f800283a 	ret

00120718 <display_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  display_menu(void)
{
  120718:	defffd04 	addi	sp,sp,-12
  12071c:	dfc00215 	stw	ra,8(sp)
  120720:	df000115 	stw	fp,4(sp)
  120724:	df000104 	addi	fp,sp,4
    int  i;		/* loop index */



    /* check if the menu is currently being displayed */
    if (!menu_display)  {
  120728:	d0a00a17 	ldw	r2,-32728(gp)
  12072c:	1000121e 	bne	r2,zero,120778 <display_menu+0x60>

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
  120730:	e03fff15 	stw	zero,-4(fp)
  120734:	00000d06 	br	12076c <display_menu+0x54>

	    /* display this entry - check if it should be highlighted */
	    if (i == menu_entry)
  120738:	d0a00917 	ldw	r2,-32732(gp)
  12073c:	e0ffff17 	ldw	r3,-4(fp)
  120740:	1880041e 	bne	r3,r2,120754 <display_menu+0x3c>
	        /* currently selected entry - highlight it */
	        display_entry(i, TRUE);
  120744:	e13fff17 	ldw	r4,-4(fp)
  120748:	01400044 	movi	r5,1
  12074c:	0120ae00 	call	120ae0 <display_entry>
  120750:	00000306 	br	120760 <display_menu+0x48>
	    else
	        /* not the currently selected entry - "normal video" */
	        display_entry(i, FALSE);
  120754:	e13fff17 	ldw	r4,-4(fp)
  120758:	000b883a 	mov	r5,zero
  12075c:	0120ae00 	call	120ae0 <display_entry>
    /* check if the menu is currently being displayed */
    if (!menu_display)  {

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
  120760:	e0bfff17 	ldw	r2,-4(fp)
  120764:	10800044 	addi	r2,r2,1
  120768:	e0bfff15 	stw	r2,-4(fp)
  12076c:	e0bfff17 	ldw	r2,-4(fp)
  120770:	108001f0 	cmpltui	r2,r2,7
  120774:	103ff01e 	bne	r2,zero,120738 <display_menu+0x20>
        }
    }


    /* now are displaying the menu */
    menu_display = TRUE;
  120778:	00800044 	movi	r2,1
  12077c:	d0a00a15 	stw	r2,-32728(gp)


    /* all done, return */
    return;
  120780:	0001883a 	nop

}
  120784:	e037883a 	mov	sp,fp
  120788:	dfc00117 	ldw	ra,4(sp)
  12078c:	df000017 	ldw	fp,0(sp)
  120790:	dec00204 	addi	sp,sp,8
  120794:	f800283a 	ret

00120798 <refresh_menu>:
   Last Modified:    Mar. 8, 1994

*/

void  refresh_menu(void)
{
  120798:	defffe04 	addi	sp,sp,-8
  12079c:	dfc00115 	stw	ra,4(sp)
  1207a0:	df000015 	stw	fp,0(sp)
  1207a4:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  1207a8:	d0a00a17 	ldw	r2,-32728(gp)
  1207ac:	10000226 	beq	r2,zero,1207b8 <refresh_menu+0x20>

    	/* menu is currently being displayed - need to refresh it */
	/* do this by turning off the display, then forcing it back on */
	menu_display = FALSE;
  1207b0:	d0200a15 	stw	zero,-32728(gp)
	display_menu();
  1207b4:	01207180 	call	120718 <display_menu>
    }


    /* refreshed the menu if it was displayed, now return */
    return;
  1207b8:	0001883a 	nop

}
  1207bc:	e037883a 	mov	sp,fp
  1207c0:	dfc00117 	ldw	ra,4(sp)
  1207c4:	df000017 	ldw	fp,0(sp)
  1207c8:	dec00204 	addi	sp,sp,8
  1207cc:	f800283a 	ret

001207d0 <reset_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  reset_menu(void)
{
  1207d0:	defffe04 	addi	sp,sp,-8
  1207d4:	dfc00115 	stw	ra,4(sp)
  1207d8:	df000015 	stw	fp,0(sp)
  1207dc:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  1207e0:	d0a00a17 	ldw	r2,-32728(gp)
  1207e4:	10000426 	beq	r2,zero,1207f8 <reset_menu+0x28>

        /* menu is being displayed */
	/* remove highlight from currently selected entry */
	display_entry(menu_entry, FALSE);
  1207e8:	d0a00917 	ldw	r2,-32732(gp)
  1207ec:	1009883a 	mov	r4,r2
  1207f0:	000b883a 	mov	r5,zero
  1207f4:	0120ae00 	call	120ae0 <display_entry>
    }


    /* reset the currently selected entry */
    menu_entry = 0;
  1207f8:	d0200915 	stw	zero,-32732(gp)


    /* finally, highlight the first entry if the menu is being displayed */
    if (menu_display)
  1207fc:	d0a00a17 	ldw	r2,-32728(gp)
  120800:	10000426 	beq	r2,zero,120814 <reset_menu+0x44>
	display_entry(menu_entry, TRUE);
  120804:	d0a00917 	ldw	r2,-32732(gp)
  120808:	1009883a 	mov	r4,r2
  12080c:	01400044 	movi	r5,1
  120810:	0120ae00 	call	120ae0 <display_entry>



    /* all done, return */
    return;
  120814:	0001883a 	nop

}
  120818:	e037883a 	mov	sp,fp
  12081c:	dfc00117 	ldw	ra,4(sp)
  120820:	df000017 	ldw	fp,0(sp)
  120824:	dec00204 	addi	sp,sp,8
  120828:	f800283a 	ret

0012082c <next_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  next_entry(void)
{
  12082c:	defffe04 	addi	sp,sp,-8
  120830:	dfc00115 	stw	ra,4(sp)
  120834:	df000015 	stw	fp,0(sp)
  120838:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at end of the menu */
    if (menu_entry < (NO_MENU_ENTRIES - 1))  {
  12083c:	d0a00917 	ldw	r2,-32732(gp)
  120840:	108001a8 	cmpgeui	r2,r2,6
  120844:	10000f1e 	bne	r2,zero,120884 <next_entry+0x58>

        /* not at the end of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
  120848:	d0a00a17 	ldw	r2,-32728(gp)
  12084c:	10000426 	beq	r2,zero,120860 <next_entry+0x34>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
  120850:	d0a00917 	ldw	r2,-32732(gp)
  120854:	1009883a 	mov	r4,r2
  120858:	000b883a 	mov	r5,zero
  12085c:	0120ae00 	call	120ae0 <display_entry>

	/* update the menu entry to the next one */
	menu_entry++;
  120860:	d0a00917 	ldw	r2,-32732(gp)
  120864:	10800044 	addi	r2,r2,1
  120868:	d0a00915 	stw	r2,-32732(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
  12086c:	d0a00a17 	ldw	r2,-32728(gp)
  120870:	10000426 	beq	r2,zero,120884 <next_entry+0x58>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
  120874:	d0a00917 	ldw	r2,-32732(gp)
  120878:	1009883a 	mov	r4,r2
  12087c:	01400044 	movi	r5,1
  120880:	0120ae00 	call	120ae0 <display_entry>
    }


    /* all done, return */
    return;
  120884:	0001883a 	nop

}
  120888:	e037883a 	mov	sp,fp
  12088c:	dfc00117 	ldw	ra,4(sp)
  120890:	df000017 	ldw	fp,0(sp)
  120894:	dec00204 	addi	sp,sp,8
  120898:	f800283a 	ret

0012089c <previous_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  previous_entry(void)
{
  12089c:	defffe04 	addi	sp,sp,-8
  1208a0:	dfc00115 	stw	ra,4(sp)
  1208a4:	df000015 	stw	fp,0(sp)
  1208a8:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at the start of the menu */
    if (menu_entry > 0)  {
  1208ac:	d0a00917 	ldw	r2,-32732(gp)
  1208b0:	00800f0e 	bge	zero,r2,1208f0 <previous_entry+0x54>

        /* not at the start of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
  1208b4:	d0a00a17 	ldw	r2,-32728(gp)
  1208b8:	10000426 	beq	r2,zero,1208cc <previous_entry+0x30>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
  1208bc:	d0a00917 	ldw	r2,-32732(gp)
  1208c0:	1009883a 	mov	r4,r2
  1208c4:	000b883a 	mov	r5,zero
  1208c8:	0120ae00 	call	120ae0 <display_entry>

	/* update the menu entry to the previous one */
	menu_entry--;
  1208cc:	d0a00917 	ldw	r2,-32732(gp)
  1208d0:	10bfffc4 	addi	r2,r2,-1
  1208d4:	d0a00915 	stw	r2,-32732(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
  1208d8:	d0a00a17 	ldw	r2,-32728(gp)
  1208dc:	10000426 	beq	r2,zero,1208f0 <previous_entry+0x54>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
  1208e0:	d0a00917 	ldw	r2,-32732(gp)
  1208e4:	1009883a 	mov	r4,r2
  1208e8:	01400044 	movi	r5,1
  1208ec:	0120ae00 	call	120ae0 <display_entry>

    }


    /* all done, return */
    return;
  1208f0:	0001883a 	nop

}
  1208f4:	e037883a 	mov	sp,fp
  1208f8:	dfc00117 	ldw	ra,4(sp)
  1208fc:	df000017 	ldw	fp,0(sp)
  120900:	dec00204 	addi	sp,sp,8
  120904:	f800283a 	ret

00120908 <menu_entry_left>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_left(void)
{
  120908:	defff704 	addi	sp,sp,-36
  12090c:	dfc00815 	stw	ra,32(sp)
  120910:	df000715 	stw	fp,28(sp)
  120914:	df000704 	addi	fp,sp,28
    /* variables */

    /* key processing functions */
    void  (* const process[])(void) =
  120918:	008004b4 	movhi	r2,18
  12091c:	10831704 	addi	r2,r2,3164
  120920:	e0bff915 	stw	r2,-28(fp)
  120924:	008004b4 	movhi	r2,18
  120928:	10837a04 	addi	r2,r2,3560
  12092c:	e0bffa15 	stw	r2,-24(fp)
  120930:	008004b4 	movhi	r2,18
  120934:	1083e504 	addi	r2,r2,3988
  120938:	e0bffb15 	stw	r2,-20(fp)
  12093c:	008004b4 	movhi	r2,18
  120940:	10872204 	addi	r2,r2,7304
  120944:	e0bffc15 	stw	r2,-16(fp)
  120948:	008004b4 	movhi	r2,18
  12094c:	10845204 	addi	r2,r2,4424
  120950:	e0bffd15 	stw	r2,-12(fp)
  120954:	008004b4 	movhi	r2,18
  120958:	1084b604 	addi	r2,r2,4824
  12095c:	e0bffe15 	stw	r2,-8(fp)
  120960:	008004b4 	movhi	r2,18
  120964:	1084f904 	addi	r2,r2,5092
  120968:	e0bfff15 	stw	r2,-4(fp)
       /*  Level           Slope             Delay                        */



    /* invoke the appropriate <Left> key function */
    process[menu_entry]();
  12096c:	d0a00917 	ldw	r2,-32732(gp)
  120970:	1085883a 	add	r2,r2,r2
  120974:	1085883a 	add	r2,r2,r2
  120978:	e0fff904 	addi	r3,fp,-28
  12097c:	1885883a 	add	r2,r3,r2
  120980:	10800017 	ldw	r2,0(r2)
  120984:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
  120988:	d0a00a17 	ldw	r2,-32728(gp)
  12098c:	10001426 	beq	r2,zero,1209e0 <menu_entry_left+0xd8>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
  120990:	d0a00917 	ldw	r2,-32732(gp)
  120994:	00c004b4 	movhi	r3,18
  120998:	18d31a04 	addi	r3,r3,19560
  12099c:	1004913a 	slli	r2,r2,4
  1209a0:	1885883a 	add	r2,r3,r2
  1209a4:	10800304 	addi	r2,r2,12
  1209a8:	11c00017 	ldw	r7,0(r2)
  1209ac:	d0a00917 	ldw	r2,-32732(gp)
  1209b0:	00c004b4 	movhi	r3,18
  1209b4:	18d31a04 	addi	r3,r3,19560
  1209b8:	1004913a 	slli	r2,r2,4
  1209bc:	1885883a 	add	r2,r3,r2
  1209c0:	10800204 	addi	r2,r2,8
  1209c4:	10800017 	ldw	r2,0(r2)
  1209c8:	10c00fc4 	addi	r3,r2,63
  1209cc:	d0a00917 	ldw	r2,-32732(gp)
  1209d0:	1809883a 	mov	r4,r3
  1209d4:	100b883a 	mov	r5,r2
  1209d8:	000d883a 	mov	r6,zero
  1209dc:	383ee83a 	callr	r7


    /* all done, return */
    return;

}
  1209e0:	e037883a 	mov	sp,fp
  1209e4:	dfc00117 	ldw	ra,4(sp)
  1209e8:	df000017 	ldw	fp,0(sp)
  1209ec:	dec00204 	addi	sp,sp,8
  1209f0:	f800283a 	ret

001209f4 <menu_entry_right>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_right(void)
{
  1209f4:	defff704 	addi	sp,sp,-36
  1209f8:	dfc00815 	stw	ra,32(sp)
  1209fc:	df000715 	stw	fp,28(sp)
  120a00:	df000704 	addi	fp,sp,28
    /* variables */

    /* key processing functions */
    void  (* const process[])(void) =
  120a04:	008004b4 	movhi	r2,18
  120a08:	10833004 	addi	r2,r2,3264
  120a0c:	e0bff915 	stw	r2,-28(fp)
  120a10:	008004b4 	movhi	r2,18
  120a14:	10839304 	addi	r2,r2,3660
  120a18:	e0bffa15 	stw	r2,-24(fp)
  120a1c:	008004b4 	movhi	r2,18
  120a20:	10840504 	addi	r2,r2,4116
  120a24:	e0bffb15 	stw	r2,-20(fp)
  120a28:	008004b4 	movhi	r2,18
  120a2c:	10872204 	addi	r2,r2,7304
  120a30:	e0bffc15 	stw	r2,-16(fp)
  120a34:	008004b4 	movhi	r2,18
  120a38:	10846604 	addi	r2,r2,4504
  120a3c:	e0bffd15 	stw	r2,-12(fp)
  120a40:	008004b4 	movhi	r2,18
  120a44:	1084b604 	addi	r2,r2,4824
  120a48:	e0bffe15 	stw	r2,-8(fp)
  120a4c:	008004b4 	movhi	r2,18
  120a50:	10850b04 	addi	r2,r2,5164
  120a54:	e0bfff15 	stw	r2,-4(fp)
       /*  Level         Slope             Delay                        */



    /* invoke the appropriate <Right> key function */
    process[menu_entry]();
  120a58:	d0a00917 	ldw	r2,-32732(gp)
  120a5c:	1085883a 	add	r2,r2,r2
  120a60:	1085883a 	add	r2,r2,r2
  120a64:	e0fff904 	addi	r3,fp,-28
  120a68:	1885883a 	add	r2,r3,r2
  120a6c:	10800017 	ldw	r2,0(r2)
  120a70:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
  120a74:	d0a00a17 	ldw	r2,-32728(gp)
  120a78:	10001426 	beq	r2,zero,120acc <menu_entry_right+0xd8>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
  120a7c:	d0a00917 	ldw	r2,-32732(gp)
  120a80:	00c004b4 	movhi	r3,18
  120a84:	18d31a04 	addi	r3,r3,19560
  120a88:	1004913a 	slli	r2,r2,4
  120a8c:	1885883a 	add	r2,r3,r2
  120a90:	10800304 	addi	r2,r2,12
  120a94:	11c00017 	ldw	r7,0(r2)
  120a98:	d0a00917 	ldw	r2,-32732(gp)
  120a9c:	00c004b4 	movhi	r3,18
  120aa0:	18d31a04 	addi	r3,r3,19560
  120aa4:	1004913a 	slli	r2,r2,4
  120aa8:	1885883a 	add	r2,r3,r2
  120aac:	10800204 	addi	r2,r2,8
  120ab0:	10800017 	ldw	r2,0(r2)
  120ab4:	10c00fc4 	addi	r3,r2,63
  120ab8:	d0a00917 	ldw	r2,-32732(gp)
  120abc:	1809883a 	mov	r4,r3
  120ac0:	100b883a 	mov	r5,r2
  120ac4:	000d883a 	mov	r6,zero
  120ac8:	383ee83a 	callr	r7


    /* all done, return */
    return;

}
  120acc:	e037883a 	mov	sp,fp
  120ad0:	dfc00117 	ldw	ra,4(sp)
  120ad4:	df000017 	ldw	fp,0(sp)
  120ad8:	dec00204 	addi	sp,sp,8
  120adc:	f800283a 	ret

00120ae0 <display_entry>:
   Last Modified:    Aug. 13, 2004

*/

void  display_entry(int entry, int selected)
{
  120ae0:	defffc04 	addi	sp,sp,-16
  120ae4:	dfc00315 	stw	ra,12(sp)
  120ae8:	df000215 	stw	fp,8(sp)
  120aec:	df000204 	addi	fp,sp,8
  120af0:	e13ffe15 	stw	r4,-8(fp)
  120af4:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* output the menu entry with the appropriate color */
    plot_string((MENU_X + menu[entry].h_off), (MENU_Y + entry), menu[entry].s,
  120af8:	00c004b4 	movhi	r3,18
  120afc:	18d31a04 	addi	r3,r3,19560
  120b00:	e0bffe17 	ldw	r2,-8(fp)
  120b04:	1004913a 	slli	r2,r2,4
  120b08:	1885883a 	add	r2,r3,r2
  120b0c:	10800104 	addi	r2,r2,4
  120b10:	10800017 	ldw	r2,0(r2)
  120b14:	11000fc4 	addi	r4,r2,63
  120b18:	00c004b4 	movhi	r3,18
  120b1c:	18d31a04 	addi	r3,r3,19560
  120b20:	e0bffe17 	ldw	r2,-8(fp)
  120b24:	1004913a 	slli	r2,r2,4
  120b28:	1885883a 	add	r2,r3,r2
  120b2c:	10c00017 	ldw	r3,0(r2)
  120b30:	e0bfff17 	ldw	r2,-4(fp)
  120b34:	1004c03a 	cmpne	r2,r2,zero
  120b38:	10803fcc 	andi	r2,r2,255
  120b3c:	e17ffe17 	ldw	r5,-8(fp)
  120b40:	180d883a 	mov	r6,r3
  120b44:	100f883a 	mov	r7,r2
  120b48:	01204e40 	call	1204e4 <plot_string>
    		(selected ? SELECTED : NORMAL));
    /* also output the menu option with the appropriate color */
    menu[entry].display((MENU_X + menu[entry].opt_off), (MENU_Y + entry),
  120b4c:	00c004b4 	movhi	r3,18
  120b50:	18d31a04 	addi	r3,r3,19560
  120b54:	e0bffe17 	ldw	r2,-8(fp)
  120b58:	1004913a 	slli	r2,r2,4
  120b5c:	1885883a 	add	r2,r3,r2
  120b60:	10800304 	addi	r2,r2,12
  120b64:	10c00017 	ldw	r3,0(r2)
  120b68:	010004b4 	movhi	r4,18
  120b6c:	21131a04 	addi	r4,r4,19560
  120b70:	e0bffe17 	ldw	r2,-8(fp)
  120b74:	1004913a 	slli	r2,r2,4
  120b78:	2085883a 	add	r2,r4,r2
  120b7c:	10800204 	addi	r2,r2,8
  120b80:	10800017 	ldw	r2,0(r2)
  120b84:	10800fc4 	addi	r2,r2,63
  120b88:	1009883a 	mov	r4,r2
  120b8c:	e17ffe17 	ldw	r5,-8(fp)
  120b90:	000d883a 	mov	r6,zero
  120b94:	183ee83a 	callr	r3
    			(selected ? OPTION_SELECTED : OPTION_NORMAL));


    /* all done outputting this menu entry - return */
    return;
  120b98:	0001883a 	nop

}
  120b9c:	e037883a 	mov	sp,fp
  120ba0:	dfc00117 	ldw	ra,4(sp)
  120ba4:	df000017 	ldw	fp,0(sp)
  120ba8:	dec00204 	addi	sp,sp,8
  120bac:	f800283a 	ret

00120bb0 <no_menu_action>:
   Last Modified:    Mar. 8, 1994

*/

void  no_menu_action()
{
  120bb0:	deffff04 	addi	sp,sp,-4
  120bb4:	df000015 	stw	fp,0(sp)
  120bb8:	d839883a 	mov	fp,sp
      /* none */



    /* nothing to do - return */
    return;
  120bbc:	0001883a 	nop

}
  120bc0:	e037883a 	mov	sp,fp
  120bc4:	df000017 	ldw	fp,0(sp)
  120bc8:	dec00104 	addi	sp,sp,4
  120bcc:	f800283a 	ret

00120bd0 <no_display>:
   Last Modified:    Mar. 8, 1994

*/

void  no_display(int x_pos, int y_pos, int style)
{
  120bd0:	defffc04 	addi	sp,sp,-16
  120bd4:	df000315 	stw	fp,12(sp)
  120bd8:	df000304 	addi	fp,sp,12
  120bdc:	e13ffd15 	stw	r4,-12(fp)
  120be0:	e17ffe15 	stw	r5,-8(fp)
  120be4:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* nothing to do - return */
    return;
  120be8:	0001883a 	nop

}
  120bec:	e037883a 	mov	sp,fp
  120bf0:	df000017 	ldw	fp,0(sp)
  120bf4:	dec00104 	addi	sp,sp,4
  120bf8:	f800283a 	ret

00120bfc <set_trigger_mode>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trigger_mode(enum trigger_type m)
{
  120bfc:	defffd04 	addi	sp,sp,-12
  120c00:	dfc00215 	stw	ra,8(sp)
  120c04:	df000115 	stw	fp,4(sp)
  120c08:	df000104 	addi	fp,sp,4
  120c0c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger mode */
    trigger_mode = m;
  120c10:	e0bfff17 	ldw	r2,-4(fp)
  120c14:	d0a00b15 	stw	r2,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  120c18:	d0a00b17 	ldw	r2,-32724(gp)
  120c1c:	1009883a 	mov	r4,r2
  120c20:	0121bb80 	call	121bb8 <set_mode>


    /* all done setting the trigger mode - return */
    return;
  120c24:	0001883a 	nop

}
  120c28:	e037883a 	mov	sp,fp
  120c2c:	dfc00117 	ldw	ra,4(sp)
  120c30:	df000017 	ldw	fp,0(sp)
  120c34:	dec00204 	addi	sp,sp,8
  120c38:	f800283a 	ret

00120c3c <get_trigger_mode>:
   Last Modified:    May 9, 2006

*/

enum trigger_type  get_trigger_mode()
{
  120c3c:	deffff04 	addi	sp,sp,-4
  120c40:	df000015 	stw	fp,0(sp)
  120c44:	d839883a 	mov	fp,sp
      /* none */



    /* return the current trigger mode */
    return  trigger_mode;
  120c48:	d0a00b17 	ldw	r2,-32724(gp)

}
  120c4c:	e037883a 	mov	sp,fp
  120c50:	df000017 	ldw	fp,0(sp)
  120c54:	dec00104 	addi	sp,sp,4
  120c58:	f800283a 	ret

00120c5c <mode_down>:
   Last Modified:    May 9, 2006

*/

void  mode_down()
{
  120c5c:	defffe04 	addi	sp,sp,-8
  120c60:	dfc00115 	stw	ra,4(sp)
  120c64:	df000015 	stw	fp,0(sp)
  120c68:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "next" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
  120c6c:	d0a00b17 	ldw	r2,-32724(gp)
  120c70:	1000031e 	bne	r2,zero,120c80 <mode_down+0x24>
        trigger_mode = AUTO_TRIGGER;
  120c74:	00800044 	movi	r2,1
  120c78:	d0a00b15 	stw	r2,-32724(gp)
  120c7c:	00000706 	br	120c9c <mode_down+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
  120c80:	d0a00b17 	ldw	r2,-32724(gp)
  120c84:	10800058 	cmpnei	r2,r2,1
  120c88:	1000031e 	bne	r2,zero,120c98 <mode_down+0x3c>
        trigger_mode = ONESHOT_TRIGGER;
  120c8c:	00800084 	movi	r2,2
  120c90:	d0a00b15 	stw	r2,-32724(gp)
  120c94:	00000106 	br	120c9c <mode_down+0x40>
    else
        trigger_mode = NORMAL_TRIGGER;
  120c98:	d0200b15 	stw	zero,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  120c9c:	d0a00b17 	ldw	r2,-32724(gp)
  120ca0:	1009883a 	mov	r4,r2
  120ca4:	0121bb80 	call	121bb8 <set_mode>


    /* all done with the trigger mode - return */
    return;
  120ca8:	0001883a 	nop

}
  120cac:	e037883a 	mov	sp,fp
  120cb0:	dfc00117 	ldw	ra,4(sp)
  120cb4:	df000017 	ldw	fp,0(sp)
  120cb8:	dec00204 	addi	sp,sp,8
  120cbc:	f800283a 	ret

00120cc0 <mode_up>:
   Last Modified:    May 9, 2006

*/

void  mode_up()
{
  120cc0:	defffe04 	addi	sp,sp,-8
  120cc4:	dfc00115 	stw	ra,4(sp)
  120cc8:	df000015 	stw	fp,0(sp)
  120ccc:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "previous" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
  120cd0:	d0a00b17 	ldw	r2,-32724(gp)
  120cd4:	1000031e 	bne	r2,zero,120ce4 <mode_up+0x24>
        trigger_mode = ONESHOT_TRIGGER;
  120cd8:	00800084 	movi	r2,2
  120cdc:	d0a00b15 	stw	r2,-32724(gp)
  120ce0:	00000706 	br	120d00 <mode_up+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
  120ce4:	d0a00b17 	ldw	r2,-32724(gp)
  120ce8:	10800058 	cmpnei	r2,r2,1
  120cec:	1000021e 	bne	r2,zero,120cf8 <mode_up+0x38>
        trigger_mode = NORMAL_TRIGGER;
  120cf0:	d0200b15 	stw	zero,-32724(gp)
  120cf4:	00000206 	br	120d00 <mode_up+0x40>
    else
        trigger_mode = AUTO_TRIGGER;
  120cf8:	00800044 	movi	r2,1
  120cfc:	d0a00b15 	stw	r2,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  120d00:	d0a00b17 	ldw	r2,-32724(gp)
  120d04:	1009883a 	mov	r4,r2
  120d08:	0121bb80 	call	121bb8 <set_mode>


    /* all done with the trigger mode - return */
    return;
  120d0c:	0001883a 	nop

}
  120d10:	e037883a 	mov	sp,fp
  120d14:	dfc00117 	ldw	ra,4(sp)
  120d18:	df000017 	ldw	fp,0(sp)
  120d1c:	dec00204 	addi	sp,sp,8
  120d20:	f800283a 	ret

00120d24 <display_mode>:
   Last Modified:    May 9, 2006

*/

void  display_mode(int x_pos, int y_pos, int style)
{
  120d24:	defff804 	addi	sp,sp,-32
  120d28:	dfc00715 	stw	ra,28(sp)
  120d2c:	df000615 	stw	fp,24(sp)
  120d30:	df000604 	addi	fp,sp,24
  120d34:	e13ffd15 	stw	r4,-12(fp)
  120d38:	e17ffe15 	stw	r5,-8(fp)
  120d3c:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the mode strings (must match enumerated type) */
    const char * const  modes[] =  {  " Normal   ",
  120d40:	008004b4 	movhi	r2,18
  120d44:	10937a04 	addi	r2,r2,19944
  120d48:	e0bffa15 	stw	r2,-24(fp)
  120d4c:	008004b4 	movhi	r2,18
  120d50:	10937d04 	addi	r2,r2,19956
  120d54:	e0bffb15 	stw	r2,-20(fp)
  120d58:	008004b4 	movhi	r2,18
  120d5c:	10938004 	addi	r2,r2,19968
  120d60:	e0bffc15 	stw	r2,-16(fp)
                                             " One-Shot "  };



    /* display the trigger mode */
    plot_string(x_pos, y_pos, modes[trigger_mode], style);
  120d64:	d0a00b17 	ldw	r2,-32724(gp)
  120d68:	1085883a 	add	r2,r2,r2
  120d6c:	1085883a 	add	r2,r2,r2
  120d70:	e0fffa04 	addi	r3,fp,-24
  120d74:	1885883a 	add	r2,r3,r2
  120d78:	10c00017 	ldw	r3,0(r2)
  120d7c:	e0bfff17 	ldw	r2,-4(fp)
  120d80:	e13ffd17 	ldw	r4,-12(fp)
  120d84:	e17ffe17 	ldw	r5,-8(fp)
  120d88:	180d883a 	mov	r6,r3
  120d8c:	100f883a 	mov	r7,r2
  120d90:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the trigger mode - return */
    return;

}
  120d94:	e037883a 	mov	sp,fp
  120d98:	dfc00117 	ldw	ra,4(sp)
  120d9c:	df000017 	ldw	fp,0(sp)
  120da0:	dec00204 	addi	sp,sp,8
  120da4:	f800283a 	ret

00120da8 <set_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  set_scale(enum scale_type s)
{
  120da8:	defffd04 	addi	sp,sp,-12
  120dac:	dfc00215 	stw	ra,8(sp)
  120db0:	df000115 	stw	fp,4(sp)
  120db4:	df000104 	addi	fp,sp,4
  120db8:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the scale type */
    scale = s;
  120dbc:	e0bfff17 	ldw	r2,-4(fp)
  120dc0:	d0a00f15 	stw	r2,-32708(gp)

    /* output the scale appropriately */
    set_display_scale(scale);
  120dc4:	d0a00f17 	ldw	r2,-32708(gp)
  120dc8:	1009883a 	mov	r4,r2
  120dcc:	0121cdc0 	call	121cdc <set_display_scale>


    /* all done setting the scale type - return */
    return;
  120dd0:	0001883a 	nop

}
  120dd4:	e037883a 	mov	sp,fp
  120dd8:	dfc00117 	ldw	ra,4(sp)
  120ddc:	df000017 	ldw	fp,0(sp)
  120de0:	dec00204 	addi	sp,sp,8
  120de4:	f800283a 	ret

00120de8 <scale_down>:
   Last Modified:    May 9, 2006

*/

void  scale_down()
{
  120de8:	defffe04 	addi	sp,sp,-8
  120dec:	dfc00115 	stw	ra,4(sp)
  120df0:	df000015 	stw	fp,0(sp)
  120df4:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "next" scale type */
    if (scale == SCALE_NONE)
  120df8:	d0a00f17 	ldw	r2,-32708(gp)
  120dfc:	1000031e 	bne	r2,zero,120e0c <scale_down+0x24>
        scale = SCALE_AXES;
  120e00:	00800044 	movi	r2,1
  120e04:	d0a00f15 	stw	r2,-32708(gp)
  120e08:	00000706 	br	120e28 <scale_down+0x40>
    else if (scale == SCALE_AXES)
  120e0c:	d0a00f17 	ldw	r2,-32708(gp)
  120e10:	10800058 	cmpnei	r2,r2,1
  120e14:	1000031e 	bne	r2,zero,120e24 <scale_down+0x3c>
        scale = SCALE_GRID;
  120e18:	00800084 	movi	r2,2
  120e1c:	d0a00f15 	stw	r2,-32708(gp)
  120e20:	00000106 	br	120e28 <scale_down+0x40>
    else
        scale = SCALE_NONE;
  120e24:	d0200f15 	stw	zero,-32708(gp)

    /* set the scale type */
    set_display_scale(scale);
  120e28:	d0a00f17 	ldw	r2,-32708(gp)
  120e2c:	1009883a 	mov	r4,r2
  120e30:	0121cdc0 	call	121cdc <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
  120e34:	0001883a 	nop

}
  120e38:	e037883a 	mov	sp,fp
  120e3c:	dfc00117 	ldw	ra,4(sp)
  120e40:	df000017 	ldw	fp,0(sp)
  120e44:	dec00204 	addi	sp,sp,8
  120e48:	f800283a 	ret

00120e4c <scale_up>:
   Last Modified:    May 9, 2006

*/

void  scale_up()
{
  120e4c:	defffe04 	addi	sp,sp,-8
  120e50:	dfc00115 	stw	ra,4(sp)
  120e54:	df000015 	stw	fp,0(sp)
  120e58:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "previous" scale type */
    if (scale == SCALE_NONE)
  120e5c:	d0a00f17 	ldw	r2,-32708(gp)
  120e60:	1000031e 	bne	r2,zero,120e70 <scale_up+0x24>
        scale = SCALE_GRID;
  120e64:	00800084 	movi	r2,2
  120e68:	d0a00f15 	stw	r2,-32708(gp)
  120e6c:	00000706 	br	120e8c <scale_up+0x40>
    else if (scale == SCALE_AXES)
  120e70:	d0a00f17 	ldw	r2,-32708(gp)
  120e74:	10800058 	cmpnei	r2,r2,1
  120e78:	1000021e 	bne	r2,zero,120e84 <scale_up+0x38>
        scale = SCALE_NONE;
  120e7c:	d0200f15 	stw	zero,-32708(gp)
  120e80:	00000206 	br	120e8c <scale_up+0x40>
    else
        scale = SCALE_AXES;
  120e84:	00800044 	movi	r2,1
  120e88:	d0a00f15 	stw	r2,-32708(gp)

    /* set the scale type */
    set_display_scale(scale);
  120e8c:	d0a00f17 	ldw	r2,-32708(gp)
  120e90:	1009883a 	mov	r4,r2
  120e94:	0121cdc0 	call	121cdc <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
  120e98:	0001883a 	nop

}
  120e9c:	e037883a 	mov	sp,fp
  120ea0:	dfc00117 	ldw	ra,4(sp)
  120ea4:	df000017 	ldw	fp,0(sp)
  120ea8:	dec00204 	addi	sp,sp,8
  120eac:	f800283a 	ret

00120eb0 <display_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  display_scale(int x_pos, int y_pos, int style)
{
  120eb0:	defff804 	addi	sp,sp,-32
  120eb4:	dfc00715 	stw	ra,28(sp)
  120eb8:	df000615 	stw	fp,24(sp)
  120ebc:	df000604 	addi	fp,sp,24
  120ec0:	e13ffd15 	stw	r4,-12(fp)
  120ec4:	e17ffe15 	stw	r5,-8(fp)
  120ec8:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the scale type strings (must match enumerated type) */
    const char * const  scale_stat[] =  {  " None",
  120ecc:	008004b4 	movhi	r2,18
  120ed0:	10938304 	addi	r2,r2,19980
  120ed4:	e0bffa15 	stw	r2,-24(fp)
  120ed8:	008004b4 	movhi	r2,18
  120edc:	10938504 	addi	r2,r2,19988
  120ee0:	e0bffb15 	stw	r2,-20(fp)
  120ee4:	008004b4 	movhi	r2,18
  120ee8:	10938704 	addi	r2,r2,19996
  120eec:	e0bffc15 	stw	r2,-16(fp)
                                                  " Grid"  };



    /* display the scale status */
    plot_string(x_pos, y_pos, scale_stat[scale], style);
  120ef0:	d0a00f17 	ldw	r2,-32708(gp)
  120ef4:	1085883a 	add	r2,r2,r2
  120ef8:	1085883a 	add	r2,r2,r2
  120efc:	e0fffa04 	addi	r3,fp,-24
  120f00:	1885883a 	add	r2,r3,r2
  120f04:	10c00017 	ldw	r3,0(r2)
  120f08:	e0bfff17 	ldw	r2,-4(fp)
  120f0c:	e13ffd17 	ldw	r4,-12(fp)
  120f10:	e17ffe17 	ldw	r5,-8(fp)
  120f14:	180d883a 	mov	r6,r3
  120f18:	100f883a 	mov	r7,r2
  120f1c:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the scale status - return */
    return;

}
  120f20:	e037883a 	mov	sp,fp
  120f24:	dfc00117 	ldw	ra,4(sp)
  120f28:	df000017 	ldw	fp,0(sp)
  120f2c:	dec00204 	addi	sp,sp,8
  120f30:	f800283a 	ret

00120f34 <set_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  set_sweep(int s)
{
  120f34:	defffc04 	addi	sp,sp,-16
  120f38:	dfc00315 	stw	ra,12(sp)
  120f3c:	df000215 	stw	fp,8(sp)
  120f40:	df000204 	addi	fp,sp,8
  120f44:	e13fff15 	stw	r4,-4(fp)
    int  sample_size;		/* sample size for this sweep rate */



    /* set the new sweep rate */
    sweep = s;
  120f48:	e0bfff17 	ldw	r2,-4(fp)
  120f4c:	d0a00d15 	stw	r2,-32716(gp)

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  120f50:	d0a00d17 	ldw	r2,-32716(gp)
  120f54:	00c004b4 	movhi	r3,18
  120f58:	18d35804 	addi	r3,r3,19808
  120f5c:	100490fa 	slli	r2,r2,3
  120f60:	1885883a 	add	r2,r3,r2
  120f64:	10800017 	ldw	r2,0(r2)
  120f68:	1009883a 	mov	r4,r2
  120f6c:	01219600 	call	121960 <set_sample_rate>
  120f70:	e0bffe15 	stw	r2,-8(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  120f74:	e13ffe17 	ldw	r4,-8(fp)
  120f78:	0121cb00 	call	121cb0 <set_trace_size>


    /* all done initializing the sweep rate - return */
    return;
  120f7c:	0001883a 	nop

}
  120f80:	e037883a 	mov	sp,fp
  120f84:	dfc00117 	ldw	ra,4(sp)
  120f88:	df000017 	ldw	fp,0(sp)
  120f8c:	dec00204 	addi	sp,sp,8
  120f90:	f800283a 	ret

00120f94 <sweep_down>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_down()
{
  120f94:	defffd04 	addi	sp,sp,-12
  120f98:	dfc00215 	stw	ra,8(sp)
  120f9c:	df000115 	stw	fp,4(sp)
  120fa0:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* decrease the sweep rate, if not already the minimum */
    if (sweep > 0)  {
  120fa4:	d0a00d17 	ldw	r2,-32716(gp)
  120fa8:	0080090e 	bge	zero,r2,120fd0 <sweep_down+0x3c>
        /* not at minimum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep - 1));
  120fac:	d0e00d17 	ldw	r3,-32716(gp)
  120fb0:	d0a00d17 	ldw	r2,-32716(gp)
  120fb4:	10bfffc4 	addi	r2,r2,-1
  120fb8:	1809883a 	mov	r4,r3
  120fbc:	100b883a 	mov	r5,r2
  120fc0:	01214780 	call	121478 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep--;
  120fc4:	d0a00d17 	ldw	r2,-32716(gp)
  120fc8:	10bfffc4 	addi	r2,r2,-1
  120fcc:	d0a00d15 	stw	r2,-32716(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  120fd0:	d0a00d17 	ldw	r2,-32716(gp)
  120fd4:	00c004b4 	movhi	r3,18
  120fd8:	18d35804 	addi	r3,r3,19808
  120fdc:	100490fa 	slli	r2,r2,3
  120fe0:	1885883a 	add	r2,r3,r2
  120fe4:	10800017 	ldw	r2,0(r2)
  120fe8:	1009883a 	mov	r4,r2
  120fec:	01219600 	call	121960 <set_sample_rate>
  120ff0:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  120ff4:	e13fff17 	ldw	r4,-4(fp)
  120ff8:	0121cb00 	call	121cb0 <set_trace_size>


    /* all done with lowering the sweep rate - return */
    return;
  120ffc:	0001883a 	nop

}
  121000:	e037883a 	mov	sp,fp
  121004:	dfc00117 	ldw	ra,4(sp)
  121008:	df000017 	ldw	fp,0(sp)
  12100c:	dec00204 	addi	sp,sp,8
  121010:	f800283a 	ret

00121014 <sweep_up>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_up()
{
  121014:	defffd04 	addi	sp,sp,-12
  121018:	dfc00215 	stw	ra,8(sp)
  12101c:	df000115 	stw	fp,4(sp)
  121020:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* increase the sweep rate, if not already the maximum */
    if (sweep < (NO_SWEEP_RATES - 1))  {
  121024:	d0a00d17 	ldw	r2,-32716(gp)
  121028:	10800428 	cmpgeui	r2,r2,16
  12102c:	1000091e 	bne	r2,zero,121054 <sweep_up+0x40>
        /* not at maximum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep + 1));
  121030:	d0e00d17 	ldw	r3,-32716(gp)
  121034:	d0a00d17 	ldw	r2,-32716(gp)
  121038:	10800044 	addi	r2,r2,1
  12103c:	1809883a 	mov	r4,r3
  121040:	100b883a 	mov	r5,r2
  121044:	01214780 	call	121478 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep++;
  121048:	d0a00d17 	ldw	r2,-32716(gp)
  12104c:	10800044 	addi	r2,r2,1
  121050:	d0a00d15 	stw	r2,-32716(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  121054:	d0a00d17 	ldw	r2,-32716(gp)
  121058:	00c004b4 	movhi	r3,18
  12105c:	18d35804 	addi	r3,r3,19808
  121060:	100490fa 	slli	r2,r2,3
  121064:	1885883a 	add	r2,r3,r2
  121068:	10800017 	ldw	r2,0(r2)
  12106c:	1009883a 	mov	r4,r2
  121070:	01219600 	call	121960 <set_sample_rate>
  121074:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  121078:	e13fff17 	ldw	r4,-4(fp)
  12107c:	0121cb00 	call	121cb0 <set_trace_size>


    /* all done with raising the sweep rate - return */
    return;
  121080:	0001883a 	nop

}
  121084:	e037883a 	mov	sp,fp
  121088:	dfc00117 	ldw	ra,4(sp)
  12108c:	df000017 	ldw	fp,0(sp)
  121090:	dec00204 	addi	sp,sp,8
  121094:	f800283a 	ret

00121098 <display_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  display_sweep(int x_pos, int y_pos, int style)
{
  121098:	defffb04 	addi	sp,sp,-20
  12109c:	dfc00415 	stw	ra,16(sp)
  1210a0:	df000315 	stw	fp,12(sp)
  1210a4:	df000304 	addi	fp,sp,12
  1210a8:	e13ffd15 	stw	r4,-12(fp)
  1210ac:	e17ffe15 	stw	r5,-8(fp)
  1210b0:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* display the sweep rate */
    plot_string(x_pos, y_pos, sweep_rates[sweep].s, style);
  1210b4:	d0a00d17 	ldw	r2,-32716(gp)
  1210b8:	00c004b4 	movhi	r3,18
  1210bc:	18d35804 	addi	r3,r3,19808
  1210c0:	100490fa 	slli	r2,r2,3
  1210c4:	1885883a 	add	r2,r3,r2
  1210c8:	10800104 	addi	r2,r2,4
  1210cc:	10c00017 	ldw	r3,0(r2)
  1210d0:	e0bfff17 	ldw	r2,-4(fp)
  1210d4:	e13ffd17 	ldw	r4,-12(fp)
  1210d8:	e17ffe17 	ldw	r5,-8(fp)
  1210dc:	180d883a 	mov	r6,r3
  1210e0:	100f883a 	mov	r7,r2
  1210e4:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the sweep rate - return */
    return;
  1210e8:	0001883a 	nop

}
  1210ec:	e037883a 	mov	sp,fp
  1210f0:	dfc00117 	ldw	ra,4(sp)
  1210f4:	df000017 	ldw	fp,0(sp)
  1210f8:	dec00204 	addi	sp,sp,8
  1210fc:	f800283a 	ret

00121100 <set_trg_level>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_level(int l)
{
  121100:	defffd04 	addi	sp,sp,-12
  121104:	dfc00215 	stw	ra,8(sp)
  121108:	df000115 	stw	fp,4(sp)
  12110c:	df000104 	addi	fp,sp,4
  121110:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger level */
    level = l;
  121114:	e0bfff17 	ldw	r2,-4(fp)
  121118:	d0a00c15 	stw	r2,-32720(gp)

    /* set the trigger level in hardware too */
    set_trigger(level, slope);
  12111c:	d0e00c17 	ldw	r3,-32720(gp)
  121120:	d0a01017 	ldw	r2,-32704(gp)
  121124:	1809883a 	mov	r4,r3
  121128:	100b883a 	mov	r5,r2
  12112c:	01219840 	call	121984 <set_trigger>


    /* all done initializing the trigger level - return */
    return;
  121130:	0001883a 	nop

}
  121134:	e037883a 	mov	sp,fp
  121138:	dfc00117 	ldw	ra,4(sp)
  12113c:	df000017 	ldw	fp,0(sp)
  121140:	dec00204 	addi	sp,sp,8
  121144:	f800283a 	ret

00121148 <trg_level_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_down()
{
  121148:	defffe04 	addi	sp,sp,-8
  12114c:	dfc00115 	stw	ra,4(sp)
  121150:	df000015 	stw	fp,0(sp)
  121154:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger level, if not already the minimum */
    if (level > MIN_TRG_LEVEL_SET)
  121158:	d0a00c17 	ldw	r2,-32720(gp)
  12115c:	0080030e 	bge	zero,r2,12116c <trg_level_down+0x24>
        level--;
  121160:	d0a00c17 	ldw	r2,-32720(gp)
  121164:	10bfffc4 	addi	r2,r2,-1
  121168:	d0a00c15 	stw	r2,-32720(gp)

    /* set the trigger level for the hardware */
    set_trigger(level, slope);
  12116c:	d0e00c17 	ldw	r3,-32720(gp)
  121170:	d0a01017 	ldw	r2,-32704(gp)
  121174:	1809883a 	mov	r4,r3
  121178:	100b883a 	mov	r5,r2
  12117c:	01219840 	call	121984 <set_trigger>


    /* all done with lowering the trigger level - return */
    return;
  121180:	0001883a 	nop

}
  121184:	e037883a 	mov	sp,fp
  121188:	dfc00117 	ldw	ra,4(sp)
  12118c:	df000017 	ldw	fp,0(sp)
  121190:	dec00204 	addi	sp,sp,8
  121194:	f800283a 	ret

00121198 <trg_level_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_up()
{
  121198:	defffe04 	addi	sp,sp,-8
  12119c:	dfc00115 	stw	ra,4(sp)
  1211a0:	df000015 	stw	fp,0(sp)
  1211a4:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger level, if not already the maximum */
    if (level < MAX_TRG_LEVEL_SET)
  1211a8:	d0a00c17 	ldw	r2,-32720(gp)
  1211ac:	10801fc8 	cmpgei	r2,r2,127
  1211b0:	1000031e 	bne	r2,zero,1211c0 <trg_level_up+0x28>
        level++;
  1211b4:	d0a00c17 	ldw	r2,-32720(gp)
  1211b8:	10800044 	addi	r2,r2,1
  1211bc:	d0a00c15 	stw	r2,-32720(gp)

    /* tell the hardware the new trigger level */
    set_trigger(level, slope);
  1211c0:	d0e00c17 	ldw	r3,-32720(gp)
  1211c4:	d0a01017 	ldw	r2,-32704(gp)
  1211c8:	1809883a 	mov	r4,r3
  1211cc:	100b883a 	mov	r5,r2
  1211d0:	01219840 	call	121984 <set_trigger>


    /* all done raising the trigger level - return */
    return;
  1211d4:	0001883a 	nop

}
  1211d8:	e037883a 	mov	sp,fp
  1211dc:	dfc00117 	ldw	ra,4(sp)
  1211e0:	df000017 	ldw	fp,0(sp)
  1211e4:	dec00204 	addi	sp,sp,8
  1211e8:	f800283a 	ret

001211ec <display_trg_level>:
   Last Modified:    Mar. 10, 1995

*/

void  display_trg_level(int x_pos, int y_pos, int style)
{
  1211ec:	defff704 	addi	sp,sp,-36
  1211f0:	dfc00815 	stw	ra,32(sp)
  1211f4:	df000715 	stw	fp,28(sp)
  1211f8:	df000704 	addi	fp,sp,28
  1211fc:	e13ffd15 	stw	r4,-12(fp)
  121200:	e17ffe15 	stw	r5,-8(fp)
  121204:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      level_str[] = "        "; /* string containing the trigger level */
  121208:	00880834 	movhi	r2,8224
  12120c:	10880804 	addi	r2,r2,8224
  121210:	e0bffa15 	stw	r2,-24(fp)
  121214:	00880834 	movhi	r2,8224
  121218:	10880804 	addi	r2,r2,8224
  12121c:	e0bffb15 	stw	r2,-20(fp)
  121220:	e03ffc05 	stb	zero,-16(fp)
    long int  l;			/* trigger level in mV */



    /* compute the trigger level in millivolts */
    l = ((long int) MAX_LEVEL - MIN_LEVEL) * level / (MAX_TRG_LEVEL_SET - MIN_TRG_LEVEL_SET) + MIN_LEVEL;
  121224:	d0a00c17 	ldw	r2,-32720(gp)
  121228:	1009883a 	mov	r4,r2
  12122c:	0144e204 	movi	r5,5000
  121230:	0123b580 	call	123b58 <__mulsi3>
  121234:	1009883a 	mov	r4,r2
  121238:	01401fc4 	movi	r5,127
  12123c:	0123a9c0 	call	123a9c <__divsi3>
  121240:	e0bff915 	stw	r2,-28(fp)

    /* convert the level to the string (leave first character blank) */
    cvt_num_field(l, &level_str[1]);
  121244:	e0bffa04 	addi	r2,fp,-24
  121248:	10800044 	addi	r2,r2,1
  12124c:	e13ff917 	ldw	r4,-28(fp)
  121250:	100b883a 	mov	r5,r2
  121254:	012177c0 	call	12177c <cvt_num_field>

    /* add in the units */
    level_str[7] = 'V';
  121258:	00801584 	movi	r2,86
  12125c:	e0bffbc5 	stb	r2,-17(fp)


    /* now finally display the trigger level */
    plot_string(x_pos, y_pos, level_str, style);
  121260:	e0bfff17 	ldw	r2,-4(fp)
  121264:	e0fffa04 	addi	r3,fp,-24
  121268:	e13ffd17 	ldw	r4,-12(fp)
  12126c:	e17ffe17 	ldw	r5,-8(fp)
  121270:	180d883a 	mov	r6,r3
  121274:	100f883a 	mov	r7,r2
  121278:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the trigger level - return */
    return;

}
  12127c:	e037883a 	mov	sp,fp
  121280:	dfc00117 	ldw	ra,4(sp)
  121284:	df000017 	ldw	fp,0(sp)
  121288:	dec00204 	addi	sp,sp,8
  12128c:	f800283a 	ret

00121290 <set_trg_slope>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_slope(enum slope_type s)
{
  121290:	defffd04 	addi	sp,sp,-12
  121294:	dfc00215 	stw	ra,8(sp)
  121298:	df000115 	stw	fp,4(sp)
  12129c:	df000104 	addi	fp,sp,4
  1212a0:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the slope type */
    slope = s;
  1212a4:	e0bfff17 	ldw	r2,-4(fp)
  1212a8:	d0a01015 	stw	r2,-32704(gp)

    /* also tell the hardware what the slope is */
    set_trigger(level, slope);
  1212ac:	d0e00c17 	ldw	r3,-32720(gp)
  1212b0:	d0a01017 	ldw	r2,-32704(gp)
  1212b4:	1809883a 	mov	r4,r3
  1212b8:	100b883a 	mov	r5,r2
  1212bc:	01219840 	call	121984 <set_trigger>


    /* all done setting the trigger slope - return */
    return;
  1212c0:	0001883a 	nop

}
  1212c4:	e037883a 	mov	sp,fp
  1212c8:	dfc00117 	ldw	ra,4(sp)
  1212cc:	df000017 	ldw	fp,0(sp)
  1212d0:	dec00204 	addi	sp,sp,8
  1212d4:	f800283a 	ret

001212d8 <trg_slope_toggle>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_slope_toggle()
{
  1212d8:	defffe04 	addi	sp,sp,-8
  1212dc:	dfc00115 	stw	ra,4(sp)
  1212e0:	df000015 	stw	fp,0(sp)
  1212e4:	d839883a 	mov	fp,sp
      /* none */



    /* toggle the trigger slope */
    if (slope == SLOPE_POSITIVE)
  1212e8:	d0a01017 	ldw	r2,-32704(gp)
  1212ec:	1000031e 	bne	r2,zero,1212fc <trg_slope_toggle+0x24>
        slope = SLOPE_NEGATIVE;
  1212f0:	00800044 	movi	r2,1
  1212f4:	d0a01015 	stw	r2,-32704(gp)
  1212f8:	00000106 	br	121300 <trg_slope_toggle+0x28>
    else
        slope = SLOPE_POSITIVE;
  1212fc:	d0201015 	stw	zero,-32704(gp)

    /* set the new trigger slope */
    set_trigger(level, slope);
  121300:	d0e00c17 	ldw	r3,-32720(gp)
  121304:	d0a01017 	ldw	r2,-32704(gp)
  121308:	1809883a 	mov	r4,r3
  12130c:	100b883a 	mov	r5,r2
  121310:	01219840 	call	121984 <set_trigger>


    /* all done with the trigger slope - return */
    return;
  121314:	0001883a 	nop

}
  121318:	e037883a 	mov	sp,fp
  12131c:	dfc00117 	ldw	ra,4(sp)
  121320:	df000017 	ldw	fp,0(sp)
  121324:	dec00204 	addi	sp,sp,8
  121328:	f800283a 	ret

0012132c <display_trg_slope>:
   Last Modified:    Mar. 13, 1994

*/

void  display_trg_slope(int x_pos, int y_pos, int style)
{
  12132c:	defff904 	addi	sp,sp,-28
  121330:	dfc00615 	stw	ra,24(sp)
  121334:	df000515 	stw	fp,20(sp)
  121338:	df000504 	addi	fp,sp,20
  12133c:	e13ffd15 	stw	r4,-12(fp)
  121340:	e17ffe15 	stw	r5,-8(fp)
  121344:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the trigger slope strings (must match enumerated type) */
    const char * const  slopes[] =  {  " +", " -"  };
  121348:	008004b4 	movhi	r2,18
  12134c:	10938904 	addi	r2,r2,20004
  121350:	e0bffb15 	stw	r2,-20(fp)
  121354:	008004b4 	movhi	r2,18
  121358:	10938a04 	addi	r2,r2,20008
  12135c:	e0bffc15 	stw	r2,-16(fp)



    /* display the trigger slope */
    plot_string(x_pos, y_pos, slopes[slope], style);
  121360:	d0a01017 	ldw	r2,-32704(gp)
  121364:	1085883a 	add	r2,r2,r2
  121368:	1085883a 	add	r2,r2,r2
  12136c:	e0fffb04 	addi	r3,fp,-20
  121370:	1885883a 	add	r2,r3,r2
  121374:	10c00017 	ldw	r3,0(r2)
  121378:	e0bfff17 	ldw	r2,-4(fp)
  12137c:	e13ffd17 	ldw	r4,-12(fp)
  121380:	e17ffe17 	ldw	r5,-8(fp)
  121384:	180d883a 	mov	r6,r3
  121388:	100f883a 	mov	r7,r2
  12138c:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the trigger slope - return */
    return;

}
  121390:	e037883a 	mov	sp,fp
  121394:	dfc00117 	ldw	ra,4(sp)
  121398:	df000017 	ldw	fp,0(sp)
  12139c:	dec00204 	addi	sp,sp,8
  1213a0:	f800283a 	ret

001213a4 <set_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_delay(long int d)
{
  1213a4:	defffd04 	addi	sp,sp,-12
  1213a8:	dfc00215 	stw	ra,8(sp)
  1213ac:	df000115 	stw	fp,4(sp)
  1213b0:	df000104 	addi	fp,sp,4
  1213b4:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger delay */
    delay = d;
  1213b8:	e0bfff17 	ldw	r2,-4(fp)
  1213bc:	d0a00e15 	stw	r2,-32712(gp)

    /* set the trigger delay in hardware too */
    set_delay(delay);
  1213c0:	d0a00e17 	ldw	r2,-32712(gp)
  1213c4:	1009883a 	mov	r4,r2
  1213c8:	01219ac0 	call	1219ac <set_delay>


    /* all done initializing the trigger delay - return */
    return;
  1213cc:	0001883a 	nop

}
  1213d0:	e037883a 	mov	sp,fp
  1213d4:	dfc00117 	ldw	ra,4(sp)
  1213d8:	df000017 	ldw	fp,0(sp)
  1213dc:	dec00204 	addi	sp,sp,8
  1213e0:	f800283a 	ret

001213e4 <trg_delay_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_down()
{
  1213e4:	defffe04 	addi	sp,sp,-8
  1213e8:	dfc00115 	stw	ra,4(sp)
  1213ec:	df000015 	stw	fp,0(sp)
  1213f0:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger delay, if not already the minimum */
    if (delay > MIN_DELAY)
  1213f4:	d0a00e17 	ldw	r2,-32712(gp)
  1213f8:	0080030e 	bge	zero,r2,121408 <trg_delay_down+0x24>
        delay--;
  1213fc:	d0a00e17 	ldw	r2,-32712(gp)
  121400:	10bfffc4 	addi	r2,r2,-1
  121404:	d0a00e15 	stw	r2,-32712(gp)

    /* set the trigger delay for the hardware */
    set_delay(delay);
  121408:	d0a00e17 	ldw	r2,-32712(gp)
  12140c:	1009883a 	mov	r4,r2
  121410:	01219ac0 	call	1219ac <set_delay>


    /* all done with lowering the trigger delay - return */
    return;
  121414:	0001883a 	nop

}
  121418:	e037883a 	mov	sp,fp
  12141c:	dfc00117 	ldw	ra,4(sp)
  121420:	df000017 	ldw	fp,0(sp)
  121424:	dec00204 	addi	sp,sp,8
  121428:	f800283a 	ret

0012142c <trg_delay_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_up()
{
  12142c:	defffe04 	addi	sp,sp,-8
  121430:	dfc00115 	stw	ra,4(sp)
  121434:	df000015 	stw	fp,0(sp)
  121438:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger delay, if not already the maximum */
    if (delay < MAX_DELAY)
  12143c:	d0a00e17 	ldw	r2,-32712(gp)
  121440:	00f0d3d4 	movui	r3,49999
  121444:	18800316 	blt	r3,r2,121454 <trg_delay_up+0x28>
        delay++;
  121448:	d0a00e17 	ldw	r2,-32712(gp)
  12144c:	10800044 	addi	r2,r2,1
  121450:	d0a00e15 	stw	r2,-32712(gp)

    /* tell the hardware the new trigger delay */
    set_delay(delay);
  121454:	d0a00e17 	ldw	r2,-32712(gp)
  121458:	1009883a 	mov	r4,r2
  12145c:	01219ac0 	call	1219ac <set_delay>


    /* all done raising the trigger delay - return */
    return;
  121460:	0001883a 	nop

}
  121464:	e037883a 	mov	sp,fp
  121468:	dfc00117 	ldw	ra,4(sp)
  12146c:	df000017 	ldw	fp,0(sp)
  121470:	dec00204 	addi	sp,sp,8
  121474:	f800283a 	ret

00121478 <adjust_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  adjust_trg_delay(int old_sweep, int new_sweep)
{
  121478:	defffc04 	addi	sp,sp,-16
  12147c:	dfc00315 	stw	ra,12(sp)
  121480:	df000215 	stw	fp,8(sp)
  121484:	df000204 	addi	fp,sp,8
  121488:	e13ffe15 	stw	r4,-8(fp)
  12148c:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* multiply by 10 times the ratio of sweep rates */
    delay *= (10 * sweep_rates[new_sweep].sample_rate) / sweep_rates[old_sweep].sample_rate;
  121490:	00c004b4 	movhi	r3,18
  121494:	18d35804 	addi	r3,r3,19808
  121498:	e0bfff17 	ldw	r2,-4(fp)
  12149c:	100490fa 	slli	r2,r2,3
  1214a0:	1885883a 	add	r2,r3,r2
  1214a4:	10800017 	ldw	r2,0(r2)
  1214a8:	1009883a 	mov	r4,r2
  1214ac:	01400284 	movi	r5,10
  1214b0:	0123b580 	call	123b58 <__mulsi3>
  1214b4:	1007883a 	mov	r3,r2
  1214b8:	010004b4 	movhi	r4,18
  1214bc:	21135804 	addi	r4,r4,19808
  1214c0:	e0bffe17 	ldw	r2,-8(fp)
  1214c4:	100490fa 	slli	r2,r2,3
  1214c8:	2085883a 	add	r2,r4,r2
  1214cc:	10800017 	ldw	r2,0(r2)
  1214d0:	1809883a 	mov	r4,r3
  1214d4:	100b883a 	mov	r5,r2
  1214d8:	0123a9c0 	call	123a9c <__divsi3>
  1214dc:	1007883a 	mov	r3,r2
  1214e0:	d0a00e17 	ldw	r2,-32712(gp)
  1214e4:	1809883a 	mov	r4,r3
  1214e8:	100b883a 	mov	r5,r2
  1214ec:	0123b580 	call	123b58 <__mulsi3>
  1214f0:	d0a00e15 	stw	r2,-32712(gp)
    /* now divide the factor of 10 back out */
    delay /= 10;
  1214f4:	d0a00e17 	ldw	r2,-32712(gp)
  1214f8:	1009883a 	mov	r4,r2
  1214fc:	01400284 	movi	r5,10
  121500:	0123a9c0 	call	123a9c <__divsi3>
  121504:	d0a00e15 	stw	r2,-32712(gp)

    /* make sure delay is not out of range */
    if (delay > MAX_DELAY)
  121508:	d0a00e17 	ldw	r2,-32712(gp)
  12150c:	00f0d414 	movui	r3,50000
  121510:	1880020e 	bge	r3,r2,12151c <adjust_trg_delay+0xa4>
        /* delay is too large - set to maximum */
        delay = MAX_DELAY;
  121514:	00b0d414 	movui	r2,50000
  121518:	d0a00e15 	stw	r2,-32712(gp)
    if (delay < MIN_DELAY)
  12151c:	d0a00e17 	ldw	r2,-32712(gp)
  121520:	1000010e 	bge	r2,zero,121528 <adjust_trg_delay+0xb0>
        /* delay is too small - set to minimum */
	delay = MIN_DELAY;
  121524:	d0200e15 	stw	zero,-32712(gp)


    /* tell the hardware the new trigger delay */
    set_delay(delay);
  121528:	d0a00e17 	ldw	r2,-32712(gp)
  12152c:	1009883a 	mov	r4,r2
  121530:	01219ac0 	call	1219ac <set_delay>


    /* all done adjusting the trigger delay - return */
    return;
  121534:	0001883a 	nop

}
  121538:	e037883a 	mov	sp,fp
  12153c:	dfc00117 	ldw	ra,4(sp)
  121540:	df000017 	ldw	fp,0(sp)
  121544:	dec00204 	addi	sp,sp,8
  121548:	f800283a 	ret

0012154c <display_trg_delay>:
   Last Modified:    May 3, 2006

*/

void  display_trg_delay(int x_pos, int y_pos, int style)
{
  12154c:	defff604 	addi	sp,sp,-40
  121550:	dfc00915 	stw	ra,36(sp)
  121554:	df000815 	stw	fp,32(sp)
  121558:	df000804 	addi	fp,sp,32
  12155c:	e13ffd15 	stw	r4,-12(fp)
  121560:	e17ffe15 	stw	r5,-8(fp)
  121564:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      delay_str[] = "         "; /* string containing the trigger delay */
  121568:	00880834 	movhi	r2,8224
  12156c:	10880804 	addi	r2,r2,8224
  121570:	e0bffa15 	stw	r2,-24(fp)
  121574:	00880834 	movhi	r2,8224
  121578:	10880804 	addi	r2,r2,8224
  12157c:	e0bffb15 	stw	r2,-20(fp)
  121580:	00800804 	movi	r2,32
  121584:	e0bffc0d 	sth	r2,-16(fp)
    long int  d;                         /* delay in appropriate units */


    /* compute the delay in the appropriate units */
    /* have to watch out for overflow, so be careful */
    if (sweep_rates[sweep].sample_rate > 1000000L)  {
  121588:	d0a00d17 	ldw	r2,-32716(gp)
  12158c:	00c004b4 	movhi	r3,18
  121590:	18d35804 	addi	r3,r3,19808
  121594:	100490fa 	slli	r2,r2,3
  121598:	1885883a 	add	r2,r3,r2
  12159c:	10800017 	ldw	r2,0(r2)
  1215a0:	00c003f4 	movhi	r3,15
  1215a4:	18d09004 	addi	r3,r3,16960
  1215a8:	1880170e 	bge	r3,r2,121608 <display_trg_delay+0xbc>
        /* have a fast sweep rate, could overflow */
        /* first compute in units of 100 ns */
        d = delay * (10000000L / sweep_rates[sweep].sample_rate);
  1215ac:	d0a00d17 	ldw	r2,-32716(gp)
  1215b0:	00c004b4 	movhi	r3,18
  1215b4:	18d35804 	addi	r3,r3,19808
  1215b8:	100490fa 	slli	r2,r2,3
  1215bc:	1885883a 	add	r2,r3,r2
  1215c0:	10800017 	ldw	r2,0(r2)
  1215c4:	01002674 	movhi	r4,153
  1215c8:	2125a004 	addi	r4,r4,-27008
  1215cc:	100b883a 	mov	r5,r2
  1215d0:	0123a9c0 	call	123a9c <__divsi3>
  1215d4:	1007883a 	mov	r3,r2
  1215d8:	d0a00e17 	ldw	r2,-32712(gp)
  1215dc:	1809883a 	mov	r4,r3
  1215e0:	100b883a 	mov	r5,r2
  1215e4:	0123b580 	call	123b58 <__mulsi3>
  1215e8:	e0bff915 	stw	r2,-28(fp)
	/* now convert to nanoseconds */
	d *= 100L;
  1215ec:	e13ff917 	ldw	r4,-28(fp)
  1215f0:	01401904 	movi	r5,100
  1215f4:	0123b580 	call	123b58 <__mulsi3>
  1215f8:	e0bff915 	stw	r2,-28(fp)
	/* need to divide by 1000 to get to microseconds */
	units_adj = 1000;
  1215fc:	0080fa04 	movi	r2,1000
  121600:	e0bff815 	stw	r2,-32(fp)
  121604:	00001206 	br	121650 <display_trg_delay+0x104>
    }
    else  {
        /* slow sweep rate, don't have to worry about overflow */
        d = delay * (1000000L / sweep_rates[sweep].sample_rate);
  121608:	d0a00d17 	ldw	r2,-32716(gp)
  12160c:	00c004b4 	movhi	r3,18
  121610:	18d35804 	addi	r3,r3,19808
  121614:	100490fa 	slli	r2,r2,3
  121618:	1885883a 	add	r2,r3,r2
  12161c:	10800017 	ldw	r2,0(r2)
  121620:	010003f4 	movhi	r4,15
  121624:	21109004 	addi	r4,r4,16960
  121628:	100b883a 	mov	r5,r2
  12162c:	0123a9c0 	call	123a9c <__divsi3>
  121630:	1007883a 	mov	r3,r2
  121634:	d0a00e17 	ldw	r2,-32712(gp)
  121638:	1809883a 	mov	r4,r3
  12163c:	100b883a 	mov	r5,r2
  121640:	0123b580 	call	123b58 <__mulsi3>
  121644:	e0bff915 	stw	r2,-28(fp)
	/* already in microseconds, so adjustment is 1 */
	units_adj = 1;
  121648:	00800044 	movi	r2,1
  12164c:	e0bff815 	stw	r2,-32(fp)
    }

    /* convert it to the string (leave first character blank) */
    cvt_num_field(d, &delay_str[1]);
  121650:	e0bffa04 	addi	r2,fp,-24
  121654:	10800044 	addi	r2,r2,1
  121658:	e13ff917 	ldw	r4,-28(fp)
  12165c:	100b883a 	mov	r5,r2
  121660:	012177c0 	call	12177c <cvt_num_field>

    /* add in the units */
    if (((d / units_adj) < 1000) && ((d / units_adj) > -1000) && (units_adj == 1000)) {
  121664:	e13ff917 	ldw	r4,-28(fp)
  121668:	e17ff817 	ldw	r5,-32(fp)
  12166c:	0123a9c0 	call	123a9c <__divsi3>
  121670:	1080fa08 	cmpgei	r2,r2,1000
  121674:	10000d1e 	bne	r2,zero,1216ac <display_trg_delay+0x160>
  121678:	e13ff917 	ldw	r4,-28(fp)
  12167c:	e17ff817 	ldw	r5,-32(fp)
  121680:	0123a9c0 	call	123a9c <__divsi3>
  121684:	10bf0650 	cmplti	r2,r2,-999
  121688:	1000081e 	bne	r2,zero,1216ac <display_trg_delay+0x160>
  12168c:	e0bff817 	ldw	r2,-32(fp)
  121690:	1080fa18 	cmpnei	r2,r2,1000
  121694:	1000051e 	bne	r2,zero,1216ac <display_trg_delay+0x160>
        /* delay is in microseconds */
	delay_str[7] = '\004';
  121698:	00800104 	movi	r2,4
  12169c:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
  1216a0:	00801cc4 	movi	r2,115
  1216a4:	e0bffc05 	stb	r2,-16(fp)
  1216a8:	00002806 	br	12174c <display_trg_delay+0x200>
    }
    else if (((d / units_adj) < 1000000) && ((d / units_adj) > -1000000)) {
  1216ac:	e13ff917 	ldw	r4,-28(fp)
  1216b0:	e17ff817 	ldw	r5,-32(fp)
  1216b4:	0123a9c0 	call	123a9c <__divsi3>
  1216b8:	00c003f4 	movhi	r3,15
  1216bc:	18d08fc4 	addi	r3,r3,16959
  1216c0:	18800c16 	blt	r3,r2,1216f4 <display_trg_delay+0x1a8>
  1216c4:	e13ff917 	ldw	r4,-28(fp)
  1216c8:	e17ff817 	ldw	r5,-32(fp)
  1216cc:	0123a9c0 	call	123a9c <__divsi3>
  1216d0:	1007883a 	mov	r3,r2
  1216d4:	00bffc74 	movhi	r2,65521
  1216d8:	10af7044 	addi	r2,r2,-16959
  1216dc:	18800516 	blt	r3,r2,1216f4 <display_trg_delay+0x1a8>
        /* delay is in milliseconds */
	delay_str[7] = 'm';
  1216e0:	00801b44 	movi	r2,109
  1216e4:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
  1216e8:	00801cc4 	movi	r2,115
  1216ec:	e0bffc05 	stb	r2,-16(fp)
  1216f0:	00001606 	br	12174c <display_trg_delay+0x200>
    }
    else if (((d / units_adj) < 1000000000) && ((d / units_adj) > -1000000000))  {
  1216f4:	e13ff917 	ldw	r4,-28(fp)
  1216f8:	e17ff817 	ldw	r5,-32(fp)
  1216fc:	0123a9c0 	call	123a9c <__divsi3>
  121700:	00cee6f4 	movhi	r3,15259
  121704:	18f27fc4 	addi	r3,r3,-13825
  121708:	18800c16 	blt	r3,r2,12173c <display_trg_delay+0x1f0>
  12170c:	e13ff917 	ldw	r4,-28(fp)
  121710:	e17ff817 	ldw	r5,-32(fp)
  121714:	0123a9c0 	call	123a9c <__divsi3>
  121718:	1007883a 	mov	r3,r2
  12171c:	00b11974 	movhi	r2,50277
  121720:	108d8044 	addi	r2,r2,13825
  121724:	18800516 	blt	r3,r2,12173c <display_trg_delay+0x1f0>
        /* delay is in seconds */
	delay_str[7] = 's';
  121728:	00801cc4 	movi	r2,115
  12172c:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = ' ';
  121730:	00800804 	movi	r2,32
  121734:	e0bffc05 	stb	r2,-16(fp)
  121738:	00000406 	br	12174c <display_trg_delay+0x200>
    }
    else  {
        /* delay is in kiloseconds */
	delay_str[7] = 'k';
  12173c:	00801ac4 	movi	r2,107
  121740:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
  121744:	00801cc4 	movi	r2,115
  121748:	e0bffc05 	stb	r2,-16(fp)
    }


    /* now actually display the trigger delay */
    plot_string(x_pos, y_pos, delay_str, style);
  12174c:	e0bfff17 	ldw	r2,-4(fp)
  121750:	e0fffa04 	addi	r3,fp,-24
  121754:	e13ffd17 	ldw	r4,-12(fp)
  121758:	e17ffe17 	ldw	r5,-8(fp)
  12175c:	180d883a 	mov	r6,r3
  121760:	100f883a 	mov	r7,r2
  121764:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the trigger delay - return */
    return;

}
  121768:	e037883a 	mov	sp,fp
  12176c:	dfc00117 	ldw	ra,4(sp)
  121770:	df000017 	ldw	fp,0(sp)
  121774:	dec00204 	addi	sp,sp,8
  121778:	f800283a 	ret

0012177c <cvt_num_field>:
   Last Modified:    Mar. 8, 1994

*/

void  cvt_num_field(long int n, char *s)
{
  12177c:	defff804 	addi	sp,sp,-32
  121780:	dfc00715 	stw	ra,28(sp)
  121784:	df000615 	stw	fp,24(sp)
  121788:	dc000515 	stw	r16,20(sp)
  12178c:	df000504 	addi	fp,sp,20
  121790:	e13ffe15 	stw	r4,-8(fp)
  121794:	e17fff15 	stw	r5,-4(fp)
    /* variables */
    int  dp = 3;		/* digits to right of decimal point */
  121798:	008000c4 	movi	r2,3
  12179c:	e0bffb15 	stw	r2,-20(fp)
    int  d;			/* digit weight (power of 10) */

    int  i = 0;			/* string index */
  1217a0:	e03ffd15 	stw	zero,-12(fp)



    /* first get the sign (and make n positive for conversion) */
    if (n < 0)  {
  1217a4:	e0bffe17 	ldw	r2,-8(fp)
  1217a8:	10000c0e 	bge	r2,zero,1217dc <cvt_num_field+0x60>
        /* n is negative, set sign and convert to positive */
	s[i++] = '-';
  1217ac:	e0bffd17 	ldw	r2,-12(fp)
  1217b0:	e0ffff17 	ldw	r3,-4(fp)
  1217b4:	1885883a 	add	r2,r3,r2
  1217b8:	00c00b44 	movi	r3,45
  1217bc:	10c00005 	stb	r3,0(r2)
  1217c0:	e0bffd17 	ldw	r2,-12(fp)
  1217c4:	10800044 	addi	r2,r2,1
  1217c8:	e0bffd15 	stw	r2,-12(fp)
	n = -n;
  1217cc:	e0bffe17 	ldw	r2,-8(fp)
  1217d0:	0085c83a 	sub	r2,zero,r2
  1217d4:	e0bffe15 	stw	r2,-8(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  1217d8:	00001106 	br	121820 <cvt_num_field+0xa4>
	s[i++] = '-';
	n = -n;
    }
    else  {
        /* n is positive, set sign only */
	s[i++] = '+';
  1217dc:	e0bffd17 	ldw	r2,-12(fp)
  1217e0:	e0ffff17 	ldw	r3,-4(fp)
  1217e4:	1885883a 	add	r2,r3,r2
  1217e8:	00c00ac4 	movi	r3,43
  1217ec:	10c00005 	stb	r3,0(r2)
  1217f0:	e0bffd17 	ldw	r2,-12(fp)
  1217f4:	10800044 	addi	r2,r2,1
  1217f8:	e0bffd15 	stw	r2,-12(fp)
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  1217fc:	00000806 	br	121820 <cvt_num_field+0xa4>
        /* have more than 4 digits - get rid of one */
	n /= 10;
  121800:	e0bffe17 	ldw	r2,-8(fp)
  121804:	1009883a 	mov	r4,r2
  121808:	01400284 	movi	r5,10
  12180c:	0123a9c0 	call	123a9c <__divsi3>
  121810:	e0bffe15 	stw	r2,-8(fp)
	/* adjust the decimal point */
	dp--;
  121814:	e0bffb17 	ldw	r2,-20(fp)
  121818:	10bfffc4 	addi	r2,r2,-1
  12181c:	e0bffb15 	stw	r2,-20(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  121820:	e0bffe17 	ldw	r2,-8(fp)
  121824:	1089c408 	cmpgei	r2,r2,10000
  121828:	103ff51e 	bne	r2,zero,121800 <cvt_num_field+0x84>
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
  12182c:	00000306 	br	12183c <cvt_num_field+0xc0>
       dp += 3;
  121830:	e0bffb17 	ldw	r2,-20(fp)
  121834:	108000c4 	addi	r2,r2,3
  121838:	e0bffb15 	stw	r2,-20(fp)
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
  12183c:	e0bffb17 	ldw	r2,-20(fp)
  121840:	00bffb0e 	bge	zero,r2,121830 <cvt_num_field+0xb4>
       dp += 3;


    /* adjust dp to be digits to the right of the decimal point */
    /* (assuming 4 digits) */
    dp = 4 - dp;
  121844:	00c00104 	movi	r3,4
  121848:	e0bffb17 	ldw	r2,-20(fp)
  12184c:	1885c83a 	sub	r2,r3,r2
  121850:	e0bffb15 	stw	r2,-20(fp)


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
  121854:	0080fa04 	movi	r2,1000
  121858:	e0bffc15 	stw	r2,-16(fp)
  12185c:	00002406 	br	1218f0 <cvt_num_field+0x174>

        /* check if need decimal the decimal point now */
	if (dp-- == 0)
  121860:	e0bffb17 	ldw	r2,-20(fp)
  121864:	1005003a 	cmpeq	r2,r2,zero
  121868:	e0fffb17 	ldw	r3,-20(fp)
  12186c:	18ffffc4 	addi	r3,r3,-1
  121870:	e0fffb15 	stw	r3,-20(fp)
  121874:	10803fcc 	andi	r2,r2,255
  121878:	10000826 	beq	r2,zero,12189c <cvt_num_field+0x120>
	    /* time for decimal point */
	    s[i++] = '.';
  12187c:	e0bffd17 	ldw	r2,-12(fp)
  121880:	e0ffff17 	ldw	r3,-4(fp)
  121884:	1885883a 	add	r2,r3,r2
  121888:	00c00b84 	movi	r3,46
  12188c:	10c00005 	stb	r3,0(r2)
  121890:	e0bffd17 	ldw	r2,-12(fp)
  121894:	10800044 	addi	r2,r2,1
  121898:	e0bffd15 	stw	r2,-12(fp)

	/* get and convert this digit */
	s[i++] = (n / d) + '0';
  12189c:	e0bffd17 	ldw	r2,-12(fp)
  1218a0:	e0ffff17 	ldw	r3,-4(fp)
  1218a4:	18a1883a 	add	r16,r3,r2
  1218a8:	e13ffe17 	ldw	r4,-8(fp)
  1218ac:	e17ffc17 	ldw	r5,-16(fp)
  1218b0:	0123a9c0 	call	123a9c <__divsi3>
  1218b4:	10800c04 	addi	r2,r2,48
  1218b8:	80800005 	stb	r2,0(r16)
  1218bc:	e0bffd17 	ldw	r2,-12(fp)
  1218c0:	10800044 	addi	r2,r2,1
  1218c4:	e0bffd15 	stw	r2,-12(fp)
	/* remove this digit from n */
	n %= d;
  1218c8:	e0bffe17 	ldw	r2,-8(fp)
  1218cc:	1009883a 	mov	r4,r2
  1218d0:	e17ffc17 	ldw	r5,-16(fp)
  1218d4:	0123aec0 	call	123aec <__modsi3>
  1218d8:	e0bffe15 	stw	r2,-8(fp)
    /* (assuming 4 digits) */
    dp = 4 - dp;


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
  1218dc:	e0bffc17 	ldw	r2,-16(fp)
  1218e0:	1009883a 	mov	r4,r2
  1218e4:	01400284 	movi	r5,10
  1218e8:	0123a9c0 	call	123a9c <__divsi3>
  1218ec:	e0bffc15 	stw	r2,-16(fp)
  1218f0:	e0bffc17 	ldw	r2,-16(fp)
  1218f4:	00bfda16 	blt	zero,r2,121860 <cvt_num_field+0xe4>
	n %= d;
    }


    /* all done converting the number, return */
    return;
  1218f8:	0001883a 	nop

}
  1218fc:	e037883a 	mov	sp,fp
  121900:	dfc00217 	ldw	ra,8(sp)
  121904:	df000117 	ldw	fp,4(sp)
  121908:	dc000017 	ldw	r16,0(sp)
  12190c:	dec00304 	addi	sp,sp,12
  121910:	f800283a 	ret

00121914 <clear_display>:


/* display functions  */

void  clear_display()
{
  121914:	deffff04 	addi	sp,sp,-4
  121918:	df000015 	stw	fp,0(sp)
  12191c:	d839883a 	mov	fp,sp
    return;
  121920:	0001883a 	nop
}
  121924:	e037883a 	mov	sp,fp
  121928:	df000017 	ldw	fp,0(sp)
  12192c:	dec00104 	addi	sp,sp,4
  121930:	f800283a 	ret

00121934 <plot_pixel>:

void  plot_pixel(unsigned int x, unsigned int y, int p)
{
  121934:	defffc04 	addi	sp,sp,-16
  121938:	df000315 	stw	fp,12(sp)
  12193c:	df000304 	addi	fp,sp,12
  121940:	e13ffd15 	stw	r4,-12(fp)
  121944:	e17ffe15 	stw	r5,-8(fp)
  121948:	e1bfff15 	stw	r6,-4(fp)
    return;
  12194c:	0001883a 	nop
}
  121950:	e037883a 	mov	sp,fp
  121954:	df000017 	ldw	fp,0(sp)
  121958:	dec00104 	addi	sp,sp,4
  12195c:	f800283a 	ret

00121960 <set_sample_rate>:


/* sampling parameter functions */

int  set_sample_rate(long int rate)
{
  121960:	defffe04 	addi	sp,sp,-8
  121964:	df000115 	stw	fp,4(sp)
  121968:	df000104 	addi	fp,sp,4
  12196c:	e13fff15 	stw	r4,-4(fp)
    return  SIZE_X;
  121970:	00807804 	movi	r2,480
}
  121974:	e037883a 	mov	sp,fp
  121978:	df000017 	ldw	fp,0(sp)
  12197c:	dec00104 	addi	sp,sp,4
  121980:	f800283a 	ret

00121984 <set_trigger>:

void  set_trigger(int level, int slope)
{
  121984:	defffd04 	addi	sp,sp,-12
  121988:	df000215 	stw	fp,8(sp)
  12198c:	df000204 	addi	fp,sp,8
  121990:	e13ffe15 	stw	r4,-8(fp)
  121994:	e17fff15 	stw	r5,-4(fp)
    return;
  121998:	0001883a 	nop
}
  12199c:	e037883a 	mov	sp,fp
  1219a0:	df000017 	ldw	fp,0(sp)
  1219a4:	dec00104 	addi	sp,sp,4
  1219a8:	f800283a 	ret

001219ac <set_delay>:

void  set_delay(long int delay)
{
  1219ac:	defffe04 	addi	sp,sp,-8
  1219b0:	df000115 	stw	fp,4(sp)
  1219b4:	df000104 	addi	fp,sp,4
  1219b8:	e13fff15 	stw	r4,-4(fp)
    return;
  1219bc:	0001883a 	nop
}
  1219c0:	e037883a 	mov	sp,fp
  1219c4:	df000017 	ldw	fp,0(sp)
  1219c8:	dec00104 	addi	sp,sp,4
  1219cc:	f800283a 	ret

001219d0 <start_sample>:


/* sampling functions */

void  start_sample(int auto_trigger)
{
  1219d0:	defffe04 	addi	sp,sp,-8
  1219d4:	df000115 	stw	fp,4(sp)
  1219d8:	df000104 	addi	fp,sp,4
  1219dc:	e13fff15 	stw	r4,-4(fp)
    return;
  1219e0:	0001883a 	nop
}
  1219e4:	e037883a 	mov	sp,fp
  1219e8:	df000017 	ldw	fp,0(sp)
  1219ec:	dec00104 	addi	sp,sp,4
  1219f0:	f800283a 	ret

001219f4 <sample_done>:

unsigned char *sample_done()
{
  1219f4:	deffff04 	addi	sp,sp,-4
  1219f8:	df000015 	stw	fp,0(sp)
  1219fc:	d839883a 	mov	fp,sp
    return  NULL;
  121a00:	0005883a 	mov	r2,zero
}
  121a04:	e037883a 	mov	sp,fp
  121a08:	df000017 	ldw	fp,0(sp)
  121a0c:	dec00104 	addi	sp,sp,4
  121a10:	f800283a 	ret

00121a14 <get_test_sample>:
   Last Modified:    May 3, 2006

*/

void  get_test_sample(long int sample_rate, int sample_size, unsigned char *sample)
{
  121a14:	deff8104 	addi	sp,sp,-508
  121a18:	dfc07e15 	stw	ra,504(sp)
  121a1c:	df007d15 	stw	fp,500(sp)
  121a20:	df007d04 	addi	fp,sp,500
  121a24:	e13ffd15 	stw	r4,-12(fp)
  121a28:	e17ffe15 	stw	r5,-8(fp)
  121a2c:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* a half-cycle of the ringing square wave */
    const unsigned char  waveform[] =
  121a30:	008004b4 	movhi	r2,18
  121a34:	10938b04 	addi	r2,r2,20012
  121a38:	e13f8504 	addi	r4,fp,-492
  121a3c:	1007883a 	mov	r3,r2
  121a40:	00807804 	movi	r2,480
  121a44:	180b883a 	mov	r5,r3
  121a48:	100d883a 	mov	r6,r2
  121a4c:	0123b800 	call	123b80 <memcpy>
	    63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,
	    63,  63,  63,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,
	    64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64
	  };

    long int  sample_pt = 0;	/* current sample within the waveform */
  121a50:	e03f8315 	stw	zero,-500(fp)

    int       sample_sign = 1;	/* sample waveform sign */
  121a54:	00800044 	movi	r2,1
  121a58:	e0bf8415 	stw	r2,-496(fp)



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
  121a5c:	00003106 	br	121b24 <get_test_sample+0x110>

        /* get this sample point (value based on sign) */
	if (sample_sign > 0)
  121a60:	e0bf8417 	ldw	r2,-496(fp)
  121a64:	00800f0e 	bge	zero,r2,121aa4 <get_test_sample+0x90>
	    *sample++ = waveform[sample_pt/20] + 127;
  121a68:	e0bf8317 	ldw	r2,-500(fp)
  121a6c:	1009883a 	mov	r4,r2
  121a70:	01400504 	movi	r5,20
  121a74:	0123a9c0 	call	123a9c <__divsi3>
  121a78:	e0ff8504 	addi	r3,fp,-492
  121a7c:	1885883a 	add	r2,r3,r2
  121a80:	10800003 	ldbu	r2,0(r2)
  121a84:	10801fc4 	addi	r2,r2,127
  121a88:	1007883a 	mov	r3,r2
  121a8c:	e0bfff17 	ldw	r2,-4(fp)
  121a90:	10c00005 	stb	r3,0(r2)
  121a94:	e0bfff17 	ldw	r2,-4(fp)
  121a98:	10800044 	addi	r2,r2,1
  121a9c:	e0bfff15 	stw	r2,-4(fp)
  121aa0:	00000f06 	br	121ae0 <get_test_sample+0xcc>
	else
	    *sample++ = 128 - waveform[sample_pt/20];
  121aa4:	e0bf8317 	ldw	r2,-500(fp)
  121aa8:	1009883a 	mov	r4,r2
  121aac:	01400504 	movi	r5,20
  121ab0:	0123a9c0 	call	123a9c <__divsi3>
  121ab4:	e0ff8504 	addi	r3,fp,-492
  121ab8:	1885883a 	add	r2,r3,r2
  121abc:	10800003 	ldbu	r2,0(r2)
  121ac0:	00ffe004 	movi	r3,-128
  121ac4:	1885c83a 	sub	r2,r3,r2
  121ac8:	1007883a 	mov	r3,r2
  121acc:	e0bfff17 	ldw	r2,-4(fp)
  121ad0:	10c00005 	stb	r3,0(r2)
  121ad4:	e0bfff17 	ldw	r2,-4(fp)
  121ad8:	10800044 	addi	r2,r2,1
  121adc:	e0bfff15 	stw	r2,-4(fp)

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
  121ae0:	01002674 	movhi	r4,153
  121ae4:	2125a004 	addi	r4,r4,-27008
  121ae8:	e17ffd17 	ldw	r5,-12(fp)
  121aec:	0123a9c0 	call	123a9c <__divsi3>
  121af0:	e0ff8317 	ldw	r3,-500(fp)
  121af4:	1885883a 	add	r2,r3,r2
  121af8:	e0bf8315 	stw	r2,-500(fp)
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
  121afc:	00000606 	br	121b18 <get_test_sample+0x104>
	    /* keep sample_pt within the test waveform */
	    sample_pt -= (20 * NO_TEST_PTS);
  121b00:	e0bf8317 	ldw	r2,-500(fp)
  121b04:	10b6a004 	addi	r2,r2,-9600
  121b08:	e0bf8315 	stw	r2,-500(fp)
	    /* each time through the waveform, invert it */
	    sample_sign = -sample_sign;
  121b0c:	e0bf8417 	ldw	r2,-496(fp)
  121b10:	0085c83a 	sub	r2,zero,r2
  121b14:	e0bf8415 	stw	r2,-496(fp)
	    *sample++ = 128 - waveform[sample_pt/20];

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
  121b18:	e0bf8317 	ldw	r2,-500(fp)
  121b1c:	10896028 	cmpgeui	r2,r2,9600
  121b20:	103ff71e 	bne	r2,zero,121b00 <get_test_sample+0xec>
    int       sample_sign = 1;	/* sample waveform sign */



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
  121b24:	e0bffe17 	ldw	r2,-8(fp)
  121b28:	0084803a 	cmplt	r2,zero,r2
  121b2c:	e0fffe17 	ldw	r3,-8(fp)
  121b30:	18ffffc4 	addi	r3,r3,-1
  121b34:	e0fffe15 	stw	r3,-8(fp)
  121b38:	10803fcc 	andi	r2,r2,255
  121b3c:	103fc81e 	bne	r2,zero,121a60 <get_test_sample+0x4c>


    /* done getting the sample - return */
    return;

}
  121b40:	e037883a 	mov	sp,fp
  121b44:	dfc00117 	ldw	ra,4(sp)
  121b48:	df000017 	ldw	fp,0(sp)
  121b4c:	dec00204 	addi	sp,sp,8
  121b50:	f800283a 	ret

00121b54 <init_trace>:
   Last Modified:    May 9, 2006

*/

void  init_trace()
{
  121b54:	defffe04 	addi	sp,sp,-8
  121b58:	dfc00115 	stw	ra,4(sp)
  121b5c:	df000015 	stw	fp,0(sp)
  121b60:	d839883a 	mov	fp,sp


    /* initialize system status variables */

    /* ready for a trace */
    trace_status = TRUE;
  121b64:	00800044 	movi	r2,1
  121b68:	d0a01215 	stw	r2,-32696(gp)

    /* not currently sampling data */
    sampling = FALSE;
  121b6c:	d0201815 	stw	zero,-32672(gp)

    /* turn off the displayed scale */
    cur_scale = SCALE_NONE;
  121b70:	d0201115 	stw	zero,-32700(gp)

    /* sample size is the screen size */
    sample_size = SIZE_X;
  121b74:	00807804 	movi	r2,480
  121b78:	d0a01515 	stw	r2,-32684(gp)


    /* clear save areas */
    clear_saved_areas();
  121b7c:	01220d40 	call	1220d4 <clear_saved_areas>

    /* also clear the general saved area location variables (off-screen) */
    saved_pos_x = SIZE_X + 1;
  121b80:	00807844 	movi	r2,481
  121b84:	d0a01715 	stw	r2,-32676(gp)
    saved_pos_y = SIZE_Y + 1;
  121b88:	00802044 	movi	r2,129
  121b8c:	d0a01415 	stw	r2,-32688(gp)
    saved_end_x = SIZE_X + 1;
  121b90:	00807844 	movi	r2,481
  121b94:	d0a01615 	stw	r2,-32680(gp)
    saved_end_y = SIZE_Y + 1;
  121b98:	00802044 	movi	r2,129
  121b9c:	d0a01315 	stw	r2,-32692(gp)


    /* done initializing, return */
    return;
  121ba0:	0001883a 	nop

}
  121ba4:	e037883a 	mov	sp,fp
  121ba8:	dfc00117 	ldw	ra,4(sp)
  121bac:	df000017 	ldw	fp,0(sp)
  121bb0:	dec00204 	addi	sp,sp,8
  121bb4:	f800283a 	ret

00121bb8 <set_mode>:
   Last Modified:    May 27, 2008

*/

void  set_mode(enum trigger_type trigger_mode)
{
  121bb8:	defffe04 	addi	sp,sp,-8
  121bbc:	df000115 	stw	fp,4(sp)
  121bc0:	df000104 	addi	fp,sp,4
  121bc4:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* if not one-shot triggering - ready for trace too */
    trace_status = (trigger_mode != ONESHOT_TRIGGER);
  121bc8:	e0bfff17 	ldw	r2,-4(fp)
  121bcc:	10800098 	cmpnei	r2,r2,2
  121bd0:	10803fcc 	andi	r2,r2,255
  121bd4:	d0a01215 	stw	r2,-32696(gp)


    /* turn off the sampling flag so will start a new sample */
    sampling = FALSE;
  121bd8:	d0201815 	stw	zero,-32672(gp)


    /* all done, return */
    return;
  121bdc:	0001883a 	nop

}
  121be0:	e037883a 	mov	sp,fp
  121be4:	df000017 	ldw	fp,0(sp)
  121be8:	dec00104 	addi	sp,sp,4
  121bec:	f800283a 	ret

00121bf0 <is_sampling>:
   Last Modified:    May 27, 2008

*/

int  is_sampling()
{
  121bf0:	deffff04 	addi	sp,sp,-4
  121bf4:	df000015 	stw	fp,0(sp)
  121bf8:	d839883a 	mov	fp,sp
      /* none */



    /* currently sampling if sampling flag is set */
    return  sampling;
  121bfc:	d0a01817 	ldw	r2,-32672(gp)

}
  121c00:	e037883a 	mov	sp,fp
  121c04:	df000017 	ldw	fp,0(sp)
  121c08:	dec00104 	addi	sp,sp,4
  121c0c:	f800283a 	ret

00121c10 <trace_rdy>:
   Last Modified:    Mar. 13, 1994

*/

int  trace_rdy()
{
  121c10:	deffff04 	addi	sp,sp,-4
  121c14:	df000015 	stw	fp,0(sp)
  121c18:	d839883a 	mov	fp,sp
      /* none */



    /* ready for another trace if not sampling and trace is ready */
    return  (!sampling && trace_status);
  121c1c:	d0a01817 	ldw	r2,-32672(gp)
  121c20:	1000041e 	bne	r2,zero,121c34 <trace_rdy+0x24>
  121c24:	d0a01217 	ldw	r2,-32696(gp)
  121c28:	10000226 	beq	r2,zero,121c34 <trace_rdy+0x24>
  121c2c:	00800044 	movi	r2,1
  121c30:	00000106 	br	121c38 <trace_rdy+0x28>
  121c34:	0005883a 	mov	r2,zero

}
  121c38:	e037883a 	mov	sp,fp
  121c3c:	df000017 	ldw	fp,0(sp)
  121c40:	dec00104 	addi	sp,sp,4
  121c44:	f800283a 	ret

00121c48 <trace_done>:
   Last Modified:    May 9, 2006

*/

void  trace_done()
{
  121c48:	defffe04 	addi	sp,sp,-8
  121c4c:	dfc00115 	stw	ra,4(sp)
  121c50:	df000015 	stw	fp,0(sp)
  121c54:	d839883a 	mov	fp,sp
      /* none */



    /* done with a trace - if retriggering, ready for another one */
    if (get_trigger_mode() != ONESHOT_TRIGGER)
  121c58:	0120c3c0 	call	120c3c <get_trigger_mode>
  121c5c:	108000a0 	cmpeqi	r2,r2,2
  121c60:	1000021e 	bne	r2,zero,121c6c <trace_done+0x24>
        /* in a retriggering mode - set trace_status to TRUE (ready) */
	trace_status = TRUE;
  121c64:	00800044 	movi	r2,1
  121c68:	d0a01215 	stw	r2,-32696(gp)

    /* no longer sampling data */
    sampling = FALSE;
  121c6c:	d0201815 	stw	zero,-32672(gp)


    /* done so return */
    return;
  121c70:	0001883a 	nop

}
  121c74:	e037883a 	mov	sp,fp
  121c78:	dfc00117 	ldw	ra,4(sp)
  121c7c:	df000017 	ldw	fp,0(sp)
  121c80:	dec00204 	addi	sp,sp,8
  121c84:	f800283a 	ret

00121c88 <trace_rearm>:
   Last Modified:    Mar. 8, 1994

*/

void  trace_rearm()
{
  121c88:	deffff04 	addi	sp,sp,-4
  121c8c:	df000015 	stw	fp,0(sp)
  121c90:	d839883a 	mov	fp,sp
      /* none */



    /* rearm the trace - set status to ready (TRUE) */
    trace_status = TRUE;
  121c94:	00800044 	movi	r2,1
  121c98:	d0a01215 	stw	r2,-32696(gp)


    /* all done - return */
    return;
  121c9c:	0001883a 	nop

}
  121ca0:	e037883a 	mov	sp,fp
  121ca4:	df000017 	ldw	fp,0(sp)
  121ca8:	dec00104 	addi	sp,sp,4
  121cac:	f800283a 	ret

00121cb0 <set_trace_size>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trace_size(int size)
{
  121cb0:	defffe04 	addi	sp,sp,-8
  121cb4:	df000115 	stw	fp,4(sp)
  121cb8:	df000104 	addi	fp,sp,4
  121cbc:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the locally global sample size */
    sample_size = size;
  121cc0:	e0bfff17 	ldw	r2,-4(fp)
  121cc4:	d0a01515 	stw	r2,-32684(gp)


    /* all done, return */
    return;
  121cc8:	0001883a 	nop

}
  121ccc:	e037883a 	mov	sp,fp
  121cd0:	df000017 	ldw	fp,0(sp)
  121cd4:	dec00104 	addi	sp,sp,4
  121cd8:	f800283a 	ret

00121cdc <set_display_scale>:
   Last Modified:    May 9, 2006

*/

void  set_display_scale(enum scale_type scale)
{
  121cdc:	defff804 	addi	sp,sp,-32
  121ce0:	dfc00715 	stw	ra,28(sp)
  121ce4:	df000615 	stw	fp,24(sp)
  121ce8:	dc400515 	stw	r17,20(sp)
  121cec:	dc000415 	stw	r16,16(sp)
  121cf0:	df000404 	addi	fp,sp,16
  121cf4:	e13fff15 	stw	r4,-4(fp)



    /* whenever change scale type, need to clear out previous scale */
    /* unnecessary if going to SCALE_GRID or from SCALE_NONE or not changing the scale */
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {
  121cf8:	e0bfff17 	ldw	r2,-4(fp)
  121cfc:	108000a0 	cmpeqi	r2,r2,2
  121d00:	1000921e 	bne	r2,zero,121f4c <set_display_scale+0x270>
  121d04:	d0a01117 	ldw	r2,-32700(gp)
  121d08:	10009026 	beq	r2,zero,121f4c <set_display_scale+0x270>
  121d0c:	d0a01117 	ldw	r2,-32700(gp)
  121d10:	e0ffff17 	ldw	r3,-4(fp)
  121d14:	18808d26 	beq	r3,r2,121f4c <set_display_scale+0x270>

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  121d18:	00bfffc4 	movi	r2,-1
  121d1c:	e0bffe15 	stw	r2,-8(fp)
  121d20:	00004206 	br	121e2c <set_display_scale+0x150>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
  121d24:	e13ffe17 	ldw	r4,-8(fp)
  121d28:	01400c04 	movi	r5,48
  121d2c:	0123b580 	call	123b58 <__mulsi3>
  121d30:	10801004 	addi	r2,r2,64
  121d34:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
  121d38:	e0bffc17 	ldw	r2,-16(fp)
  121d3c:	10802010 	cmplti	r2,r2,128
  121d40:	1000021e 	bne	r2,zero,121d4c <set_display_scale+0x70>
	        p = PLOT_SIZE_Y - 1;
  121d44:	00801fc4 	movi	r2,127
  121d48:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
  121d4c:	e0bffc17 	ldw	r2,-16(fp)
  121d50:	1000010e 	bge	r2,zero,121d58 <set_display_scale+0x7c>
	        p = 0;
  121d54:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
  121d58:	e03ffd15 	stw	zero,-12(fp)
  121d5c:	00002d06 	br	121e14 <set_display_scale+0x138>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_x[j + Y_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
  121d60:	e0bffe17 	ldw	r2,-8(fp)
  121d64:	10c00044 	addi	r3,r2,1
  121d68:	e0bffd17 	ldw	r2,-12(fp)
  121d6c:	1000010e 	bge	r2,zero,121d74 <set_display_scale+0x98>
  121d70:	108001c4 	addi	r2,r2,7
  121d74:	1005d0fa 	srai	r2,r2,3
  121d78:	1023883a 	mov	r17,r2
  121d7c:	040004b4 	movhi	r16,18
  121d80:	84175c04 	addi	r16,r16,23920
  121d84:	1809883a 	mov	r4,r3
  121d88:	01400f04 	movi	r5,60
  121d8c:	0123b580 	call	123b58 <__mulsi3>
  121d90:	1445883a 	add	r2,r2,r17
  121d94:	8085883a 	add	r2,r16,r2
  121d98:	10800003 	ldbu	r2,0(r2)
  121d9c:	10c03fcc 	andi	r3,r2,255
  121da0:	e13ffd17 	ldw	r4,-12(fp)
  121da4:	00a00034 	movhi	r2,32768
  121da8:	108001c4 	addi	r2,r2,7
  121dac:	2084703a 	and	r2,r4,r2
  121db0:	1000040e 	bge	r2,zero,121dc4 <set_display_scale+0xe8>
  121db4:	10bfffc4 	addi	r2,r2,-1
  121db8:	013ffe04 	movi	r4,-8
  121dbc:	1104b03a 	or	r2,r2,r4
  121dc0:	10800044 	addi	r2,r2,1
  121dc4:	01002004 	movi	r4,128
  121dc8:	2085d83a 	sra	r2,r4,r2
  121dcc:	1884703a 	and	r2,r3,r2
  121dd0:	1000071e 	bne	r2,zero,121df0 <set_display_scale+0x114>
		    /* saved pixel is off */
		    plot_pixel(i, p, PIXEL_WHITE);
  121dd4:	e0fffd17 	ldw	r3,-12(fp)
  121dd8:	e0bffc17 	ldw	r2,-16(fp)
  121ddc:	1809883a 	mov	r4,r3
  121de0:	100b883a 	mov	r5,r2
  121de4:	000d883a 	mov	r6,zero
  121de8:	01219340 	call	121934 <plot_pixel>
  121dec:	00000606 	br	121e08 <set_display_scale+0x12c>
		else
		    /* saved pixel is on */
		    plot_pixel(i, p, PIXEL_BLACK);
  121df0:	e0fffd17 	ldw	r3,-12(fp)
  121df4:	e0bffc17 	ldw	r2,-16(fp)
  121df8:	1809883a 	mov	r4,r3
  121dfc:	100b883a 	mov	r5,r2
  121e00:	01800044 	movi	r6,1
  121e04:	01219340 	call	121934 <plot_pixel>
	        p = PLOT_SIZE_Y - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
  121e08:	e0bffd17 	ldw	r2,-12(fp)
  121e0c:	10800044 	addi	r2,r2,1
  121e10:	e0bffd15 	stw	r2,-12(fp)
  121e14:	e0bffd17 	ldw	r2,-12(fp)
  121e18:	10807810 	cmplti	r2,r2,480
  121e1c:	103fd01e 	bne	r2,zero,121d60 <set_display_scale+0x84>
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  121e20:	e0bffe17 	ldw	r2,-8(fp)
  121e24:	10800044 	addi	r2,r2,1
  121e28:	e0bffe15 	stw	r2,-8(fp)
  121e2c:	e0bffe17 	ldw	r2,-8(fp)
  121e30:	10800090 	cmplti	r2,r2,2
  121e34:	103fbb1e 	bne	r2,zero,121d24 <set_display_scale+0x48>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  121e38:	00bffec4 	movi	r2,-5
  121e3c:	e0bffe15 	stw	r2,-8(fp)
  121e40:	00003f06 	br	121f40 <set_display_scale+0x264>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
  121e44:	e13ffe17 	ldw	r4,-8(fp)
  121e48:	01400c04 	movi	r5,48
  121e4c:	0123b580 	call	123b58 <__mulsi3>
  121e50:	10803c04 	addi	r2,r2,240
  121e54:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
  121e58:	e0bffc17 	ldw	r2,-16(fp)
  121e5c:	10807810 	cmplti	r2,r2,480
  121e60:	1000021e 	bne	r2,zero,121e6c <set_display_scale+0x190>
	        p = PLOT_SIZE_X - 1;
  121e64:	008077c4 	movi	r2,479
  121e68:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
  121e6c:	e0bffc17 	ldw	r2,-16(fp)
  121e70:	1000010e 	bge	r2,zero,121e78 <set_display_scale+0x19c>
	        p = 0;
  121e74:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
  121e78:	e03ffd15 	stw	zero,-12(fp)
  121e7c:	00002a06 	br	121f28 <set_display_scale+0x24c>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_y[j + X_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
  121e80:	e0bffe17 	ldw	r2,-8(fp)
  121e84:	11000144 	addi	r4,r2,5
  121e88:	e0bffd17 	ldw	r2,-12(fp)
  121e8c:	1000010e 	bge	r2,zero,121e94 <set_display_scale+0x1b8>
  121e90:	108001c4 	addi	r2,r2,7
  121e94:	1005d0fa 	srai	r2,r2,3
  121e98:	00c004b4 	movhi	r3,18
  121e9c:	18d73004 	addi	r3,r3,23744
  121ea0:	2008913a 	slli	r4,r4,4
  121ea4:	2085883a 	add	r2,r4,r2
  121ea8:	1885883a 	add	r2,r3,r2
  121eac:	10800003 	ldbu	r2,0(r2)
  121eb0:	10c03fcc 	andi	r3,r2,255
  121eb4:	e13ffd17 	ldw	r4,-12(fp)
  121eb8:	00a00034 	movhi	r2,32768
  121ebc:	108001c4 	addi	r2,r2,7
  121ec0:	2084703a 	and	r2,r4,r2
  121ec4:	1000040e 	bge	r2,zero,121ed8 <set_display_scale+0x1fc>
  121ec8:	10bfffc4 	addi	r2,r2,-1
  121ecc:	013ffe04 	movi	r4,-8
  121ed0:	1104b03a 	or	r2,r2,r4
  121ed4:	10800044 	addi	r2,r2,1
  121ed8:	01002004 	movi	r4,128
  121edc:	2085d83a 	sra	r2,r4,r2
  121ee0:	1884703a 	and	r2,r3,r2
  121ee4:	1000071e 	bne	r2,zero,121f04 <set_display_scale+0x228>
		    /* saved pixel is off */
		    plot_pixel(p, i, PIXEL_WHITE);
  121ee8:	e0fffc17 	ldw	r3,-16(fp)
  121eec:	e0bffd17 	ldw	r2,-12(fp)
  121ef0:	1809883a 	mov	r4,r3
  121ef4:	100b883a 	mov	r5,r2
  121ef8:	000d883a 	mov	r6,zero
  121efc:	01219340 	call	121934 <plot_pixel>
  121f00:	00000606 	br	121f1c <set_display_scale+0x240>
		else
		    /* saved pixel is on */
		    plot_pixel(p, i, PIXEL_BLACK);
  121f04:	e0fffc17 	ldw	r3,-16(fp)
  121f08:	e0bffd17 	ldw	r2,-12(fp)
  121f0c:	1809883a 	mov	r4,r3
  121f10:	100b883a 	mov	r5,r2
  121f14:	01800044 	movi	r6,1
  121f18:	01219340 	call	121934 <plot_pixel>
	        p = PLOT_SIZE_X - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
  121f1c:	e0bffd17 	ldw	r2,-12(fp)
  121f20:	10800044 	addi	r2,r2,1
  121f24:	e0bffd15 	stw	r2,-12(fp)
  121f28:	e0bffd17 	ldw	r2,-12(fp)
  121f2c:	10802010 	cmplti	r2,r2,128
  121f30:	103fd31e 	bne	r2,zero,121e80 <set_display_scale+0x1a4>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  121f34:	e0bffe17 	ldw	r2,-8(fp)
  121f38:	10800044 	addi	r2,r2,1
  121f3c:	e0bffe15 	stw	r2,-8(fp)
  121f40:	e0bffe17 	ldw	r2,-8(fp)
  121f44:	10800190 	cmplti	r2,r2,6
  121f48:	103fbe1e 	bne	r2,zero,121e44 <set_display_scale+0x168>
	}
    }


    /* now handle the scale type appropriately */
    switch (scale)  {
  121f4c:	e0bfff17 	ldw	r2,-4(fp)
  121f50:	10005526 	beq	r2,zero,1220a8 <set_display_scale+0x3cc>
  121f54:	108000e8 	cmpgeui	r2,r2,3
  121f58:	1000541e 	bne	r2,zero,1220ac <set_display_scale+0x3d0>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
  121f5c:	00bfffc4 	movi	r2,-1
  121f60:	e0bffd15 	stw	r2,-12(fp)
  121f64:	00002306 	br	121ff4 <set_display_scale+0x318>

				/* get y position of the line */
				p = X_AXIS_POS + i * Y_TICK_SIZE;
  121f68:	e13ffd17 	ldw	r4,-12(fp)
  121f6c:	01400c04 	movi	r5,48
  121f70:	0123b580 	call	123b58 <__mulsi3>
  121f74:	10801004 	addi	r2,r2,64
  121f78:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_Y)
  121f7c:	e0bffc17 	ldw	r2,-16(fp)
  121f80:	10802010 	cmplti	r2,r2,128
  121f84:	1000021e 	bne	r2,zero,121f90 <set_display_scale+0x2b4>
				    p = PLOT_SIZE_Y - 1;
  121f88:	00801fc4 	movi	r2,127
  121f8c:	e0bffc15 	stw	r2,-16(fp)
				if (p < 0)
  121f90:	e0bffc17 	ldw	r2,-16(fp)
  121f94:	1000010e 	bge	r2,zero,121f9c <set_display_scale+0x2c0>
				    p = 0;
  121f98:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
  121f9c:	e0bfff17 	ldw	r2,-4(fp)
  121fa0:	10800098 	cmpnei	r2,r2,2
  121fa4:	1000051e 	bne	r2,zero,121fbc <set_display_scale+0x2e0>
				    /* drawing a grid line */
			            plot_hline(X_GRID_START, p, (X_GRID_END - X_GRID_START));
  121fa8:	0009883a 	mov	r4,zero
  121fac:	e17ffc17 	ldw	r5,-16(fp)
  121fb0:	018077c4 	movi	r6,479
  121fb4:	01202140 	call	120214 <plot_hline>
  121fb8:	00000b06 	br	121fe8 <set_display_scale+0x30c>
				else if (i == 0)
  121fbc:	e0bffd17 	ldw	r2,-12(fp)
  121fc0:	1000051e 	bne	r2,zero,121fd8 <set_display_scale+0x2fc>
				    /* drawing the x axis */
			            plot_hline(X_AXIS_START, p, (X_AXIS_END - X_AXIS_START));
  121fc4:	0009883a 	mov	r4,zero
  121fc8:	e17ffc17 	ldw	r5,-16(fp)
  121fcc:	018077c4 	movi	r6,479
  121fd0:	01202140 	call	120214 <plot_hline>
  121fd4:	00000406 	br	121fe8 <set_display_scale+0x30c>
				else
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
  121fd8:	01003b84 	movi	r4,238
  121fdc:	e17ffc17 	ldw	r5,-16(fp)
  121fe0:	01800144 	movi	r6,5
  121fe4:	01202140 	call	120214 <plot_hline>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
  121fe8:	e0bffd17 	ldw	r2,-12(fp)
  121fec:	10800044 	addi	r2,r2,1
  121ff0:	e0bffd15 	stw	r2,-12(fp)
  121ff4:	e0bffd17 	ldw	r2,-12(fp)
  121ff8:	10800090 	cmplti	r2,r2,2
  121ffc:	103fda1e 	bne	r2,zero,121f68 <set_display_scale+0x28c>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
  122000:	00bffec4 	movi	r2,-5
  122004:	e0bffd15 	stw	r2,-12(fp)
  122008:	00002306 	br	122098 <set_display_scale+0x3bc>

				/* get x position of the line */
				p = Y_AXIS_POS + i * X_TICK_SIZE;
  12200c:	e13ffd17 	ldw	r4,-12(fp)
  122010:	01400c04 	movi	r5,48
  122014:	0123b580 	call	123b58 <__mulsi3>
  122018:	10803c04 	addi	r2,r2,240
  12201c:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_X)
  122020:	e0bffc17 	ldw	r2,-16(fp)
  122024:	10807810 	cmplti	r2,r2,480
  122028:	1000021e 	bne	r2,zero,122034 <set_display_scale+0x358>
				    p = PLOT_SIZE_X - 1;
  12202c:	008077c4 	movi	r2,479
  122030:	e0bffc15 	stw	r2,-16(fp)
			        if (p < 0)
  122034:	e0bffc17 	ldw	r2,-16(fp)
  122038:	1000010e 	bge	r2,zero,122040 <set_display_scale+0x364>
				    p = 0;
  12203c:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
  122040:	e0bfff17 	ldw	r2,-4(fp)
  122044:	10800098 	cmpnei	r2,r2,2
  122048:	1000051e 	bne	r2,zero,122060 <set_display_scale+0x384>
				    /* drawing a grid line */
			            plot_vline(p, Y_GRID_START, (Y_GRID_END - Y_GRID_START));
  12204c:	e13ffc17 	ldw	r4,-16(fp)
  122050:	000b883a 	mov	r5,zero
  122054:	01801fc4 	movi	r6,127
  122058:	01202c00 	call	1202c0 <plot_vline>
  12205c:	00000b06 	br	12208c <set_display_scale+0x3b0>
				else if (i == 0)
  122060:	e0bffd17 	ldw	r2,-12(fp)
  122064:	1000051e 	bne	r2,zero,12207c <set_display_scale+0x3a0>
				    /* drawing the y axis */
			            plot_vline(p, Y_AXIS_START, (Y_AXIS_END - Y_AXIS_START));
  122068:	e13ffc17 	ldw	r4,-16(fp)
  12206c:	000b883a 	mov	r5,zero
  122070:	01801fc4 	movi	r6,127
  122074:	01202c00 	call	1202c0 <plot_vline>
  122078:	00000406 	br	12208c <set_display_scale+0x3b0>
				else
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
  12207c:	e13ffc17 	ldw	r4,-16(fp)
  122080:	01400f84 	movi	r5,62
  122084:	01800144 	movi	r6,5
  122088:	01202c00 	call	1202c0 <plot_vline>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
  12208c:	e0bffd17 	ldw	r2,-12(fp)
  122090:	10800044 	addi	r2,r2,1
  122094:	e0bffd15 	stw	r2,-12(fp)
  122098:	e0bffd17 	ldw	r2,-12(fp)
  12209c:	10800190 	cmplti	r2,r2,6
  1220a0:	103fda1e 	bne	r2,zero,12200c <set_display_scale+0x330>
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
			    }

			    /* done with the axes */
			    break;
  1220a4:	00000106 	br	1220ac <set_display_scale+0x3d0>

        case SCALE_NONE:    /* there is no scale */
			    /* already restored plot so nothing to do */
			    break;
  1220a8:	0001883a 	nop

    }


    /* now remember the new (now current) scale type */
    cur_scale = scale;
  1220ac:	e0bfff17 	ldw	r2,-4(fp)
  1220b0:	d0a01115 	stw	r2,-32700(gp)


    /* scale is taken care of, return */
    return;
  1220b4:	0001883a 	nop

}
  1220b8:	e037883a 	mov	sp,fp
  1220bc:	dfc00317 	ldw	ra,12(sp)
  1220c0:	df000217 	ldw	fp,8(sp)
  1220c4:	dc400117 	ldw	r17,4(sp)
  1220c8:	dc000017 	ldw	r16,0(sp)
  1220cc:	dec00404 	addi	sp,sp,16
  1220d0:	f800283a 	ret

001220d4 <clear_saved_areas>:
   Last Modified:    May 9, 2006

*/

void  clear_saved_areas()
{
  1220d4:	defffb04 	addi	sp,sp,-20
  1220d8:	dfc00415 	stw	ra,16(sp)
  1220dc:	df000315 	stw	fp,12(sp)
  1220e0:	dc000215 	stw	r16,8(sp)
  1220e4:	df000204 	addi	fp,sp,8
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
  1220e8:	e03fff15 	stw	zero,-4(fp)
  1220ec:	00001506 	br	122144 <clear_saved_areas+0x70>
        for (i = 0; i < (SIZE_X / 8); i++)
  1220f0:	e03ffe15 	stw	zero,-8(fp)
  1220f4:	00000d06 	br	12212c <clear_saved_areas+0x58>
            saved_axis_x[j][i] = 0;
  1220f8:	040004b4 	movhi	r16,18
  1220fc:	84175c04 	addi	r16,r16,23920
  122100:	e0bfff17 	ldw	r2,-4(fp)
  122104:	1009883a 	mov	r4,r2
  122108:	01400f04 	movi	r5,60
  12210c:	0123b580 	call	123b58 <__mulsi3>
  122110:	e0fffe17 	ldw	r3,-8(fp)
  122114:	10c5883a 	add	r2,r2,r3
  122118:	8085883a 	add	r2,r16,r2
  12211c:	10000005 	stb	zero,0(r2)



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
  122120:	e0bffe17 	ldw	r2,-8(fp)
  122124:	10800044 	addi	r2,r2,1
  122128:	e0bffe15 	stw	r2,-8(fp)
  12212c:	e0bffe17 	ldw	r2,-8(fp)
  122130:	10800f10 	cmplti	r2,r2,60
  122134:	103ff01e 	bne	r2,zero,1220f8 <clear_saved_areas+0x24>
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
  122138:	e0bfff17 	ldw	r2,-4(fp)
  12213c:	10800044 	addi	r2,r2,1
  122140:	e0bfff15 	stw	r2,-4(fp)
  122144:	e0bfff17 	ldw	r2,-4(fp)
  122148:	108000d0 	cmplti	r2,r2,3
  12214c:	103fe81e 	bne	r2,zero,1220f0 <clear_saved_areas+0x1c>
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
  122150:	e03fff15 	stw	zero,-4(fp)
  122154:	00001306 	br	1221a4 <clear_saved_areas+0xd0>
        for (i = 0; i < (SIZE_Y / 8); i++)
  122158:	e03ffe15 	stw	zero,-8(fp)
  12215c:	00000b06 	br	12218c <clear_saved_areas+0xb8>
            saved_axis_y[j][i] = 0;
  122160:	00c004b4 	movhi	r3,18
  122164:	18d73004 	addi	r3,r3,23744
  122168:	e0bfff17 	ldw	r2,-4(fp)
  12216c:	1008913a 	slli	r4,r2,4
  122170:	e0bffe17 	ldw	r2,-8(fp)
  122174:	2085883a 	add	r2,r4,r2
  122178:	1885883a 	add	r2,r3,r2
  12217c:	10000005 	stb	zero,0(r2)
    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
  122180:	e0bffe17 	ldw	r2,-8(fp)
  122184:	10800044 	addi	r2,r2,1
  122188:	e0bffe15 	stw	r2,-8(fp)
  12218c:	e0bffe17 	ldw	r2,-8(fp)
  122190:	10800410 	cmplti	r2,r2,16
  122194:	103ff21e 	bne	r2,zero,122160 <clear_saved_areas+0x8c>

    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
  122198:	e0bfff17 	ldw	r2,-4(fp)
  12219c:	10800044 	addi	r2,r2,1
  1221a0:	e0bfff15 	stw	r2,-4(fp)
  1221a4:	e0bfff17 	ldw	r2,-4(fp)
  1221a8:	108002d0 	cmplti	r2,r2,11
  1221ac:	103fea1e 	bne	r2,zero,122158 <clear_saved_areas+0x84>
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
  1221b0:	e03ffe15 	stw	zero,-8(fp)
  1221b4:	00001506 	br	12220c <clear_saved_areas+0x138>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
  1221b8:	e03fff15 	stw	zero,-4(fp)
  1221bc:	00000d06 	br	1221f4 <clear_saved_areas+0x120>
	    saved_menu[i][j] = 0;
  1221c0:	040004b4 	movhi	r16,18
  1221c4:	84168804 	addi	r16,r16,23072
  1221c8:	e0bffe17 	ldw	r2,-8(fp)
  1221cc:	1009883a 	mov	r4,r2
  1221d0:	01400304 	movi	r5,12
  1221d4:	0123b580 	call	123b58 <__mulsi3>
  1221d8:	e0ffff17 	ldw	r3,-4(fp)
  1221dc:	10c5883a 	add	r2,r2,r3
  1221e0:	8085883a 	add	r2,r16,r2
  1221e4:	10000005 	stb	zero,0(r2)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
  1221e8:	e0bfff17 	ldw	r2,-4(fp)
  1221ec:	10800044 	addi	r2,r2,1
  1221f0:	e0bfff15 	stw	r2,-4(fp)
  1221f4:	e0bfff17 	ldw	r2,-4(fp)
  1221f8:	10800310 	cmplti	r2,r2,12
  1221fc:	103ff01e 	bne	r2,zero,1221c0 <clear_saved_areas+0xec>
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
  122200:	e0bffe17 	ldw	r2,-8(fp)
  122204:	10800044 	addi	r2,r2,1
  122208:	e0bffe15 	stw	r2,-8(fp)
  12220c:	e0bffe17 	ldw	r2,-8(fp)
  122210:	10800e10 	cmplti	r2,r2,56
  122214:	103fe81e 	bne	r2,zero,1221b8 <clear_saved_areas+0xe4>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
  122218:	e03ffe15 	stw	zero,-8(fp)
  12221c:	00001506 	br	122274 <clear_saved_areas+0x1a0>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
  122220:	e03fff15 	stw	zero,-4(fp)
  122224:	00000d06 	br	12225c <clear_saved_areas+0x188>
	    saved_area[i][j] = 0;
  122228:	040004b4 	movhi	r16,18
  12222c:	84178904 	addi	r16,r16,24100
  122230:	e0bffe17 	ldw	r2,-8(fp)
  122234:	1009883a 	mov	r4,r2
  122238:	014003c4 	movi	r5,15
  12223c:	0123b580 	call	123b58 <__mulsi3>
  122240:	e0ffff17 	ldw	r3,-4(fp)
  122244:	10c5883a 	add	r2,r2,r3
  122248:	8085883a 	add	r2,r16,r2
  12224c:	10000005 	stb	zero,0(r2)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
  122250:	e0bfff17 	ldw	r2,-4(fp)
  122254:	10800044 	addi	r2,r2,1
  122258:	e0bfff15 	stw	r2,-4(fp)
  12225c:	e0bfff17 	ldw	r2,-4(fp)
  122260:	108003d0 	cmplti	r2,r2,15
  122264:	103ff01e 	bne	r2,zero,122228 <clear_saved_areas+0x154>
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
  122268:	e0bffe17 	ldw	r2,-8(fp)
  12226c:	10800044 	addi	r2,r2,1
  122270:	e0bffe15 	stw	r2,-8(fp)
  122274:	e0bffe17 	ldw	r2,-8(fp)
  122278:	10800410 	cmplti	r2,r2,16
  12227c:	103fe81e 	bne	r2,zero,122220 <clear_saved_areas+0x14c>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
	    saved_area[i][j] = 0;


    /* done clearing the saved areas - return */
    return;
  122280:	0001883a 	nop

}
  122284:	e037883a 	mov	sp,fp
  122288:	dfc00217 	ldw	ra,8(sp)
  12228c:	df000117 	ldw	fp,4(sp)
  122290:	dc000017 	ldw	r16,0(sp)
  122294:	dec00304 	addi	sp,sp,12
  122298:	f800283a 	ret

0012229c <restore_menu_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_menu_trace()
{
  12229c:	defff904 	addi	sp,sp,-28
  1222a0:	dfc00615 	stw	ra,24(sp)
  1222a4:	df000515 	stw	fp,20(sp)
  1222a8:	dc000415 	stw	r16,16(sp)
  1222ac:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
  1222b0:	e03fff15 	stw	zero,-4(fp)
  1222b4:	00003406 	br	122388 <restore_menu_trace+0xec>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
  1222b8:	00802004 	movi	r2,128
  1222bc:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
  1222c0:	e03ffd15 	stw	zero,-12(fp)

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
  1222c4:	00805e84 	movi	r2,378
  1222c8:	e0bffe15 	stw	r2,-8(fp)
  1222cc:	00002806 	br	122370 <restore_menu_trace+0xd4>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_menu[y - MENU_UL_Y][bit_offset] & bit_position) == 0)
  1222d0:	040004b4 	movhi	r16,18
  1222d4:	84168804 	addi	r16,r16,23072
  1222d8:	e0bfff17 	ldw	r2,-4(fp)
  1222dc:	1009883a 	mov	r4,r2
  1222e0:	01400304 	movi	r5,12
  1222e4:	0123b580 	call	123b58 <__mulsi3>
  1222e8:	e0fffd17 	ldw	r3,-12(fp)
  1222ec:	10c5883a 	add	r2,r2,r3
  1222f0:	8085883a 	add	r2,r16,r2
  1222f4:	10800003 	ldbu	r2,0(r2)
  1222f8:	10c03fcc 	andi	r3,r2,255
  1222fc:	e0bffc17 	ldw	r2,-16(fp)
  122300:	1884703a 	and	r2,r3,r2
  122304:	1000071e 	bne	r2,zero,122324 <restore_menu_trace+0x88>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
  122308:	e0fffe17 	ldw	r3,-8(fp)
  12230c:	e0bfff17 	ldw	r2,-4(fp)
  122310:	1809883a 	mov	r4,r3
  122314:	100b883a 	mov	r5,r2
  122318:	000d883a 	mov	r6,zero
  12231c:	01219340 	call	121934 <plot_pixel>
  122320:	00000606 	br	12233c <restore_menu_trace+0xa0>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
  122324:	e0fffe17 	ldw	r3,-8(fp)
  122328:	e0bfff17 	ldw	r2,-4(fp)
  12232c:	1809883a 	mov	r4,r3
  122330:	100b883a 	mov	r5,r2
  122334:	01800044 	movi	r6,1
  122338:	01219340 	call	121934 <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
  12233c:	e0bffc17 	ldw	r2,-16(fp)
  122340:	1005d07a 	srai	r2,r2,1
  122344:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
  122348:	e0bffc17 	ldw	r2,-16(fp)
  12234c:	1000051e 	bne	r2,zero,122364 <restore_menu_trace+0xc8>
	        /* now on high bit of next byte */
		bit_position = 0x80;
  122350:	00802004 	movi	r2,128
  122354:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
  122358:	e0bffd17 	ldw	r2,-12(fp)
  12235c:	10800044 	addi	r2,r2,1
  122360:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
  122364:	e0bffe17 	ldw	r2,-8(fp)
  122368:	10800044 	addi	r2,r2,1
  12236c:	e0bffe15 	stw	r2,-8(fp)
  122370:	e0bffe17 	ldw	r2,-8(fp)
  122374:	10807690 	cmplti	r2,r2,474
  122378:	103fd51e 	bne	r2,zero,1222d0 <restore_menu_trace+0x34>
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
  12237c:	e0bfff17 	ldw	r2,-4(fp)
  122380:	10800044 	addi	r2,r2,1
  122384:	e0bfff15 	stw	r2,-4(fp)
  122388:	e0bfff17 	ldw	r2,-4(fp)
  12238c:	10800e10 	cmplti	r2,r2,56
  122390:	103fc91e 	bne	r2,zero,1222b8 <restore_menu_trace+0x1c>
        }
    }


    /* restored menu area - return */
    return;
  122394:	0001883a 	nop

}
  122398:	e037883a 	mov	sp,fp
  12239c:	dfc00217 	ldw	ra,8(sp)
  1223a0:	df000117 	ldw	fp,4(sp)
  1223a4:	dc000017 	ldw	r16,0(sp)
  1223a8:	dec00304 	addi	sp,sp,12
  1223ac:	f800283a 	ret

001223b0 <set_save_area>:
   Last Modified:    Mar. 8, 1994

*/

void  set_save_area(int pos_x, int pos_y, int size_x, int size_y)
{
  1223b0:	defff704 	addi	sp,sp,-36
  1223b4:	dfc00815 	stw	ra,32(sp)
  1223b8:	df000715 	stw	fp,28(sp)
  1223bc:	dc000615 	stw	r16,24(sp)
  1223c0:	df000604 	addi	fp,sp,24
  1223c4:	e13ffc15 	stw	r4,-16(fp)
  1223c8:	e17ffd15 	stw	r5,-12(fp)
  1223cc:	e1bffe15 	stw	r6,-8(fp)
  1223d0:	e1ffff15 	stw	r7,-4(fp)
    int  y;



    /* just setup all the locally global variables from the passed values */
    saved_pos_x = pos_x;
  1223d4:	e0bffc17 	ldw	r2,-16(fp)
  1223d8:	d0a01715 	stw	r2,-32676(gp)
    saved_pos_y = pos_y;
  1223dc:	e0bffd17 	ldw	r2,-12(fp)
  1223e0:	d0a01415 	stw	r2,-32688(gp)
    saved_end_x = pos_x + size_x;
  1223e4:	e0fffc17 	ldw	r3,-16(fp)
  1223e8:	e0bffe17 	ldw	r2,-8(fp)
  1223ec:	1885883a 	add	r2,r3,r2
  1223f0:	d0a01615 	stw	r2,-32680(gp)
    saved_end_y = pos_y + size_y;
  1223f4:	e0fffd17 	ldw	r3,-12(fp)
  1223f8:	e0bfff17 	ldw	r2,-4(fp)
  1223fc:	1885883a 	add	r2,r3,r2
  122400:	d0a01315 	stw	r2,-32692(gp)


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
  122404:	e03ffb15 	stw	zero,-20(fp)
  122408:	00001506 	br	122460 <set_save_area+0xb0>
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
  12240c:	e03ffa15 	stw	zero,-24(fp)
  122410:	00000d06 	br	122448 <set_save_area+0x98>
	    saved_area[y][x] = 0;
  122414:	040004b4 	movhi	r16,18
  122418:	84178904 	addi	r16,r16,24100
  12241c:	e0bffb17 	ldw	r2,-20(fp)
  122420:	1009883a 	mov	r4,r2
  122424:	014003c4 	movi	r5,15
  122428:	0123b580 	call	123b58 <__mulsi3>
  12242c:	e0fffa17 	ldw	r3,-24(fp)
  122430:	10c5883a 	add	r2,r2,r3
  122434:	8085883a 	add	r2,r16,r2
  122438:	10000005 	stb	zero,0(r2)
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
  12243c:	e0bffa17 	ldw	r2,-24(fp)
  122440:	10800044 	addi	r2,r2,1
  122444:	e0bffa15 	stw	r2,-24(fp)
  122448:	e0bffa17 	ldw	r2,-24(fp)
  12244c:	108003d0 	cmplti	r2,r2,15
  122450:	103ff01e 	bne	r2,zero,122414 <set_save_area+0x64>
    saved_end_x = pos_x + size_x;
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
  122454:	e0bffb17 	ldw	r2,-20(fp)
  122458:	10800044 	addi	r2,r2,1
  12245c:	e0bffb15 	stw	r2,-20(fp)
  122460:	e0bffb17 	ldw	r2,-20(fp)
  122464:	10800410 	cmplti	r2,r2,16
  122468:	103fe81e 	bne	r2,zero,12240c <set_save_area+0x5c>
        }
    }


    /* setup the saved area - return */
    return;
  12246c:	0001883a 	nop

}
  122470:	e037883a 	mov	sp,fp
  122474:	dfc00217 	ldw	ra,8(sp)
  122478:	df000117 	ldw	fp,4(sp)
  12247c:	dc000017 	ldw	r16,0(sp)
  122480:	dec00304 	addi	sp,sp,12
  122484:	f800283a 	ret

00122488 <restore_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_trace()
{
  122488:	defff904 	addi	sp,sp,-28
  12248c:	dfc00615 	stw	ra,24(sp)
  122490:	df000515 	stw	fp,20(sp)
  122494:	dc000415 	stw	r16,16(sp)
  122498:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
  12249c:	d0a01417 	ldw	r2,-32688(gp)
  1224a0:	e0bfff15 	stw	r2,-4(fp)
  1224a4:	00003606 	br	122580 <restore_trace+0xf8>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
  1224a8:	00802004 	movi	r2,128
  1224ac:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
  1224b0:	e03ffd15 	stw	zero,-12(fp)

        for (x = saved_pos_x; x < saved_end_x; x++)  {
  1224b4:	d0a01717 	ldw	r2,-32676(gp)
  1224b8:	e0bffe15 	stw	r2,-8(fp)
  1224bc:	00002a06 	br	122568 <restore_trace+0xe0>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_area[y - saved_pos_y][bit_offset] & bit_position) == 0)
  1224c0:	d0a01417 	ldw	r2,-32688(gp)
  1224c4:	e0ffff17 	ldw	r3,-4(fp)
  1224c8:	1885c83a 	sub	r2,r3,r2
  1224cc:	040004b4 	movhi	r16,18
  1224d0:	84178904 	addi	r16,r16,24100
  1224d4:	1009883a 	mov	r4,r2
  1224d8:	014003c4 	movi	r5,15
  1224dc:	0123b580 	call	123b58 <__mulsi3>
  1224e0:	e0fffd17 	ldw	r3,-12(fp)
  1224e4:	10c5883a 	add	r2,r2,r3
  1224e8:	8085883a 	add	r2,r16,r2
  1224ec:	10800003 	ldbu	r2,0(r2)
  1224f0:	10c03fcc 	andi	r3,r2,255
  1224f4:	e0bffc17 	ldw	r2,-16(fp)
  1224f8:	1884703a 	and	r2,r3,r2
  1224fc:	1000071e 	bne	r2,zero,12251c <restore_trace+0x94>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
  122500:	e0fffe17 	ldw	r3,-8(fp)
  122504:	e0bfff17 	ldw	r2,-4(fp)
  122508:	1809883a 	mov	r4,r3
  12250c:	100b883a 	mov	r5,r2
  122510:	000d883a 	mov	r6,zero
  122514:	01219340 	call	121934 <plot_pixel>
  122518:	00000606 	br	122534 <restore_trace+0xac>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
  12251c:	e0fffe17 	ldw	r3,-8(fp)
  122520:	e0bfff17 	ldw	r2,-4(fp)
  122524:	1809883a 	mov	r4,r3
  122528:	100b883a 	mov	r5,r2
  12252c:	01800044 	movi	r6,1
  122530:	01219340 	call	121934 <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
  122534:	e0bffc17 	ldw	r2,-16(fp)
  122538:	1005d07a 	srai	r2,r2,1
  12253c:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
  122540:	e0bffc17 	ldw	r2,-16(fp)
  122544:	1000051e 	bne	r2,zero,12255c <restore_trace+0xd4>
	        /* now on high bit of next byte */
		bit_position = 0x80;
  122548:	00802004 	movi	r2,128
  12254c:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
  122550:	e0bffd17 	ldw	r2,-12(fp)
  122554:	10800044 	addi	r2,r2,1
  122558:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = saved_pos_x; x < saved_end_x; x++)  {
  12255c:	e0bffe17 	ldw	r2,-8(fp)
  122560:	10800044 	addi	r2,r2,1
  122564:	e0bffe15 	stw	r2,-8(fp)
  122568:	d0a01617 	ldw	r2,-32680(gp)
  12256c:	e0fffe17 	ldw	r3,-8(fp)
  122570:	18bfd316 	blt	r3,r2,1224c0 <restore_trace+0x38>
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
  122574:	e0bfff17 	ldw	r2,-4(fp)
  122578:	10800044 	addi	r2,r2,1
  12257c:	e0bfff15 	stw	r2,-4(fp)
  122580:	d0a01317 	ldw	r2,-32692(gp)
  122584:	e0ffff17 	ldw	r3,-4(fp)
  122588:	18bfc716 	blt	r3,r2,1224a8 <restore_trace+0x20>
        }
    }


    /* restored the saved area - return */
    return;
  12258c:	0001883a 	nop

}
  122590:	e037883a 	mov	sp,fp
  122594:	dfc00217 	ldw	ra,8(sp)
  122598:	df000117 	ldw	fp,4(sp)
  12259c:	dc000017 	ldw	r16,0(sp)
  1225a0:	dec00304 	addi	sp,sp,12
  1225a4:	f800283a 	ret

001225a8 <do_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  do_trace()
{
  1225a8:	defffe04 	addi	sp,sp,-8
  1225ac:	dfc00115 	stw	ra,4(sp)
  1225b0:	df000015 	stw	fp,0(sp)
  1225b4:	d839883a 	mov	fp,sp



    /* start up the trace */
    /* indicate whether using automatic triggering or not */
    start_sample(get_trigger_mode() == AUTO_TRIGGER);
  1225b8:	0120c3c0 	call	120c3c <get_trigger_mode>
  1225bc:	10800060 	cmpeqi	r2,r2,1
  1225c0:	10803fcc 	andi	r2,r2,255
  1225c4:	1009883a 	mov	r4,r2
  1225c8:	01219d00 	call	1219d0 <start_sample>

    /* now not ready for another trace (currently doing one) */
    trace_status = FALSE;
  1225cc:	d0201215 	stw	zero,-32696(gp)

    /* and are currently sampling data */
    sampling = TRUE;
  1225d0:	00800044 	movi	r2,1
  1225d4:	d0a01815 	stw	r2,-32672(gp)


    /* trace is going, return */
    return;
  1225d8:	0001883a 	nop

}
  1225dc:	e037883a 	mov	sp,fp
  1225e0:	dfc00117 	ldw	ra,4(sp)
  1225e4:	df000017 	ldw	fp,0(sp)
  1225e8:	dec00204 	addi	sp,sp,8
  1225ec:	f800283a 	ret

001225f0 <plot_trace>:
   Last Modified:    May 9, 2006

*/

void  plot_trace(unsigned char *sample)
{
  1225f0:	defff304 	addi	sp,sp,-52
  1225f4:	dfc00c15 	stw	ra,48(sp)
  1225f8:	df000b15 	stw	fp,44(sp)
  1225fc:	dcc00a15 	stw	r19,40(sp)
  122600:	dc800915 	stw	r18,36(sp)
  122604:	dc400815 	stw	r17,32(sp)
  122608:	dc000715 	stw	r16,28(sp)
  12260c:	df000704 	addi	fp,sp,28
  122610:	e13fff15 	stw	r4,-4(fp)
    /* variables */
    int  x = 0;				/* current x position to plot */
  122614:	e03ff915 	stw	zero,-28(fp)
    int  x_pos = (PLOT_SIZE_X / 2);	/* "fine" x position for multiple point plotting */
  122618:	00803c04 	movi	r2,240
  12261c:	e0bffa15 	stw	r2,-24(fp)
    int  j;



    /* first, clear the display to get rid of old plots */
    clear_display();
  122620:	01219140 	call	121914 <clear_display>

    /* clear the saved areas too */
    clear_saved_areas();
  122624:	01220d40 	call	1220d4 <clear_saved_areas>

    /* re-display the menu (if it was on) */
    refresh_menu();
  122628:	01207980 	call	120798 <refresh_menu>


    /* plot the sample */
    for (i = 0; i < sample_size; i++)  {
  12262c:	e03ffc15 	stw	zero,-16(fp)
  122630:	00010b06 	br	122a60 <plot_trace+0x470>

        /* determine y position of point (note: screen coordinates invert) */
	y = (PLOT_SIZE_Y - 1) - ((sample[i] * (PLOT_SIZE_Y - 1)) / 255);
  122634:	e0bffc17 	ldw	r2,-16(fp)
  122638:	e0ffff17 	ldw	r3,-4(fp)
  12263c:	1885883a 	add	r2,r3,r2
  122640:	10800003 	ldbu	r2,0(r2)
  122644:	10803fcc 	andi	r2,r2,255
  122648:	1009883a 	mov	r4,r2
  12264c:	01401fc4 	movi	r5,127
  122650:	0123b580 	call	123b58 <__mulsi3>
  122654:	1009883a 	mov	r4,r2
  122658:	01403fc4 	movi	r5,255
  12265c:	0123a9c0 	call	123a9c <__divsi3>
  122660:	00c01fc4 	movi	r3,127
  122664:	1885c83a 	sub	r2,r3,r2
  122668:	e0bffe15 	stw	r2,-8(fp)

        /* plot this point */
	plot_pixel(x, y, PIXEL_BLACK);
  12266c:	e0fff917 	ldw	r3,-28(fp)
  122670:	e0bffe17 	ldw	r2,-8(fp)
  122674:	1809883a 	mov	r4,r3
  122678:	100b883a 	mov	r5,r2
  12267c:	01800044 	movi	r6,1
  122680:	01219340 	call	121934 <plot_pixel>


	/* check if the point is in a save area */

	/* check if in the menu area */
	if ((x >= MENU_UL_X) && (x < (MENU_UL_X + MENU_SIZE_X)) &&
  122684:	e0bff917 	ldw	r2,-28(fp)
  122688:	10805e90 	cmplti	r2,r2,378
  12268c:	10002f1e 	bne	r2,zero,12274c <plot_trace+0x15c>
  122690:	e0bff917 	ldw	r2,-28(fp)
  122694:	10807688 	cmpgei	r2,r2,474
  122698:	10002c1e 	bne	r2,zero,12274c <plot_trace+0x15c>
  12269c:	e0bffe17 	ldw	r2,-8(fp)
  1226a0:	10002a16 	blt	r2,zero,12274c <plot_trace+0x15c>
	    (y >= MENU_UL_Y) && (y < (MENU_UL_Y + MENU_SIZE_Y)))
  1226a4:	e0bffe17 	ldw	r2,-8(fp)
  1226a8:	10800e08 	cmpgei	r2,r2,56
  1226ac:	1000271e 	bne	r2,zero,12274c <plot_trace+0x15c>
	    /* point is in the menu area - save it */
	    saved_menu[y - MENU_UL_Y][(x - MENU_UL_X)/8] |= (0x80 >> ((x - MENU_UL_X) % 8));
  1226b0:	e0bff917 	ldw	r2,-28(fp)
  1226b4:	10bfa184 	addi	r2,r2,-378
  1226b8:	1000010e 	bge	r2,zero,1226c0 <plot_trace+0xd0>
  1226bc:	108001c4 	addi	r2,r2,7
  1226c0:	1005d0fa 	srai	r2,r2,3
  1226c4:	1021883a 	mov	r16,r2
  1226c8:	044004b4 	movhi	r17,18
  1226cc:	8c568804 	addi	r17,r17,23072
  1226d0:	e0bffe17 	ldw	r2,-8(fp)
  1226d4:	1009883a 	mov	r4,r2
  1226d8:	01400304 	movi	r5,12
  1226dc:	0123b580 	call	123b58 <__mulsi3>
  1226e0:	1405883a 	add	r2,r2,r16
  1226e4:	8885883a 	add	r2,r17,r2
  1226e8:	10800003 	ldbu	r2,0(r2)
  1226ec:	1007883a 	mov	r3,r2
  1226f0:	e0bff917 	ldw	r2,-28(fp)
  1226f4:	113fa184 	addi	r4,r2,-378
  1226f8:	00a00034 	movhi	r2,32768
  1226fc:	108001c4 	addi	r2,r2,7
  122700:	2084703a 	and	r2,r4,r2
  122704:	1000040e 	bge	r2,zero,122718 <plot_trace+0x128>
  122708:	10bfffc4 	addi	r2,r2,-1
  12270c:	013ffe04 	movi	r4,-8
  122710:	1104b03a 	or	r2,r2,r4
  122714:	10800044 	addi	r2,r2,1
  122718:	01002004 	movi	r4,128
  12271c:	2085d83a 	sra	r2,r4,r2
  122720:	1884b03a 	or	r2,r3,r2
  122724:	1023883a 	mov	r17,r2
  122728:	048004b4 	movhi	r18,18
  12272c:	94968804 	addi	r18,r18,23072
  122730:	e0bffe17 	ldw	r2,-8(fp)
  122734:	1009883a 	mov	r4,r2
  122738:	01400304 	movi	r5,12
  12273c:	0123b580 	call	123b58 <__mulsi3>
  122740:	1405883a 	add	r2,r2,r16
  122744:	9085883a 	add	r2,r18,r2
  122748:	14400005 	stb	r17,0(r2)

	/* check if in the saved area */
	if ((x >= saved_pos_x) && (x <= saved_end_x) && (y >= saved_pos_y) && (y <= saved_end_y))
  12274c:	d0a01717 	ldw	r2,-32676(gp)
  122750:	e0fff917 	ldw	r3,-28(fp)
  122754:	18803616 	blt	r3,r2,122830 <plot_trace+0x240>
  122758:	d0e01617 	ldw	r3,-32680(gp)
  12275c:	e0bff917 	ldw	r2,-28(fp)
  122760:	18803316 	blt	r3,r2,122830 <plot_trace+0x240>
  122764:	d0a01417 	ldw	r2,-32688(gp)
  122768:	e0fffe17 	ldw	r3,-8(fp)
  12276c:	18803016 	blt	r3,r2,122830 <plot_trace+0x240>
  122770:	d0e01317 	ldw	r3,-32692(gp)
  122774:	e0bffe17 	ldw	r2,-8(fp)
  122778:	18802d16 	blt	r3,r2,122830 <plot_trace+0x240>
	    /* point is in the save area - save it */
	    saved_area[y - saved_pos_y][(x - saved_pos_x)/8] |= (0x80 >> ((x - saved_pos_x) % 8));
  12277c:	d0a01417 	ldw	r2,-32688(gp)
  122780:	e0fffe17 	ldw	r3,-8(fp)
  122784:	18a3c83a 	sub	r17,r3,r2
  122788:	d0a01717 	ldw	r2,-32676(gp)
  12278c:	e0fff917 	ldw	r3,-28(fp)
  122790:	1885c83a 	sub	r2,r3,r2
  122794:	1000010e 	bge	r2,zero,12279c <plot_trace+0x1ac>
  122798:	108001c4 	addi	r2,r2,7
  12279c:	1005d0fa 	srai	r2,r2,3
  1227a0:	1021883a 	mov	r16,r2
  1227a4:	d0a01417 	ldw	r2,-32688(gp)
  1227a8:	e0fffe17 	ldw	r3,-8(fp)
  1227ac:	1885c83a 	sub	r2,r3,r2
  1227b0:	048004b4 	movhi	r18,18
  1227b4:	94978904 	addi	r18,r18,24100
  1227b8:	1009883a 	mov	r4,r2
  1227bc:	014003c4 	movi	r5,15
  1227c0:	0123b580 	call	123b58 <__mulsi3>
  1227c4:	1405883a 	add	r2,r2,r16
  1227c8:	9085883a 	add	r2,r18,r2
  1227cc:	10800003 	ldbu	r2,0(r2)
  1227d0:	1007883a 	mov	r3,r2
  1227d4:	d0a01717 	ldw	r2,-32676(gp)
  1227d8:	e13ff917 	ldw	r4,-28(fp)
  1227dc:	2089c83a 	sub	r4,r4,r2
  1227e0:	00a00034 	movhi	r2,32768
  1227e4:	108001c4 	addi	r2,r2,7
  1227e8:	2084703a 	and	r2,r4,r2
  1227ec:	1000040e 	bge	r2,zero,122800 <plot_trace+0x210>
  1227f0:	10bfffc4 	addi	r2,r2,-1
  1227f4:	013ffe04 	movi	r4,-8
  1227f8:	1104b03a 	or	r2,r2,r4
  1227fc:	10800044 	addi	r2,r2,1
  122800:	01002004 	movi	r4,128
  122804:	2085d83a 	sra	r2,r4,r2
  122808:	1884b03a 	or	r2,r3,r2
  12280c:	1025883a 	mov	r18,r2
  122810:	04c004b4 	movhi	r19,18
  122814:	9cd78904 	addi	r19,r19,24100
  122818:	8809883a 	mov	r4,r17
  12281c:	014003c4 	movi	r5,15
  122820:	0123b580 	call	123b58 <__mulsi3>
  122824:	1405883a 	add	r2,r2,r16
  122828:	9885883a 	add	r2,r19,r2
  12282c:	14800005 	stb	r18,0(r2)

	/* check if on a grid line */
	/* go through all the horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  122830:	00bfffc4 	movi	r2,-1
  122834:	e0bffd15 	stw	r2,-12(fp)
  122838:	00003a06 	br	122924 <plot_trace+0x334>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
  12283c:	e13ffd17 	ldw	r4,-12(fp)
  122840:	01400c04 	movi	r5,48
  122844:	0123b580 	call	123b58 <__mulsi3>
  122848:	10801004 	addi	r2,r2,64
  12284c:	e0bffb15 	stw	r2,-20(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
  122850:	e0bffb17 	ldw	r2,-20(fp)
  122854:	10802010 	cmplti	r2,r2,128
  122858:	1000021e 	bne	r2,zero,122864 <plot_trace+0x274>
	        p = PLOT_SIZE_Y - 1;
  12285c:	00801fc4 	movi	r2,127
  122860:	e0bffb15 	stw	r2,-20(fp)
	    if (p < 0)
  122864:	e0bffb17 	ldw	r2,-20(fp)
  122868:	1000010e 	bge	r2,zero,122870 <plot_trace+0x280>
	        p = 0;
  12286c:	e03ffb15 	stw	zero,-20(fp)

	    /* if the point is on this line, save it */
	    if (y == p)
  122870:	e0fffe17 	ldw	r3,-8(fp)
  122874:	e0bffb17 	ldw	r2,-20(fp)
  122878:	1880271e 	bne	r3,r2,122918 <plot_trace+0x328>
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
  12287c:	e0bffd17 	ldw	r2,-12(fp)
  122880:	14400044 	addi	r17,r2,1
  122884:	e0bff917 	ldw	r2,-28(fp)
  122888:	1000010e 	bge	r2,zero,122890 <plot_trace+0x2a0>
  12288c:	108001c4 	addi	r2,r2,7
  122890:	1005d0fa 	srai	r2,r2,3
  122894:	1021883a 	mov	r16,r2
  122898:	e0bffd17 	ldw	r2,-12(fp)
  12289c:	10800044 	addi	r2,r2,1
  1228a0:	048004b4 	movhi	r18,18
  1228a4:	94975c04 	addi	r18,r18,23920
  1228a8:	1009883a 	mov	r4,r2
  1228ac:	01400f04 	movi	r5,60
  1228b0:	0123b580 	call	123b58 <__mulsi3>
  1228b4:	1405883a 	add	r2,r2,r16
  1228b8:	9085883a 	add	r2,r18,r2
  1228bc:	10800003 	ldbu	r2,0(r2)
  1228c0:	1007883a 	mov	r3,r2
  1228c4:	e13ff917 	ldw	r4,-28(fp)
  1228c8:	00a00034 	movhi	r2,32768
  1228cc:	108001c4 	addi	r2,r2,7
  1228d0:	2084703a 	and	r2,r4,r2
  1228d4:	1000040e 	bge	r2,zero,1228e8 <plot_trace+0x2f8>
  1228d8:	10bfffc4 	addi	r2,r2,-1
  1228dc:	013ffe04 	movi	r4,-8
  1228e0:	1104b03a 	or	r2,r2,r4
  1228e4:	10800044 	addi	r2,r2,1
  1228e8:	01002004 	movi	r4,128
  1228ec:	2085d83a 	sra	r2,r4,r2
  1228f0:	1884b03a 	or	r2,r3,r2
  1228f4:	1025883a 	mov	r18,r2
  1228f8:	04c004b4 	movhi	r19,18
  1228fc:	9cd75c04 	addi	r19,r19,23920
  122900:	8809883a 	mov	r4,r17
  122904:	01400f04 	movi	r5,60
  122908:	0123b580 	call	123b58 <__mulsi3>
  12290c:	1405883a 	add	r2,r2,r16
  122910:	9885883a 	add	r2,r19,r2
  122914:	14800005 	stb	r18,0(r2)
	    /* point is in the save area - save it */
	    saved_area[y - saved_pos_y][(x - saved_pos_x)/8] |= (0x80 >> ((x - saved_pos_x) % 8));

	/* check if on a grid line */
	/* go through all the horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  122918:	e0bffd17 	ldw	r2,-12(fp)
  12291c:	10800044 	addi	r2,r2,1
  122920:	e0bffd15 	stw	r2,-12(fp)
  122924:	e0bffd17 	ldw	r2,-12(fp)
  122928:	10800090 	cmplti	r2,r2,2
  12292c:	103fc31e 	bne	r2,zero,12283c <plot_trace+0x24c>
	    if (y == p)
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
	}

	/* go through all the vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  122930:	00bffec4 	movi	r2,-5
  122934:	e0bffd15 	stw	r2,-12(fp)
  122938:	00003606 	br	122a14 <plot_trace+0x424>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
  12293c:	e13ffd17 	ldw	r4,-12(fp)
  122940:	01400c04 	movi	r5,48
  122944:	0123b580 	call	123b58 <__mulsi3>
  122948:	10803c04 	addi	r2,r2,240
  12294c:	e0bffb15 	stw	r2,-20(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
  122950:	e0bffb17 	ldw	r2,-20(fp)
  122954:	10807810 	cmplti	r2,r2,480
  122958:	1000021e 	bne	r2,zero,122964 <plot_trace+0x374>
	        p = PLOT_SIZE_X - 1;
  12295c:	008077c4 	movi	r2,479
  122960:	e0bffb15 	stw	r2,-20(fp)
	    if (p < 0)
  122964:	e0bffb17 	ldw	r2,-20(fp)
  122968:	1000010e 	bge	r2,zero,122970 <plot_trace+0x380>
	        p = 0;
  12296c:	e03ffb15 	stw	zero,-20(fp)

	    /* if the point is on this line, save it */
	    if (x == p)
  122970:	e0fff917 	ldw	r3,-28(fp)
  122974:	e0bffb17 	ldw	r2,-20(fp)
  122978:	1880231e 	bne	r3,r2,122a08 <plot_trace+0x418>
		saved_axis_y[j + X_TICK_CNT][y / 8] |= (0x80 >> (y % 8));
  12297c:	e0bffd17 	ldw	r2,-12(fp)
  122980:	11800144 	addi	r6,r2,5
  122984:	e0bffe17 	ldw	r2,-8(fp)
  122988:	1000010e 	bge	r2,zero,122990 <plot_trace+0x3a0>
  12298c:	108001c4 	addi	r2,r2,7
  122990:	1005d0fa 	srai	r2,r2,3
  122994:	1007883a 	mov	r3,r2
  122998:	e0bffd17 	ldw	r2,-12(fp)
  12299c:	10800144 	addi	r2,r2,5
  1229a0:	010004b4 	movhi	r4,18
  1229a4:	21173004 	addi	r4,r4,23744
  1229a8:	1004913a 	slli	r2,r2,4
  1229ac:	10c5883a 	add	r2,r2,r3
  1229b0:	2085883a 	add	r2,r4,r2
  1229b4:	10800003 	ldbu	r2,0(r2)
  1229b8:	1009883a 	mov	r4,r2
  1229bc:	e17ffe17 	ldw	r5,-8(fp)
  1229c0:	00a00034 	movhi	r2,32768
  1229c4:	108001c4 	addi	r2,r2,7
  1229c8:	2884703a 	and	r2,r5,r2
  1229cc:	1000040e 	bge	r2,zero,1229e0 <plot_trace+0x3f0>
  1229d0:	10bfffc4 	addi	r2,r2,-1
  1229d4:	017ffe04 	movi	r5,-8
  1229d8:	1144b03a 	or	r2,r2,r5
  1229dc:	10800044 	addi	r2,r2,1
  1229e0:	01402004 	movi	r5,128
  1229e4:	2885d83a 	sra	r2,r5,r2
  1229e8:	2084b03a 	or	r2,r4,r2
  1229ec:	1009883a 	mov	r4,r2
  1229f0:	014004b4 	movhi	r5,18
  1229f4:	29573004 	addi	r5,r5,23744
  1229f8:	3004913a 	slli	r2,r6,4
  1229fc:	10c5883a 	add	r2,r2,r3
  122a00:	2885883a 	add	r2,r5,r2
  122a04:	11000005 	stb	r4,0(r2)
	    if (y == p)
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
	}

	/* go through all the vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  122a08:	e0bffd17 	ldw	r2,-12(fp)
  122a0c:	10800044 	addi	r2,r2,1
  122a10:	e0bffd15 	stw	r2,-12(fp)
  122a14:	e0bffd17 	ldw	r2,-12(fp)
  122a18:	10800190 	cmplti	r2,r2,6
  122a1c:	103fc71e 	bne	r2,zero,12293c <plot_trace+0x34c>
		saved_axis_y[j + X_TICK_CNT][y / 8] |= (0x80 >> (y % 8));
	}


	/* update x position */
	x_pos += PLOT_SIZE_X;
  122a20:	e0bffa17 	ldw	r2,-24(fp)
  122a24:	10807804 	addi	r2,r2,480
  122a28:	e0bffa15 	stw	r2,-24(fp)
	/* check if at next horizontal position */
	if (x_pos >= sample_size)  {
  122a2c:	d0a01517 	ldw	r2,-32684(gp)
  122a30:	e0fffa17 	ldw	r3,-24(fp)
  122a34:	18800716 	blt	r3,r2,122a54 <plot_trace+0x464>
	    /* at next position - update positions */
	    x++;
  122a38:	e0bff917 	ldw	r2,-28(fp)
  122a3c:	10800044 	addi	r2,r2,1
  122a40:	e0bff915 	stw	r2,-28(fp)
	    x_pos -= sample_size;
  122a44:	d0a01517 	ldw	r2,-32684(gp)
  122a48:	e0fffa17 	ldw	r3,-24(fp)
  122a4c:	1885c83a 	sub	r2,r3,r2
  122a50:	e0bffa15 	stw	r2,-24(fp)
    /* re-display the menu (if it was on) */
    refresh_menu();


    /* plot the sample */
    for (i = 0; i < sample_size; i++)  {
  122a54:	e0bffc17 	ldw	r2,-16(fp)
  122a58:	10800044 	addi	r2,r2,1
  122a5c:	e0bffc15 	stw	r2,-16(fp)
  122a60:	d0a01517 	ldw	r2,-32684(gp)
  122a64:	e0fffc17 	ldw	r3,-16(fp)
  122a68:	18bef216 	blt	r3,r2,122634 <plot_trace+0x44>
	}
    }


    /* finally, output the scale if need be */
    set_display_scale(cur_scale);
  122a6c:	d0a01117 	ldw	r2,-32700(gp)
  122a70:	1009883a 	mov	r4,r2
  122a74:	0121cdc0 	call	121cdc <set_display_scale>


    /* done with plot, return */
    return;
  122a78:	0001883a 	nop

}
  122a7c:	e037883a 	mov	sp,fp
  122a80:	dfc00517 	ldw	ra,20(sp)
  122a84:	df000417 	ldw	fp,16(sp)
  122a88:	dcc00317 	ldw	r19,12(sp)
  122a8c:	dc800217 	ldw	r18,8(sp)
  122a90:	dc400117 	ldw	r17,4(sp)
  122a94:	dc000017 	ldw	r16,0(sp)
  122a98:	dec00604 	addi	sp,sp,24
  122a9c:	f800283a 	ret

00122aa0 <key_int_installer>:

.global key_int_installer
.type	key_int_installer, @function

key_int_installer:
	SAVE
  122aa0:	deffff04 	addi	sp,sp,-4
  122aa4:	dfc00015 	stw	ra,0(sp)
  122aa8:	deffff04 	addi	sp,sp,-4
  122aac:	df000015 	stw	fp,0(sp)
  122ab0:	d839883a 	mov	fp,sp
  122ab4:	020004b4 	movhi	r8,18

	# asdf
	movia	r8, adc_speed
  122ab8:	42140c04 	addi	r8,r8,20528
	movi	r9, 0x040000
  122abc:	02400134 	movhi	r9,4
	stw		r9, (r8)
  122ac0:	42400015 	stw	r9,0(r8)
  122ac4:	020004b4 	movhi	r8,18
	movia	r8, trig_level
  122ac8:	42140d84 	addi	r8,r8,20534
	movi	r9, 0
  122acc:	02400004 	movi	r9,0
	stb		r9, (r8)
  122ad0:	42400005 	stb	r9,0(r8)
  122ad4:	020004b4 	movhi	r8,18
	movia	r8, trig_delay
  122ad8:	42140d04 	addi	r8,r8,20532
	movi	r9, 240
  122adc:	02403c04 	movi	r9,240
	sth		r9, (r8)
  122ae0:	4240000d 	sth	r9,0(r8)
	# asdf

	# Enable all switch interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  122ae4:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122ae8:	42046414 	ori	r8,r8,4496
	movhi	r9, %hi(SWITCH_ALL)
  122aec:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  122af0:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_IRQ_MASK(r8)
  122af4:	42400215 	stw	r9,8(r8)

	# Install the interrupt handler
	mov		r4, r0
  122af8:	0009883a 	mov	r4,zero
	movi	r5, KEY_INPUT_IRQ
  122afc:	01400144 	movi	r5,5
	movhi	r6, %hi(key_handler)
  122b00:	018004b4 	movhi	r6,18
	ori		r6, r6, %lo(key_handler)
  122b04:	318ace14 	ori	r6,r6,11064
	mov		r7, r0
  122b08:	000f883a 	mov	r7,zero
	PUSH	r0
  122b0c:	deffff04 	addi	sp,sp,-4
  122b10:	d8000015 	stw	zero,0(sp)
	call	alt_ic_isr_register
  122b14:	0123cc00 	call	123cc0 <alt_ic_isr_register>
	POP		r0
  122b18:	d8000017 	ldw	zero,0(sp)
  122b1c:	dec00104 	addi	sp,sp,4

00122b20 <key_int_installer_done>:

key_int_installer_done:
	RESTORE
  122b20:	e037883a 	mov	sp,fp
  122b24:	df000017 	ldw	fp,0(sp)
  122b28:	dec00104 	addi	sp,sp,4
  122b2c:	dfc00017 	ldw	ra,0(sp)
  122b30:	dec00104 	addi	sp,sp,4
	ret
  122b34:	f800283a 	ret

00122b38 <key_handler>:
 */

.type key_handler,@function

key_handler:
	SAVE
  122b38:	deffff04 	addi	sp,sp,-4
  122b3c:	dfc00015 	stw	ra,0(sp)
  122b40:	deffff04 	addi	sp,sp,-4
  122b44:	df000015 	stw	fp,0(sp)
  122b48:	d839883a 	mov	fp,sp

	# Key should now be available. Update key_press.
	movi	r8, 1
  122b4c:	02000044 	movi	r8,1
  122b50:	024004b4 	movhi	r9,18
	movia	r9, key_press
  122b54:	4a540804 	addi	r9,r9,20512
	stb		r8, (r9)
  122b58:	4a000005 	stb	r8,0(r9)

	# Clear interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  122b5c:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122b60:	42046414 	ori	r8,r8,4496
	stw		r0, PIO_IRQ_MASK(r8)
  122b64:	40000215 	stw	zero,8(r8)

	# Get the edge capture register.
	movhi	r8, %hi(KEY_INPUT_BASE)
  122b68:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122b6c:	42046414 	ori	r8,r8,4496
	ldw		r8, PIO_EDGE_CAP(r8)
  122b70:	42000317 	ldw	r8,12(r8)

	# Check each bit (starting at 0) and see if set.
	movi	r9, 1
  122b74:	02400044 	movi	r9,1
	movi	r11, 0
  122b78:	02c00004 	movi	r11,0

00122b7c <loop_keys>:

loop_keys:
	and		r10, r8, r9
  122b7c:	4254703a 	and	r10,r8,r9
	bne		r10, r0, key_lookup
  122b80:	5000031e 	bne	r10,zero,122b90 <key_lookup>
	slli	r9, r9, 1
  122b84:	4812907a 	slli	r9,r9,1
	addi	r11, r11, 1
  122b88:	5ac00044 	addi	r11,r11,1
	br		loop_keys
  122b8c:	003ffb06 	br	122b7c <loop_keys>

00122b90 <key_lookup>:
  122b90:	020004b4 	movhi	r8,18

	# Once the key is found (r11), use the lookup table to set key_value.
key_lookup:
	movia	r8, key_map
  122b94:	420c1b04 	addi	r8,r8,12396
	add		r8, r8, r11
  122b98:	42d1883a 	add	r8,r8,r11
	ldb		r8,	(r8)
  122b9c:	42000007 	ldb	r8,0(r8)
  122ba0:	028004b4 	movhi	r10,18

	movia	r10, key_value
  122ba4:	52940844 	addi	r10,r10,20513
	stb		r8, (r10)
  122ba8:	52000005 	stb	r8,0(r10)

	# Remove later!!!
	movi	r12, 10
  122bac:	03000284 	movi	r12,10
	beq		r11, r12, inc_speed
  122bb0:	5b004126 	beq	r11,r12,122cb8 <inc_speed>
	movi	r12, 11
  122bb4:	030002c4 	movi	r12,11
	beq		r11, r12, dec_speed
  122bb8:	5b001826 	beq	r11,r12,122c1c <dec_speed>

	movi	r12, 16
  122bbc:	03000404 	movi	r12,16
	beq		r11, r12, inc_level
  122bc0:	5b008b26 	beq	r11,r12,122df0 <inc_level>
	movi	r12, 17
  122bc4:	03000444 	movi	r12,17
	beq		r11, r12, dec_level
  122bc8:	5b006426 	beq	r11,r12,122d5c <dec_level>

	movi	r12, 18
  122bcc:	03000484 	movi	r12,18
	beq		r11, r12, inc_delay
  122bd0:	5b00d526 	beq	r11,r12,122f28 <inc_delay>
	movi	r12, 19
  122bd4:	030004c4 	movi	r12,19
	beq		r11, r12, dec_delay
  122bd8:	5b00af26 	beq	r11,r12,122e98 <dec_delay>

00122bdc <key_lookup_cont>:
key_lookup_cont:
	# <END Remove later!!!>

	# Clear the edge capture register (write 1 to clear).
	movhi	r8, %hi(KEY_INPUT_BASE)
  122bdc:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122be0:	42046414 	ori	r8,r8,4496
	movhi	r9, %hi(SWITCH_ALL)
  122be4:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  122be8:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  122bec:	42400315 	stw	r9,12(r8)

	# Re-enable interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  122bf0:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122bf4:	42046414 	ori	r8,r8,4496
	movhi	r9, %hi(SWITCH_ALL)
  122bf8:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  122bfc:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_IRQ_MASK(r8)
  122c00:	42400215 	stw	r9,8(r8)

00122c04 <key_handler_done>:

key_handler_done:
	RESTORE
  122c04:	e037883a 	mov	sp,fp
  122c08:	df000017 	ldw	fp,0(sp)
  122c0c:	dec00104 	addi	sp,sp,4
  122c10:	dfc00017 	ldw	ra,0(sp)
  122c14:	dec00104 	addi	sp,sp,4
	ret
  122c18:	f800283a 	ret

00122c1c <dec_speed>:
  122c1c:	034004b4 	movhi	r13,18

# hashtag
dec_speed:
	movia	r13, adc_speed
  122c20:	6b540c04 	addi	r13,r13,20528
	ldw		r14, (r13)
  122c24:	6b800017 	ldw	r14,0(r13)
	slli	r14, r14, 1
  122c28:	701c907a 	slli	r14,r14,1
	MOVWI	r15, 0x00FFFFFF
  122c2c:	03c03ff4 	movhi	r15,255
  122c30:	7bffffd4 	ori	r15,r15,65535
	and		r14, r14, r15
  122c34:	73dc703a 	and	r14,r14,r15
	beq		r14, r0, set_speed_2
  122c38:	70004526 	beq	r14,zero,122d50 <set_speed_2>

00122c3c <dec_speed_cont>:
dec_speed_cont:
	MOVWI	r15, ADC_RATE_BASE
  122c3c:	03c00574 	movhi	r15,21
  122c40:	7bc45c14 	ori	r15,r15,4464
	stw		r14, (r15)
  122c44:	7b800015 	stw	r14,0(r15)
	stw		r14, (r13)
  122c48:	6b800015 	stw	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  122c4c:	deffff04 	addi	sp,sp,-4
  122c50:	da400015 	stw	r9,0(sp)
  122c54:	deffff04 	addi	sp,sp,-4
  122c58:	da800015 	stw	r10,0(sp)
  122c5c:	02400574 	movhi	r9,21
  122c60:	4a444014 	ori	r9,r9,4352
  122c64:	02800034 	movhi	r10,0
  122c68:	52800254 	ori	r10,r10,9
  122c6c:	4a800035 	stwio	r10,0(r9)
  122c70:	da800017 	ldw	r10,0(sp)
  122c74:	dec00104 	addi	sp,sp,4
  122c78:	da400017 	ldw	r9,0(sp)
  122c7c:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  122c80:	deffff04 	addi	sp,sp,-4
  122c84:	da400015 	stw	r9,0(sp)
  122c88:	deffff04 	addi	sp,sp,-4
  122c8c:	da800015 	stw	r10,0(sp)
  122c90:	02400574 	movhi	r9,21
  122c94:	4a444014 	ori	r9,r9,4352
  122c98:	02800034 	movhi	r10,0
  122c9c:	52800054 	ori	r10,r10,1
  122ca0:	4a800035 	stwio	r10,0(r9)
  122ca4:	da800017 	ldw	r10,0(sp)
  122ca8:	dec00104 	addi	sp,sp,4
  122cac:	da400017 	ldw	r9,0(sp)
  122cb0:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  122cb4:	003fc906 	br	122bdc <key_lookup_cont>

00122cb8 <inc_speed>:
  122cb8:	034004b4 	movhi	r13,18

inc_speed:
	movia	r13, adc_speed
  122cbc:	6b540c04 	addi	r13,r13,20528
	ldwio	r14, (r13)
  122cc0:	6b800037 	ldwio	r14,0(r13)
	srli	r14, r14, 1
  122cc4:	701cd07a 	srli	r14,r14,1
	beq		r14, r0, set_speed_1
  122cc8:	70001f26 	beq	r14,zero,122d48 <set_speed_1>

00122ccc <inc_speed_cont>:
inc_speed_cont:
	MOVWI	r15, ADC_RATE_BASE
  122ccc:	03c00574 	movhi	r15,21
  122cd0:	7bc45c14 	ori	r15,r15,4464
	stwio	r14, (r15)
  122cd4:	7b800035 	stwio	r14,0(r15)
	stwio	r14, (r13)
  122cd8:	6b800035 	stwio	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  122cdc:	deffff04 	addi	sp,sp,-4
  122ce0:	da400015 	stw	r9,0(sp)
  122ce4:	deffff04 	addi	sp,sp,-4
  122ce8:	da800015 	stw	r10,0(sp)
  122cec:	02400574 	movhi	r9,21
  122cf0:	4a444014 	ori	r9,r9,4352
  122cf4:	02800034 	movhi	r10,0
  122cf8:	52800254 	ori	r10,r10,9
  122cfc:	4a800035 	stwio	r10,0(r9)
  122d00:	da800017 	ldw	r10,0(sp)
  122d04:	dec00104 	addi	sp,sp,4
  122d08:	da400017 	ldw	r9,0(sp)
  122d0c:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  122d10:	deffff04 	addi	sp,sp,-4
  122d14:	da400015 	stw	r9,0(sp)
  122d18:	deffff04 	addi	sp,sp,-4
  122d1c:	da800015 	stw	r10,0(sp)
  122d20:	02400574 	movhi	r9,21
  122d24:	4a444014 	ori	r9,r9,4352
  122d28:	02800034 	movhi	r10,0
  122d2c:	52800054 	ori	r10,r10,1
  122d30:	4a800035 	stwio	r10,0(r9)
  122d34:	da800017 	ldw	r10,0(sp)
  122d38:	dec00104 	addi	sp,sp,4
  122d3c:	da400017 	ldw	r9,0(sp)
  122d40:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  122d44:	003fa506 	br	122bdc <key_lookup_cont>

00122d48 <set_speed_1>:

set_speed_1:
	movi	r14, 1
  122d48:	03800044 	movi	r14,1
	br		inc_speed_cont
  122d4c:	003fdf06 	br	122ccc <inc_speed_cont>

00122d50 <set_speed_2>:

set_speed_2:
	MOVWI	r14, 0x00800000
  122d50:	03802034 	movhi	r14,128
  122d54:	73802034 	orhi	r14,r14,128
	br		dec_speed_cont
  122d58:	003fb806 	br	122c3c <dec_speed_cont>

00122d5c <dec_level>:
  122d5c:	034004b4 	movhi	r13,18



dec_level:
	movia	r13, trig_level
  122d60:	6b540d84 	addi	r13,r13,20534
	ldb		r14, (r13)
  122d64:	6b800007 	ldb	r14,0(r13)
	subi	r14, r14, 5
  122d68:	73bffec4 	addi	r14,r14,-5
	movi	r15, -128
  122d6c:	03ffe004 	movi	r15,-128
	blt		r14, r15, set_level_2
  122d70:	73c04616 	blt	r14,r15,122e8c <set_level_2>

00122d74 <dec_level_cont>:
dec_level_cont:
	MOVWI	r15, TRIG_LEVEL_BASE
  122d74:	03c00574 	movhi	r15,21
  122d78:	7bc43014 	ori	r15,r15,4288
	stw		r14, (r15)
  122d7c:	7b800015 	stw	r14,0(r15)
	stb		r14, (r13)
  122d80:	6b800005 	stb	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  122d84:	deffff04 	addi	sp,sp,-4
  122d88:	da400015 	stw	r9,0(sp)
  122d8c:	deffff04 	addi	sp,sp,-4
  122d90:	da800015 	stw	r10,0(sp)
  122d94:	02400574 	movhi	r9,21
  122d98:	4a444014 	ori	r9,r9,4352
  122d9c:	02800034 	movhi	r10,0
  122da0:	52800254 	ori	r10,r10,9
  122da4:	4a800035 	stwio	r10,0(r9)
  122da8:	da800017 	ldw	r10,0(sp)
  122dac:	dec00104 	addi	sp,sp,4
  122db0:	da400017 	ldw	r9,0(sp)
  122db4:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  122db8:	deffff04 	addi	sp,sp,-4
  122dbc:	da400015 	stw	r9,0(sp)
  122dc0:	deffff04 	addi	sp,sp,-4
  122dc4:	da800015 	stw	r10,0(sp)
  122dc8:	02400574 	movhi	r9,21
  122dcc:	4a444014 	ori	r9,r9,4352
  122dd0:	02800034 	movhi	r10,0
  122dd4:	52800054 	ori	r10,r10,1
  122dd8:	4a800035 	stwio	r10,0(r9)
  122ddc:	da800017 	ldw	r10,0(sp)
  122de0:	dec00104 	addi	sp,sp,4
  122de4:	da400017 	ldw	r9,0(sp)
  122de8:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  122dec:	003f7b06 	br	122bdc <key_lookup_cont>

00122df0 <inc_level>:
  122df0:	034004b4 	movhi	r13,18

inc_level:
	movia	r13, trig_level
  122df4:	6b540d84 	addi	r13,r13,20534
	ldb		r14, (r13)
  122df8:	6b800007 	ldb	r14,0(r13)
	addi	r14, r14, 5
  122dfc:	73800144 	addi	r14,r14,5
	movi	r15, 127
  122e00:	03c01fc4 	movi	r15,127
	bgt		r14, r15, set_level_1
  122e04:	7b801f16 	blt	r15,r14,122e84 <set_level_1>

00122e08 <inc_level_cont>:
inc_level_cont:
	MOVWI	r15, TRIG_LEVEL_BASE
  122e08:	03c00574 	movhi	r15,21
  122e0c:	7bc43014 	ori	r15,r15,4288
	stw		r14, (r15)
  122e10:	7b800015 	stw	r14,0(r15)
	stb		r14, (r13)
  122e14:	6b800005 	stb	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  122e18:	deffff04 	addi	sp,sp,-4
  122e1c:	da400015 	stw	r9,0(sp)
  122e20:	deffff04 	addi	sp,sp,-4
  122e24:	da800015 	stw	r10,0(sp)
  122e28:	02400574 	movhi	r9,21
  122e2c:	4a444014 	ori	r9,r9,4352
  122e30:	02800034 	movhi	r10,0
  122e34:	52800254 	ori	r10,r10,9
  122e38:	4a800035 	stwio	r10,0(r9)
  122e3c:	da800017 	ldw	r10,0(sp)
  122e40:	dec00104 	addi	sp,sp,4
  122e44:	da400017 	ldw	r9,0(sp)
  122e48:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  122e4c:	deffff04 	addi	sp,sp,-4
  122e50:	da400015 	stw	r9,0(sp)
  122e54:	deffff04 	addi	sp,sp,-4
  122e58:	da800015 	stw	r10,0(sp)
  122e5c:	02400574 	movhi	r9,21
  122e60:	4a444014 	ori	r9,r9,4352
  122e64:	02800034 	movhi	r10,0
  122e68:	52800054 	ori	r10,r10,1
  122e6c:	4a800035 	stwio	r10,0(r9)
  122e70:	da800017 	ldw	r10,0(sp)
  122e74:	dec00104 	addi	sp,sp,4
  122e78:	da400017 	ldw	r9,0(sp)
  122e7c:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  122e80:	003f5606 	br	122bdc <key_lookup_cont>

00122e84 <set_level_1>:

set_level_1:
	movi	r14, 127
  122e84:	03801fc4 	movi	r14,127
	br		inc_level_cont
  122e88:	003fdf06 	br	122e08 <inc_level_cont>

00122e8c <set_level_2>:

set_level_2:
	MOVWI	r14, -128
  122e8c:	03bffff4 	movhi	r14,65535
  122e90:	73bfe014 	ori	r14,r14,65408
	br		dec_level_cont
  122e94:	003fb706 	br	122d74 <dec_level_cont>

00122e98 <dec_delay>:
  122e98:	034004b4 	movhi	r13,18



dec_delay:
	movia	r13, trig_delay
  122e9c:	6b540d04 	addi	r13,r13,20532
	ldh		r14, (r13)
  122ea0:	6b80000f 	ldh	r14,0(r13)
	subi	r14, r14, 10
  122ea4:	73bffd84 	addi	r14,r14,-10
	ble		r14, r0, set_delay_2
  122ea8:	0380470e 	bge	zero,r14,122fc8 <set_delay_2>

00122eac <dec_delay_cont>:
dec_delay_cont:
	MOVWI	r15, TRIG_DELAY_BASE
  122eac:	03c00574 	movhi	r15,21
  122eb0:	7bc42814 	ori	r15,r15,4256
	stw		r14, (r15)
  122eb4:	7b800015 	stw	r14,0(r15)
	sth		r14, (r13)
  122eb8:	6b80000d 	sth	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  122ebc:	deffff04 	addi	sp,sp,-4
  122ec0:	da400015 	stw	r9,0(sp)
  122ec4:	deffff04 	addi	sp,sp,-4
  122ec8:	da800015 	stw	r10,0(sp)
  122ecc:	02400574 	movhi	r9,21
  122ed0:	4a444014 	ori	r9,r9,4352
  122ed4:	02800034 	movhi	r10,0
  122ed8:	52800254 	ori	r10,r10,9
  122edc:	4a800035 	stwio	r10,0(r9)
  122ee0:	da800017 	ldw	r10,0(sp)
  122ee4:	dec00104 	addi	sp,sp,4
  122ee8:	da400017 	ldw	r9,0(sp)
  122eec:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  122ef0:	deffff04 	addi	sp,sp,-4
  122ef4:	da400015 	stw	r9,0(sp)
  122ef8:	deffff04 	addi	sp,sp,-4
  122efc:	da800015 	stw	r10,0(sp)
  122f00:	02400574 	movhi	r9,21
  122f04:	4a444014 	ori	r9,r9,4352
  122f08:	02800034 	movhi	r10,0
  122f0c:	52800054 	ori	r10,r10,1
  122f10:	4a800035 	stwio	r10,0(r9)
  122f14:	da800017 	ldw	r10,0(sp)
  122f18:	dec00104 	addi	sp,sp,4
  122f1c:	da400017 	ldw	r9,0(sp)
  122f20:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  122f24:	003f2d06 	br	122bdc <key_lookup_cont>

00122f28 <inc_delay>:
  122f28:	034004b4 	movhi	r13,18

inc_delay:
	movia	r13, trig_delay
  122f2c:	6b540d04 	addi	r13,r13,20532
	ldh		r14, (r13)
  122f30:	6b80000f 	ldh	r14,0(r13)
	addi	r14, r14, 10
  122f34:	73800284 	addi	r14,r14,10
	movi	r15, 1000
  122f38:	03c0fa04 	movi	r15,1000
	bgeu	r14, r15, set_delay_1
  122f3c:	73c01f2e 	bgeu	r14,r15,122fbc <set_delay_1>

00122f40 <inc_delay_cont>:
inc_delay_cont:
	MOVWI	r15, TRIG_DELAY_BASE
  122f40:	03c00574 	movhi	r15,21
  122f44:	7bc42814 	ori	r15,r15,4256
	stw		r14, (r15)
  122f48:	7b800015 	stw	r14,0(r15)
	sth		r14, (r13)
  122f4c:	6b80000d 	sth	r14,0(r13)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  122f50:	deffff04 	addi	sp,sp,-4
  122f54:	da400015 	stw	r9,0(sp)
  122f58:	deffff04 	addi	sp,sp,-4
  122f5c:	da800015 	stw	r10,0(sp)
  122f60:	02400574 	movhi	r9,21
  122f64:	4a444014 	ori	r9,r9,4352
  122f68:	02800034 	movhi	r10,0
  122f6c:	52800254 	ori	r10,r10,9
  122f70:	4a800035 	stwio	r10,0(r9)
  122f74:	da800017 	ldw	r10,0(sp)
  122f78:	dec00104 	addi	sp,sp,4
  122f7c:	da400017 	ldw	r9,0(sp)
  122f80:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  122f84:	deffff04 	addi	sp,sp,-4
  122f88:	da400015 	stw	r9,0(sp)
  122f8c:	deffff04 	addi	sp,sp,-4
  122f90:	da800015 	stw	r10,0(sp)
  122f94:	02400574 	movhi	r9,21
  122f98:	4a444014 	ori	r9,r9,4352
  122f9c:	02800034 	movhi	r10,0
  122fa0:	52800054 	ori	r10,r10,1
  122fa4:	4a800035 	stwio	r10,0(r9)
  122fa8:	da800017 	ldw	r10,0(sp)
  122fac:	dec00104 	addi	sp,sp,4
  122fb0:	da400017 	ldw	r9,0(sp)
  122fb4:	dec00104 	addi	sp,sp,4

	br		key_lookup_cont
  122fb8:	003f0806 	br	122bdc <key_lookup_cont>

00122fbc <set_delay_1>:

set_delay_1:
	MOVWI	r14, 50000
  122fbc:	03800034 	movhi	r14,0
  122fc0:	73b0d414 	ori	r14,r14,50000
	br		inc_delay_cont
  122fc4:	003fde06 	br	122f40 <inc_delay_cont>

00122fc8 <set_delay_2>:

set_delay_2:
	mov		r14, r0
  122fc8:	001d883a 	mov	r14,zero
	br		dec_delay_cont
  122fcc:	003fb706 	br	122eac <dec_delay_cont>

00122fd0 <key_available>:

.global key_available
.type	key_available, @function

key_available:
	SAVE
  122fd0:	deffff04 	addi	sp,sp,-4
  122fd4:	dfc00015 	stw	ra,0(sp)
  122fd8:	deffff04 	addi	sp,sp,-4
  122fdc:	df000015 	stw	fp,0(sp)
  122fe0:	d839883a 	mov	fp,sp
  122fe4:	008004b4 	movhi	r2,18

	# Simply return the value in key_press.
	movia	r2, key_press
  122fe8:	10940804 	addi	r2,r2,20512
	ldb		r2, (r2)
  122fec:	10800007 	ldb	r2,0(r2)

00122ff0 <key_available_done>:

key_available_done:
	RESTORE
  122ff0:	e037883a 	mov	sp,fp
  122ff4:	df000017 	ldw	fp,0(sp)
  122ff8:	dec00104 	addi	sp,sp,4
  122ffc:	dfc00017 	ldw	ra,0(sp)
  123000:	dec00104 	addi	sp,sp,4
	ret
  123004:	f800283a 	ret

00123008 <getkey>:

.global	getkey
.type	getkey, @function

getkey:
	SAVE
  123008:	deffff04 	addi	sp,sp,-4
  12300c:	dfc00015 	stw	ra,0(sp)
  123010:	deffff04 	addi	sp,sp,-4
  123014:	df000015 	stw	fp,0(sp)
  123018:	d839883a 	mov	fp,sp
  12301c:	020004b4 	movhi	r8,18

	# Block until legal key arrives (which is also when key_press = TRUE).
	movia	r8, key_value
  123020:	42140844 	addi	r8,r8,20513
	ldb		r8, (r8)
  123024:	42000007 	ldb	r8,0(r8)
	movi	r9, KEY_ILLEGAL
  123028:	02400184 	movi	r9,6
	beq		r8, r9, getkey
  12302c:	427ff626 	beq	r8,r9,123008 <getkey>
  123030:	008004b4 	movhi	r2,18

	# Get return value.
	movia	r2, key_value
  123034:	10940844 	addi	r2,r2,20513
	ldb		r2, (r2)
  123038:	10800007 	ldb	r2,0(r2)
  12303c:	028004b4 	movhi	r10,18

	# Update key_value with KEY_ILLEGAL.
	movia	r10, key_value
  123040:	52940844 	addi	r10,r10,20513
	stb		r9, (r10)
  123044:	52400005 	stb	r9,0(r10)
  123048:	028004b4 	movhi	r10,18

	# Update key_press with FALSE.
	movia	r10, key_press
  12304c:	52940804 	addi	r10,r10,20512
	stb		r0, (r10)
  123050:	50000005 	stb	zero,0(r10)

00123054 <getkey_done>:

getkey_done:
	RESTORE
  123054:	e037883a 	mov	sp,fp
  123058:	df000017 	ldw	fp,0(sp)
  12305c:	dec00104 	addi	sp,sp,4
  123060:	dfc00017 	ldw	ra,0(sp)
  123064:	dec00104 	addi	sp,sp,4
	ret
  123068:	f800283a 	ret

0012306c <key_map>:
  12306c:	03020100 	call	302010 <alt_irq_handler+0x1b9f24>
  123070:	00000004 	movi	zero,0
	...
  12307c:	06000000 	call	600000 <alt_irq_handler+0x4b7f14>

00123080 <adc_int_installer>:

.global adc_int_installer
.type	adc_int_installer, @function

adc_int_installer:
	SAVE
  123080:	deffff04 	addi	sp,sp,-4
  123084:	dfc00015 	stw	ra,0(sp)
  123088:	deffff04 	addi	sp,sp,-4
  12308c:	df000015 	stw	fp,0(sp)
  123090:	d839883a 	mov	fp,sp

	# Set FIFO speed
	STWI	ADC_RATE_BASE, 0x040000
  123094:	deffff04 	addi	sp,sp,-4
  123098:	da400015 	stw	r9,0(sp)
  12309c:	deffff04 	addi	sp,sp,-4
  1230a0:	da800015 	stw	r10,0(sp)
  1230a4:	02400574 	movhi	r9,21
  1230a8:	4a445c14 	ori	r9,r9,4464
  1230ac:	02800134 	movhi	r10,4
  1230b0:	52800134 	orhi	r10,r10,4
  1230b4:	4a800035 	stwio	r10,0(r9)
  1230b8:	da800017 	ldw	r10,0(sp)
  1230bc:	dec00104 	addi	sp,sp,4
  1230c0:	da400017 	ldw	r9,0(sp)
  1230c4:	dec00104 	addi	sp,sp,4

	# Set Trigger default level (2's complement), delay
	STWI	TRIG_LEVEL_BASE, 0
  1230c8:	deffff04 	addi	sp,sp,-4
  1230cc:	da400015 	stw	r9,0(sp)
  1230d0:	deffff04 	addi	sp,sp,-4
  1230d4:	da800015 	stw	r10,0(sp)
  1230d8:	02400574 	movhi	r9,21
  1230dc:	4a443014 	ori	r9,r9,4288
  1230e0:	02800034 	movhi	r10,0
  1230e4:	52800014 	ori	r10,r10,0
  1230e8:	4a800035 	stwio	r10,0(r9)
  1230ec:	da800017 	ldw	r10,0(sp)
  1230f0:	dec00104 	addi	sp,sp,4
  1230f4:	da400017 	ldw	r9,0(sp)
  1230f8:	dec00104 	addi	sp,sp,4
	STWI	TRIG_DELAY_BASE, 240
  1230fc:	deffff04 	addi	sp,sp,-4
  123100:	da400015 	stw	r9,0(sp)
  123104:	deffff04 	addi	sp,sp,-4
  123108:	da800015 	stw	r10,0(sp)
  12310c:	02400574 	movhi	r9,21
  123110:	4a442814 	ori	r9,r9,4256
  123114:	02800034 	movhi	r10,0
  123118:	52803c14 	ori	r10,r10,240
  12311c:	4a800035 	stwio	r10,0(r9)
  123120:	da800017 	ldw	r10,0(sp)
  123124:	dec00104 	addi	sp,sp,4
  123128:	da400017 	ldw	r9,0(sp)
  12312c:	dec00104 	addi	sp,sp,4

	# Install the interrupt handler
	mov		r4, r0
  123130:	0009883a 	mov	r4,zero
	movi	r5, 6
  123134:	01400184 	movi	r5,6
	MOVWI	r6, adc_int_handler
  123138:	018004b4 	movhi	r6,18
  12313c:	318c9a14 	ori	r6,r6,12904
	mov		r7, r0
  123140:	000f883a 	mov	r7,zero
	PUSH	r0
  123144:	deffff04 	addi	sp,sp,-4
  123148:	d8000015 	stw	zero,0(sp)
	call	alt_ic_isr_register
  12314c:	0123cc00 	call	123cc0 <alt_ic_isr_register>
	POP		r0
  123150:	d8000017 	ldw	zero,0(sp)
  123154:	dec00104 	addi	sp,sp,4

	# Clear the edge capture register (write 1 to clear).
	MOVWI	r8, TRIG_INT_BASE
  123158:	02000574 	movhi	r8,21
  12315c:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0xFFFFFFFF
  123160:	027ffff4 	movhi	r9,65535
  123164:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  123168:	42400315 	stw	r9,12(r8)

	# Enable ADC interrupts. [TYPEOFINTERUPT]
	MOVWI	r8, TRIG_INT_BASE
  12316c:	02000574 	movhi	r8,21
  123170:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0x00000002
  123174:	02400034 	movhi	r9,0
  123178:	4a400094 	ori	r9,r9,2
	stw		r9, PIO_IRQ_MASK(r8)
  12317c:	42400215 	stw	r9,8(r8)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  123180:	deffff04 	addi	sp,sp,-4
  123184:	da400015 	stw	r9,0(sp)
  123188:	deffff04 	addi	sp,sp,-4
  12318c:	da800015 	stw	r10,0(sp)
  123190:	02400574 	movhi	r9,21
  123194:	4a444014 	ori	r9,r9,4352
  123198:	02800034 	movhi	r10,0
  12319c:	52800254 	ori	r10,r10,9
  1231a0:	4a800035 	stwio	r10,0(r9)
  1231a4:	da800017 	ldw	r10,0(sp)
  1231a8:	dec00104 	addi	sp,sp,4
  1231ac:	da400017 	ldw	r9,0(sp)
  1231b0:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  1231b4:	deffff04 	addi	sp,sp,-4
  1231b8:	da400015 	stw	r9,0(sp)
  1231bc:	deffff04 	addi	sp,sp,-4
  1231c0:	da800015 	stw	r10,0(sp)
  1231c4:	02400574 	movhi	r9,21
  1231c8:	4a444014 	ori	r9,r9,4352
  1231cc:	02800034 	movhi	r10,0
  1231d0:	52800054 	ori	r10,r10,1
  1231d4:	4a800035 	stwio	r10,0(r9)
  1231d8:	da800017 	ldw	r10,0(sp)
  1231dc:	dec00104 	addi	sp,sp,4
  1231e0:	da400017 	ldw	r9,0(sp)
  1231e4:	dec00104 	addi	sp,sp,4

	# Reset trigger counter [ch. A], [+ slope]
	STWI	TRIG_CTRL_BASE, 0x04
  1231e8:	deffff04 	addi	sp,sp,-4
  1231ec:	da400015 	stw	r9,0(sp)
  1231f0:	deffff04 	addi	sp,sp,-4
  1231f4:	da800015 	stw	r10,0(sp)
  1231f8:	02400574 	movhi	r9,21
  1231fc:	4a443814 	ori	r9,r9,4320
  123200:	02800034 	movhi	r10,0
  123204:	52800114 	ori	r10,r10,4
  123208:	4a800035 	stwio	r10,0(r9)
  12320c:	da800017 	ldw	r10,0(sp)
  123210:	dec00104 	addi	sp,sp,4
  123214:	da400017 	ldw	r9,0(sp)
  123218:	dec00104 	addi	sp,sp,4
	STWI	TRIG_CTRL_BASE, 0x00
  12321c:	deffff04 	addi	sp,sp,-4
  123220:	da400015 	stw	r9,0(sp)
  123224:	deffff04 	addi	sp,sp,-4
  123228:	da800015 	stw	r10,0(sp)
  12322c:	02400574 	movhi	r9,21
  123230:	4a443814 	ori	r9,r9,4320
  123234:	02800034 	movhi	r10,0
  123238:	52800014 	ori	r10,r10,0
  12323c:	4a800035 	stwio	r10,0(r9)
  123240:	da800017 	ldw	r10,0(sp)
  123244:	dec00104 	addi	sp,sp,4
  123248:	da400017 	ldw	r9,0(sp)
  12324c:	dec00104 	addi	sp,sp,4

00123250 <adc_int_installer_done>:

adc_int_installer_done:
	RESTORE
  123250:	e037883a 	mov	sp,fp
  123254:	df000017 	ldw	fp,0(sp)
  123258:	dec00104 	addi	sp,sp,4
  12325c:	dfc00017 	ldw	ra,0(sp)
  123260:	dec00104 	addi	sp,sp,4
	ret
  123264:	f800283a 	ret

00123268 <adc_int_handler>:

.global adc_int_handler
.type adc_int_handler, @function

adc_int_handler:
	SAVE
  123268:	deffff04 	addi	sp,sp,-4
  12326c:	dfc00015 	stw	ra,0(sp)
  123270:	deffff04 	addi	sp,sp,-4
  123274:	df000015 	stw	fp,0(sp)
  123278:	d839883a 	mov	fp,sp

	# Clear interrupts.
	MOVWI	r8, TRIG_INT_BASE
  12327c:	02000574 	movhi	r8,21
  123280:	42044814 	ori	r8,r8,4384
	stw		r0, PIO_IRQ_MASK(r8)
  123284:	40000215 	stw	zero,8(r8)

	# Get the edge capture register.
	ldw		r9, PIO_EDGE_CAP(r8)
  123288:	42400317 	ldw	r9,12(r8)

	# Only ch A trigger interrupts for now. [TYPEOFINTERRUPT]
	andi	r9, r9, 0x02
  12328c:	4a40008c 	andi	r9,r9,2
	beq		r9, r0, adc_int_handler_done
  123290:	48005426 	beq	r9,zero,1233e4 <adc_int_handler_done>

	# Pause FIFO write, enable reading
	STWI	ADC_CTRL_BASE, 0x02
  123294:	deffff04 	addi	sp,sp,-4
  123298:	da400015 	stw	r9,0(sp)
  12329c:	deffff04 	addi	sp,sp,-4
  1232a0:	da800015 	stw	r10,0(sp)
  1232a4:	02400574 	movhi	r9,21
  1232a8:	4a444014 	ori	r9,r9,4352
  1232ac:	02800034 	movhi	r10,0
  1232b0:	52800094 	ori	r10,r10,2
  1232b4:	4a800035 	stwio	r10,0(r9)
  1232b8:	da800017 	ldw	r10,0(sp)
  1232bc:	dec00104 	addi	sp,sp,4
  1232c0:	da400017 	ldw	r9,0(sp)
  1232c4:	dec00104 	addi	sp,sp,4

	mov		r10, r0
  1232c8:	0015883a 	mov	r10,zero

001232cc <adc_int_handler_clear_front>:
adc_int_handler_clear_front:
	# Bitbang clock pulse
	STWI	ADC_CTRL_BASE, 0x06
  1232cc:	deffff04 	addi	sp,sp,-4
  1232d0:	da400015 	stw	r9,0(sp)
  1232d4:	deffff04 	addi	sp,sp,-4
  1232d8:	da800015 	stw	r10,0(sp)
  1232dc:	02400574 	movhi	r9,21
  1232e0:	4a444014 	ori	r9,r9,4352
  1232e4:	02800034 	movhi	r10,0
  1232e8:	52800194 	ori	r10,r10,6
  1232ec:	4a800035 	stwio	r10,0(r9)
  1232f0:	da800017 	ldw	r10,0(sp)
  1232f4:	dec00104 	addi	sp,sp,4
  1232f8:	da400017 	ldw	r9,0(sp)
  1232fc:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  123300:	deffff04 	addi	sp,sp,-4
  123304:	da400015 	stw	r9,0(sp)
  123308:	deffff04 	addi	sp,sp,-4
  12330c:	da800015 	stw	r10,0(sp)
  123310:	02400574 	movhi	r9,21
  123314:	4a444014 	ori	r9,r9,4352
  123318:	02800034 	movhi	r10,0
  12331c:	52800094 	ori	r10,r10,2
  123320:	4a800035 	stwio	r10,0(r9)
  123324:	da800017 	ldw	r10,0(sp)
  123328:	dec00104 	addi	sp,sp,4
  12332c:	da400017 	ldw	r9,0(sp)
  123330:	dec00104 	addi	sp,sp,4

	addi	r10, r10, 1
  123334:	52800044 	addi	r10,r10,1
	movi	r13, 13
  123338:	03400344 	movi	r13,13
	bltu	r10, r13, adc_int_handler_clear_front
  12333c:	537fe336 	bltu	r10,r13,1232cc <adc_int_handler_clear_front>
  123340:	020004b4 	movhi	r8,18

	movia	r8, sample_buffer_A
  123344:	42141004 	addi	r8,r8,20544
	mov		r10, r0
  123348:	0015883a 	mov	r10,zero

0012334c <adc_int_handler_loop>:

adc_int_handler_loop:
	# Bitbang clock pulse
	STWI	ADC_CTRL_BASE, 0x06
  12334c:	deffff04 	addi	sp,sp,-4
  123350:	da400015 	stw	r9,0(sp)
  123354:	deffff04 	addi	sp,sp,-4
  123358:	da800015 	stw	r10,0(sp)
  12335c:	02400574 	movhi	r9,21
  123360:	4a444014 	ori	r9,r9,4352
  123364:	02800034 	movhi	r10,0
  123368:	52800194 	ori	r10,r10,6
  12336c:	4a800035 	stwio	r10,0(r9)
  123370:	da800017 	ldw	r10,0(sp)
  123374:	dec00104 	addi	sp,sp,4
  123378:	da400017 	ldw	r9,0(sp)
  12337c:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  123380:	deffff04 	addi	sp,sp,-4
  123384:	da400015 	stw	r9,0(sp)
  123388:	deffff04 	addi	sp,sp,-4
  12338c:	da800015 	stw	r10,0(sp)
  123390:	02400574 	movhi	r9,21
  123394:	4a444014 	ori	r9,r9,4352
  123398:	02800034 	movhi	r10,0
  12339c:	52800094 	ori	r10,r10,2
  1233a0:	4a800035 	stwio	r10,0(r9)
  1233a4:	da800017 	ldw	r10,0(sp)
  1233a8:	dec00104 	addi	sp,sp,4
  1233ac:	da400017 	ldw	r9,0(sp)
  1233b0:	dec00104 	addi	sp,sp,4

	MOVWI	r11, ADC_RAW_BASE
  1233b4:	02c00574 	movhi	r11,21
  1233b8:	5ac46014 	ori	r11,r11,4480
	ldwio	r12, (r11)
  1233bc:	5b000037 	ldwio	r12,0(r11)
	movui	r13, 128
  1233c0:	03402014 	movui	r13,128
	add		r12, r12, r13
  1233c4:	6359883a 	add	r12,r12,r13
	andi	r12, r12, 0xFF
  1233c8:	63003fcc 	andi	r12,r12,255

	stb		r12, (r8)
  1233cc:	43000005 	stb	r12,0(r8)
	addi	r8, r8, 1
  1233d0:	42000044 	addi	r8,r8,1
	addi	r10, r10, 1
  1233d4:	52800044 	addi	r10,r10,1
	movi	r13, 480
  1233d8:	03407804 	movi	r13,480
	bltu	r10, r13, adc_int_handler_loop
  1233dc:	537fdb36 	bltu	r10,r13,12334c <adc_int_handler_loop>

	call	draw_trace
  1233e0:	01234f40 	call	1234f4 <draw_trace>

001233e4 <adc_int_handler_done>:

adc_int_handler_done:
	# Clear the edge capture register (write 1 to clear).
	MOVWI	r8, TRIG_INT_BASE
  1233e4:	02000574 	movhi	r8,21
  1233e8:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0xFFFFFFFF
  1233ec:	027ffff4 	movhi	r9,65535
  1233f0:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  1233f4:	42400315 	stw	r9,12(r8)

	# Re-enable interrupts. [TYPEOFINTERRUPT]
	MOVWI	r8, TRIG_INT_BASE
  1233f8:	02000574 	movhi	r8,21
  1233fc:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0x00000002
  123400:	02400034 	movhi	r9,0
  123404:	4a400094 	ori	r9,r9,2
	stw		r9, PIO_IRQ_MASK(r8)
  123408:	42400215 	stw	r9,8(r8)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  12340c:	deffff04 	addi	sp,sp,-4
  123410:	da400015 	stw	r9,0(sp)
  123414:	deffff04 	addi	sp,sp,-4
  123418:	da800015 	stw	r10,0(sp)
  12341c:	02400574 	movhi	r9,21
  123420:	4a444014 	ori	r9,r9,4352
  123424:	02800034 	movhi	r10,0
  123428:	52800254 	ori	r10,r10,9
  12342c:	4a800035 	stwio	r10,0(r9)
  123430:	da800017 	ldw	r10,0(sp)
  123434:	dec00104 	addi	sp,sp,4
  123438:	da400017 	ldw	r9,0(sp)
  12343c:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  123440:	deffff04 	addi	sp,sp,-4
  123444:	da400015 	stw	r9,0(sp)
  123448:	deffff04 	addi	sp,sp,-4
  12344c:	da800015 	stw	r10,0(sp)
  123450:	02400574 	movhi	r9,21
  123454:	4a444014 	ori	r9,r9,4352
  123458:	02800034 	movhi	r10,0
  12345c:	52800054 	ori	r10,r10,1
  123460:	4a800035 	stwio	r10,0(r9)
  123464:	da800017 	ldw	r10,0(sp)
  123468:	dec00104 	addi	sp,sp,4
  12346c:	da400017 	ldw	r9,0(sp)
  123470:	dec00104 	addi	sp,sp,4

	# Restart trigger counter [ch. A], [+ slope]
	STWI	TRIG_CTRL_BASE, 0x04
  123474:	deffff04 	addi	sp,sp,-4
  123478:	da400015 	stw	r9,0(sp)
  12347c:	deffff04 	addi	sp,sp,-4
  123480:	da800015 	stw	r10,0(sp)
  123484:	02400574 	movhi	r9,21
  123488:	4a443814 	ori	r9,r9,4320
  12348c:	02800034 	movhi	r10,0
  123490:	52800114 	ori	r10,r10,4
  123494:	4a800035 	stwio	r10,0(r9)
  123498:	da800017 	ldw	r10,0(sp)
  12349c:	dec00104 	addi	sp,sp,4
  1234a0:	da400017 	ldw	r9,0(sp)
  1234a4:	dec00104 	addi	sp,sp,4
	STWI	TRIG_CTRL_BASE, 0x00
  1234a8:	deffff04 	addi	sp,sp,-4
  1234ac:	da400015 	stw	r9,0(sp)
  1234b0:	deffff04 	addi	sp,sp,-4
  1234b4:	da800015 	stw	r10,0(sp)
  1234b8:	02400574 	movhi	r9,21
  1234bc:	4a443814 	ori	r9,r9,4320
  1234c0:	02800034 	movhi	r10,0
  1234c4:	52800014 	ori	r10,r10,0
  1234c8:	4a800035 	stwio	r10,0(r9)
  1234cc:	da800017 	ldw	r10,0(sp)
  1234d0:	dec00104 	addi	sp,sp,4
  1234d4:	da400017 	ldw	r9,0(sp)
  1234d8:	dec00104 	addi	sp,sp,4

	RESTORE
  1234dc:	e037883a 	mov	sp,fp
  1234e0:	df000017 	ldw	fp,0(sp)
  1234e4:	dec00104 	addi	sp,sp,4
  1234e8:	dfc00017 	ldw	ra,0(sp)
  1234ec:	dec00104 	addi	sp,sp,4
	ret
  1234f0:	f800283a 	ret

001234f4 <draw_trace>:

.global draw_trace
.type draw_trace, @function

draw_trace:
	SAVE
  1234f4:	deffff04 	addi	sp,sp,-4
  1234f8:	dfc00015 	stw	ra,0(sp)
  1234fc:	deffff04 	addi	sp,sp,-4
  123500:	df000015 	stw	fp,0(sp)
  123504:	d839883a 	mov	fp,sp
  123508:	020004b4 	movhi	r8,18

	movia	r8, sample_buffer_A
  12350c:	42141004 	addi	r8,r8,20544
  123510:	024004b4 	movhi	r9,18
	movia	r9, sample_buffer_Ao
  123514:	4a548804 	addi	r9,r9,21024
	mov		r10, r0
  123518:	0015883a 	mov	r10,zero

0012351c <draw_trace_loop>:
draw_trace_loop:
	ldb		r12, (r9)
  12351c:	4b000007 	ldb	r12,0(r9)
	movui	r13, 255
  123520:	03403fd4 	movui	r13,255
	sub		r12, r13, r12
  123524:	6b19c83a 	sub	r12,r13,r12
	andi	r12, r12, 0xFF
  123528:	63003fcc 	andi	r12,r12,255
	addi	r12, r12, 5
  12352c:	63000144 	addi	r12,r12,5

	push	r4
  123530:	deffff04 	addi	sp,sp,-4
  123534:	d9000015 	stw	r4,0(sp)
	push	r5
  123538:	deffff04 	addi	sp,sp,-4
  12353c:	d9400015 	stw	r5,0(sp)
	push	r6
  123540:	deffff04 	addi	sp,sp,-4
  123544:	d9800015 	stw	r6,0(sp)

	mov		r4, r12
  123548:	6009883a 	mov	r4,r12
	mov		r5, r10
  12354c:	500b883a 	mov	r5,r10
	movui	r6, 0x003C
  123550:	01800f14 	movui	r6,60
	call	draw_pixel
  123554:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  123558:	21000044 	addi	r4,r4,1
	call	draw_pixel
  12355c:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  123560:	21000044 	addi	r4,r4,1
	call	draw_pixel
  123564:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  123568:	21000044 	addi	r4,r4,1
	call	draw_pixel
  12356c:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  123570:	21000044 	addi	r4,r4,1
	call	draw_pixel
  123574:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  123578:	21000044 	addi	r4,r4,1
	call	draw_pixel
  12357c:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  123580:	21000044 	addi	r4,r4,1
	call	draw_pixel
  123584:	01237100 	call	123710 <draw_pixel>

	subi	r4, r4, 6
  123588:	213ffe84 	addi	r4,r4,-6
	call	draw_pixel
  12358c:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  123590:	21000044 	addi	r4,r4,1
	call	draw_pixel
  123594:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  123598:	21000044 	addi	r4,r4,1
	call	draw_pixel
  12359c:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  1235a0:	21000044 	addi	r4,r4,1
	call	draw_pixel
  1235a4:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  1235a8:	21000044 	addi	r4,r4,1
	call	draw_pixel
  1235ac:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  1235b0:	21000044 	addi	r4,r4,1
	call	draw_pixel
  1235b4:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  1235b8:	21000044 	addi	r4,r4,1
	call	draw_pixel
  1235bc:	01237100 	call	123710 <draw_pixel>

	pop		r6
  1235c0:	d9800017 	ldw	r6,0(sp)
  1235c4:	dec00104 	addi	sp,sp,4
	pop		r5
  1235c8:	d9400017 	ldw	r5,0(sp)
  1235cc:	dec00104 	addi	sp,sp,4
	pop		r4
  1235d0:	d9000017 	ldw	r4,0(sp)
  1235d4:	dec00104 	addi	sp,sp,4


	ldb		r12, (r8)
  1235d8:	43000007 	ldb	r12,0(r8)
	stb		r12, (r9)
  1235dc:	4b000005 	stb	r12,0(r9)
	movui	r13, 255
  1235e0:	03403fd4 	movui	r13,255
	sub		r12, r13, r12
  1235e4:	6b19c83a 	sub	r12,r13,r12
	andi	r12, r12, 0xFF
  1235e8:	63003fcc 	andi	r12,r12,255
	addi	r12, r12, 8
  1235ec:	63000204 	addi	r12,r12,8

	push	r4
  1235f0:	deffff04 	addi	sp,sp,-4
  1235f4:	d9000015 	stw	r4,0(sp)
	push	r5
  1235f8:	deffff04 	addi	sp,sp,-4
  1235fc:	d9400015 	stw	r5,0(sp)
	push	r6
  123600:	deffff04 	addi	sp,sp,-4
  123604:	d9800015 	stw	r6,0(sp)

	mov		r4, r12
  123608:	6009883a 	mov	r4,r12
	mov		r5, r10
  12360c:	500b883a 	mov	r5,r10
	movui	r6, 0xE003
  123610:	01b800d4 	movui	r6,57347
	call	draw_pixel
  123614:	01237100 	call	123710 <draw_pixel>

	pop		r6
  123618:	d9800017 	ldw	r6,0(sp)
  12361c:	dec00104 	addi	sp,sp,4
	pop		r5
  123620:	d9400017 	ldw	r5,0(sp)
  123624:	dec00104 	addi	sp,sp,4
	pop		r4
  123628:	d9000017 	ldw	r4,0(sp)
  12362c:	dec00104 	addi	sp,sp,4

	addi	r8, r8, 1
  123630:	42000044 	addi	r8,r8,1
	addi	r9, r9, 1
  123634:	4a400044 	addi	r9,r9,1
	addi	r10, r10, 1
  123638:	52800044 	addi	r10,r10,1
	movi	r13, 480
  12363c:	03407804 	movi	r13,480
	bltu	r10, r13, draw_trace_loop
  123640:	537fb636 	bltu	r10,r13,12351c <draw_trace_loop>

00123644 <draw_trace_done>:

draw_trace_done:
	RESTORE
  123644:	e037883a 	mov	sp,fp
  123648:	df000017 	ldw	fp,0(sp)
  12364c:	dec00104 	addi	sp,sp,4
  123650:	dfc00017 	ldw	ra,0(sp)
  123654:	dec00104 	addi	sp,sp,4
	ret
  123658:	f800283a 	ret

0012365c <draw_grid>:

.global draw_grid
.type draw_grid, @function

draw_grid:
	SAVE
  12365c:	deffff04 	addi	sp,sp,-4
  123660:	dfc00015 	stw	ra,0(sp)
  123664:	deffff04 	addi	sp,sp,-4
  123668:	df000015 	stw	fp,0(sp)
  12366c:	d839883a 	mov	fp,sp
	push	r4
  123670:	deffff04 	addi	sp,sp,-4
  123674:	d9000015 	stw	r4,0(sp)
	push	r5
  123678:	deffff04 	addi	sp,sp,-4
  12367c:	d9400015 	stw	r5,0(sp)
	push	r6
  123680:	deffff04 	addi	sp,sp,-4
  123684:	d9800015 	stw	r6,0(sp)

	movui	r6, 0x1F00
  123688:	0187c014 	movui	r6,7936

	movui	r4, 136
  12368c:	01002214 	movui	r4,136
	mov		r5, r0
  123690:	000b883a 	mov	r5,zero

00123694 <draw_grid_horiz>:
draw_grid_horiz:
	call	draw_pixel
  123694:	01237100 	call	123710 <draw_pixel>
	movui	r6, 0x003C
  123698:	01800f14 	movui	r6,60
	addi	r4, r4, 1
  12369c:	21000044 	addi	r4,r4,1
	call	draw_pixel
  1236a0:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  1236a4:	21000044 	addi	r4,r4,1
	call	draw_pixel
  1236a8:	01237100 	call	123710 <draw_pixel>
	addi	r4, r4, 1
  1236ac:	21000044 	addi	r4,r4,1
	call	draw_pixel
  1236b0:	01237100 	call	123710 <draw_pixel>
	movui	r6, 0x1F00
  1236b4:	0187c014 	movui	r6,7936
	subi	r4, r4, 3
  1236b8:	213fff44 	addi	r4,r4,-3

	addi	r5, r5, 1
  1236bc:	29400044 	addi	r5,r5,1
	movi	r8, 480
  1236c0:	02007804 	movi	r8,480
	bltu	r5, r8, draw_grid_horiz
  1236c4:	2a3ff336 	bltu	r5,r8,123694 <draw_grid_horiz>

	mov		r4, r0
  1236c8:	0009883a 	mov	r4,zero
	movui	r5, 240
  1236cc:	01403c14 	movui	r5,240

001236d0 <draw_grid_vert>:
draw_grid_vert:
	call	draw_pixel
  1236d0:	01237100 	call	123710 <draw_pixel>

	addi	r4, r4, 1
  1236d4:	21000044 	addi	r4,r4,1
	movi	r8, 272
  1236d8:	02004404 	movi	r8,272
	bltu	r4, r8, draw_grid_vert
  1236dc:	223ffc36 	bltu	r4,r8,1236d0 <draw_grid_vert>

001236e0 <draw_grid_done>:

draw_grid_done:
	pop		r6
  1236e0:	d9800017 	ldw	r6,0(sp)
  1236e4:	dec00104 	addi	sp,sp,4
	pop		r5
  1236e8:	d9400017 	ldw	r5,0(sp)
  1236ec:	dec00104 	addi	sp,sp,4
	pop		r4
  1236f0:	d9000017 	ldw	r4,0(sp)
  1236f4:	dec00104 	addi	sp,sp,4
	RESTORE
  1236f8:	e037883a 	mov	sp,fp
  1236fc:	df000017 	ldw	fp,0(sp)
  123700:	dec00104 	addi	sp,sp,4
  123704:	dfc00017 	ldw	ra,0(sp)
  123708:	dec00104 	addi	sp,sp,4
	ret
  12370c:	f800283a 	ret

00123710 <draw_pixel>:




draw_pixel:
	SAVE
  123710:	deffff04 	addi	sp,sp,-4
  123714:	dfc00015 	stw	ra,0(sp)
  123718:	deffff04 	addi	sp,sp,-4
  12371c:	df000015 	stw	fp,0(sp)
  123720:	d839883a 	mov	fp,sp

	push	r4
  123724:	deffff04 	addi	sp,sp,-4
  123728:	d9000015 	stw	r4,0(sp)
	push	r5
  12372c:	deffff04 	addi	sp,sp,-4
  123730:	d9400015 	stw	r5,0(sp)

	slli	r4, r4, 10
  123734:	200892ba 	slli	r4,r4,10
	add		r4, r4, r5
  123738:	2149883a 	add	r4,r4,r5
	add		r4, r4, r5
  12373c:	2149883a 	add	r4,r4,r5
	MOVWI	r5, VRAM_CTRL_BASE
  123740:	01400234 	movhi	r5,8
  123744:	29400234 	orhi	r5,r5,8
	add		r4, r4, r5
  123748:	2149883a 	add	r4,r4,r5
	sthio	r6, (r4)
  12374c:	2180002d 	sthio	r6,0(r4)

	pop		r5
  123750:	d9400017 	ldw	r5,0(sp)
  123754:	dec00104 	addi	sp,sp,4
	pop		r4
  123758:	d9000017 	ldw	r4,0(sp)
  12375c:	dec00104 	addi	sp,sp,4

00123760 <draw_pixel_done>:

draw_pixel_done:
	RESTORE
  123760:	e037883a 	mov	sp,fp
  123764:	df000017 	ldw	fp,0(sp)
  123768:	dec00104 	addi	sp,sp,4
  12376c:	dfc00017 	ldw	ra,0(sp)
  123770:	dec00104 	addi	sp,sp,4
	ret
  123774:	f800283a 	ret

00123778 <clear_display_x>:

.global clear_display_x
.type clear_display_x, @function

clear_display_x:
	SAVE
  123778:	deffff04 	addi	sp,sp,-4
  12377c:	dfc00015 	stw	ra,0(sp)
  123780:	deffff04 	addi	sp,sp,-4
  123784:	df000015 	stw	fp,0(sp)
  123788:	d839883a 	mov	fp,sp

	movhi	r8, %hi(VRAM_CTRL_BASE)
  12378c:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  123790:	42000234 	orhi	r8,r8,8
	movi	r12, 512
  123794:	03008004 	movi	r12,512
	movi	r13, 272
  123798:	03404404 	movi	r13,272
	mov		r10, r0
  12379c:	0015883a 	mov	r10,zero

001237a0 <loop_clr_x>:

loop_clr_x:
	movui	r14, 0x003C
  1237a0:	03800f14 	movui	r14,60
	sthio 	r14, (r8)
  1237a4:	4380002d 	sthio	r14,0(r8)
	addi	r8, r8, 2
  1237a8:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  1237ac:	5ac00044 	addi	r11,r11,1
	bltu	r11, r12, loop_clr_x
  1237b0:	5b3ffb36 	bltu	r11,r12,1237a0 <loop_clr_x>

	mov		r11, r0
  1237b4:	0017883a 	mov	r11,zero
	addi	r10, r10, 1
  1237b8:	52800044 	addi	r10,r10,1
	bltu	r10, r13, loop_clr_x
  1237bc:	537ff836 	bltu	r10,r13,1237a0 <loop_clr_x>

	RESTORE
  1237c0:	e037883a 	mov	sp,fp
  1237c4:	df000017 	ldw	fp,0(sp)
  1237c8:	dec00104 	addi	sp,sp,4
  1237cc:	dfc00017 	ldw	ra,0(sp)
  1237d0:	dec00104 	addi	sp,sp,4
	ret
  1237d4:	f800283a 	ret

001237d8 <clear_display_y>:

.global clear_display_y
.type clear_display_y, @function

clear_display_y:
	SAVE
  1237d8:	deffff04 	addi	sp,sp,-4
  1237dc:	dfc00015 	stw	ra,0(sp)
  1237e0:	deffff04 	addi	sp,sp,-4
  1237e4:	df000015 	stw	fp,0(sp)
  1237e8:	d839883a 	mov	fp,sp

	movhi	r8, %hi(VRAM_CTRL_BASE)
  1237ec:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  1237f0:	42000234 	orhi	r8,r8,8
	movi	r12, 512
  1237f4:	03008004 	movi	r12,512
	movi	r13, 272
  1237f8:	03404404 	movi	r13,272
	mov		r10, r0
  1237fc:	0015883a 	mov	r10,zero

00123800 <loop_clr_y>:

loop_clr_y:
	movui	r14, 0x0000
  123800:	03800014 	movui	r14,0
	sthio 	r14, (r8)
  123804:	4380002d 	sthio	r14,0(r8)
	addi	r8, r8, 2
  123808:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  12380c:	5ac00044 	addi	r11,r11,1
	bltu	r11, r12, loop_clr_y
  123810:	5b3ffb36 	bltu	r11,r12,123800 <loop_clr_y>

	mov		r11, r0
  123814:	0017883a 	mov	r11,zero
	addi	r10, r10, 1
  123818:	52800044 	addi	r10,r10,1
	bltu	r10, r13, loop_clr_y
  12381c:	537ff836 	bltu	r10,r13,123800 <loop_clr_y>

	RESTORE
  123820:	e037883a 	mov	sp,fp
  123824:	df000017 	ldw	fp,0(sp)
  123828:	dec00104 	addi	sp,sp,4
  12382c:	dfc00017 	ldw	ra,0(sp)
  123830:	dec00104 	addi	sp,sp,4
	ret
  123834:	f800283a 	ret

00123838 <test_disp>:

.global test_disp
.type test_disp,@function

test_disp:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  123838:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  12383c:	42000234 	orhi	r8,r8,8
	mov		r11, r0
  123840:	0017883a 	mov	r11,zero
	mov		r12, r0
  123844:	0019883a 	mov	r12,zero

00123848 <disp>:

disp:
	movi	r13, 136
  123848:	03402204 	movi	r13,136
	bltu	r12, r13, draw_top
  12384c:	63400836 	bltu	r12,r13,123870 <draw_top>
	br 		draw_bot
  123850:	00000a06 	br	12387c <draw_bot>

00123854 <disp_cont>:
disp_cont:
	addi	r8, r8, 2
  123854:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  123858:	5ac00044 	addi	r11,r11,1
	movi	r13, 272
  12385c:	03404404 	movi	r13,272
	bgeu	r12, r13, draw_border
  123860:	6340152e 	bgeu	r12,r13,1238b8 <draw_border>
	movi	r13, 0x0200
  123864:	03408004 	movi	r13,512
	bgeu	r11, r13, disp_reset
  123868:	5b403d2e 	bgeu	r11,r13,123960 <disp_reset>
	br		disp
  12386c:	003ff606 	br	123848 <disp>

00123870 <draw_top>:

draw_top:
	movi	r13, 240
  123870:	03403c04 	movi	r13,240
	bltu	r11, r13, draw_red
  123874:	5b400436 	bltu	r11,r13,123888 <draw_red>
	br		draw_yellow
  123878:	00000606 	br	123894 <draw_yellow>

0012387c <draw_bot>:

draw_bot:
	movi	r13, 240
  12387c:	03403c04 	movi	r13,240
	bltu	r11, r13, draw_green
  123880:	5b400736 	bltu	r11,r13,1238a0 <draw_green>
	br		draw_blue
  123884:	00000906 	br	1238ac <draw_blue>

00123888 <draw_red>:

draw_red:
	movi	r9, 0x1F00
  123888:	0247c004 	movi	r9,7936
	sthio	r9, (r8)
  12388c:	4240002d 	sthio	r9,0(r8)
	br 		disp_cont
  123890:	003ff006 	br	123854 <disp_cont>

00123894 <draw_yellow>:

draw_yellow:
	movui	r9, 0xFF03
  123894:	027fc0d4 	movui	r9,65283
	sthio 	r9, (r8)
  123898:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  12389c:	003fed06 	br	123854 <disp_cont>

001238a0 <draw_green>:

draw_green:
	movui	r9, 0xE003
  1238a0:	027800d4 	movui	r9,57347
	sthio 	r9, (r8)
  1238a4:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  1238a8:	003fea06 	br	123854 <disp_cont>

001238ac <draw_blue>:

draw_blue:
	movi	r9, 0x007C
  1238ac:	02401f04 	movi	r9,124
	sthio 	r9, (r8)
  1238b0:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  1238b4:	003fe706 	br	123854 <disp_cont>

001238b8 <draw_border>:

draw_border:
	movi	r9, 0x1F7C
  1238b8:	0247df04 	movi	r9,8060
	movi	r12, 272
  1238bc:	03004404 	movi	r12,272
	movi	r13, 480
  1238c0:	03407804 	movi	r13,480

001238c4 <draw_border_top>:

draw_border_top:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  1238c4:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  1238c8:	42000234 	orhi	r8,r8,8
	addi	r8, r8, 0x0400
  1238cc:	42010004 	addi	r8,r8,1024
	mov		r11, r0
  1238d0:	0017883a 	mov	r11,zero

001238d4 <dbt_loop>:
dbt_loop:
	sthio	r9, (r8)
  1238d4:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 2
  1238d8:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  1238dc:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r13, draw_border_bot
  1238e0:	5b40012e 	bgeu	r11,r13,1238e8 <draw_border_bot>
	br		dbt_loop
  1238e4:	003ffb06 	br	1238d4 <dbt_loop>

001238e8 <draw_border_bot>:

draw_border_bot:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  1238e8:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  1238ec:	42000234 	orhi	r8,r8,8
	movhi	r14, %hi(277504)
  1238f0:	03800134 	movhi	r14,4
	ori		r14, r14, %lo(277504)
  1238f4:	738f0014 	ori	r14,r14,15360
	add		r8, r8, r14
  1238f8:	4391883a 	add	r8,r8,r14
	mov		r11, r0
  1238fc:	0017883a 	mov	r11,zero

00123900 <dbb_loop>:
dbb_loop:
	sthio	r9, (r8)
  123900:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 2
  123904:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  123908:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r13, draw_border_left
  12390c:	5b40012e 	bgeu	r11,r13,123914 <draw_border_left>
	br		dbb_loop
  123910:	003ffb06 	br	123900 <dbb_loop>

00123914 <draw_border_left>:

draw_border_left:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  123914:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  123918:	42000234 	orhi	r8,r8,8
	mov		r11, r0
  12391c:	0017883a 	mov	r11,zero

00123920 <dbl_loop>:
dbl_loop:
	sthio	r9, (r8)
  123920:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 0x0400
  123924:	42010004 	addi	r8,r8,1024
	addi	r11, r11, 1
  123928:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r12, draw_border_right
  12392c:	5b00012e 	bgeu	r11,r12,123934 <draw_border_right>
	br		dbl_loop
  123930:	003ffb06 	br	123920 <dbl_loop>

00123934 <draw_border_right>:

draw_border_right:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  123934:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  123938:	42000234 	orhi	r8,r8,8
	add		r8, r8, r13
  12393c:	4351883a 	add	r8,r8,r13
	add		r8, r8, r13
  123940:	4351883a 	add	r8,r8,r13
	subi	r8, r8, 1
  123944:	423fffc4 	addi	r8,r8,-1
	mov		r11, r0
  123948:	0017883a 	mov	r11,zero

0012394c <dbr_loop>:
dbr_loop:
	sthio	r9, (r8)
  12394c:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 0x0400
  123950:	42010004 	addi	r8,r8,1024
	addi	r11, r11, 1
  123954:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r12, test_disp_done
  123958:	5b00042e 	bgeu	r11,r12,12396c <test_disp_done>
	br		dbr_loop
  12395c:	003ffb06 	br	12394c <dbr_loop>

00123960 <disp_reset>:

disp_reset:
	mov		r11, r0
  123960:	0017883a 	mov	r11,zero
	addi	r12, r12, 1
  123964:	63000044 	addi	r12,r12,1
	br		disp
  123968:	003fb706 	br	123848 <disp>

0012396c <test_disp_done>:

test_disp_done:
	ret
  12396c:	f800283a 	ret

00123970 <test_vram>:

.global test_vram
.type test_vram,@function

test_vram:
	SAVE
  123970:	deffff04 	addi	sp,sp,-4
  123974:	dfc00015 	stw	ra,0(sp)
  123978:	deffff04 	addi	sp,sp,-4
  12397c:	df000015 	stw	fp,0(sp)
  123980:	d839883a 	mov	fp,sp

	movhi	r8, %hi(VRAM_CTRL_BASE)
  123984:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  123988:	42000234 	orhi	r8,r8,8
	movhi	r9, %hi(VRAM_CTRL_SPAN)
  12398c:	02400234 	movhi	r9,8
	ori		r9, r9, %lo(VRAM_CTRL_SPAN)
  123990:	4a400234 	orhi	r9,r9,8
	add		r9, r8, r9
  123994:	4253883a 	add	r9,r8,r9
	movui	r12, 0x7000
  123998:	031c0014 	movui	r12,28672

	#call	write_read_all

	call	write_all
  12399c:	01239cc0 	call	1239cc <write_all>
	call	read_all
  1239a0:	01239f80 	call	1239f8 <read_all>

	nop
  1239a4:	0001883a 	nop
	call	read_all
  1239a8:	01239f80 	call	1239f8 <read_all>

001239ac <test_vram_fail>:

test_vram_fail:
	nop
  1239ac:	0001883a 	nop
	br 		test_vram_fail
  1239b0:	003ffe06 	br	1239ac <test_vram_fail>

001239b4 <test_vram_done>:

test_vram_done:
	RESTORE
  1239b4:	e037883a 	mov	sp,fp
  1239b8:	df000017 	ldw	fp,0(sp)
  1239bc:	dec00104 	addi	sp,sp,4
  1239c0:	dfc00017 	ldw	ra,0(sp)
  1239c4:	dec00104 	addi	sp,sp,4
	ret
  1239c8:	f800283a 	ret

001239cc <write_all>:


.type write_all, @function

write_all:
	mov		r10, r8
  1239cc:	4015883a 	mov	r10,r8
	mov		r11, r0
  1239d0:	0017883a 	mov	r11,zero

001239d4 <write_all_loop>:

write_all_loop:
	sthio	r11, (r10)
  1239d4:	52c0002d 	sthio	r11,0(r10)
	addi	r10, r10, 2
  1239d8:	52800084 	addi	r10,r10,2
	addi	r11, r11, 1
  1239dc:	5ac00044 	addi	r11,r11,1
	bgeu	r10, r9, write_all_done
  1239e0:	5240042e 	bgeu	r10,r9,1239f4 <write_all_done>
	bgeu	r11, r12, write_all_reset_cnt
  1239e4:	5b00012e 	bgeu	r11,r12,1239ec <write_all_reset_cnt>
	br		write_all_loop
  1239e8:	003ffa06 	br	1239d4 <write_all_loop>

001239ec <write_all_reset_cnt>:

write_all_reset_cnt:
	mov		r11, r0
  1239ec:	0017883a 	mov	r11,zero
	br		write_all_loop
  1239f0:	003ff806 	br	1239d4 <write_all_loop>

001239f4 <write_all_done>:

write_all_done:
	ret
  1239f4:	f800283a 	ret

001239f8 <read_all>:


.type read_all, @function

read_all:
	mov		r10, r8
  1239f8:	4015883a 	mov	r10,r8
	mov		r11, r0
  1239fc:	0017883a 	mov	r11,zero

00123a00 <read_all_loop>:

read_all_loop:
	ldhio	r13, (r10)
  123a00:	5340002f 	ldhio	r13,0(r10)
	bne		r13, r11, test_vram_fail
  123a04:	6affe91e 	bne	r13,r11,1239ac <test_vram_fail>
	addi	r10, r10, 2
  123a08:	52800084 	addi	r10,r10,2
	addi	r11, r11, 1
  123a0c:	5ac00044 	addi	r11,r11,1
	bgeu	r10, r9, read_all_done
  123a10:	5240042e 	bgeu	r10,r9,123a24 <read_all_done>
	bgeu	r11, r12, read_all_reset_cnt
  123a14:	5b00012e 	bgeu	r11,r12,123a1c <read_all_reset_cnt>
	br		read_all_loop
  123a18:	003ff906 	br	123a00 <read_all_loop>

00123a1c <read_all_reset_cnt>:

read_all_reset_cnt:
	mov		r11, r0
  123a1c:	0017883a 	mov	r11,zero
	br		write_all_loop
  123a20:	003fec06 	br	1239d4 <write_all_loop>

00123a24 <read_all_done>:

read_all_done:
	ret
  123a24:	f800283a 	ret

00123a28 <udivmodsi4>:
  123a28:	2005883a 	mov	r2,r4
  123a2c:	2900182e 	bgeu	r5,r4,123a90 <udivmodsi4+0x68>
  123a30:	28001716 	blt	r5,zero,123a90 <udivmodsi4+0x68>
  123a34:	01000804 	movi	r4,32
  123a38:	00c00044 	movi	r3,1
  123a3c:	00000206 	br	123a48 <udivmodsi4+0x20>
  123a40:	20001126 	beq	r4,zero,123a88 <udivmodsi4+0x60>
  123a44:	28000516 	blt	r5,zero,123a5c <udivmodsi4+0x34>
  123a48:	294b883a 	add	r5,r5,r5
  123a4c:	213fffc4 	addi	r4,r4,-1
  123a50:	18c7883a 	add	r3,r3,r3
  123a54:	28bffa36 	bltu	r5,r2,123a40 <udivmodsi4+0x18>
  123a58:	18000b26 	beq	r3,zero,123a88 <udivmodsi4+0x60>
  123a5c:	0009883a 	mov	r4,zero
  123a60:	11400236 	bltu	r2,r5,123a6c <udivmodsi4+0x44>
  123a64:	1145c83a 	sub	r2,r2,r5
  123a68:	20c8b03a 	or	r4,r4,r3
  123a6c:	1806d07a 	srli	r3,r3,1
  123a70:	280ad07a 	srli	r5,r5,1
  123a74:	183ffa1e 	bne	r3,zero,123a60 <udivmodsi4+0x38>
  123a78:	3000021e 	bne	r6,zero,123a84 <udivmodsi4+0x5c>
  123a7c:	2005883a 	mov	r2,r4
  123a80:	f800283a 	ret
  123a84:	f800283a 	ret
  123a88:	0009883a 	mov	r4,zero
  123a8c:	003ffa06 	br	123a78 <udivmodsi4+0x50>
  123a90:	00c00044 	movi	r3,1
  123a94:	0009883a 	mov	r4,zero
  123a98:	003ff106 	br	123a60 <udivmodsi4+0x38>

00123a9c <__divsi3>:
  123a9c:	defffe04 	addi	sp,sp,-8
  123aa0:	dfc00115 	stw	ra,4(sp)
  123aa4:	dc000015 	stw	r16,0(sp)
  123aa8:	20000a16 	blt	r4,zero,123ad4 <__divsi3+0x38>
  123aac:	0021883a 	mov	r16,zero
  123ab0:	28000b16 	blt	r5,zero,123ae0 <__divsi3+0x44>
  123ab4:	000d883a 	mov	r6,zero
  123ab8:	0123a280 	call	123a28 <udivmodsi4>
  123abc:	80000126 	beq	r16,zero,123ac4 <__divsi3+0x28>
  123ac0:	0085c83a 	sub	r2,zero,r2
  123ac4:	dfc00117 	ldw	ra,4(sp)
  123ac8:	dc000017 	ldw	r16,0(sp)
  123acc:	dec00204 	addi	sp,sp,8
  123ad0:	f800283a 	ret
  123ad4:	0109c83a 	sub	r4,zero,r4
  123ad8:	04000044 	movi	r16,1
  123adc:	283ff50e 	bge	r5,zero,123ab4 <__divsi3+0x18>
  123ae0:	014bc83a 	sub	r5,zero,r5
  123ae4:	8400005c 	xori	r16,r16,1
  123ae8:	003ff206 	br	123ab4 <__divsi3+0x18>

00123aec <__modsi3>:
  123aec:	deffff04 	addi	sp,sp,-4
  123af0:	dfc00015 	stw	ra,0(sp)
  123af4:	20000516 	blt	r4,zero,123b0c <__modsi3+0x20>
  123af8:	28000c16 	blt	r5,zero,123b2c <__modsi3+0x40>
  123afc:	01800044 	movi	r6,1
  123b00:	dfc00017 	ldw	ra,0(sp)
  123b04:	dec00104 	addi	sp,sp,4
  123b08:	0123a281 	jmpi	123a28 <udivmodsi4>
  123b0c:	0109c83a 	sub	r4,zero,r4
  123b10:	28000b16 	blt	r5,zero,123b40 <__modsi3+0x54>
  123b14:	01800044 	movi	r6,1
  123b18:	0123a280 	call	123a28 <udivmodsi4>
  123b1c:	0085c83a 	sub	r2,zero,r2
  123b20:	dfc00017 	ldw	ra,0(sp)
  123b24:	dec00104 	addi	sp,sp,4
  123b28:	f800283a 	ret
  123b2c:	014bc83a 	sub	r5,zero,r5
  123b30:	01800044 	movi	r6,1
  123b34:	dfc00017 	ldw	ra,0(sp)
  123b38:	dec00104 	addi	sp,sp,4
  123b3c:	0123a281 	jmpi	123a28 <udivmodsi4>
  123b40:	014bc83a 	sub	r5,zero,r5
  123b44:	003ff306 	br	123b14 <__modsi3+0x28>

00123b48 <__udivsi3>:
  123b48:	000d883a 	mov	r6,zero
  123b4c:	0123a281 	jmpi	123a28 <udivmodsi4>

00123b50 <__umodsi3>:
  123b50:	01800044 	movi	r6,1
  123b54:	0123a281 	jmpi	123a28 <udivmodsi4>

00123b58 <__mulsi3>:
  123b58:	0005883a 	mov	r2,zero
  123b5c:	20000726 	beq	r4,zero,123b7c <__mulsi3+0x24>
  123b60:	20c0004c 	andi	r3,r4,1
  123b64:	2008d07a 	srli	r4,r4,1
  123b68:	18000126 	beq	r3,zero,123b70 <__mulsi3+0x18>
  123b6c:	1145883a 	add	r2,r2,r5
  123b70:	294b883a 	add	r5,r5,r5
  123b74:	203ffa1e 	bne	r4,zero,123b60 <__mulsi3+0x8>
  123b78:	f800283a 	ret
  123b7c:	f800283a 	ret

00123b80 <memcpy>:
  123b80:	defffb04 	addi	sp,sp,-20
  123b84:	dc000015 	stw	r16,0(sp)
  123b88:	dfc00415 	stw	ra,16(sp)
  123b8c:	dcc00315 	stw	r19,12(sp)
  123b90:	dc800215 	stw	r18,8(sp)
  123b94:	dc400115 	stw	r17,4(sp)
  123b98:	00c003c4 	movi	r3,15
  123b9c:	2021883a 	mov	r16,r4
  123ba0:	3005883a 	mov	r2,r6
  123ba4:	1980032e 	bgeu	r3,r6,123bb4 <memcpy+0x34>
  123ba8:	2906b03a 	or	r3,r5,r4
  123bac:	18c000cc 	andi	r3,r3,3
  123bb0:	18001026 	beq	r3,zero,123bf4 <memcpy+0x74>
  123bb4:	8007883a 	mov	r3,r16
  123bb8:	288f883a 	add	r7,r5,r2
  123bbc:	10000526 	beq	r2,zero,123bd4 <memcpy+0x54>
  123bc0:	29800003 	ldbu	r6,0(r5)
  123bc4:	18c00044 	addi	r3,r3,1
  123bc8:	29400044 	addi	r5,r5,1
  123bcc:	19bfffc5 	stb	r6,-1(r3)
  123bd0:	29fffb1e 	bne	r5,r7,123bc0 <memcpy+0x40>
  123bd4:	8005883a 	mov	r2,r16
  123bd8:	dfc00417 	ldw	ra,16(sp)
  123bdc:	dcc00317 	ldw	r19,12(sp)
  123be0:	dc800217 	ldw	r18,8(sp)
  123be4:	dc400117 	ldw	r17,4(sp)
  123be8:	dc000017 	ldw	r16,0(sp)
  123bec:	dec00504 	addi	sp,sp,20
  123bf0:	f800283a 	ret
  123bf4:	32bffc04 	addi	r10,r6,-16
  123bf8:	5014d13a 	srli	r10,r10,4
  123bfc:	20800404 	addi	r2,r4,16
  123c00:	2007883a 	mov	r3,r4
  123c04:	5008913a 	slli	r4,r10,4
  123c08:	280f883a 	mov	r7,r5
  123c0c:	1105883a 	add	r2,r2,r4
  123c10:	3a000017 	ldw	r8,0(r7)
  123c14:	18c00404 	addi	r3,r3,16
  123c18:	39c00404 	addi	r7,r7,16
  123c1c:	1a3ffc15 	stw	r8,-16(r3)
  123c20:	3a3ffd17 	ldw	r8,-12(r7)
  123c24:	1a3ffd15 	stw	r8,-12(r3)
  123c28:	3a3ffe17 	ldw	r8,-8(r7)
  123c2c:	1a3ffe15 	stw	r8,-8(r3)
  123c30:	3a3fff17 	ldw	r8,-4(r7)
  123c34:	1a3fff15 	stw	r8,-4(r3)
  123c38:	18bff51e 	bne	r3,r2,123c10 <memcpy+0x90>
  123c3c:	52800044 	addi	r10,r10,1
  123c40:	5014913a 	slli	r10,r10,4
  123c44:	308003cc 	andi	r2,r6,15
  123c48:	010000c4 	movi	r4,3
  123c4c:	8287883a 	add	r3,r16,r10
  123c50:	2a95883a 	add	r10,r5,r10
  123c54:	2080182e 	bgeu	r4,r2,123cb8 <memcpy+0x138>
  123c58:	147fff04 	addi	r17,r2,-4
  123c5c:	8808d0ba 	srli	r4,r17,2
  123c60:	1a400104 	addi	r9,r3,4
  123c64:	180d883a 	mov	r6,r3
  123c68:	2105883a 	add	r2,r4,r4
  123c6c:	1085883a 	add	r2,r2,r2
  123c70:	4893883a 	add	r9,r9,r2
  123c74:	500f883a 	mov	r7,r10
  123c78:	3a000017 	ldw	r8,0(r7)
  123c7c:	31800104 	addi	r6,r6,4
  123c80:	39c00104 	addi	r7,r7,4
  123c84:	323fff15 	stw	r8,-4(r6)
  123c88:	327ffb1e 	bne	r6,r9,123c78 <memcpy+0xf8>
  123c8c:	20800044 	addi	r2,r4,1
  123c90:	1085883a 	add	r2,r2,r2
  123c94:	1085883a 	add	r2,r2,r2
  123c98:	017fff04 	movi	r5,-4
  123c9c:	18a5883a 	add	r18,r3,r2
  123ca0:	50a7883a 	add	r19,r10,r2
  123ca4:	0123b580 	call	123b58 <__mulsi3>
  123ca8:	1445883a 	add	r2,r2,r17
  123cac:	980b883a 	mov	r5,r19
  123cb0:	9007883a 	mov	r3,r18
  123cb4:	003fc006 	br	123bb8 <memcpy+0x38>
  123cb8:	500b883a 	mov	r5,r10
  123cbc:	003fbe06 	br	123bb8 <memcpy+0x38>

00123cc0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  123cc0:	defff904 	addi	sp,sp,-28
  123cc4:	dfc00615 	stw	ra,24(sp)
  123cc8:	df000515 	stw	fp,20(sp)
  123ccc:	df000504 	addi	fp,sp,20
  123cd0:	e13ffc15 	stw	r4,-16(fp)
  123cd4:	e17ffd15 	stw	r5,-12(fp)
  123cd8:	e1bffe15 	stw	r6,-8(fp)
  123cdc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  123ce0:	e0800217 	ldw	r2,8(fp)
  123ce4:	d8800015 	stw	r2,0(sp)
  123ce8:	e13ffc17 	ldw	r4,-16(fp)
  123cec:	e17ffd17 	ldw	r5,-12(fp)
  123cf0:	e1bffe17 	ldw	r6,-8(fp)
  123cf4:	e1ffff17 	ldw	r7,-4(fp)
  123cf8:	0123e980 	call	123e98 <alt_iic_isr_register>
}  
  123cfc:	e037883a 	mov	sp,fp
  123d00:	dfc00117 	ldw	ra,4(sp)
  123d04:	df000017 	ldw	fp,0(sp)
  123d08:	dec00204 	addi	sp,sp,8
  123d0c:	f800283a 	ret

00123d10 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  123d10:	defff904 	addi	sp,sp,-28
  123d14:	df000615 	stw	fp,24(sp)
  123d18:	df000604 	addi	fp,sp,24
  123d1c:	e13ffe15 	stw	r4,-8(fp)
  123d20:	e17fff15 	stw	r5,-4(fp)
  123d24:	e0bfff17 	ldw	r2,-4(fp)
  123d28:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  123d2c:	0005303a 	rdctl	r2,status
  123d30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  123d34:	e0fffb17 	ldw	r3,-20(fp)
  123d38:	00bfff84 	movi	r2,-2
  123d3c:	1884703a 	and	r2,r3,r2
  123d40:	1001703a 	wrctl	status,r2
  
  return context;
  123d44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  123d48:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  123d4c:	e0bffa17 	ldw	r2,-24(fp)
  123d50:	00c00044 	movi	r3,1
  123d54:	1884983a 	sll	r2,r3,r2
  123d58:	1007883a 	mov	r3,r2
  123d5c:	008004b4 	movhi	r2,18
  123d60:	10968304 	addi	r2,r2,23052
  123d64:	10800017 	ldw	r2,0(r2)
  123d68:	1886b03a 	or	r3,r3,r2
  123d6c:	008004b4 	movhi	r2,18
  123d70:	10968304 	addi	r2,r2,23052
  123d74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  123d78:	008004b4 	movhi	r2,18
  123d7c:	10968304 	addi	r2,r2,23052
  123d80:	10800017 	ldw	r2,0(r2)
  123d84:	100170fa 	wrctl	ienable,r2
  123d88:	e0bffc17 	ldw	r2,-16(fp)
  123d8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  123d90:	e0bffd17 	ldw	r2,-12(fp)
  123d94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  123d98:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  123d9c:	e037883a 	mov	sp,fp
  123da0:	df000017 	ldw	fp,0(sp)
  123da4:	dec00104 	addi	sp,sp,4
  123da8:	f800283a 	ret

00123dac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  123dac:	defff904 	addi	sp,sp,-28
  123db0:	df000615 	stw	fp,24(sp)
  123db4:	df000604 	addi	fp,sp,24
  123db8:	e13ffe15 	stw	r4,-8(fp)
  123dbc:	e17fff15 	stw	r5,-4(fp)
  123dc0:	e0bfff17 	ldw	r2,-4(fp)
  123dc4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  123dc8:	0005303a 	rdctl	r2,status
  123dcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  123dd0:	e0fffb17 	ldw	r3,-20(fp)
  123dd4:	00bfff84 	movi	r2,-2
  123dd8:	1884703a 	and	r2,r3,r2
  123ddc:	1001703a 	wrctl	status,r2
  
  return context;
  123de0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  123de4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  123de8:	e0bffa17 	ldw	r2,-24(fp)
  123dec:	00c00044 	movi	r3,1
  123df0:	1884983a 	sll	r2,r3,r2
  123df4:	0084303a 	nor	r2,zero,r2
  123df8:	1007883a 	mov	r3,r2
  123dfc:	008004b4 	movhi	r2,18
  123e00:	10968304 	addi	r2,r2,23052
  123e04:	10800017 	ldw	r2,0(r2)
  123e08:	1886703a 	and	r3,r3,r2
  123e0c:	008004b4 	movhi	r2,18
  123e10:	10968304 	addi	r2,r2,23052
  123e14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  123e18:	008004b4 	movhi	r2,18
  123e1c:	10968304 	addi	r2,r2,23052
  123e20:	10800017 	ldw	r2,0(r2)
  123e24:	100170fa 	wrctl	ienable,r2
  123e28:	e0bffc17 	ldw	r2,-16(fp)
  123e2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  123e30:	e0bffd17 	ldw	r2,-12(fp)
  123e34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  123e38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  123e3c:	e037883a 	mov	sp,fp
  123e40:	df000017 	ldw	fp,0(sp)
  123e44:	dec00104 	addi	sp,sp,4
  123e48:	f800283a 	ret

00123e4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  123e4c:	defffc04 	addi	sp,sp,-16
  123e50:	df000315 	stw	fp,12(sp)
  123e54:	df000304 	addi	fp,sp,12
  123e58:	e13ffe15 	stw	r4,-8(fp)
  123e5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  123e60:	000530fa 	rdctl	r2,ienable
  123e64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  123e68:	e0bfff17 	ldw	r2,-4(fp)
  123e6c:	00c00044 	movi	r3,1
  123e70:	1884983a 	sll	r2,r3,r2
  123e74:	1007883a 	mov	r3,r2
  123e78:	e0bffd17 	ldw	r2,-12(fp)
  123e7c:	1884703a 	and	r2,r3,r2
  123e80:	1004c03a 	cmpne	r2,r2,zero
  123e84:	10803fcc 	andi	r2,r2,255
}
  123e88:	e037883a 	mov	sp,fp
  123e8c:	df000017 	ldw	fp,0(sp)
  123e90:	dec00104 	addi	sp,sp,4
  123e94:	f800283a 	ret

00123e98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  123e98:	defff504 	addi	sp,sp,-44
  123e9c:	dfc00a15 	stw	ra,40(sp)
  123ea0:	df000915 	stw	fp,36(sp)
  123ea4:	df000904 	addi	fp,sp,36
  123ea8:	e13ffc15 	stw	r4,-16(fp)
  123eac:	e17ffd15 	stw	r5,-12(fp)
  123eb0:	e1bffe15 	stw	r6,-8(fp)
  123eb4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  123eb8:	00bffa84 	movi	r2,-22
  123ebc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  123ec0:	e0bffd17 	ldw	r2,-12(fp)
  123ec4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  123ec8:	e0bff817 	ldw	r2,-32(fp)
  123ecc:	10800808 	cmpgei	r2,r2,32
  123ed0:	1000271e 	bne	r2,zero,123f70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  123ed4:	0005303a 	rdctl	r2,status
  123ed8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  123edc:	e0fffa17 	ldw	r3,-24(fp)
  123ee0:	00bfff84 	movi	r2,-2
  123ee4:	1884703a 	and	r2,r3,r2
  123ee8:	1001703a 	wrctl	status,r2
  
  return context;
  123eec:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  123ef0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  123ef4:	00c004b4 	movhi	r3,18
  123ef8:	18d7c504 	addi	r3,r3,24340
  123efc:	e0bff817 	ldw	r2,-32(fp)
  123f00:	100490fa 	slli	r2,r2,3
  123f04:	1885883a 	add	r2,r3,r2
  123f08:	e0fffe17 	ldw	r3,-8(fp)
  123f0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  123f10:	00c004b4 	movhi	r3,18
  123f14:	18d7c504 	addi	r3,r3,24340
  123f18:	e0bff817 	ldw	r2,-32(fp)
  123f1c:	100490fa 	slli	r2,r2,3
  123f20:	1885883a 	add	r2,r3,r2
  123f24:	10800104 	addi	r2,r2,4
  123f28:	e0ffff17 	ldw	r3,-4(fp)
  123f2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  123f30:	e0bffe17 	ldw	r2,-8(fp)
  123f34:	10000526 	beq	r2,zero,123f4c <alt_iic_isr_register+0xb4>
  123f38:	e0bff817 	ldw	r2,-32(fp)
  123f3c:	e13ffc17 	ldw	r4,-16(fp)
  123f40:	100b883a 	mov	r5,r2
  123f44:	0123d100 	call	123d10 <alt_ic_irq_enable>
  123f48:	00000406 	br	123f5c <alt_iic_isr_register+0xc4>
  123f4c:	e0bff817 	ldw	r2,-32(fp)
  123f50:	e13ffc17 	ldw	r4,-16(fp)
  123f54:	100b883a 	mov	r5,r2
  123f58:	0123dac0 	call	123dac <alt_ic_irq_disable>
  123f5c:	e0bff715 	stw	r2,-36(fp)
  123f60:	e0bff917 	ldw	r2,-28(fp)
  123f64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  123f68:	e0bffb17 	ldw	r2,-20(fp)
  123f6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  123f70:	e0bff717 	ldw	r2,-36(fp)
}
  123f74:	e037883a 	mov	sp,fp
  123f78:	dfc00117 	ldw	ra,4(sp)
  123f7c:	df000017 	ldw	fp,0(sp)
  123f80:	dec00204 	addi	sp,sp,8
  123f84:	f800283a 	ret

00123f88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  123f88:	defffd04 	addi	sp,sp,-12
  123f8c:	dfc00215 	stw	ra,8(sp)
  123f90:	df000115 	stw	fp,4(sp)
  123f94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  123f98:	0009883a 	mov	r4,zero
  123f9c:	0123fe40 	call	123fe4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  123fa0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  123fa4:	01240180 	call	124018 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  123fa8:	01241800 	call	124180 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  123fac:	010004b4 	movhi	r4,18
  123fb0:	21107704 	addi	r4,r4,16860
  123fb4:	01242d80 	call	1242d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  123fb8:	d1201a17 	ldw	r4,-32664(gp)
  123fbc:	d0e01b17 	ldw	r3,-32660(gp)
  123fc0:	d0a01c17 	ldw	r2,-32656(gp)
  123fc4:	180b883a 	mov	r5,r3
  123fc8:	100d883a 	mov	r6,r2
  123fcc:	012057c0 	call	12057c <main>
  123fd0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  123fd4:	01000044 	movi	r4,1
  123fd8:	01240880 	call	124088 <close>
  exit (result);
  123fdc:	e13fff17 	ldw	r4,-4(fp)
  123fe0:	01242ec0 	call	1242ec <exit>

00123fe4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  123fe4:	defffd04 	addi	sp,sp,-12
  123fe8:	dfc00215 	stw	ra,8(sp)
  123fec:	df000115 	stw	fp,4(sp)
  123ff0:	df000104 	addi	fp,sp,4
  123ff4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( PROC, PROC);
  123ff8:	01242b80 	call	1242b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  123ffc:	00800044 	movi	r2,1
  124000:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  124004:	e037883a 	mov	sp,fp
  124008:	dfc00117 	ldw	ra,4(sp)
  12400c:	df000017 	ldw	fp,0(sp)
  124010:	dec00204 	addi	sp,sp,8
  124014:	f800283a 	ret

00124018 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  124018:	deffff04 	addi	sp,sp,-4
  12401c:	df000015 	stw	fp,0(sp)
  124020:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  124024:	0001883a 	nop
}
  124028:	e037883a 	mov	sp,fp
  12402c:	df000017 	ldw	fp,0(sp)
  124030:	dec00104 	addi	sp,sp,4
  124034:	f800283a 	ret

00124038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  124038:	defffe04 	addi	sp,sp,-8
  12403c:	dfc00115 	stw	ra,4(sp)
  124040:	df000015 	stw	fp,0(sp)
  124044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  124048:	008004b4 	movhi	r2,18
  12404c:	10967004 	addi	r2,r2,22976
  124050:	10800017 	ldw	r2,0(r2)
  124054:	10000526 	beq	r2,zero,12406c <alt_get_errno+0x34>
  124058:	008004b4 	movhi	r2,18
  12405c:	10967004 	addi	r2,r2,22976
  124060:	10800017 	ldw	r2,0(r2)
  124064:	103ee83a 	callr	r2
  124068:	00000206 	br	124074 <alt_get_errno+0x3c>
  12406c:	008004b4 	movhi	r2,18
  124070:	10968704 	addi	r2,r2,23068
}
  124074:	e037883a 	mov	sp,fp
  124078:	dfc00117 	ldw	ra,4(sp)
  12407c:	df000017 	ldw	fp,0(sp)
  124080:	dec00204 	addi	sp,sp,8
  124084:	f800283a 	ret

00124088 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  124088:	defffb04 	addi	sp,sp,-20
  12408c:	dfc00415 	stw	ra,16(sp)
  124090:	df000315 	stw	fp,12(sp)
  124094:	df000304 	addi	fp,sp,12
  124098:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  12409c:	e0bfff17 	ldw	r2,-4(fp)
  1240a0:	10000716 	blt	r2,zero,1240c0 <close+0x38>
  1240a4:	e13fff17 	ldw	r4,-4(fp)
  1240a8:	01400304 	movi	r5,12
  1240ac:	0123b580 	call	123b58 <__mulsi3>
  1240b0:	00c004b4 	movhi	r3,18
  1240b4:	18d50a04 	addi	r3,r3,21544
  1240b8:	10c5883a 	add	r2,r2,r3
  1240bc:	00000106 	br	1240c4 <close+0x3c>
  1240c0:	0005883a 	mov	r2,zero
  1240c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  1240c8:	e0bffd17 	ldw	r2,-12(fp)
  1240cc:	10001826 	beq	r2,zero,124130 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  1240d0:	e0bffd17 	ldw	r2,-12(fp)
  1240d4:	10800017 	ldw	r2,0(r2)
  1240d8:	10800417 	ldw	r2,16(r2)
  1240dc:	10000626 	beq	r2,zero,1240f8 <close+0x70>
  1240e0:	e0bffd17 	ldw	r2,-12(fp)
  1240e4:	10800017 	ldw	r2,0(r2)
  1240e8:	10800417 	ldw	r2,16(r2)
  1240ec:	e13ffd17 	ldw	r4,-12(fp)
  1240f0:	103ee83a 	callr	r2
  1240f4:	00000106 	br	1240fc <close+0x74>
  1240f8:	0005883a 	mov	r2,zero
  1240fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  124100:	e13fff17 	ldw	r4,-4(fp)
  124104:	01242380 	call	124238 <alt_release_fd>
    if (rval < 0)
  124108:	e0bffe17 	ldw	r2,-8(fp)
  12410c:	1000060e 	bge	r2,zero,124128 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  124110:	01240380 	call	124038 <alt_get_errno>
  124114:	e0fffe17 	ldw	r3,-8(fp)
  124118:	00c7c83a 	sub	r3,zero,r3
  12411c:	10c00015 	stw	r3,0(r2)
      return -1;
  124120:	00bfffc4 	movi	r2,-1
  124124:	00000606 	br	124140 <close+0xb8>
    }
    return 0;
  124128:	0005883a 	mov	r2,zero
  12412c:	00000406 	br	124140 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  124130:	01240380 	call	124038 <alt_get_errno>
  124134:	00c01444 	movi	r3,81
  124138:	10c00015 	stw	r3,0(r2)
    return -1;
  12413c:	00bfffc4 	movi	r2,-1
  }
}
  124140:	e037883a 	mov	sp,fp
  124144:	dfc00117 	ldw	ra,4(sp)
  124148:	df000017 	ldw	fp,0(sp)
  12414c:	dec00204 	addi	sp,sp,8
  124150:	f800283a 	ret

00124154 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  124154:	defffc04 	addi	sp,sp,-16
  124158:	df000315 	stw	fp,12(sp)
  12415c:	df000304 	addi	fp,sp,12
  124160:	e13ffd15 	stw	r4,-12(fp)
  124164:	e17ffe15 	stw	r5,-8(fp)
  124168:	e1bfff15 	stw	r6,-4(fp)
  return len;
  12416c:	e0bfff17 	ldw	r2,-4(fp)
}
  124170:	e037883a 	mov	sp,fp
  124174:	df000017 	ldw	fp,0(sp)
  124178:	dec00104 	addi	sp,sp,4
  12417c:	f800283a 	ret

00124180 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  124180:	defffd04 	addi	sp,sp,-12
  124184:	dfc00215 	stw	ra,8(sp)
  124188:	df000115 	stw	fp,4(sp)
  12418c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  124190:	008004b4 	movhi	r2,18
  124194:	10918b04 	addi	r2,r2,17964
  124198:	e0bfff15 	stw	r2,-4(fp)
  12419c:	00000606 	br	1241b8 <_do_ctors+0x38>
        (*ctor) (); 
  1241a0:	e0bfff17 	ldw	r2,-4(fp)
  1241a4:	10800017 	ldw	r2,0(r2)
  1241a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  1241ac:	e0bfff17 	ldw	r2,-4(fp)
  1241b0:	10bfff04 	addi	r2,r2,-4
  1241b4:	e0bfff15 	stw	r2,-4(fp)
  1241b8:	e0ffff17 	ldw	r3,-4(fp)
  1241bc:	008004b4 	movhi	r2,18
  1241c0:	10918c04 	addi	r2,r2,17968
  1241c4:	18bff62e 	bgeu	r3,r2,1241a0 <_do_ctors+0x20>
        (*ctor) (); 
}
  1241c8:	e037883a 	mov	sp,fp
  1241cc:	dfc00117 	ldw	ra,4(sp)
  1241d0:	df000017 	ldw	fp,0(sp)
  1241d4:	dec00204 	addi	sp,sp,8
  1241d8:	f800283a 	ret

001241dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  1241dc:	defffd04 	addi	sp,sp,-12
  1241e0:	dfc00215 	stw	ra,8(sp)
  1241e4:	df000115 	stw	fp,4(sp)
  1241e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  1241ec:	008004b4 	movhi	r2,18
  1241f0:	10918b04 	addi	r2,r2,17964
  1241f4:	e0bfff15 	stw	r2,-4(fp)
  1241f8:	00000606 	br	124214 <_do_dtors+0x38>
        (*dtor) (); 
  1241fc:	e0bfff17 	ldw	r2,-4(fp)
  124200:	10800017 	ldw	r2,0(r2)
  124204:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  124208:	e0bfff17 	ldw	r2,-4(fp)
  12420c:	10bfff04 	addi	r2,r2,-4
  124210:	e0bfff15 	stw	r2,-4(fp)
  124214:	e0ffff17 	ldw	r3,-4(fp)
  124218:	008004b4 	movhi	r2,18
  12421c:	10918c04 	addi	r2,r2,17968
  124220:	18bff62e 	bgeu	r3,r2,1241fc <_do_dtors+0x20>
        (*dtor) (); 
}
  124224:	e037883a 	mov	sp,fp
  124228:	dfc00117 	ldw	ra,4(sp)
  12422c:	df000017 	ldw	fp,0(sp)
  124230:	dec00204 	addi	sp,sp,8
  124234:	f800283a 	ret

00124238 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  124238:	defffc04 	addi	sp,sp,-16
  12423c:	dfc00315 	stw	ra,12(sp)
  124240:	df000215 	stw	fp,8(sp)
  124244:	dc000115 	stw	r16,4(sp)
  124248:	df000104 	addi	fp,sp,4
  12424c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  124250:	e0bfff17 	ldw	r2,-4(fp)
  124254:	108000d0 	cmplti	r2,r2,3
  124258:	1000111e 	bne	r2,zero,1242a0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  12425c:	040004b4 	movhi	r16,18
  124260:	84150a04 	addi	r16,r16,21544
  124264:	e0bfff17 	ldw	r2,-4(fp)
  124268:	1009883a 	mov	r4,r2
  12426c:	01400304 	movi	r5,12
  124270:	0123b580 	call	123b58 <__mulsi3>
  124274:	8085883a 	add	r2,r16,r2
  124278:	10800204 	addi	r2,r2,8
  12427c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  124280:	040004b4 	movhi	r16,18
  124284:	84150a04 	addi	r16,r16,21544
  124288:	e0bfff17 	ldw	r2,-4(fp)
  12428c:	1009883a 	mov	r4,r2
  124290:	01400304 	movi	r5,12
  124294:	0123b580 	call	123b58 <__mulsi3>
  124298:	8085883a 	add	r2,r16,r2
  12429c:	10000015 	stw	zero,0(r2)
  }
}
  1242a0:	e037883a 	mov	sp,fp
  1242a4:	dfc00217 	ldw	ra,8(sp)
  1242a8:	df000117 	ldw	fp,4(sp)
  1242ac:	dc000017 	ldw	r16,0(sp)
  1242b0:	dec00304 	addi	sp,sp,12
  1242b4:	f800283a 	ret

001242b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  1242b8:	deffff04 	addi	sp,sp,-4
  1242bc:	df000015 	stw	fp,0(sp)
  1242c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  1242c4:	000170fa 	wrctl	ienable,zero
}
  1242c8:	e037883a 	mov	sp,fp
  1242cc:	df000017 	ldw	fp,0(sp)
  1242d0:	dec00104 	addi	sp,sp,4
  1242d4:	f800283a 	ret

001242d8 <atexit>:
  1242d8:	200b883a 	mov	r5,r4
  1242dc:	000d883a 	mov	r6,zero
  1242e0:	0009883a 	mov	r4,zero
  1242e4:	000f883a 	mov	r7,zero
  1242e8:	01243241 	jmpi	124324 <__register_exitproc>

001242ec <exit>:
  1242ec:	defffe04 	addi	sp,sp,-8
  1242f0:	000b883a 	mov	r5,zero
  1242f4:	dc000015 	stw	r16,0(sp)
  1242f8:	dfc00115 	stw	ra,4(sp)
  1242fc:	2021883a 	mov	r16,r4
  124300:	01244540 	call	124454 <__call_exitprocs>
  124304:	008004b4 	movhi	r2,18
  124308:	10967104 	addi	r2,r2,22980
  12430c:	11000017 	ldw	r4,0(r2)
  124310:	20800f17 	ldw	r2,60(r4)
  124314:	10000126 	beq	r2,zero,12431c <exit+0x30>
  124318:	103ee83a 	callr	r2
  12431c:	8009883a 	mov	r4,r16
  124320:	01245f40 	call	1245f4 <_exit>

00124324 <__register_exitproc>:
  124324:	defffa04 	addi	sp,sp,-24
  124328:	008004b4 	movhi	r2,18
  12432c:	10967104 	addi	r2,r2,22980
  124330:	dc000315 	stw	r16,12(sp)
  124334:	14000017 	ldw	r16,0(r2)
  124338:	dc400415 	stw	r17,16(sp)
  12433c:	dfc00515 	stw	ra,20(sp)
  124340:	80805217 	ldw	r2,328(r16)
  124344:	2023883a 	mov	r17,r4
  124348:	10003e26 	beq	r2,zero,124444 <__register_exitproc+0x120>
  12434c:	10c00117 	ldw	r3,4(r2)
  124350:	020007c4 	movi	r8,31
  124354:	40c0180e 	bge	r8,r3,1243b8 <__register_exitproc+0x94>
  124358:	00800034 	movhi	r2,0
  12435c:	10800004 	addi	r2,r2,0
  124360:	1000061e 	bne	r2,zero,12437c <__register_exitproc+0x58>
  124364:	00bfffc4 	movi	r2,-1
  124368:	dfc00517 	ldw	ra,20(sp)
  12436c:	dc400417 	ldw	r17,16(sp)
  124370:	dc000317 	ldw	r16,12(sp)
  124374:	dec00604 	addi	sp,sp,24
  124378:	f800283a 	ret
  12437c:	01006404 	movi	r4,400
  124380:	d9400015 	stw	r5,0(sp)
  124384:	d9800115 	stw	r6,4(sp)
  124388:	d9c00215 	stw	r7,8(sp)
  12438c:	00000000 	call	0 <PIO_IRQ_MASK-0x8>
  124390:	d9400017 	ldw	r5,0(sp)
  124394:	d9800117 	ldw	r6,4(sp)
  124398:	d9c00217 	ldw	r7,8(sp)
  12439c:	103ff126 	beq	r2,zero,124364 <__register_exitproc+0x40>
  1243a0:	80c05217 	ldw	r3,328(r16)
  1243a4:	10000115 	stw	zero,4(r2)
  1243a8:	10c00015 	stw	r3,0(r2)
  1243ac:	80805215 	stw	r2,328(r16)
  1243b0:	10006215 	stw	zero,392(r2)
  1243b4:	10006315 	stw	zero,396(r2)
  1243b8:	10c00117 	ldw	r3,4(r2)
  1243bc:	88000d1e 	bne	r17,zero,1243f4 <__register_exitproc+0xd0>
  1243c0:	19000084 	addi	r4,r3,2
  1243c4:	2109883a 	add	r4,r4,r4
  1243c8:	18c00044 	addi	r3,r3,1
  1243cc:	2109883a 	add	r4,r4,r4
  1243d0:	1109883a 	add	r4,r2,r4
  1243d4:	10c00115 	stw	r3,4(r2)
  1243d8:	0005883a 	mov	r2,zero
  1243dc:	21400015 	stw	r5,0(r4)
  1243e0:	dfc00517 	ldw	ra,20(sp)
  1243e4:	dc400417 	ldw	r17,16(sp)
  1243e8:	dc000317 	ldw	r16,12(sp)
  1243ec:	dec00604 	addi	sp,sp,24
  1243f0:	f800283a 	ret
  1243f4:	02400044 	movi	r9,1
  1243f8:	12806217 	ldw	r10,392(r2)
  1243fc:	48d2983a 	sll	r9,r9,r3
  124400:	19000804 	addi	r4,r3,32
  124404:	18d1883a 	add	r8,r3,r3
  124408:	2109883a 	add	r4,r4,r4
  12440c:	4211883a 	add	r8,r8,r8
  124410:	2109883a 	add	r4,r4,r4
  124414:	1109883a 	add	r4,r2,r4
  124418:	1211883a 	add	r8,r2,r8
  12441c:	5254b03a 	or	r10,r10,r9
  124420:	21c02215 	stw	r7,136(r4)
  124424:	41802215 	stw	r6,136(r8)
  124428:	12806215 	stw	r10,392(r2)
  12442c:	01000084 	movi	r4,2
  124430:	893fe31e 	bne	r17,r4,1243c0 <__register_exitproc+0x9c>
  124434:	11006317 	ldw	r4,396(r2)
  124438:	2252b03a 	or	r9,r4,r9
  12443c:	12406315 	stw	r9,396(r2)
  124440:	003fdf06 	br	1243c0 <__register_exitproc+0x9c>
  124444:	008004b4 	movhi	r2,18
  124448:	10980504 	addi	r2,r2,24596
  12444c:	80805215 	stw	r2,328(r16)
  124450:	003fbe06 	br	12434c <__register_exitproc+0x28>

00124454 <__call_exitprocs>:
  124454:	008004b4 	movhi	r2,18
  124458:	10967104 	addi	r2,r2,22980
  12445c:	10800017 	ldw	r2,0(r2)
  124460:	defff304 	addi	sp,sp,-52
  124464:	df000b15 	stw	fp,44(sp)
  124468:	d8800015 	stw	r2,0(sp)
  12446c:	10805204 	addi	r2,r2,328
  124470:	dd400815 	stw	r21,32(sp)
  124474:	dfc00c15 	stw	ra,48(sp)
  124478:	ddc00a15 	stw	r23,40(sp)
  12447c:	dd800915 	stw	r22,36(sp)
  124480:	dd000715 	stw	r20,28(sp)
  124484:	dcc00615 	stw	r19,24(sp)
  124488:	dc800515 	stw	r18,20(sp)
  12448c:	dc400415 	stw	r17,16(sp)
  124490:	dc000315 	stw	r16,12(sp)
  124494:	d9000115 	stw	r4,4(sp)
  124498:	2839883a 	mov	fp,r5
  12449c:	d8800215 	stw	r2,8(sp)
  1244a0:	057fffc4 	movi	r21,-1
  1244a4:	d8800017 	ldw	r2,0(sp)
  1244a8:	ddc00217 	ldw	r23,8(sp)
  1244ac:	14805217 	ldw	r18,328(r2)
  1244b0:	90001726 	beq	r18,zero,124510 <__call_exitprocs+0xbc>
  1244b4:	94400117 	ldw	r17,4(r18)
  1244b8:	8c3fffc4 	addi	r16,r17,-1
  1244bc:	80001116 	blt	r16,zero,124504 <__call_exitprocs+0xb0>
  1244c0:	8c400044 	addi	r17,r17,1
  1244c4:	8427883a 	add	r19,r16,r16
  1244c8:	8c63883a 	add	r17,r17,r17
  1244cc:	95802204 	addi	r22,r18,136
  1244d0:	9ce7883a 	add	r19,r19,r19
  1244d4:	8c63883a 	add	r17,r17,r17
  1244d8:	b4e7883a 	add	r19,r22,r19
  1244dc:	9463883a 	add	r17,r18,r17
  1244e0:	e0001726 	beq	fp,zero,124540 <__call_exitprocs+0xec>
  1244e4:	8c87c83a 	sub	r3,r17,r18
  1244e8:	b0c7883a 	add	r3,r22,r3
  1244ec:	18c01e17 	ldw	r3,120(r3)
  1244f0:	1f001326 	beq	r3,fp,124540 <__call_exitprocs+0xec>
  1244f4:	843fffc4 	addi	r16,r16,-1
  1244f8:	9cffff04 	addi	r19,r19,-4
  1244fc:	8c7fff04 	addi	r17,r17,-4
  124500:	857ff71e 	bne	r16,r21,1244e0 <__call_exitprocs+0x8c>
  124504:	00800034 	movhi	r2,0
  124508:	10800004 	addi	r2,r2,0
  12450c:	10002a1e 	bne	r2,zero,1245b8 <__call_exitprocs+0x164>
  124510:	dfc00c17 	ldw	ra,48(sp)
  124514:	df000b17 	ldw	fp,44(sp)
  124518:	ddc00a17 	ldw	r23,40(sp)
  12451c:	dd800917 	ldw	r22,36(sp)
  124520:	dd400817 	ldw	r21,32(sp)
  124524:	dd000717 	ldw	r20,28(sp)
  124528:	dcc00617 	ldw	r19,24(sp)
  12452c:	dc800517 	ldw	r18,20(sp)
  124530:	dc400417 	ldw	r17,16(sp)
  124534:	dc000317 	ldw	r16,12(sp)
  124538:	dec00d04 	addi	sp,sp,52
  12453c:	f800283a 	ret
  124540:	91000117 	ldw	r4,4(r18)
  124544:	88c00017 	ldw	r3,0(r17)
  124548:	213fffc4 	addi	r4,r4,-1
  12454c:	24001526 	beq	r4,r16,1245a4 <__call_exitprocs+0x150>
  124550:	88000015 	stw	zero,0(r17)
  124554:	183fe726 	beq	r3,zero,1244f4 <__call_exitprocs+0xa0>
  124558:	00800044 	movi	r2,1
  12455c:	1408983a 	sll	r4,r2,r16
  124560:	91406217 	ldw	r5,392(r18)
  124564:	95000117 	ldw	r20,4(r18)
  124568:	214a703a 	and	r5,r4,r5
  12456c:	28000b26 	beq	r5,zero,12459c <__call_exitprocs+0x148>
  124570:	91406317 	ldw	r5,396(r18)
  124574:	2148703a 	and	r4,r4,r5
  124578:	20000c1e 	bne	r4,zero,1245ac <__call_exitprocs+0x158>
  12457c:	99400017 	ldw	r5,0(r19)
  124580:	d9000117 	ldw	r4,4(sp)
  124584:	183ee83a 	callr	r3
  124588:	90c00117 	ldw	r3,4(r18)
  12458c:	1d3fc51e 	bne	r3,r20,1244a4 <__call_exitprocs+0x50>
  124590:	b8c00017 	ldw	r3,0(r23)
  124594:	1cbfd726 	beq	r3,r18,1244f4 <__call_exitprocs+0xa0>
  124598:	003fc206 	br	1244a4 <__call_exitprocs+0x50>
  12459c:	183ee83a 	callr	r3
  1245a0:	003ff906 	br	124588 <__call_exitprocs+0x134>
  1245a4:	94000115 	stw	r16,4(r18)
  1245a8:	003fea06 	br	124554 <__call_exitprocs+0x100>
  1245ac:	99000017 	ldw	r4,0(r19)
  1245b0:	183ee83a 	callr	r3
  1245b4:	003ff406 	br	124588 <__call_exitprocs+0x134>
  1245b8:	90c00117 	ldw	r3,4(r18)
  1245bc:	1800071e 	bne	r3,zero,1245dc <__call_exitprocs+0x188>
  1245c0:	90c00017 	ldw	r3,0(r18)
  1245c4:	18000926 	beq	r3,zero,1245ec <__call_exitprocs+0x198>
  1245c8:	9009883a 	mov	r4,r18
  1245cc:	b8c00015 	stw	r3,0(r23)
  1245d0:	00000000 	call	0 <PIO_IRQ_MASK-0x8>
  1245d4:	bc800017 	ldw	r18,0(r23)
  1245d8:	003fb506 	br	1244b0 <__call_exitprocs+0x5c>
  1245dc:	90c00017 	ldw	r3,0(r18)
  1245e0:	902f883a 	mov	r23,r18
  1245e4:	1825883a 	mov	r18,r3
  1245e8:	003fb106 	br	1244b0 <__call_exitprocs+0x5c>
  1245ec:	0007883a 	mov	r3,zero
  1245f0:	003ffb06 	br	1245e0 <__call_exitprocs+0x18c>

001245f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  1245f4:	defffc04 	addi	sp,sp,-16
  1245f8:	df000315 	stw	fp,12(sp)
  1245fc:	df000304 	addi	fp,sp,12
  124600:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  124604:	0001883a 	nop
  124608:	e0bfff17 	ldw	r2,-4(fp)
  12460c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  124610:	e0bffd17 	ldw	r2,-12(fp)
  124614:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  124618:	e0bffe17 	ldw	r2,-8(fp)
  12461c:	10000226 	beq	r2,zero,124628 <_exit+0x34>
    ALT_SIM_FAIL();
  124620:	002af070 	cmpltui	zero,zero,43969
  124624:	00000106 	br	12462c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
  124628:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  12462c:	003fff06 	br	12462c <_exit+0x38>
