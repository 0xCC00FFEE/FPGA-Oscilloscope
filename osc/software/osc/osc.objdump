
osc.elf:     file format elf32-littlenios2
osc.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000a0000

Program Header:
    LOAD off    0x00001000 vaddr 0x000a0000 paddr 0x000a0000 align 2**12
         filesz 0x000048cc memsz 0x000050a4 flags rwx
    LOAD off    0x00006000 vaddr 0x000c8000 paddr 0x000c8000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00006020 vaddr 0x000c8020 paddr 0x000c8020 align 2**12
         filesz 0x00000198 memsz 0x00000198 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  000c8000  000c8000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  000c8020  000c8020  00006020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003914  000a0000  000a0000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009ec  000a3914  000a3914  00004914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005cc  000a4300  000a4300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000007d8  000a48cc  000a48cc  000058cc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000460  00000000  00000000  000061e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005ed1  00000000  00000000  00006640  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001e01  00000000  00000000  0000c511  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001f79  00000000  00000000  0000e312  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000d00  00000000  00000000  0001028c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001669  00000000  00000000  00010f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001a44  00000000  00000000  000125f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0001403c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b0  00000000  00000000  00014050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00015f78  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00015f7b  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00015f7f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00015f80  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00015f81  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00015f85  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00015f89  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  00015f8d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  00015f91  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00015f95  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00015f99  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000036  00000000  00000000  00015f9d  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000539bf  00000000  00000000  00015fd3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
000c8000 l    d  .entry	00000000 .entry
000c8020 l    d  .exceptions	00000000 .exceptions
000a0000 l    d  .text	00000000 .text
000a3914 l    d  .rodata	00000000 .rodata
000a4300 l    d  .rwdata	00000000 .rwdata
000a48cc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../osc_bsp//obj/HAL/src/crt0.o
000a0034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
000c8094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 char712.c
00000000 l    df *ABS*	00000000 keyproc.c
00000000 l    df *ABS*	00000000 lcdout.c
00000000 l    df *ABS*	00000000 mainloop.c
00000000 l    df *ABS*	00000000 menu.c
00000000 l    df *ABS*	00000000 menuact.c
00000000 l    df *ABS*	00000000 stubfncs.c
00000000 l    df *ABS*	00000000 testcode.c
00000000 l    df *ABS*	00000000 tracutil.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000a2d0c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
000a331c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000a3438 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000a44a8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
000a326c g     F .text	0000005c alt_main
000a4e14 g     O .bss	00000100 alt_irq
000a1610 g     F .text	00000048 trg_delay_down
000a10dc g     F .text	00000084 display_scale
000a48ec g     O .bss	00000004 cur_scale
000a1ef4 g     F .text	00000028 trace_rearm
000a1c60 g     F .text	00000020 sample_done
000a0e68 g     F .text	00000020 get_trigger_mode
000a3f4c g     O .rodata	00000070 menu
000a0ddc g     F .text	00000020 no_menu_action
000a1c18 g     F .text	00000024 set_delay
00000000  w      *UND*	00000000 __errno
000c8000 g     F .entry	00000000 __reset
000a0038 g     F .text	00000024 no_action
000a491c g     O .bss	00000004 errno
000a48d4 g     O .bss	00000004 trigger_mode
000a013c g     F .text	00000030 menu_right
000a132c g     F .text	00000048 set_trg_level
000a4914 g     O .bss	00000004 alt_argv
000a08a8 g     F .text	00000064 init_menu
000ac8a8 g       *ABS*	00000000 _gp
000a1e5c g     F .text	00000020 is_sampling
000a0000 g       *ABS*	00000000 __alt_mem_RAM_ctrl
000a010c g     F .text	00000030 menu_left
000a4328 g     O .rwdata	00000180 alt_fd_list
000a2e64 g     F .text	00000140 memcpy
000a13c4 g     F .text	00000054 trg_level_up
000a3914 g       *ABS*	00000000 __DTOR_END__
000a0e28 g     F .text	00000040 set_trigger_mode
000a1ba0 g     F .text	0000002c plot_pixel
00000000  w      *UND*	00000000 malloc
000a2e2c g     F .text	00000008 __udivsi3
000a26f4 g     F .text	00000120 restore_trace
000a19a8 g     F .text	00000198 cvt_num_field
000a48f0 g     O .bss	00000004 trace_status
000a261c g     F .text	000000d8 set_save_area
000a1c3c g     F .text	00000024 start_sample
000a1014 g     F .text	00000064 scale_down
000a48bc g     O .rwdata	00000004 alt_max_fd
000a1b40 g     F .text	00000020 key_available
000a48cc g     O .bss	00000004 menu_entry
000b0000 g       *ABS*	00000000 __alt_mem_ROM_ctrl
000a12c4 g     F .text	00000068 display_sweep
000a1f48 g     F .text	000003f8 set_display_scale
000a2814 g     F .text	00000048 do_trace
000a48c4 g     O .rwdata	00000004 _global_impure_ptr
000a50a4 g       *ABS*	00000000 __bss_end
000a317c g     F .text	000000f0 alt_iic_isr_register
000a1dc0 g     F .text	00000064 init_trace
000a3130 g     F .text	0000004c alt_ic_irq_enabled
000a15d0 g     F .text	00000040 set_trg_delay
000a00dc g     F .text	00000030 menu_down
000a490c g     O .bss	00000004 alt_irq_active
000a1c80 g     F .text	00000140 get_test_sample
000c80ec g     F .exceptions	000000cc alt_irq_handler
000a4300 g     O .rwdata	00000028 alt_dev_null
000a016c g     F .text	000000a8 clear_region
000a3914 g     O .rodata	00000600 char_patterns
000a0ac8 g     F .text	0000006c previous_entry
000a48b4 g     O .rwdata	00000008 alt_dev_list
000a1e24 g     F .text	00000038 set_mode
000a0d0c g     F .text	000000d0 display_entry
000a48f4 g     O .bss	00000004 saved_end_y
000a2e34 g     F .text	00000008 __umodsi3
000a0f50 g     F .text	00000084 display_mode
000a48d0 g     O .bss	00000004 menu_display
000a50a4 g       *ABS*	00000000 end
000a0dfc g     F .text	0000002c no_display
000a1418 g     F .text	000000a4 display_trg_level
000a1240 g     F .text	00000084 sweep_up
000a09fc g     F .text	0000005c reset_menu
000a090c g     F .text	00000038 clear_menu
000a1658 g     F .text	0000004c trg_delay_up
000a3914 g       *ABS*	00000000 __CTOR_LIST__
000b0000 g       *ABS*	00000000 __alt_stack_pointer
000a3738 g     F .text	000001a0 __call_exitprocs
000a0000 g     F .text	00000038 _start
000a48d8 g     O .bss	00000004 level
000a48f8 g     O .bss	00000004 saved_pos_y
000a1504 g     F .text	00000054 trg_slope_toggle
000a32fc g     F .text	00000020 alt_sys_init
000a3608 g     F .text	00000130 __register_exitproc
000a2e3c g     F .text	00000028 __mulsi3
000a48fc g     O .bss	00000004 sample_size
000a4044 g     O .rodata	00000088 sweep_rates
000a1b80 g     F .text	00000020 clear_display
000a4900 g     O .bss	00000004 saved_end_x
000a50a4 g       *ABS*	00000000 __alt_stack_base
000a2508 g     F .text	00000114 restore_menu_trace
000a1f1c g     F .text	0000002c set_trace_size
000a04e4 g     F .text	00000098 plot_string
000a48cc g       *ABS*	00000000 __bss_start
000a4904 g     O .bss	00000004 saved_pos_x
000a0604 g     F .text	000001c8 main
000a4918 g     O .bss	00000004 alt_envp
000a16a4 g     F .text	000000d4 adjust_trg_delay
000a285c g     F .text	000004b0 plot_trace
000a4f14 g     O .bss	00000190 _atexit0
000a11c0 g     F .text	00000080 sweep_down
000a48c0 g     O .rwdata	00000004 alt_errno
000a48dc g     O .bss	00000004 sweep
000a0e88 g     F .text	00000064 mode_down
000a1bcc g     F .text	00000024 set_sample_rate
000a2d80 g     F .text	00000050 __divsi3
000a1bf0 g     F .text	00000028 set_trigger
000a3914 g       *ABS*	00000000 __CTOR_END__
000c8000 g       *ABS*	00000000 __alt_mem_ONCHIP_mem
000a09c4 g     F .text	00000038 refresh_menu
000a3914 g       *ABS*	00000000 __DTOR_LIST__
000a00ac g     F .text	00000030 menu_up
000a0c20 g     F .text	000000ec menu_entry_right
000a48e0 g     O .bss	00000004 delay
000a32c8 g     F .text	00000034 alt_irq_init
000a351c g     F .text	00000080 alt_release_fd
000a35bc g     F .text	00000014 atexit
000a1eb4 g     F .text	00000040 trace_done
000a48c8 g     O .rwdata	00000004 _impure_ptr
000a4910 g     O .bss	00000004 alt_argc
000a14bc g     F .text	00000048 set_trg_slope
000a1374 g     F .text	00000050 trg_level_down
000a34c0 g     F .text	0000005c _do_dtors
000a1b60 g     F .text	00000020 getkey
000a036c g     F .text	00000178 plot_char
000a4920 g     O .bss	000002a0 saved_menu
000c8020 g       .exceptions	00000000 alt_irq_entry
000a0b34 g     F .text	000000ec menu_entry_left
000a48ac g     O .rwdata	00000008 alt_fs_list
000a2340 g     F .text	000001c8 clear_saved_areas
000a0214 g     F .text	000000ac plot_hline
000a0fd4 g     F .text	00000040 set_scale
000a2fa4 g     F .text	00000050 alt_ic_isr_register
000a4bc0 g     O .bss	000000b0 saved_axis_y
000a48cc g       *ABS*	00000000 _edata
000a50a4 g       *ABS*	00000000 _end
000a0eec g     F .text	00000064 mode_up
000a3090 g     F .text	000000a0 alt_ic_irq_disable
000a4c70 g     O .bss	000000b4 saved_axis_x
000a359c g     F .text	00000020 altera_nios2_qsys_irq_init
000a35d0 g     F .text	00000038 exit
000a1778 g     F .text	00000230 display_trg_delay
000a2dd0 g     F .text	0000005c __modsi3
000b0000 g       *ABS*	00000000 __alt_data_end
000c8020 g     F .exceptions	00000000 alt_exception
000a1558 g     F .text	00000078 display_trg_slope
000a4d24 g     O .bss	000000f0 saved_area
000a4908 g     O .bss	00000004 sampling
000a38d8 g     F .text	0000003c _exit
00040000 g       *ABS*	00000000 __alt_mem_VRAM_ctrl
000a48e4 g     O .bss	00000004 scale
000a057c g     F .text	00000088 gen_pb_interrupt_handler
000a07cc g     F .text	000000dc key_lookup
000a48a8 g     O .rwdata	00000004 alt_priority_mask
000a2ff4 g     F .text	0000009c alt_ic_irq_enable
000a02c0 g     F .text	000000ac plot_vline
000a0944 g     F .text	00000080 display_menu
000a3464 g     F .text	0000005c _do_ctors
000a0a58 g     F .text	00000070 next_entry
000a336c g     F .text	000000cc close
000a1e7c g     F .text	00000038 trace_rdy
000a48e8 g     O .bss	00000004 slope
000a1160 g     F .text	00000060 set_sweep
000a1078 g     F .text	00000064 scale_up
000a005c g     F .text	00000050 menu_key
00000000  w      *UND*	00000000 free



Disassembly of section .exceptions:

000c8020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   c8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   c8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   c8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   c802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   c8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   c8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   c8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   c803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   c8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   c8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   c8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   c804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   c8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   c8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   c8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   c805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   c8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   c8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   c8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   c806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   c8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   c8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   c8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   c807c:	10000326 	beq	r2,zero,c808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   c8080:	20000226 	beq	r4,zero,c808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   c8084:	00c80ec0 	call	c80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   c8088:	00000306 	br	c8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   c808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   c8090:	e8bfff17 	ldw	r2,-4(ea)

000c8094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   c8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   c8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   c809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   c80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   c80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   c80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   c80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   c80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   c80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   c80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   c80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   c80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   c80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   c80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   c80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   c80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   c80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   c80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   c80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   c80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   c80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   c80e8:	ef80083a 	eret

000c80ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   c80ec:	defff904 	addi	sp,sp,-28
   c80f0:	dfc00615 	stw	ra,24(sp)
   c80f4:	df000515 	stw	fp,20(sp)
   c80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   c80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   c8100:	0005313a 	rdctl	r2,ipending
   c8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   c8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   c810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   c8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   c8114:	00800044 	movi	r2,1
   c8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   c811c:	e0fffb17 	ldw	r3,-20(fp)
   c8120:	e0bffc17 	ldw	r2,-16(fp)
   c8124:	1884703a 	and	r2,r3,r2
   c8128:	10001726 	beq	r2,zero,c8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   c812c:	00c002b4 	movhi	r3,10
   c8130:	18d38504 	addi	r3,r3,19988
   c8134:	e0bffd17 	ldw	r2,-12(fp)
   c8138:	100490fa 	slli	r2,r2,3
   c813c:	1885883a 	add	r2,r3,r2
   c8140:	10c00017 	ldw	r3,0(r2)
   c8144:	010002b4 	movhi	r4,10
   c8148:	21138504 	addi	r4,r4,19988
   c814c:	e0bffd17 	ldw	r2,-12(fp)
   c8150:	100490fa 	slli	r2,r2,3
   c8154:	2085883a 	add	r2,r4,r2
   c8158:	10800104 	addi	r2,r2,4
   c815c:	10800017 	ldw	r2,0(r2)
   c8160:	1009883a 	mov	r4,r2
   c8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   c8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   c816c:	0005313a 	rdctl	r2,ipending
   c8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   c8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   c8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   c817c:	e0bffb17 	ldw	r2,-20(fp)
   c8180:	103fe31e 	bne	r2,zero,c8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   c8184:	00000706 	br	c81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   c8188:	e0bffc17 	ldw	r2,-16(fp)
   c818c:	1085883a 	add	r2,r2,r2
   c8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   c8194:	e0bffd17 	ldw	r2,-12(fp)
   c8198:	10800044 	addi	r2,r2,1
   c819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   c81a0:	003fde06 	br	c811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   c81a4:	e037883a 	mov	sp,fp
   c81a8:	dfc00117 	ldw	ra,4(sp)
   c81ac:	df000017 	ldw	fp,0(sp)
   c81b0:	dec00204 	addi	sp,sp,8
   c81b4:	f800283a 	ret

Disassembly of section .text:

000a0000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   a0000:	06c002f4 	movhi	sp,11
    ori sp, sp, %lo(__alt_stack_pointer)
   a0004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   a0008:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   a000c:	d6b22a14 	ori	gp,gp,51368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   a0010:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   a0014:	10923314 	ori	r2,r2,18636

    movhi r3, %hi(__bss_end)
   a0018:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   a001c:	18d42914 	ori	r3,r3,20644

    beq r2, r3, 1f
   a0020:	10c00326 	beq	r2,r3,a0030 <_start+0x30>

0:
    stw zero, (r2)
   a0024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   a0028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   a002c:	10fffd36 	bltu	r2,r3,a0024 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   a0030:	00a326c0 	call	a326c <alt_main>

000a0034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   a0034:	003fff06 	br	a0034 <alt_after_alt_main>

000a0038 <no_action>:
   Last Modified:    Mar. 8, 1994

*/

enum status  no_action(enum status cur_state)
{
   a0038:	defffe04 	addi	sp,sp,-8
   a003c:	df000115 	stw	fp,4(sp)
   a0040:	df000104 	addi	fp,sp,4
   a0044:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* return the current state */
    return  cur_state;
   a0048:	e0bfff17 	ldw	r2,-4(fp)

}
   a004c:	e037883a 	mov	sp,fp
   a0050:	df000017 	ldw	fp,0(sp)
   a0054:	dec00104 	addi	sp,sp,4
   a0058:	f800283a 	ret

000a005c <menu_key>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_key(enum status cur_state)
{
   a005c:	defffd04 	addi	sp,sp,-12
   a0060:	dfc00215 	stw	ra,8(sp)
   a0064:	df000115 	stw	fp,4(sp)
   a0068:	df000104 	addi	fp,sp,4
   a006c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* check if need to turn the menu on or off */
    if (cur_state == MENU_ON)
   a0070:	e0bfff17 	ldw	r2,-4(fp)
   a0074:	1000021e 	bne	r2,zero,a0080 <menu_key+0x24>
        /* currently the menu is on, turn it off */
	clear_menu();
   a0078:	00a090c0 	call	a090c <clear_menu>
   a007c:	00000106 	br	a0084 <menu_key+0x28>
    else
        /* currently the menu is off, turn it on */
	display_menu();
   a0080:	00a09440 	call	a0944 <display_menu>


    /* all done, return the "opposite" of the current state */
    if (cur_state == MENU_ON)
   a0084:	e0bfff17 	ldw	r2,-4(fp)
   a0088:	1000021e 	bne	r2,zero,a0094 <menu_key+0x38>
        /* state was MENU_ON, change it to MENU_OFF */
        return  MENU_OFF;
   a008c:	00800044 	movi	r2,1
   a0090:	00000106 	br	a0098 <menu_key+0x3c>
    else
        /* state was MENU_OFF, change it to MENU_ON */
        return  MENU_ON;
   a0094:	0005883a 	mov	r2,zero

}
   a0098:	e037883a 	mov	sp,fp
   a009c:	dfc00117 	ldw	ra,4(sp)
   a00a0:	df000017 	ldw	fp,0(sp)
   a00a4:	dec00204 	addi	sp,sp,8
   a00a8:	f800283a 	ret

000a00ac <menu_up>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_up(enum status cur_state)
{
   a00ac:	defffd04 	addi	sp,sp,-12
   a00b0:	dfc00215 	stw	ra,8(sp)
   a00b4:	df000115 	stw	fp,4(sp)
   a00b8:	df000104 	addi	fp,sp,4
   a00bc:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the previous menu entry */
    previous_entry();
   a00c0:	00a0ac80 	call	a0ac8 <previous_entry>


    /* return the current state */
    return  cur_state;
   a00c4:	e0bfff17 	ldw	r2,-4(fp)

}
   a00c8:	e037883a 	mov	sp,fp
   a00cc:	dfc00117 	ldw	ra,4(sp)
   a00d0:	df000017 	ldw	fp,0(sp)
   a00d4:	dec00204 	addi	sp,sp,8
   a00d8:	f800283a 	ret

000a00dc <menu_down>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_down(enum status cur_state)
{
   a00dc:	defffd04 	addi	sp,sp,-12
   a00e0:	dfc00215 	stw	ra,8(sp)
   a00e4:	df000115 	stw	fp,4(sp)
   a00e8:	df000104 	addi	fp,sp,4
   a00ec:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the next menu entry */
    next_entry();
   a00f0:	00a0a580 	call	a0a58 <next_entry>


    /* return the current state */
    return  cur_state;
   a00f4:	e0bfff17 	ldw	r2,-4(fp)

}
   a00f8:	e037883a 	mov	sp,fp
   a00fc:	dfc00117 	ldw	ra,4(sp)
   a0100:	df000017 	ldw	fp,0(sp)
   a0104:	dec00204 	addi	sp,sp,8
   a0108:	f800283a 	ret

000a010c <menu_left>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_left(enum status cur_state)
{
   a010c:	defffd04 	addi	sp,sp,-12
   a0110:	dfc00215 	stw	ra,8(sp)
   a0114:	df000115 	stw	fp,4(sp)
   a0118:	df000104 	addi	fp,sp,4
   a011c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Left> key function for the current menu entry */
    menu_entry_left();
   a0120:	00a0b340 	call	a0b34 <menu_entry_left>


    /* return the current state */
    return  cur_state;
   a0124:	e0bfff17 	ldw	r2,-4(fp)

}
   a0128:	e037883a 	mov	sp,fp
   a012c:	dfc00117 	ldw	ra,4(sp)
   a0130:	df000017 	ldw	fp,0(sp)
   a0134:	dec00204 	addi	sp,sp,8
   a0138:	f800283a 	ret

000a013c <menu_right>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_right(enum status cur_state)
{
   a013c:	defffd04 	addi	sp,sp,-12
   a0140:	dfc00215 	stw	ra,8(sp)
   a0144:	df000115 	stw	fp,4(sp)
   a0148:	df000104 	addi	fp,sp,4
   a014c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Right> key function for the current menu entry */
    menu_entry_right();
   a0150:	00a0c200 	call	a0c20 <menu_entry_right>


    /* return the current state */
    return  cur_state;
   a0154:	e0bfff17 	ldw	r2,-4(fp)

}
   a0158:	e037883a 	mov	sp,fp
   a015c:	dfc00117 	ldw	ra,4(sp)
   a0160:	df000017 	ldw	fp,0(sp)
   a0164:	dec00204 	addi	sp,sp,8
   a0168:	f800283a 	ret

000a016c <clear_region>:
   Last Modified:    Mar. 8, 1994

*/

void  clear_region(int x_ul, int y_ul, int x_size, int y_size)
{
   a016c:	defff804 	addi	sp,sp,-32
   a0170:	dfc00715 	stw	ra,28(sp)
   a0174:	df000615 	stw	fp,24(sp)
   a0178:	df000604 	addi	fp,sp,24
   a017c:	e13ffc15 	stw	r4,-16(fp)
   a0180:	e17ffd15 	stw	r5,-12(fp)
   a0184:	e1bffe15 	stw	r6,-8(fp)
   a0188:	e1ffff15 	stw	r7,-4(fp)
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
   a018c:	e0bffc17 	ldw	r2,-16(fp)
   a0190:	e0bffa15 	stw	r2,-24(fp)
   a0194:	00001406 	br	a01e8 <clear_region+0x7c>
        for (y = y_ul; y < (y_ul + y_size); y++)  {
   a0198:	e0bffd17 	ldw	r2,-12(fp)
   a019c:	e0bffb15 	stw	r2,-20(fp)
   a01a0:	00000906 	br	a01c8 <clear_region+0x5c>

	    /* clear this pixel */
	    plot_pixel(x, y, PIXEL_WHITE);
   a01a4:	e0fffa17 	ldw	r3,-24(fp)
   a01a8:	e0bffb17 	ldw	r2,-20(fp)
   a01ac:	1809883a 	mov	r4,r3
   a01b0:	100b883a 	mov	r5,r2
   a01b4:	000d883a 	mov	r6,zero
   a01b8:	00a1ba00 	call	a1ba0 <plot_pixel>



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
        for (y = y_ul; y < (y_ul + y_size); y++)  {
   a01bc:	e0bffb17 	ldw	r2,-20(fp)
   a01c0:	10800044 	addi	r2,r2,1
   a01c4:	e0bffb15 	stw	r2,-20(fp)
   a01c8:	e0fffd17 	ldw	r3,-12(fp)
   a01cc:	e0bfff17 	ldw	r2,-4(fp)
   a01d0:	1885883a 	add	r2,r3,r2
   a01d4:	e0fffb17 	ldw	r3,-20(fp)
   a01d8:	18bff216 	blt	r3,r2,a01a4 <clear_region+0x38>
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
   a01dc:	e0bffa17 	ldw	r2,-24(fp)
   a01e0:	10800044 	addi	r2,r2,1
   a01e4:	e0bffa15 	stw	r2,-24(fp)
   a01e8:	e0fffc17 	ldw	r3,-16(fp)
   a01ec:	e0bffe17 	ldw	r2,-8(fp)
   a01f0:	1885883a 	add	r2,r3,r2
   a01f4:	e0fffa17 	ldw	r3,-24(fp)
   a01f8:	18bfe716 	blt	r3,r2,a0198 <clear_region+0x2c>
        }
    }


    /* done clearing the display region - return */
    return;
   a01fc:	0001883a 	nop

}
   a0200:	e037883a 	mov	sp,fp
   a0204:	dfc00117 	ldw	ra,4(sp)
   a0208:	df000017 	ldw	fp,0(sp)
   a020c:	dec00204 	addi	sp,sp,8
   a0210:	f800283a 	ret

000a0214 <plot_hline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_hline(int start_x, int start_y, int length)
{
   a0214:	defff804 	addi	sp,sp,-32
   a0218:	dfc00715 	stw	ra,28(sp)
   a021c:	df000615 	stw	fp,24(sp)
   a0220:	df000604 	addi	fp,sp,24
   a0224:	e13ffd15 	stw	r4,-12(fp)
   a0228:	e17ffe15 	stw	r5,-8(fp)
   a022c:	e1bfff15 	stw	r6,-4(fp)
    int  end_x;		/* ending x position to plot */



    /* check if a line to the "right" or "left" */
    if (length > 0)  {
   a0230:	e0bfff17 	ldw	r2,-4(fp)
   a0234:	0080070e 	bge	zero,r2,a0254 <plot_hline+0x40>

        /* line to the "right" - start at start_x, end at start_x + length */
	init_x = start_x;
   a0238:	e0bffd17 	ldw	r2,-12(fp)
   a023c:	e0bffb15 	stw	r2,-20(fp)
	end_x = start_x + length;
   a0240:	e0fffd17 	ldw	r3,-12(fp)
   a0244:	e0bfff17 	ldw	r2,-4(fp)
   a0248:	1885883a 	add	r2,r3,r2
   a024c:	e0bffc15 	stw	r2,-16(fp)
   a0250:	00000606 	br	a026c <plot_hline+0x58>
    }
    else  {

        /* line to the "left" - start at start_x + length, end at start_x */
	init_x = start_x + length;
   a0254:	e0fffd17 	ldw	r3,-12(fp)
   a0258:	e0bfff17 	ldw	r2,-4(fp)
   a025c:	1885883a 	add	r2,r3,r2
   a0260:	e0bffb15 	stw	r2,-20(fp)
	end_x = start_x;
   a0264:	e0bffd17 	ldw	r2,-12(fp)
   a0268:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
   a026c:	e0bffb17 	ldw	r2,-20(fp)
   a0270:	e0bffa15 	stw	r2,-24(fp)
   a0274:	00000906 	br	a029c <plot_hline+0x88>
        /* plot a point of the line */
	plot_pixel(x, start_y, PIXEL_BLACK);
   a0278:	e0fffa17 	ldw	r3,-24(fp)
   a027c:	e0bffe17 	ldw	r2,-8(fp)
   a0280:	1809883a 	mov	r4,r3
   a0284:	100b883a 	mov	r5,r2
   a0288:	01800044 	movi	r6,1
   a028c:	00a1ba00 	call	a1ba0 <plot_pixel>
	end_x = start_x;
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
   a0290:	e0bffa17 	ldw	r2,-24(fp)
   a0294:	10800044 	addi	r2,r2,1
   a0298:	e0bffa15 	stw	r2,-24(fp)
   a029c:	e0fffa17 	ldw	r3,-24(fp)
   a02a0:	e0bffc17 	ldw	r2,-16(fp)
   a02a4:	18bff416 	blt	r3,r2,a0278 <plot_hline+0x64>
        /* plot a point of the line */
	plot_pixel(x, start_y, PIXEL_BLACK);


    /* done plotting the line - return */
    return;
   a02a8:	0001883a 	nop

}
   a02ac:	e037883a 	mov	sp,fp
   a02b0:	dfc00117 	ldw	ra,4(sp)
   a02b4:	df000017 	ldw	fp,0(sp)
   a02b8:	dec00204 	addi	sp,sp,8
   a02bc:	f800283a 	ret

000a02c0 <plot_vline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_vline(int start_x, int start_y, int length)
{
   a02c0:	defff804 	addi	sp,sp,-32
   a02c4:	dfc00715 	stw	ra,28(sp)
   a02c8:	df000615 	stw	fp,24(sp)
   a02cc:	df000604 	addi	fp,sp,24
   a02d0:	e13ffd15 	stw	r4,-12(fp)
   a02d4:	e17ffe15 	stw	r5,-8(fp)
   a02d8:	e1bfff15 	stw	r6,-4(fp)
    int  end_y;		/* ending y position to plot */



    /* check if an "up" or "down" line */
    if (length > 0)  {
   a02dc:	e0bfff17 	ldw	r2,-4(fp)
   a02e0:	0080070e 	bge	zero,r2,a0300 <plot_vline+0x40>

        /* line going "down" - start at start_y, end at start_y + length */
	init_y = start_y;
   a02e4:	e0bffe17 	ldw	r2,-8(fp)
   a02e8:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y + length;
   a02ec:	e0fffe17 	ldw	r3,-8(fp)
   a02f0:	e0bfff17 	ldw	r2,-4(fp)
   a02f4:	1885883a 	add	r2,r3,r2
   a02f8:	e0bffc15 	stw	r2,-16(fp)
   a02fc:	00000606 	br	a0318 <plot_vline+0x58>
    }
    else  {

        /* line going "up" - start at start_y + length, end at start_y */
	init_y = start_y + length;
   a0300:	e0fffe17 	ldw	r3,-8(fp)
   a0304:	e0bfff17 	ldw	r2,-4(fp)
   a0308:	1885883a 	add	r2,r3,r2
   a030c:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y;
   a0310:	e0bffe17 	ldw	r2,-8(fp)
   a0314:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
   a0318:	e0bffb17 	ldw	r2,-20(fp)
   a031c:	e0bffa15 	stw	r2,-24(fp)
   a0320:	00000906 	br	a0348 <plot_vline+0x88>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_BLACK);
   a0324:	e0fffd17 	ldw	r3,-12(fp)
   a0328:	e0bffa17 	ldw	r2,-24(fp)
   a032c:	1809883a 	mov	r4,r3
   a0330:	100b883a 	mov	r5,r2
   a0334:	01800044 	movi	r6,1
   a0338:	00a1ba00 	call	a1ba0 <plot_pixel>
	end_y = start_y;
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
   a033c:	e0bffa17 	ldw	r2,-24(fp)
   a0340:	10800044 	addi	r2,r2,1
   a0344:	e0bffa15 	stw	r2,-24(fp)
   a0348:	e0fffa17 	ldw	r3,-24(fp)
   a034c:	e0bffc17 	ldw	r2,-16(fp)
   a0350:	18bff416 	blt	r3,r2,a0324 <plot_vline+0x64>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_BLACK);


    /* done plotting the line - return */
    return;
   a0354:	0001883a 	nop

}
   a0358:	e037883a 	mov	sp,fp
   a035c:	dfc00117 	ldw	ra,4(sp)
   a0360:	df000017 	ldw	fp,0(sp)
   a0364:	dec00204 	addi	sp,sp,8
   a0368:	f800283a 	ret

000a036c <plot_char>:
   Last Modified:    May 27, 2008

*/

void  plot_char(int pos_x, int pos_y, char c, enum char_style style)
{
   a036c:	defff504 	addi	sp,sp,-44
   a0370:	dfc00a15 	stw	ra,40(sp)
   a0374:	df000915 	stw	fp,36(sp)
   a0378:	df000904 	addi	fp,sp,36
   a037c:	e13ffc15 	stw	r4,-16(fp)
   a0380:	e17ffd15 	stw	r5,-12(fp)
   a0384:	3005883a 	mov	r2,r6
   a0388:	e1ffff15 	stw	r7,-4(fp)
   a038c:	e0bffe05 	stb	r2,-8(fp)
    int  y;		/* y pixel position for the character */



    /* setup the pixel positions for the character */
    x = pos_x * HORIZ_SIZE;
   a0390:	e13ffc17 	ldw	r4,-16(fp)
   a0394:	01400184 	movi	r5,6
   a0398:	00a2e3c0 	call	a2e3c <__mulsi3>
   a039c:	e0bffb15 	stw	r2,-20(fp)
    y = pos_y * VERT_SIZE;
   a03a0:	e0bffd17 	ldw	r2,-12(fp)
   a03a4:	100490fa 	slli	r2,r2,3
   a03a8:	e0bffa15 	stw	r2,-24(fp)


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
   a03ac:	e03ff915 	stw	zero,-28(fp)
   a03b0:	00004306 	br	a04c0 <plot_char+0x154>

        /* get the character bits for this row from the character table */
	if (row == (VERT_SIZE - 1))
   a03b4:	e0bff917 	ldw	r2,-28(fp)
   a03b8:	108001d8 	cmpnei	r2,r2,7
   a03bc:	1000021e 	bne	r2,zero,a03c8 <plot_char+0x5c>
	    /* last row - blank it */
	    bits = 0;
   a03c0:	e03ff715 	stw	zero,-36(fp)
   a03c4:	00000d06 	br	a03fc <plot_char+0x90>
	else
	    /* in middle of character, get the row from the bit patterns */
            bits = char_patterns[(c * (VERT_SIZE - 1)) + row];
   a03c8:	e0bffe07 	ldb	r2,-8(fp)
   a03cc:	1009883a 	mov	r4,r2
   a03d0:	014001c4 	movi	r5,7
   a03d4:	00a2e3c0 	call	a2e3c <__mulsi3>
   a03d8:	1007883a 	mov	r3,r2
   a03dc:	e0bff917 	ldw	r2,-28(fp)
   a03e0:	1885883a 	add	r2,r3,r2
   a03e4:	00c002b4 	movhi	r3,10
   a03e8:	18ce4504 	addi	r3,r3,14612
   a03ec:	1885883a 	add	r2,r3,r2
   a03f0:	10800003 	ldbu	r2,0(r2)
   a03f4:	10803fcc 	andi	r2,r2,255
   a03f8:	e0bff715 	stw	r2,-36(fp)

	/* take care of "normal/reverse video" */
	if (style == REVERSE)
   a03fc:	e0bfff17 	ldw	r2,-4(fp)
   a0400:	10800058 	cmpnei	r2,r2,1
   a0404:	1000031e 	bne	r2,zero,a0414 <plot_char+0xa8>
	    /* invert the bits for "reverse video" */
	    bits = ~bits;
   a0408:	e0bff717 	ldw	r2,-36(fp)
   a040c:	0084303a 	nor	r2,zero,r2
   a0410:	e0bff715 	stw	r2,-36(fp)

        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);
   a0414:	e0bff717 	ldw	r2,-36(fp)
   a0418:	1085883a 	add	r2,r2,r2
   a041c:	1085883a 	add	r2,r2,r2
   a0420:	e0bff715 	stw	r2,-36(fp)


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
   a0424:	e03ff815 	stw	zero,-32(fp)
   a0428:	00001c06 	br	a049c <plot_char+0x130>

            /* output this pixel in the appropriate color */
	    if ((bits & 0x80) == 0)
   a042c:	e0bff717 	ldw	r2,-36(fp)
   a0430:	1080200c 	andi	r2,r2,128
   a0434:	10000a1e 	bne	r2,zero,a0460 <plot_char+0xf4>
	        /* blank pixel - output in PIXEL_WHITE */
		plot_pixel(x + col, y, PIXEL_WHITE);
   a0438:	e0fffb17 	ldw	r3,-20(fp)
   a043c:	e0bff817 	ldw	r2,-32(fp)
   a0440:	1885883a 	add	r2,r3,r2
   a0444:	1007883a 	mov	r3,r2
   a0448:	e0bffa17 	ldw	r2,-24(fp)
   a044c:	1809883a 	mov	r4,r3
   a0450:	100b883a 	mov	r5,r2
   a0454:	000d883a 	mov	r6,zero
   a0458:	00a1ba00 	call	a1ba0 <plot_pixel>
   a045c:	00000906 	br	a0484 <plot_char+0x118>
	    else
	        /* black pixel - output in PIXEL_BLACK */
		plot_pixel(x + col, y, PIXEL_BLACK);
   a0460:	e0fffb17 	ldw	r3,-20(fp)
   a0464:	e0bff817 	ldw	r2,-32(fp)
   a0468:	1885883a 	add	r2,r3,r2
   a046c:	1007883a 	mov	r3,r2
   a0470:	e0bffa17 	ldw	r2,-24(fp)
   a0474:	1809883a 	mov	r4,r3
   a0478:	100b883a 	mov	r5,r2
   a047c:	01800044 	movi	r6,1
   a0480:	00a1ba00 	call	a1ba0 <plot_pixel>

	    /* shift the next bit into position */
	    bits <<= 1;
   a0484:	e0bff717 	ldw	r2,-36(fp)
   a0488:	1085883a 	add	r2,r2,r2
   a048c:	e0bff715 	stw	r2,-36(fp)
        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
   a0490:	e0bff817 	ldw	r2,-32(fp)
   a0494:	10800044 	addi	r2,r2,1
   a0498:	e0bff815 	stw	r2,-32(fp)
   a049c:	e0bff817 	ldw	r2,-32(fp)
   a04a0:	10800190 	cmplti	r2,r2,6
   a04a4:	103fe11e 	bne	r2,zero,a042c <plot_char+0xc0>
	    bits <<= 1;
        }


	/* next row - update the y position */
	y++;
   a04a8:	e0bffa17 	ldw	r2,-24(fp)
   a04ac:	10800044 	addi	r2,r2,1
   a04b0:	e0bffa15 	stw	r2,-24(fp)
    x = pos_x * HORIZ_SIZE;
    y = pos_y * VERT_SIZE;


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
   a04b4:	e0bff917 	ldw	r2,-28(fp)
   a04b8:	10800044 	addi	r2,r2,1
   a04bc:	e0bff915 	stw	r2,-28(fp)
   a04c0:	e0bff917 	ldw	r2,-28(fp)
   a04c4:	10800210 	cmplti	r2,r2,8
   a04c8:	103fba1e 	bne	r2,zero,a03b4 <plot_char+0x48>
	y++;
    }


    /* all done, return */
    return;
   a04cc:	0001883a 	nop

}
   a04d0:	e037883a 	mov	sp,fp
   a04d4:	dfc00117 	ldw	ra,4(sp)
   a04d8:	df000017 	ldw	fp,0(sp)
   a04dc:	dec00204 	addi	sp,sp,8
   a04e0:	f800283a 	ret

000a04e4 <plot_string>:
   Last Modified:    Mar. 17, 1997

*/

void  plot_string(int pos_x, int pos_y, const char *s, enum char_style style)
{
   a04e4:	defffa04 	addi	sp,sp,-24
   a04e8:	dfc00515 	stw	ra,20(sp)
   a04ec:	df000415 	stw	fp,16(sp)
   a04f0:	df000404 	addi	fp,sp,16
   a04f4:	e13ffc15 	stw	r4,-16(fp)
   a04f8:	e17ffd15 	stw	r5,-12(fp)
   a04fc:	e1bffe15 	stw	r6,-8(fp)
   a0500:	e1ffff15 	stw	r7,-4(fp)
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
   a0504:	00001106 	br	a054c <plot_string+0x68>

        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);
   a0508:	e0fffc17 	ldw	r3,-16(fp)
   a050c:	e0bffc17 	ldw	r2,-16(fp)
   a0510:	10800044 	addi	r2,r2,1
   a0514:	e0bffc15 	stw	r2,-16(fp)
   a0518:	e0bffe17 	ldw	r2,-8(fp)
   a051c:	10800003 	ldbu	r2,0(r2)
   a0520:	10803fcc 	andi	r2,r2,255
   a0524:	1080201c 	xori	r2,r2,128
   a0528:	10bfe004 	addi	r2,r2,-128
   a052c:	e13ffe17 	ldw	r4,-8(fp)
   a0530:	21000044 	addi	r4,r4,1
   a0534:	e13ffe15 	stw	r4,-8(fp)
   a0538:	1809883a 	mov	r4,r3
   a053c:	e17ffd17 	ldw	r5,-12(fp)
   a0540:	100d883a 	mov	r6,r2
   a0544:	e1ffff17 	ldw	r7,-4(fp)
   a0548:	00a036c0 	call	a036c <plot_char>
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
   a054c:	e0bffe17 	ldw	r2,-8(fp)
   a0550:	10800003 	ldbu	r2,0(r2)
   a0554:	10803fcc 	andi	r2,r2,255
   a0558:	1080201c 	xori	r2,r2,128
   a055c:	10bfe004 	addi	r2,r2,-128
   a0560:	103fe91e 	bne	r2,zero,a0508 <plot_string+0x24>
        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);


    /* all done, return */
    return;
   a0564:	0001883a 	nop

}
   a0568:	e037883a 	mov	sp,fp
   a056c:	dfc00117 	ldw	ra,4(sp)
   a0570:	df000017 	ldw	fp,0(sp)
   a0574:	dec00204 	addi	sp,sp,8
   a0578:	f800283a 	ret

000a057c <gen_pb_interrupt_handler>:
/* local function declarations */
enum keycode  key_lookup(void);      /* translate key values into keycodes */



void gen_pb_interrupt_handler(void* isr_context) {
   a057c:	defffc04 	addi	sp,sp,-16
   a0580:	df000315 	stw	fp,12(sp)
   a0584:	df000304 	addi	fp,sp,12
   a0588:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(0x000d1010, 0);
   a058c:	0007883a 	mov	r3,zero
   a0590:	00800374 	movhi	r2,13
   a0594:	10840604 	addi	r2,r2,4120
   a0598:	10c00035 	stwio	r3,0(r2)

	int edge_cap = IORD_ALTERA_AVALON_PIO_EDGE_CAP(0x000d1010);
   a059c:	00800374 	movhi	r2,13
   a05a0:	10840704 	addi	r2,r2,4124
   a05a4:	10800037 	ldwio	r2,0(r2)
   a05a8:	e0bffd15 	stw	r2,-12(fp)
	int x = (edge_cap & 0x0002) >> 1;
   a05ac:	e0bffd17 	ldw	r2,-12(fp)
   a05b0:	1080008c 	andi	r2,r2,2
   a05b4:	1005d07a 	srai	r2,r2,1
   a05b8:	e0bffe15 	stw	r2,-8(fp)
	x *= 2;
   a05bc:	e0bffe17 	ldw	r2,-8(fp)
   a05c0:	1085883a 	add	r2,r2,r2
   a05c4:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(0x000d1010, 0x000fffff);
   a05c8:	00c00434 	movhi	r3,16
   a05cc:	18ffffc4 	addi	r3,r3,-1
   a05d0:	00800374 	movhi	r2,13
   a05d4:	10840704 	addi	r2,r2,4124
   a05d8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(0x000d1010, 0x000fffff);
   a05dc:	00c00434 	movhi	r3,16
   a05e0:	18ffffc4 	addi	r3,r3,-1
   a05e4:	00800374 	movhi	r2,13
   a05e8:	10840604 	addi	r2,r2,4120
   a05ec:	10c00035 	stwio	r3,0(r2)
	return;
   a05f0:	0001883a 	nop
}
   a05f4:	e037883a 	mov	sp,fp
   a05f8:	df000017 	ldw	fp,0(sp)
   a05fc:	dec00104 	addi	sp,sp,4
   a0600:	f800283a 	ret

000a0604 <main>:

   Author:           Glen George
   Last Modified:    May 27, 2008

*/
int  main() {
   a0604:	deffec04 	addi	sp,sp,-80
   a0608:	dfc01315 	stw	ra,76(sp)
   a060c:	df001215 	stw	fp,72(sp)
   a0610:	df001204 	addi	fp,sp,72
    	srampt++;
    	c++;
    	if(c >= 100) c = 0;
    }*/

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(0x000d1010, 0x000fffff);
   a0614:	00c00434 	movhi	r3,16
   a0618:	18ffffc4 	addi	r3,r3,-1
   a061c:	00800374 	movhi	r2,13
   a0620:	10840604 	addi	r2,r2,4120
   a0624:	10c00035 	stwio	r3,0(r2)
	alt_ic_isr_register(0x0, 0x5, gen_pb_interrupt_handler, 0x0, 0x0);
   a0628:	d8000015 	stw	zero,0(sp)
   a062c:	0009883a 	mov	r4,zero
   a0630:	01400144 	movi	r5,5
   a0634:	018002b4 	movhi	r6,10
   a0638:	31815f04 	addi	r6,r6,1404
   a063c:	000f883a 	mov	r7,zero
   a0640:	00a2fa40 	call	a2fa4 <alt_ic_isr_register>

	int i;
	alt_u16 *ptr = (alt_u16*)(0x00040000);
   a0644:	00800134 	movhi	r2,4
   a0648:	e0bff015 	stw	r2,-64(fp)
	for(i = 0; i < 100000; i++) {
   a064c:	e03fef15 	stw	zero,-68(fp)
   a0650:	00001106 	br	a0698 <main+0x94>
		(*ptr) = (i % 0x10000);
   a0654:	e0ffef17 	ldw	r3,-68(fp)
   a0658:	00a00074 	movhi	r2,32769
   a065c:	10bfffc4 	addi	r2,r2,-1
   a0660:	1884703a 	and	r2,r3,r2
   a0664:	1000030e 	bge	r2,zero,a0674 <main+0x70>
   a0668:	10bfffc4 	addi	r2,r2,-1
   a066c:	10bffff4 	orhi	r2,r2,65535
   a0670:	10800044 	addi	r2,r2,1
   a0674:	1007883a 	mov	r3,r2
   a0678:	e0bff017 	ldw	r2,-64(fp)
   a067c:	10c0000d 	sth	r3,0(r2)
		ptr++;
   a0680:	e0bff017 	ldw	r2,-64(fp)
   a0684:	10800084 	addi	r2,r2,2
   a0688:	e0bff015 	stw	r2,-64(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(0x000d1010, 0x000fffff);
	alt_ic_isr_register(0x0, 0x5, gen_pb_interrupt_handler, 0x0, 0x0);

	int i;
	alt_u16 *ptr = (alt_u16*)(0x00040000);
	for(i = 0; i < 100000; i++) {
   a068c:	e0bfef17 	ldw	r2,-68(fp)
   a0690:	10800044 	addi	r2,r2,1
   a0694:	e0bfef15 	stw	r2,-68(fp)
   a0698:	e0bfef17 	ldw	r2,-68(fp)
   a069c:	00c000b4 	movhi	r3,2
   a06a0:	18e1a7c4 	addi	r3,r3,-31073
   a06a4:	18bfeb0e 	bge	r3,r2,a0654 <main+0x50>
	}

	/* variables */
    enum keycode        key;		    /* an input key */

    enum status         state = MENU_ON;    /* current program state */
   a06a8:	e03ff115 	stw	zero,-60(fp)

    unsigned char      *sample;		    /* a captured trace */

    /* key processing functions (one for each system state type and key) */
    enum status  (* const process_key[NUM_KEYCODES][NUM_STATES])(enum status) =
   a06ac:	008002b4 	movhi	r2,10
   a06b0:	10801704 	addi	r2,r2,92
   a06b4:	e0bff415 	stw	r2,-48(fp)
   a06b8:	008002b4 	movhi	r2,10
   a06bc:	10801704 	addi	r2,r2,92
   a06c0:	e0bff515 	stw	r2,-44(fp)
   a06c4:	008002b4 	movhi	r2,10
   a06c8:	10802b04 	addi	r2,r2,172
   a06cc:	e0bff615 	stw	r2,-40(fp)
   a06d0:	008002b4 	movhi	r2,10
   a06d4:	10800e04 	addi	r2,r2,56
   a06d8:	e0bff715 	stw	r2,-36(fp)
   a06dc:	008002b4 	movhi	r2,10
   a06e0:	10803704 	addi	r2,r2,220
   a06e4:	e0bff815 	stw	r2,-32(fp)
   a06e8:	008002b4 	movhi	r2,10
   a06ec:	10800e04 	addi	r2,r2,56
   a06f0:	e0bff915 	stw	r2,-28(fp)
   a06f4:	008002b4 	movhi	r2,10
   a06f8:	10804304 	addi	r2,r2,268
   a06fc:	e0bffa15 	stw	r2,-24(fp)
   a0700:	008002b4 	movhi	r2,10
   a0704:	10800e04 	addi	r2,r2,56
   a0708:	e0bffb15 	stw	r2,-20(fp)
   a070c:	008002b4 	movhi	r2,10
   a0710:	10804f04 	addi	r2,r2,316
   a0714:	e0bffc15 	stw	r2,-16(fp)
   a0718:	008002b4 	movhi	r2,10
   a071c:	10800e04 	addi	r2,r2,56
   a0720:	e0bffd15 	stw	r2,-12(fp)
   a0724:	008002b4 	movhi	r2,10
   a0728:	10800e04 	addi	r2,r2,56
   a072c:	e0bffe15 	stw	r2,-8(fp)
   a0730:	008002b4 	movhi	r2,10
   a0734:	10800e04 	addi	r2,r2,56
   a0738:	e0bfff15 	stw	r2,-4(fp)
        {  no_action,   no_action   } }; /* illegal key */



    /* first initialize everything */
    clear_display();		/* clear the display */
   a073c:	00a1b800 	call	a1b80 <clear_display>

    init_trace();		/* initialize the trace routines */
   a0740:	00a1dc00 	call	a1dc0 <init_trace>
    init_menu();		/* initialize the menu system */
   a0744:	00a08a80 	call	a08a8 <init_menu>
   a0748:	00000106 	br	a0750 <main+0x14c>
	    key = key_lookup();

	    /* execute processing routine for that key */
	    state = process_key[key][state](state);
	}
    }
   a074c:	0001883a 	nop

    /* infinite loop processing input */
    while(TRUE)  {

        /* check if ready to do a trace */
	if (trace_rdy())
   a0750:	00a1e7c0 	call	a1e7c <trace_rdy>
   a0754:	10000126 	beq	r2,zero,a075c <main+0x158>
	    /* ready for a trace - do it */
	    do_trace();
   a0758:	00a28140 	call	a2814 <do_trace>


	/* check if have a trace to display */
	if (is_sampling() && ((sample = sample_done()) != NULL))  {
   a075c:	00a1e5c0 	call	a1e5c <is_sampling>
   a0760:	10000726 	beq	r2,zero,a0780 <main+0x17c>
   a0764:	00a1c600 	call	a1c60 <sample_done>
   a0768:	e0bff215 	stw	r2,-56(fp)
   a076c:	e0bff217 	ldw	r2,-56(fp)
   a0770:	10000326 	beq	r2,zero,a0780 <main+0x17c>

	    /* have a trace - output it */
	    plot_trace(sample);
   a0774:	e13ff217 	ldw	r4,-56(fp)
   a0778:	00a285c0 	call	a285c <plot_trace>
	    /* done processing this trace */
	    trace_done();
   a077c:	00a1eb40 	call	a1eb4 <trace_done>
	}


	/* now check for keypad input */
	if (key_available())  {
   a0780:	00a1b400 	call	a1b40 <key_available>
   a0784:	10803fcc 	andi	r2,r2,255
   a0788:	103ff026 	beq	r2,zero,a074c <main+0x148>

	    /* have keypad input - get the key */
	    key = key_lookup();
   a078c:	00a07cc0 	call	a07cc <key_lookup>
   a0790:	e0bff315 	stw	r2,-52(fp)

	    /* execute processing routine for that key */
	    state = process_key[key][state](state);
   a0794:	e0bff317 	ldw	r2,-52(fp)
   a0798:	1087883a 	add	r3,r2,r2
   a079c:	e0bff117 	ldw	r2,-60(fp)
   a07a0:	1885883a 	add	r2,r3,r2
   a07a4:	1085883a 	add	r2,r2,r2
   a07a8:	1085883a 	add	r2,r2,r2
   a07ac:	e0ffef04 	addi	r3,fp,-68
   a07b0:	1885883a 	add	r2,r3,r2
   a07b4:	10800504 	addi	r2,r2,20
   a07b8:	10800017 	ldw	r2,0(r2)
   a07bc:	e13ff117 	ldw	r4,-60(fp)
   a07c0:	103ee83a 	callr	r2
   a07c4:	e0bff115 	stw	r2,-60(fp)
	}
    }
   a07c8:	003fe006 	br	a074c <main+0x148>

000a07cc <key_lookup>:
   Last Modified:    Mar. 17, 1997

*/

enum keycode  	key_lookup()
{
   a07cc:	defff104 	addi	sp,sp,-60
   a07d0:	dfc00e15 	stw	ra,56(sp)
   a07d4:	df000d15 	stw	fp,52(sp)
   a07d8:	df000d04 	addi	fp,sp,52
    /* variables */

    const enum keycode  keycodes[] = /* array of keycodes */
   a07dc:	e03ff515 	stw	zero,-44(fp)
   a07e0:	00800044 	movi	r2,1
   a07e4:	e0bff615 	stw	r2,-40(fp)
   a07e8:	00800084 	movi	r2,2
   a07ec:	e0bff715 	stw	r2,-36(fp)
   a07f0:	008000c4 	movi	r2,3
   a07f4:	e0bff815 	stw	r2,-32(fp)
   a07f8:	00800104 	movi	r2,4
   a07fc:	e0bff915 	stw	r2,-28(fp)
   a0800:	00800144 	movi	r2,5
   a0804:	e0bffa15 	stw	r2,-24(fp)
	   KEYCODE_LEFT,      /* <Left>     */
	   KEYCODE_RIGHT,     /* <Right>    */
	   KEYCODE_ILLEGAL    /* other keys */
        }; 

    const int  keys[] =   /* array of key values */
   a0808:	e03ffb15 	stw	zero,-20(fp)
   a080c:	00800044 	movi	r2,1
   a0810:	e0bffc15 	stw	r2,-16(fp)
   a0814:	00800084 	movi	r2,2
   a0818:	e0bffd15 	stw	r2,-12(fp)
   a081c:	008000c4 	movi	r2,3
   a0820:	e0bffe15 	stw	r2,-8(fp)
   a0824:	00800104 	movi	r2,4
   a0828:	e0bfff15 	stw	r2,-4(fp)
    int  i;           	/* general loop index */



    /* get a key */
    key = getkey();
   a082c:	00a1b600 	call	a1b60 <getkey>
   a0830:	e0bff415 	stw	r2,-48(fp)


    /* lookup key in keys array */
    for (i = 0; ((i < (sizeof(keys)/sizeof(int))) && (key != keys[i])); i++);
   a0834:	e03ff315 	stw	zero,-52(fp)
   a0838:	00000306 	br	a0848 <key_lookup+0x7c>
   a083c:	e0bff317 	ldw	r2,-52(fp)
   a0840:	10800044 	addi	r2,r2,1
   a0844:	e0bff315 	stw	r2,-52(fp)
   a0848:	e0bff317 	ldw	r2,-52(fp)
   a084c:	10800168 	cmpgeui	r2,r2,5
   a0850:	1000091e 	bne	r2,zero,a0878 <key_lookup+0xac>
   a0854:	e0bff317 	ldw	r2,-52(fp)
   a0858:	1085883a 	add	r2,r2,r2
   a085c:	1085883a 	add	r2,r2,r2
   a0860:	e0fff304 	addi	r3,fp,-52
   a0864:	1885883a 	add	r2,r3,r2
   a0868:	10800804 	addi	r2,r2,32
   a086c:	10c00017 	ldw	r3,0(r2)
   a0870:	e0bff417 	ldw	r2,-48(fp)
   a0874:	18bff11e 	bne	r3,r2,a083c <key_lookup+0x70>


    /* return the appropriate key type */
    return  keycodes[i];
   a0878:	e0bff317 	ldw	r2,-52(fp)
   a087c:	1085883a 	add	r2,r2,r2
   a0880:	1085883a 	add	r2,r2,r2
   a0884:	e0fff304 	addi	r3,fp,-52
   a0888:	1885883a 	add	r2,r3,r2
   a088c:	10800204 	addi	r2,r2,8
   a0890:	10800017 	ldw	r2,0(r2)

}
   a0894:	e037883a 	mov	sp,fp
   a0898:	dfc00117 	ldw	ra,4(sp)
   a089c:	df000017 	ldw	fp,0(sp)
   a08a0:	dec00204 	addi	sp,sp,8
   a08a4:	f800283a 	ret

000a08a8 <init_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  init_menu(void)
{
   a08a8:	defffe04 	addi	sp,sp,-8
   a08ac:	dfc00115 	stw	ra,4(sp)
   a08b0:	df000015 	stw	fp,0(sp)
   a08b4:	d839883a 	mov	fp,sp
      /* none */



    /* set the menu parameters */
    menu_entry = 0;		/* first menu entry */
   a08b8:	d0200915 	stw	zero,-32732(gp)
    menu_display = FALSE;	/* menu is not currently displayed (but it will be shortly) */
   a08bc:	d0200a15 	stw	zero,-32728(gp)


    /* set the scope (option) parameters */
    set_trigger_mode(NORMAL_TRIGGER);	/* normal triggering */
   a08c0:	0009883a 	mov	r4,zero
   a08c4:	00a0e280 	call	a0e28 <set_trigger_mode>
    set_scale(SCALE_AXES);		/* scale is axes */
   a08c8:	01000044 	movi	r4,1
   a08cc:	00a0fd40 	call	a0fd4 <set_scale>
    set_sweep(0);			/* first sweep rate */
   a08d0:	0009883a 	mov	r4,zero
   a08d4:	00a11600 	call	a1160 <set_sweep>
    set_trg_level((MIN_TRG_LEVEL_SET + MAX_TRG_LEVEL_SET) / 2);	/* middle trigger level */
   a08d8:	01000fc4 	movi	r4,63
   a08dc:	00a132c0 	call	a132c <set_trg_level>
    set_trg_slope(SLOPE_POSITIVE);	/* positive slope */
   a08e0:	0009883a 	mov	r4,zero
   a08e4:	00a14bc0 	call	a14bc <set_trg_slope>
    set_trg_delay(MIN_DELAY);		/* minimum delay */
   a08e8:	0009883a 	mov	r4,zero
   a08ec:	00a15d00 	call	a15d0 <set_trg_delay>


    /* now display the menu */
    display_menu();
   a08f0:	00a09440 	call	a0944 <display_menu>


    /* done initializing, return */
    return;
   a08f4:	0001883a 	nop

}
   a08f8:	e037883a 	mov	sp,fp
   a08fc:	dfc00117 	ldw	ra,4(sp)
   a0900:	df000017 	ldw	fp,0(sp)
   a0904:	dec00204 	addi	sp,sp,8
   a0908:	f800283a 	ret

000a090c <clear_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  clear_menu(void)
{
   a090c:	defffe04 	addi	sp,sp,-8
   a0910:	dfc00115 	stw	ra,4(sp)
   a0914:	df000015 	stw	fp,0(sp)
   a0918:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
   a091c:	d0a00a17 	ldw	r2,-32728(gp)
   a0920:	10000126 	beq	r2,zero,a0928 <clear_menu+0x1c>

        /* menu is being displayed - turn it off and restore the trace in that area */
	restore_menu_trace();
   a0924:	00a25080 	call	a2508 <restore_menu_trace>
    }


    /* no longer displaying the menu */
    menu_display = FALSE;
   a0928:	d0200a15 	stw	zero,-32728(gp)


    /* all done, return */
    return;
   a092c:	0001883a 	nop

}
   a0930:	e037883a 	mov	sp,fp
   a0934:	dfc00117 	ldw	ra,4(sp)
   a0938:	df000017 	ldw	fp,0(sp)
   a093c:	dec00204 	addi	sp,sp,8
   a0940:	f800283a 	ret

000a0944 <display_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  display_menu(void)
{
   a0944:	defffd04 	addi	sp,sp,-12
   a0948:	dfc00215 	stw	ra,8(sp)
   a094c:	df000115 	stw	fp,4(sp)
   a0950:	df000104 	addi	fp,sp,4
    int  i;		/* loop index */



    /* check if the menu is currently being displayed */
    if (!menu_display)  {
   a0954:	d0a00a17 	ldw	r2,-32728(gp)
   a0958:	1000121e 	bne	r2,zero,a09a4 <display_menu+0x60>

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
   a095c:	e03fff15 	stw	zero,-4(fp)
   a0960:	00000d06 	br	a0998 <display_menu+0x54>

	    /* display this entry - check if it should be highlighted */
	    if (i == menu_entry)
   a0964:	d0a00917 	ldw	r2,-32732(gp)
   a0968:	e0ffff17 	ldw	r3,-4(fp)
   a096c:	1880041e 	bne	r3,r2,a0980 <display_menu+0x3c>
	        /* currently selected entry - highlight it */
	        display_entry(i, TRUE);
   a0970:	e13fff17 	ldw	r4,-4(fp)
   a0974:	01400044 	movi	r5,1
   a0978:	00a0d0c0 	call	a0d0c <display_entry>
   a097c:	00000306 	br	a098c <display_menu+0x48>
	    else
	        /* not the currently selected entry - "normal video" */
	        display_entry(i, FALSE);
   a0980:	e13fff17 	ldw	r4,-4(fp)
   a0984:	000b883a 	mov	r5,zero
   a0988:	00a0d0c0 	call	a0d0c <display_entry>
    /* check if the menu is currently being displayed */
    if (!menu_display)  {

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
   a098c:	e0bfff17 	ldw	r2,-4(fp)
   a0990:	10800044 	addi	r2,r2,1
   a0994:	e0bfff15 	stw	r2,-4(fp)
   a0998:	e0bfff17 	ldw	r2,-4(fp)
   a099c:	108001f0 	cmpltui	r2,r2,7
   a09a0:	103ff01e 	bne	r2,zero,a0964 <display_menu+0x20>
        }
    }


    /* now are displaying the menu */
    menu_display = TRUE;
   a09a4:	00800044 	movi	r2,1
   a09a8:	d0a00a15 	stw	r2,-32728(gp)


    /* all done, return */
    return;
   a09ac:	0001883a 	nop

}
   a09b0:	e037883a 	mov	sp,fp
   a09b4:	dfc00117 	ldw	ra,4(sp)
   a09b8:	df000017 	ldw	fp,0(sp)
   a09bc:	dec00204 	addi	sp,sp,8
   a09c0:	f800283a 	ret

000a09c4 <refresh_menu>:
   Last Modified:    Mar. 8, 1994

*/

void  refresh_menu(void)
{
   a09c4:	defffe04 	addi	sp,sp,-8
   a09c8:	dfc00115 	stw	ra,4(sp)
   a09cc:	df000015 	stw	fp,0(sp)
   a09d0:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
   a09d4:	d0a00a17 	ldw	r2,-32728(gp)
   a09d8:	10000226 	beq	r2,zero,a09e4 <refresh_menu+0x20>

    	/* menu is currently being displayed - need to refresh it */
	/* do this by turning off the display, then forcing it back on */
	menu_display = FALSE;
   a09dc:	d0200a15 	stw	zero,-32728(gp)
	display_menu();
   a09e0:	00a09440 	call	a0944 <display_menu>
    }


    /* refreshed the menu if it was displayed, now return */
    return;
   a09e4:	0001883a 	nop

}
   a09e8:	e037883a 	mov	sp,fp
   a09ec:	dfc00117 	ldw	ra,4(sp)
   a09f0:	df000017 	ldw	fp,0(sp)
   a09f4:	dec00204 	addi	sp,sp,8
   a09f8:	f800283a 	ret

000a09fc <reset_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  reset_menu(void)
{
   a09fc:	defffe04 	addi	sp,sp,-8
   a0a00:	dfc00115 	stw	ra,4(sp)
   a0a04:	df000015 	stw	fp,0(sp)
   a0a08:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
   a0a0c:	d0a00a17 	ldw	r2,-32728(gp)
   a0a10:	10000426 	beq	r2,zero,a0a24 <reset_menu+0x28>

        /* menu is being displayed */
	/* remove highlight from currently selected entry */
	display_entry(menu_entry, FALSE);
   a0a14:	d0a00917 	ldw	r2,-32732(gp)
   a0a18:	1009883a 	mov	r4,r2
   a0a1c:	000b883a 	mov	r5,zero
   a0a20:	00a0d0c0 	call	a0d0c <display_entry>
    }


    /* reset the currently selected entry */
    menu_entry = 0;
   a0a24:	d0200915 	stw	zero,-32732(gp)


    /* finally, highlight the first entry if the menu is being displayed */
    if (menu_display)
   a0a28:	d0a00a17 	ldw	r2,-32728(gp)
   a0a2c:	10000426 	beq	r2,zero,a0a40 <reset_menu+0x44>
	display_entry(menu_entry, TRUE);
   a0a30:	d0a00917 	ldw	r2,-32732(gp)
   a0a34:	1009883a 	mov	r4,r2
   a0a38:	01400044 	movi	r5,1
   a0a3c:	00a0d0c0 	call	a0d0c <display_entry>



    /* all done, return */
    return;
   a0a40:	0001883a 	nop

}
   a0a44:	e037883a 	mov	sp,fp
   a0a48:	dfc00117 	ldw	ra,4(sp)
   a0a4c:	df000017 	ldw	fp,0(sp)
   a0a50:	dec00204 	addi	sp,sp,8
   a0a54:	f800283a 	ret

000a0a58 <next_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  next_entry(void)
{
   a0a58:	defffe04 	addi	sp,sp,-8
   a0a5c:	dfc00115 	stw	ra,4(sp)
   a0a60:	df000015 	stw	fp,0(sp)
   a0a64:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at end of the menu */
    if (menu_entry < (NO_MENU_ENTRIES - 1))  {
   a0a68:	d0a00917 	ldw	r2,-32732(gp)
   a0a6c:	108001a8 	cmpgeui	r2,r2,6
   a0a70:	10000f1e 	bne	r2,zero,a0ab0 <next_entry+0x58>

        /* not at the end of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
   a0a74:	d0a00a17 	ldw	r2,-32728(gp)
   a0a78:	10000426 	beq	r2,zero,a0a8c <next_entry+0x34>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
   a0a7c:	d0a00917 	ldw	r2,-32732(gp)
   a0a80:	1009883a 	mov	r4,r2
   a0a84:	000b883a 	mov	r5,zero
   a0a88:	00a0d0c0 	call	a0d0c <display_entry>

	/* update the menu entry to the next one */
	menu_entry++;
   a0a8c:	d0a00917 	ldw	r2,-32732(gp)
   a0a90:	10800044 	addi	r2,r2,1
   a0a94:	d0a00915 	stw	r2,-32732(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
   a0a98:	d0a00a17 	ldw	r2,-32728(gp)
   a0a9c:	10000426 	beq	r2,zero,a0ab0 <next_entry+0x58>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
   a0aa0:	d0a00917 	ldw	r2,-32732(gp)
   a0aa4:	1009883a 	mov	r4,r2
   a0aa8:	01400044 	movi	r5,1
   a0aac:	00a0d0c0 	call	a0d0c <display_entry>
    }


    /* all done, return */
    return;
   a0ab0:	0001883a 	nop

}
   a0ab4:	e037883a 	mov	sp,fp
   a0ab8:	dfc00117 	ldw	ra,4(sp)
   a0abc:	df000017 	ldw	fp,0(sp)
   a0ac0:	dec00204 	addi	sp,sp,8
   a0ac4:	f800283a 	ret

000a0ac8 <previous_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  previous_entry(void)
{
   a0ac8:	defffe04 	addi	sp,sp,-8
   a0acc:	dfc00115 	stw	ra,4(sp)
   a0ad0:	df000015 	stw	fp,0(sp)
   a0ad4:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at the start of the menu */
    if (menu_entry > 0)  {
   a0ad8:	d0a00917 	ldw	r2,-32732(gp)
   a0adc:	00800f0e 	bge	zero,r2,a0b1c <previous_entry+0x54>

        /* not at the start of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
   a0ae0:	d0a00a17 	ldw	r2,-32728(gp)
   a0ae4:	10000426 	beq	r2,zero,a0af8 <previous_entry+0x30>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
   a0ae8:	d0a00917 	ldw	r2,-32732(gp)
   a0aec:	1009883a 	mov	r4,r2
   a0af0:	000b883a 	mov	r5,zero
   a0af4:	00a0d0c0 	call	a0d0c <display_entry>

	/* update the menu entry to the previous one */
	menu_entry--;
   a0af8:	d0a00917 	ldw	r2,-32732(gp)
   a0afc:	10bfffc4 	addi	r2,r2,-1
   a0b00:	d0a00915 	stw	r2,-32732(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
   a0b04:	d0a00a17 	ldw	r2,-32728(gp)
   a0b08:	10000426 	beq	r2,zero,a0b1c <previous_entry+0x54>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
   a0b0c:	d0a00917 	ldw	r2,-32732(gp)
   a0b10:	1009883a 	mov	r4,r2
   a0b14:	01400044 	movi	r5,1
   a0b18:	00a0d0c0 	call	a0d0c <display_entry>

    }


    /* all done, return */
    return;
   a0b1c:	0001883a 	nop

}
   a0b20:	e037883a 	mov	sp,fp
   a0b24:	dfc00117 	ldw	ra,4(sp)
   a0b28:	df000017 	ldw	fp,0(sp)
   a0b2c:	dec00204 	addi	sp,sp,8
   a0b30:	f800283a 	ret

000a0b34 <menu_entry_left>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_left(void)
{
   a0b34:	defff704 	addi	sp,sp,-36
   a0b38:	dfc00815 	stw	ra,32(sp)
   a0b3c:	df000715 	stw	fp,28(sp)
   a0b40:	df000704 	addi	fp,sp,28
    /* variables */

    /* key processing functions */
    void  (* const process[])(void) =
   a0b44:	008002b4 	movhi	r2,10
   a0b48:	1083a204 	addi	r2,r2,3720
   a0b4c:	e0bff915 	stw	r2,-28(fp)
   a0b50:	008002b4 	movhi	r2,10
   a0b54:	10840504 	addi	r2,r2,4116
   a0b58:	e0bffa15 	stw	r2,-24(fp)
   a0b5c:	008002b4 	movhi	r2,10
   a0b60:	10847004 	addi	r2,r2,4544
   a0b64:	e0bffb15 	stw	r2,-20(fp)
   a0b68:	008002b4 	movhi	r2,10
   a0b6c:	1087bd04 	addi	r2,r2,7924
   a0b70:	e0bffc15 	stw	r2,-16(fp)
   a0b74:	008002b4 	movhi	r2,10
   a0b78:	1084dd04 	addi	r2,r2,4980
   a0b7c:	e0bffd15 	stw	r2,-12(fp)
   a0b80:	008002b4 	movhi	r2,10
   a0b84:	10854104 	addi	r2,r2,5380
   a0b88:	e0bffe15 	stw	r2,-8(fp)
   a0b8c:	008002b4 	movhi	r2,10
   a0b90:	10858404 	addi	r2,r2,5648
   a0b94:	e0bfff15 	stw	r2,-4(fp)
       /*  Level           Slope             Delay                        */



    /* invoke the appropriate <Left> key function */
    process[menu_entry]();
   a0b98:	d0a00917 	ldw	r2,-32732(gp)
   a0b9c:	1085883a 	add	r2,r2,r2
   a0ba0:	1085883a 	add	r2,r2,r2
   a0ba4:	e0fff904 	addi	r3,fp,-28
   a0ba8:	1885883a 	add	r2,r3,r2
   a0bac:	10800017 	ldw	r2,0(r2)
   a0bb0:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
   a0bb4:	d0a00a17 	ldw	r2,-32728(gp)
   a0bb8:	10001426 	beq	r2,zero,a0c0c <menu_entry_left+0xd8>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
   a0bbc:	d0a00917 	ldw	r2,-32732(gp)
   a0bc0:	00c002b4 	movhi	r3,10
   a0bc4:	18cfd304 	addi	r3,r3,16204
   a0bc8:	1004913a 	slli	r2,r2,4
   a0bcc:	1885883a 	add	r2,r3,r2
   a0bd0:	10800304 	addi	r2,r2,12
   a0bd4:	11c00017 	ldw	r7,0(r2)
   a0bd8:	d0a00917 	ldw	r2,-32732(gp)
   a0bdc:	00c002b4 	movhi	r3,10
   a0be0:	18cfd304 	addi	r3,r3,16204
   a0be4:	1004913a 	slli	r2,r2,4
   a0be8:	1885883a 	add	r2,r3,r2
   a0bec:	10800204 	addi	r2,r2,8
   a0bf0:	10800017 	ldw	r2,0(r2)
   a0bf4:	10c00fc4 	addi	r3,r2,63
   a0bf8:	d0a00917 	ldw	r2,-32732(gp)
   a0bfc:	1809883a 	mov	r4,r3
   a0c00:	100b883a 	mov	r5,r2
   a0c04:	000d883a 	mov	r6,zero
   a0c08:	383ee83a 	callr	r7


    /* all done, return */
    return;

}
   a0c0c:	e037883a 	mov	sp,fp
   a0c10:	dfc00117 	ldw	ra,4(sp)
   a0c14:	df000017 	ldw	fp,0(sp)
   a0c18:	dec00204 	addi	sp,sp,8
   a0c1c:	f800283a 	ret

000a0c20 <menu_entry_right>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_right(void)
{
   a0c20:	defff704 	addi	sp,sp,-36
   a0c24:	dfc00815 	stw	ra,32(sp)
   a0c28:	df000715 	stw	fp,28(sp)
   a0c2c:	df000704 	addi	fp,sp,28
    /* variables */

    /* key processing functions */
    void  (* const process[])(void) =
   a0c30:	008002b4 	movhi	r2,10
   a0c34:	1083bb04 	addi	r2,r2,3820
   a0c38:	e0bff915 	stw	r2,-28(fp)
   a0c3c:	008002b4 	movhi	r2,10
   a0c40:	10841e04 	addi	r2,r2,4216
   a0c44:	e0bffa15 	stw	r2,-24(fp)
   a0c48:	008002b4 	movhi	r2,10
   a0c4c:	10849004 	addi	r2,r2,4672
   a0c50:	e0bffb15 	stw	r2,-20(fp)
   a0c54:	008002b4 	movhi	r2,10
   a0c58:	1087bd04 	addi	r2,r2,7924
   a0c5c:	e0bffc15 	stw	r2,-16(fp)
   a0c60:	008002b4 	movhi	r2,10
   a0c64:	1084f104 	addi	r2,r2,5060
   a0c68:	e0bffd15 	stw	r2,-12(fp)
   a0c6c:	008002b4 	movhi	r2,10
   a0c70:	10854104 	addi	r2,r2,5380
   a0c74:	e0bffe15 	stw	r2,-8(fp)
   a0c78:	008002b4 	movhi	r2,10
   a0c7c:	10859604 	addi	r2,r2,5720
   a0c80:	e0bfff15 	stw	r2,-4(fp)
       /*  Level         Slope             Delay                        */



    /* invoke the appropriate <Right> key function */
    process[menu_entry]();
   a0c84:	d0a00917 	ldw	r2,-32732(gp)
   a0c88:	1085883a 	add	r2,r2,r2
   a0c8c:	1085883a 	add	r2,r2,r2
   a0c90:	e0fff904 	addi	r3,fp,-28
   a0c94:	1885883a 	add	r2,r3,r2
   a0c98:	10800017 	ldw	r2,0(r2)
   a0c9c:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
   a0ca0:	d0a00a17 	ldw	r2,-32728(gp)
   a0ca4:	10001426 	beq	r2,zero,a0cf8 <menu_entry_right+0xd8>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
   a0ca8:	d0a00917 	ldw	r2,-32732(gp)
   a0cac:	00c002b4 	movhi	r3,10
   a0cb0:	18cfd304 	addi	r3,r3,16204
   a0cb4:	1004913a 	slli	r2,r2,4
   a0cb8:	1885883a 	add	r2,r3,r2
   a0cbc:	10800304 	addi	r2,r2,12
   a0cc0:	11c00017 	ldw	r7,0(r2)
   a0cc4:	d0a00917 	ldw	r2,-32732(gp)
   a0cc8:	00c002b4 	movhi	r3,10
   a0ccc:	18cfd304 	addi	r3,r3,16204
   a0cd0:	1004913a 	slli	r2,r2,4
   a0cd4:	1885883a 	add	r2,r3,r2
   a0cd8:	10800204 	addi	r2,r2,8
   a0cdc:	10800017 	ldw	r2,0(r2)
   a0ce0:	10c00fc4 	addi	r3,r2,63
   a0ce4:	d0a00917 	ldw	r2,-32732(gp)
   a0ce8:	1809883a 	mov	r4,r3
   a0cec:	100b883a 	mov	r5,r2
   a0cf0:	000d883a 	mov	r6,zero
   a0cf4:	383ee83a 	callr	r7


    /* all done, return */
    return;

}
   a0cf8:	e037883a 	mov	sp,fp
   a0cfc:	dfc00117 	ldw	ra,4(sp)
   a0d00:	df000017 	ldw	fp,0(sp)
   a0d04:	dec00204 	addi	sp,sp,8
   a0d08:	f800283a 	ret

000a0d0c <display_entry>:
   Last Modified:    Aug. 13, 2004

*/

void  display_entry(int entry, int selected)
{
   a0d0c:	defffc04 	addi	sp,sp,-16
   a0d10:	dfc00315 	stw	ra,12(sp)
   a0d14:	df000215 	stw	fp,8(sp)
   a0d18:	df000204 	addi	fp,sp,8
   a0d1c:	e13ffe15 	stw	r4,-8(fp)
   a0d20:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* output the menu entry with the appropriate color */
    plot_string((MENU_X + menu[entry].h_off), (MENU_Y + entry), menu[entry].s,
   a0d24:	00c002b4 	movhi	r3,10
   a0d28:	18cfd304 	addi	r3,r3,16204
   a0d2c:	e0bffe17 	ldw	r2,-8(fp)
   a0d30:	1004913a 	slli	r2,r2,4
   a0d34:	1885883a 	add	r2,r3,r2
   a0d38:	10800104 	addi	r2,r2,4
   a0d3c:	10800017 	ldw	r2,0(r2)
   a0d40:	11000fc4 	addi	r4,r2,63
   a0d44:	00c002b4 	movhi	r3,10
   a0d48:	18cfd304 	addi	r3,r3,16204
   a0d4c:	e0bffe17 	ldw	r2,-8(fp)
   a0d50:	1004913a 	slli	r2,r2,4
   a0d54:	1885883a 	add	r2,r3,r2
   a0d58:	10c00017 	ldw	r3,0(r2)
   a0d5c:	e0bfff17 	ldw	r2,-4(fp)
   a0d60:	1004c03a 	cmpne	r2,r2,zero
   a0d64:	10803fcc 	andi	r2,r2,255
   a0d68:	e17ffe17 	ldw	r5,-8(fp)
   a0d6c:	180d883a 	mov	r6,r3
   a0d70:	100f883a 	mov	r7,r2
   a0d74:	00a04e40 	call	a04e4 <plot_string>
    		(selected ? SELECTED : NORMAL));
    /* also output the menu option with the appropriate color */
    menu[entry].display((MENU_X + menu[entry].opt_off), (MENU_Y + entry),
   a0d78:	00c002b4 	movhi	r3,10
   a0d7c:	18cfd304 	addi	r3,r3,16204
   a0d80:	e0bffe17 	ldw	r2,-8(fp)
   a0d84:	1004913a 	slli	r2,r2,4
   a0d88:	1885883a 	add	r2,r3,r2
   a0d8c:	10800304 	addi	r2,r2,12
   a0d90:	10c00017 	ldw	r3,0(r2)
   a0d94:	010002b4 	movhi	r4,10
   a0d98:	210fd304 	addi	r4,r4,16204
   a0d9c:	e0bffe17 	ldw	r2,-8(fp)
   a0da0:	1004913a 	slli	r2,r2,4
   a0da4:	2085883a 	add	r2,r4,r2
   a0da8:	10800204 	addi	r2,r2,8
   a0dac:	10800017 	ldw	r2,0(r2)
   a0db0:	10800fc4 	addi	r2,r2,63
   a0db4:	1009883a 	mov	r4,r2
   a0db8:	e17ffe17 	ldw	r5,-8(fp)
   a0dbc:	000d883a 	mov	r6,zero
   a0dc0:	183ee83a 	callr	r3
    			(selected ? OPTION_SELECTED : OPTION_NORMAL));


    /* all done outputting this menu entry - return */
    return;
   a0dc4:	0001883a 	nop

}
   a0dc8:	e037883a 	mov	sp,fp
   a0dcc:	dfc00117 	ldw	ra,4(sp)
   a0dd0:	df000017 	ldw	fp,0(sp)
   a0dd4:	dec00204 	addi	sp,sp,8
   a0dd8:	f800283a 	ret

000a0ddc <no_menu_action>:
   Last Modified:    Mar. 8, 1994

*/

void  no_menu_action()
{
   a0ddc:	deffff04 	addi	sp,sp,-4
   a0de0:	df000015 	stw	fp,0(sp)
   a0de4:	d839883a 	mov	fp,sp
      /* none */



    /* nothing to do - return */
    return;
   a0de8:	0001883a 	nop

}
   a0dec:	e037883a 	mov	sp,fp
   a0df0:	df000017 	ldw	fp,0(sp)
   a0df4:	dec00104 	addi	sp,sp,4
   a0df8:	f800283a 	ret

000a0dfc <no_display>:
   Last Modified:    Mar. 8, 1994

*/

void  no_display(int x_pos, int y_pos, int style)
{
   a0dfc:	defffc04 	addi	sp,sp,-16
   a0e00:	df000315 	stw	fp,12(sp)
   a0e04:	df000304 	addi	fp,sp,12
   a0e08:	e13ffd15 	stw	r4,-12(fp)
   a0e0c:	e17ffe15 	stw	r5,-8(fp)
   a0e10:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* nothing to do - return */
    return;
   a0e14:	0001883a 	nop

}
   a0e18:	e037883a 	mov	sp,fp
   a0e1c:	df000017 	ldw	fp,0(sp)
   a0e20:	dec00104 	addi	sp,sp,4
   a0e24:	f800283a 	ret

000a0e28 <set_trigger_mode>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trigger_mode(enum trigger_type m)
{
   a0e28:	defffd04 	addi	sp,sp,-12
   a0e2c:	dfc00215 	stw	ra,8(sp)
   a0e30:	df000115 	stw	fp,4(sp)
   a0e34:	df000104 	addi	fp,sp,4
   a0e38:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger mode */
    trigger_mode = m;
   a0e3c:	e0bfff17 	ldw	r2,-4(fp)
   a0e40:	d0a00b15 	stw	r2,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
   a0e44:	d0a00b17 	ldw	r2,-32724(gp)
   a0e48:	1009883a 	mov	r4,r2
   a0e4c:	00a1e240 	call	a1e24 <set_mode>


    /* all done setting the trigger mode - return */
    return;
   a0e50:	0001883a 	nop

}
   a0e54:	e037883a 	mov	sp,fp
   a0e58:	dfc00117 	ldw	ra,4(sp)
   a0e5c:	df000017 	ldw	fp,0(sp)
   a0e60:	dec00204 	addi	sp,sp,8
   a0e64:	f800283a 	ret

000a0e68 <get_trigger_mode>:
   Last Modified:    May 9, 2006

*/

enum trigger_type  get_trigger_mode()
{
   a0e68:	deffff04 	addi	sp,sp,-4
   a0e6c:	df000015 	stw	fp,0(sp)
   a0e70:	d839883a 	mov	fp,sp
      /* none */



    /* return the current trigger mode */
    return  trigger_mode;
   a0e74:	d0a00b17 	ldw	r2,-32724(gp)

}
   a0e78:	e037883a 	mov	sp,fp
   a0e7c:	df000017 	ldw	fp,0(sp)
   a0e80:	dec00104 	addi	sp,sp,4
   a0e84:	f800283a 	ret

000a0e88 <mode_down>:
   Last Modified:    May 9, 2006

*/

void  mode_down()
{
   a0e88:	defffe04 	addi	sp,sp,-8
   a0e8c:	dfc00115 	stw	ra,4(sp)
   a0e90:	df000015 	stw	fp,0(sp)
   a0e94:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "next" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
   a0e98:	d0a00b17 	ldw	r2,-32724(gp)
   a0e9c:	1000031e 	bne	r2,zero,a0eac <mode_down+0x24>
        trigger_mode = AUTO_TRIGGER;
   a0ea0:	00800044 	movi	r2,1
   a0ea4:	d0a00b15 	stw	r2,-32724(gp)
   a0ea8:	00000706 	br	a0ec8 <mode_down+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
   a0eac:	d0a00b17 	ldw	r2,-32724(gp)
   a0eb0:	10800058 	cmpnei	r2,r2,1
   a0eb4:	1000031e 	bne	r2,zero,a0ec4 <mode_down+0x3c>
        trigger_mode = ONESHOT_TRIGGER;
   a0eb8:	00800084 	movi	r2,2
   a0ebc:	d0a00b15 	stw	r2,-32724(gp)
   a0ec0:	00000106 	br	a0ec8 <mode_down+0x40>
    else
        trigger_mode = NORMAL_TRIGGER;
   a0ec4:	d0200b15 	stw	zero,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
   a0ec8:	d0a00b17 	ldw	r2,-32724(gp)
   a0ecc:	1009883a 	mov	r4,r2
   a0ed0:	00a1e240 	call	a1e24 <set_mode>


    /* all done with the trigger mode - return */
    return;
   a0ed4:	0001883a 	nop

}
   a0ed8:	e037883a 	mov	sp,fp
   a0edc:	dfc00117 	ldw	ra,4(sp)
   a0ee0:	df000017 	ldw	fp,0(sp)
   a0ee4:	dec00204 	addi	sp,sp,8
   a0ee8:	f800283a 	ret

000a0eec <mode_up>:
   Last Modified:    May 9, 2006

*/

void  mode_up()
{
   a0eec:	defffe04 	addi	sp,sp,-8
   a0ef0:	dfc00115 	stw	ra,4(sp)
   a0ef4:	df000015 	stw	fp,0(sp)
   a0ef8:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "previous" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
   a0efc:	d0a00b17 	ldw	r2,-32724(gp)
   a0f00:	1000031e 	bne	r2,zero,a0f10 <mode_up+0x24>
        trigger_mode = ONESHOT_TRIGGER;
   a0f04:	00800084 	movi	r2,2
   a0f08:	d0a00b15 	stw	r2,-32724(gp)
   a0f0c:	00000706 	br	a0f2c <mode_up+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
   a0f10:	d0a00b17 	ldw	r2,-32724(gp)
   a0f14:	10800058 	cmpnei	r2,r2,1
   a0f18:	1000021e 	bne	r2,zero,a0f24 <mode_up+0x38>
        trigger_mode = NORMAL_TRIGGER;
   a0f1c:	d0200b15 	stw	zero,-32724(gp)
   a0f20:	00000206 	br	a0f2c <mode_up+0x40>
    else
        trigger_mode = AUTO_TRIGGER;
   a0f24:	00800044 	movi	r2,1
   a0f28:	d0a00b15 	stw	r2,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
   a0f2c:	d0a00b17 	ldw	r2,-32724(gp)
   a0f30:	1009883a 	mov	r4,r2
   a0f34:	00a1e240 	call	a1e24 <set_mode>


    /* all done with the trigger mode - return */
    return;
   a0f38:	0001883a 	nop

}
   a0f3c:	e037883a 	mov	sp,fp
   a0f40:	dfc00117 	ldw	ra,4(sp)
   a0f44:	df000017 	ldw	fp,0(sp)
   a0f48:	dec00204 	addi	sp,sp,8
   a0f4c:	f800283a 	ret

000a0f50 <display_mode>:
   Last Modified:    May 9, 2006

*/

void  display_mode(int x_pos, int y_pos, int style)
{
   a0f50:	defff804 	addi	sp,sp,-32
   a0f54:	dfc00715 	stw	ra,28(sp)
   a0f58:	df000615 	stw	fp,24(sp)
   a0f5c:	df000604 	addi	fp,sp,24
   a0f60:	e13ffd15 	stw	r4,-12(fp)
   a0f64:	e17ffe15 	stw	r5,-8(fp)
   a0f68:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the mode strings (must match enumerated type) */
    const char * const  modes[] =  {  " Normal   ",
   a0f6c:	008002b4 	movhi	r2,10
   a0f70:	10903304 	addi	r2,r2,16588
   a0f74:	e0bffa15 	stw	r2,-24(fp)
   a0f78:	008002b4 	movhi	r2,10
   a0f7c:	10903604 	addi	r2,r2,16600
   a0f80:	e0bffb15 	stw	r2,-20(fp)
   a0f84:	008002b4 	movhi	r2,10
   a0f88:	10903904 	addi	r2,r2,16612
   a0f8c:	e0bffc15 	stw	r2,-16(fp)
                                             " One-Shot "  };



    /* display the trigger mode */
    plot_string(x_pos, y_pos, modes[trigger_mode], style);
   a0f90:	d0a00b17 	ldw	r2,-32724(gp)
   a0f94:	1085883a 	add	r2,r2,r2
   a0f98:	1085883a 	add	r2,r2,r2
   a0f9c:	e0fffa04 	addi	r3,fp,-24
   a0fa0:	1885883a 	add	r2,r3,r2
   a0fa4:	10c00017 	ldw	r3,0(r2)
   a0fa8:	e0bfff17 	ldw	r2,-4(fp)
   a0fac:	e13ffd17 	ldw	r4,-12(fp)
   a0fb0:	e17ffe17 	ldw	r5,-8(fp)
   a0fb4:	180d883a 	mov	r6,r3
   a0fb8:	100f883a 	mov	r7,r2
   a0fbc:	00a04e40 	call	a04e4 <plot_string>


    /* all done displaying the trigger mode - return */
    return;

}
   a0fc0:	e037883a 	mov	sp,fp
   a0fc4:	dfc00117 	ldw	ra,4(sp)
   a0fc8:	df000017 	ldw	fp,0(sp)
   a0fcc:	dec00204 	addi	sp,sp,8
   a0fd0:	f800283a 	ret

000a0fd4 <set_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  set_scale(enum scale_type s)
{
   a0fd4:	defffd04 	addi	sp,sp,-12
   a0fd8:	dfc00215 	stw	ra,8(sp)
   a0fdc:	df000115 	stw	fp,4(sp)
   a0fe0:	df000104 	addi	fp,sp,4
   a0fe4:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the scale type */
    scale = s;
   a0fe8:	e0bfff17 	ldw	r2,-4(fp)
   a0fec:	d0a00f15 	stw	r2,-32708(gp)

    /* output the scale appropriately */
    set_display_scale(scale);
   a0ff0:	d0a00f17 	ldw	r2,-32708(gp)
   a0ff4:	1009883a 	mov	r4,r2
   a0ff8:	00a1f480 	call	a1f48 <set_display_scale>


    /* all done setting the scale type - return */
    return;
   a0ffc:	0001883a 	nop

}
   a1000:	e037883a 	mov	sp,fp
   a1004:	dfc00117 	ldw	ra,4(sp)
   a1008:	df000017 	ldw	fp,0(sp)
   a100c:	dec00204 	addi	sp,sp,8
   a1010:	f800283a 	ret

000a1014 <scale_down>:
   Last Modified:    May 9, 2006

*/

void  scale_down()
{
   a1014:	defffe04 	addi	sp,sp,-8
   a1018:	dfc00115 	stw	ra,4(sp)
   a101c:	df000015 	stw	fp,0(sp)
   a1020:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "next" scale type */
    if (scale == SCALE_NONE)
   a1024:	d0a00f17 	ldw	r2,-32708(gp)
   a1028:	1000031e 	bne	r2,zero,a1038 <scale_down+0x24>
        scale = SCALE_AXES;
   a102c:	00800044 	movi	r2,1
   a1030:	d0a00f15 	stw	r2,-32708(gp)
   a1034:	00000706 	br	a1054 <scale_down+0x40>
    else if (scale == SCALE_AXES)
   a1038:	d0a00f17 	ldw	r2,-32708(gp)
   a103c:	10800058 	cmpnei	r2,r2,1
   a1040:	1000031e 	bne	r2,zero,a1050 <scale_down+0x3c>
        scale = SCALE_GRID;
   a1044:	00800084 	movi	r2,2
   a1048:	d0a00f15 	stw	r2,-32708(gp)
   a104c:	00000106 	br	a1054 <scale_down+0x40>
    else
        scale = SCALE_NONE;
   a1050:	d0200f15 	stw	zero,-32708(gp)

    /* set the scale type */
    set_display_scale(scale);
   a1054:	d0a00f17 	ldw	r2,-32708(gp)
   a1058:	1009883a 	mov	r4,r2
   a105c:	00a1f480 	call	a1f48 <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
   a1060:	0001883a 	nop

}
   a1064:	e037883a 	mov	sp,fp
   a1068:	dfc00117 	ldw	ra,4(sp)
   a106c:	df000017 	ldw	fp,0(sp)
   a1070:	dec00204 	addi	sp,sp,8
   a1074:	f800283a 	ret

000a1078 <scale_up>:
   Last Modified:    May 9, 2006

*/

void  scale_up()
{
   a1078:	defffe04 	addi	sp,sp,-8
   a107c:	dfc00115 	stw	ra,4(sp)
   a1080:	df000015 	stw	fp,0(sp)
   a1084:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "previous" scale type */
    if (scale == SCALE_NONE)
   a1088:	d0a00f17 	ldw	r2,-32708(gp)
   a108c:	1000031e 	bne	r2,zero,a109c <scale_up+0x24>
        scale = SCALE_GRID;
   a1090:	00800084 	movi	r2,2
   a1094:	d0a00f15 	stw	r2,-32708(gp)
   a1098:	00000706 	br	a10b8 <scale_up+0x40>
    else if (scale == SCALE_AXES)
   a109c:	d0a00f17 	ldw	r2,-32708(gp)
   a10a0:	10800058 	cmpnei	r2,r2,1
   a10a4:	1000021e 	bne	r2,zero,a10b0 <scale_up+0x38>
        scale = SCALE_NONE;
   a10a8:	d0200f15 	stw	zero,-32708(gp)
   a10ac:	00000206 	br	a10b8 <scale_up+0x40>
    else
        scale = SCALE_AXES;
   a10b0:	00800044 	movi	r2,1
   a10b4:	d0a00f15 	stw	r2,-32708(gp)

    /* set the scale type */
    set_display_scale(scale);
   a10b8:	d0a00f17 	ldw	r2,-32708(gp)
   a10bc:	1009883a 	mov	r4,r2
   a10c0:	00a1f480 	call	a1f48 <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
   a10c4:	0001883a 	nop

}
   a10c8:	e037883a 	mov	sp,fp
   a10cc:	dfc00117 	ldw	ra,4(sp)
   a10d0:	df000017 	ldw	fp,0(sp)
   a10d4:	dec00204 	addi	sp,sp,8
   a10d8:	f800283a 	ret

000a10dc <display_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  display_scale(int x_pos, int y_pos, int style)
{
   a10dc:	defff804 	addi	sp,sp,-32
   a10e0:	dfc00715 	stw	ra,28(sp)
   a10e4:	df000615 	stw	fp,24(sp)
   a10e8:	df000604 	addi	fp,sp,24
   a10ec:	e13ffd15 	stw	r4,-12(fp)
   a10f0:	e17ffe15 	stw	r5,-8(fp)
   a10f4:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the scale type strings (must match enumerated type) */
    const char * const  scale_stat[] =  {  " None",
   a10f8:	008002b4 	movhi	r2,10
   a10fc:	10903c04 	addi	r2,r2,16624
   a1100:	e0bffa15 	stw	r2,-24(fp)
   a1104:	008002b4 	movhi	r2,10
   a1108:	10903e04 	addi	r2,r2,16632
   a110c:	e0bffb15 	stw	r2,-20(fp)
   a1110:	008002b4 	movhi	r2,10
   a1114:	10904004 	addi	r2,r2,16640
   a1118:	e0bffc15 	stw	r2,-16(fp)
                                                  " Grid"  };



    /* display the scale status */
    plot_string(x_pos, y_pos, scale_stat[scale], style);
   a111c:	d0a00f17 	ldw	r2,-32708(gp)
   a1120:	1085883a 	add	r2,r2,r2
   a1124:	1085883a 	add	r2,r2,r2
   a1128:	e0fffa04 	addi	r3,fp,-24
   a112c:	1885883a 	add	r2,r3,r2
   a1130:	10c00017 	ldw	r3,0(r2)
   a1134:	e0bfff17 	ldw	r2,-4(fp)
   a1138:	e13ffd17 	ldw	r4,-12(fp)
   a113c:	e17ffe17 	ldw	r5,-8(fp)
   a1140:	180d883a 	mov	r6,r3
   a1144:	100f883a 	mov	r7,r2
   a1148:	00a04e40 	call	a04e4 <plot_string>


    /* all done displaying the scale status - return */
    return;

}
   a114c:	e037883a 	mov	sp,fp
   a1150:	dfc00117 	ldw	ra,4(sp)
   a1154:	df000017 	ldw	fp,0(sp)
   a1158:	dec00204 	addi	sp,sp,8
   a115c:	f800283a 	ret

000a1160 <set_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  set_sweep(int s)
{
   a1160:	defffc04 	addi	sp,sp,-16
   a1164:	dfc00315 	stw	ra,12(sp)
   a1168:	df000215 	stw	fp,8(sp)
   a116c:	df000204 	addi	fp,sp,8
   a1170:	e13fff15 	stw	r4,-4(fp)
    int  sample_size;		/* sample size for this sweep rate */



    /* set the new sweep rate */
    sweep = s;
   a1174:	e0bfff17 	ldw	r2,-4(fp)
   a1178:	d0a00d15 	stw	r2,-32716(gp)

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
   a117c:	d0a00d17 	ldw	r2,-32716(gp)
   a1180:	00c002b4 	movhi	r3,10
   a1184:	18d01104 	addi	r3,r3,16452
   a1188:	100490fa 	slli	r2,r2,3
   a118c:	1885883a 	add	r2,r3,r2
   a1190:	10800017 	ldw	r2,0(r2)
   a1194:	1009883a 	mov	r4,r2
   a1198:	00a1bcc0 	call	a1bcc <set_sample_rate>
   a119c:	e0bffe15 	stw	r2,-8(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
   a11a0:	e13ffe17 	ldw	r4,-8(fp)
   a11a4:	00a1f1c0 	call	a1f1c <set_trace_size>


    /* all done initializing the sweep rate - return */
    return;
   a11a8:	0001883a 	nop

}
   a11ac:	e037883a 	mov	sp,fp
   a11b0:	dfc00117 	ldw	ra,4(sp)
   a11b4:	df000017 	ldw	fp,0(sp)
   a11b8:	dec00204 	addi	sp,sp,8
   a11bc:	f800283a 	ret

000a11c0 <sweep_down>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_down()
{
   a11c0:	defffd04 	addi	sp,sp,-12
   a11c4:	dfc00215 	stw	ra,8(sp)
   a11c8:	df000115 	stw	fp,4(sp)
   a11cc:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* decrease the sweep rate, if not already the minimum */
    if (sweep > 0)  {
   a11d0:	d0a00d17 	ldw	r2,-32716(gp)
   a11d4:	0080090e 	bge	zero,r2,a11fc <sweep_down+0x3c>
        /* not at minimum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep - 1));
   a11d8:	d0e00d17 	ldw	r3,-32716(gp)
   a11dc:	d0a00d17 	ldw	r2,-32716(gp)
   a11e0:	10bfffc4 	addi	r2,r2,-1
   a11e4:	1809883a 	mov	r4,r3
   a11e8:	100b883a 	mov	r5,r2
   a11ec:	00a16a40 	call	a16a4 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep--;
   a11f0:	d0a00d17 	ldw	r2,-32716(gp)
   a11f4:	10bfffc4 	addi	r2,r2,-1
   a11f8:	d0a00d15 	stw	r2,-32716(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
   a11fc:	d0a00d17 	ldw	r2,-32716(gp)
   a1200:	00c002b4 	movhi	r3,10
   a1204:	18d01104 	addi	r3,r3,16452
   a1208:	100490fa 	slli	r2,r2,3
   a120c:	1885883a 	add	r2,r3,r2
   a1210:	10800017 	ldw	r2,0(r2)
   a1214:	1009883a 	mov	r4,r2
   a1218:	00a1bcc0 	call	a1bcc <set_sample_rate>
   a121c:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
   a1220:	e13fff17 	ldw	r4,-4(fp)
   a1224:	00a1f1c0 	call	a1f1c <set_trace_size>


    /* all done with lowering the sweep rate - return */
    return;
   a1228:	0001883a 	nop

}
   a122c:	e037883a 	mov	sp,fp
   a1230:	dfc00117 	ldw	ra,4(sp)
   a1234:	df000017 	ldw	fp,0(sp)
   a1238:	dec00204 	addi	sp,sp,8
   a123c:	f800283a 	ret

000a1240 <sweep_up>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_up()
{
   a1240:	defffd04 	addi	sp,sp,-12
   a1244:	dfc00215 	stw	ra,8(sp)
   a1248:	df000115 	stw	fp,4(sp)
   a124c:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* increase the sweep rate, if not already the maximum */
    if (sweep < (NO_SWEEP_RATES - 1))  {
   a1250:	d0a00d17 	ldw	r2,-32716(gp)
   a1254:	10800428 	cmpgeui	r2,r2,16
   a1258:	1000091e 	bne	r2,zero,a1280 <sweep_up+0x40>
        /* not at maximum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep + 1));
   a125c:	d0e00d17 	ldw	r3,-32716(gp)
   a1260:	d0a00d17 	ldw	r2,-32716(gp)
   a1264:	10800044 	addi	r2,r2,1
   a1268:	1809883a 	mov	r4,r3
   a126c:	100b883a 	mov	r5,r2
   a1270:	00a16a40 	call	a16a4 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep++;
   a1274:	d0a00d17 	ldw	r2,-32716(gp)
   a1278:	10800044 	addi	r2,r2,1
   a127c:	d0a00d15 	stw	r2,-32716(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
   a1280:	d0a00d17 	ldw	r2,-32716(gp)
   a1284:	00c002b4 	movhi	r3,10
   a1288:	18d01104 	addi	r3,r3,16452
   a128c:	100490fa 	slli	r2,r2,3
   a1290:	1885883a 	add	r2,r3,r2
   a1294:	10800017 	ldw	r2,0(r2)
   a1298:	1009883a 	mov	r4,r2
   a129c:	00a1bcc0 	call	a1bcc <set_sample_rate>
   a12a0:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
   a12a4:	e13fff17 	ldw	r4,-4(fp)
   a12a8:	00a1f1c0 	call	a1f1c <set_trace_size>


    /* all done with raising the sweep rate - return */
    return;
   a12ac:	0001883a 	nop

}
   a12b0:	e037883a 	mov	sp,fp
   a12b4:	dfc00117 	ldw	ra,4(sp)
   a12b8:	df000017 	ldw	fp,0(sp)
   a12bc:	dec00204 	addi	sp,sp,8
   a12c0:	f800283a 	ret

000a12c4 <display_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  display_sweep(int x_pos, int y_pos, int style)
{
   a12c4:	defffb04 	addi	sp,sp,-20
   a12c8:	dfc00415 	stw	ra,16(sp)
   a12cc:	df000315 	stw	fp,12(sp)
   a12d0:	df000304 	addi	fp,sp,12
   a12d4:	e13ffd15 	stw	r4,-12(fp)
   a12d8:	e17ffe15 	stw	r5,-8(fp)
   a12dc:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* display the sweep rate */
    plot_string(x_pos, y_pos, sweep_rates[sweep].s, style);
   a12e0:	d0a00d17 	ldw	r2,-32716(gp)
   a12e4:	00c002b4 	movhi	r3,10
   a12e8:	18d01104 	addi	r3,r3,16452
   a12ec:	100490fa 	slli	r2,r2,3
   a12f0:	1885883a 	add	r2,r3,r2
   a12f4:	10800104 	addi	r2,r2,4
   a12f8:	10c00017 	ldw	r3,0(r2)
   a12fc:	e0bfff17 	ldw	r2,-4(fp)
   a1300:	e13ffd17 	ldw	r4,-12(fp)
   a1304:	e17ffe17 	ldw	r5,-8(fp)
   a1308:	180d883a 	mov	r6,r3
   a130c:	100f883a 	mov	r7,r2
   a1310:	00a04e40 	call	a04e4 <plot_string>


    /* all done displaying the sweep rate - return */
    return;
   a1314:	0001883a 	nop

}
   a1318:	e037883a 	mov	sp,fp
   a131c:	dfc00117 	ldw	ra,4(sp)
   a1320:	df000017 	ldw	fp,0(sp)
   a1324:	dec00204 	addi	sp,sp,8
   a1328:	f800283a 	ret

000a132c <set_trg_level>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_level(int l)
{
   a132c:	defffd04 	addi	sp,sp,-12
   a1330:	dfc00215 	stw	ra,8(sp)
   a1334:	df000115 	stw	fp,4(sp)
   a1338:	df000104 	addi	fp,sp,4
   a133c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger level */
    level = l;
   a1340:	e0bfff17 	ldw	r2,-4(fp)
   a1344:	d0a00c15 	stw	r2,-32720(gp)

    /* set the trigger level in hardware too */
    set_trigger(level, slope);
   a1348:	d0e00c17 	ldw	r3,-32720(gp)
   a134c:	d0a01017 	ldw	r2,-32704(gp)
   a1350:	1809883a 	mov	r4,r3
   a1354:	100b883a 	mov	r5,r2
   a1358:	00a1bf00 	call	a1bf0 <set_trigger>


    /* all done initializing the trigger level - return */
    return;
   a135c:	0001883a 	nop

}
   a1360:	e037883a 	mov	sp,fp
   a1364:	dfc00117 	ldw	ra,4(sp)
   a1368:	df000017 	ldw	fp,0(sp)
   a136c:	dec00204 	addi	sp,sp,8
   a1370:	f800283a 	ret

000a1374 <trg_level_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_down()
{
   a1374:	defffe04 	addi	sp,sp,-8
   a1378:	dfc00115 	stw	ra,4(sp)
   a137c:	df000015 	stw	fp,0(sp)
   a1380:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger level, if not already the minimum */
    if (level > MIN_TRG_LEVEL_SET)
   a1384:	d0a00c17 	ldw	r2,-32720(gp)
   a1388:	0080030e 	bge	zero,r2,a1398 <trg_level_down+0x24>
        level--;
   a138c:	d0a00c17 	ldw	r2,-32720(gp)
   a1390:	10bfffc4 	addi	r2,r2,-1
   a1394:	d0a00c15 	stw	r2,-32720(gp)

    /* set the trigger level for the hardware */
    set_trigger(level, slope);
   a1398:	d0e00c17 	ldw	r3,-32720(gp)
   a139c:	d0a01017 	ldw	r2,-32704(gp)
   a13a0:	1809883a 	mov	r4,r3
   a13a4:	100b883a 	mov	r5,r2
   a13a8:	00a1bf00 	call	a1bf0 <set_trigger>


    /* all done with lowering the trigger level - return */
    return;
   a13ac:	0001883a 	nop

}
   a13b0:	e037883a 	mov	sp,fp
   a13b4:	dfc00117 	ldw	ra,4(sp)
   a13b8:	df000017 	ldw	fp,0(sp)
   a13bc:	dec00204 	addi	sp,sp,8
   a13c0:	f800283a 	ret

000a13c4 <trg_level_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_up()
{
   a13c4:	defffe04 	addi	sp,sp,-8
   a13c8:	dfc00115 	stw	ra,4(sp)
   a13cc:	df000015 	stw	fp,0(sp)
   a13d0:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger level, if not already the maximum */
    if (level < MAX_TRG_LEVEL_SET)
   a13d4:	d0a00c17 	ldw	r2,-32720(gp)
   a13d8:	10801fc8 	cmpgei	r2,r2,127
   a13dc:	1000031e 	bne	r2,zero,a13ec <trg_level_up+0x28>
        level++;
   a13e0:	d0a00c17 	ldw	r2,-32720(gp)
   a13e4:	10800044 	addi	r2,r2,1
   a13e8:	d0a00c15 	stw	r2,-32720(gp)

    /* tell the hardware the new trigger level */
    set_trigger(level, slope);
   a13ec:	d0e00c17 	ldw	r3,-32720(gp)
   a13f0:	d0a01017 	ldw	r2,-32704(gp)
   a13f4:	1809883a 	mov	r4,r3
   a13f8:	100b883a 	mov	r5,r2
   a13fc:	00a1bf00 	call	a1bf0 <set_trigger>


    /* all done raising the trigger level - return */
    return;
   a1400:	0001883a 	nop

}
   a1404:	e037883a 	mov	sp,fp
   a1408:	dfc00117 	ldw	ra,4(sp)
   a140c:	df000017 	ldw	fp,0(sp)
   a1410:	dec00204 	addi	sp,sp,8
   a1414:	f800283a 	ret

000a1418 <display_trg_level>:
   Last Modified:    Mar. 10, 1995

*/

void  display_trg_level(int x_pos, int y_pos, int style)
{
   a1418:	defff704 	addi	sp,sp,-36
   a141c:	dfc00815 	stw	ra,32(sp)
   a1420:	df000715 	stw	fp,28(sp)
   a1424:	df000704 	addi	fp,sp,28
   a1428:	e13ffd15 	stw	r4,-12(fp)
   a142c:	e17ffe15 	stw	r5,-8(fp)
   a1430:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      level_str[] = "        "; /* string containing the trigger level */
   a1434:	00880834 	movhi	r2,8224
   a1438:	10880804 	addi	r2,r2,8224
   a143c:	e0bffa15 	stw	r2,-24(fp)
   a1440:	00880834 	movhi	r2,8224
   a1444:	10880804 	addi	r2,r2,8224
   a1448:	e0bffb15 	stw	r2,-20(fp)
   a144c:	e03ffc05 	stb	zero,-16(fp)
    long int  l;			/* trigger level in mV */



    /* compute the trigger level in millivolts */
    l = ((long int) MAX_LEVEL - MIN_LEVEL) * level / (MAX_TRG_LEVEL_SET - MIN_TRG_LEVEL_SET) + MIN_LEVEL;
   a1450:	d0a00c17 	ldw	r2,-32720(gp)
   a1454:	1009883a 	mov	r4,r2
   a1458:	0144e204 	movi	r5,5000
   a145c:	00a2e3c0 	call	a2e3c <__mulsi3>
   a1460:	1009883a 	mov	r4,r2
   a1464:	01401fc4 	movi	r5,127
   a1468:	00a2d800 	call	a2d80 <__divsi3>
   a146c:	e0bff915 	stw	r2,-28(fp)

    /* convert the level to the string (leave first character blank) */
    cvt_num_field(l, &level_str[1]);
   a1470:	e0bffa04 	addi	r2,fp,-24
   a1474:	10800044 	addi	r2,r2,1
   a1478:	e13ff917 	ldw	r4,-28(fp)
   a147c:	100b883a 	mov	r5,r2
   a1480:	00a19a80 	call	a19a8 <cvt_num_field>

    /* add in the units */
    level_str[7] = 'V';
   a1484:	00801584 	movi	r2,86
   a1488:	e0bffbc5 	stb	r2,-17(fp)


    /* now finally display the trigger level */
    plot_string(x_pos, y_pos, level_str, style);
   a148c:	e0bfff17 	ldw	r2,-4(fp)
   a1490:	e0fffa04 	addi	r3,fp,-24
   a1494:	e13ffd17 	ldw	r4,-12(fp)
   a1498:	e17ffe17 	ldw	r5,-8(fp)
   a149c:	180d883a 	mov	r6,r3
   a14a0:	100f883a 	mov	r7,r2
   a14a4:	00a04e40 	call	a04e4 <plot_string>


    /* all done displaying the trigger level - return */
    return;

}
   a14a8:	e037883a 	mov	sp,fp
   a14ac:	dfc00117 	ldw	ra,4(sp)
   a14b0:	df000017 	ldw	fp,0(sp)
   a14b4:	dec00204 	addi	sp,sp,8
   a14b8:	f800283a 	ret

000a14bc <set_trg_slope>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_slope(enum slope_type s)
{
   a14bc:	defffd04 	addi	sp,sp,-12
   a14c0:	dfc00215 	stw	ra,8(sp)
   a14c4:	df000115 	stw	fp,4(sp)
   a14c8:	df000104 	addi	fp,sp,4
   a14cc:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the slope type */
    slope = s;
   a14d0:	e0bfff17 	ldw	r2,-4(fp)
   a14d4:	d0a01015 	stw	r2,-32704(gp)

    /* also tell the hardware what the slope is */
    set_trigger(level, slope);
   a14d8:	d0e00c17 	ldw	r3,-32720(gp)
   a14dc:	d0a01017 	ldw	r2,-32704(gp)
   a14e0:	1809883a 	mov	r4,r3
   a14e4:	100b883a 	mov	r5,r2
   a14e8:	00a1bf00 	call	a1bf0 <set_trigger>


    /* all done setting the trigger slope - return */
    return;
   a14ec:	0001883a 	nop

}
   a14f0:	e037883a 	mov	sp,fp
   a14f4:	dfc00117 	ldw	ra,4(sp)
   a14f8:	df000017 	ldw	fp,0(sp)
   a14fc:	dec00204 	addi	sp,sp,8
   a1500:	f800283a 	ret

000a1504 <trg_slope_toggle>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_slope_toggle()
{
   a1504:	defffe04 	addi	sp,sp,-8
   a1508:	dfc00115 	stw	ra,4(sp)
   a150c:	df000015 	stw	fp,0(sp)
   a1510:	d839883a 	mov	fp,sp
      /* none */



    /* toggle the trigger slope */
    if (slope == SLOPE_POSITIVE)
   a1514:	d0a01017 	ldw	r2,-32704(gp)
   a1518:	1000031e 	bne	r2,zero,a1528 <trg_slope_toggle+0x24>
        slope = SLOPE_NEGATIVE;
   a151c:	00800044 	movi	r2,1
   a1520:	d0a01015 	stw	r2,-32704(gp)
   a1524:	00000106 	br	a152c <trg_slope_toggle+0x28>
    else
        slope = SLOPE_POSITIVE;
   a1528:	d0201015 	stw	zero,-32704(gp)

    /* set the new trigger slope */
    set_trigger(level, slope);
   a152c:	d0e00c17 	ldw	r3,-32720(gp)
   a1530:	d0a01017 	ldw	r2,-32704(gp)
   a1534:	1809883a 	mov	r4,r3
   a1538:	100b883a 	mov	r5,r2
   a153c:	00a1bf00 	call	a1bf0 <set_trigger>


    /* all done with the trigger slope - return */
    return;
   a1540:	0001883a 	nop

}
   a1544:	e037883a 	mov	sp,fp
   a1548:	dfc00117 	ldw	ra,4(sp)
   a154c:	df000017 	ldw	fp,0(sp)
   a1550:	dec00204 	addi	sp,sp,8
   a1554:	f800283a 	ret

000a1558 <display_trg_slope>:
   Last Modified:    Mar. 13, 1994

*/

void  display_trg_slope(int x_pos, int y_pos, int style)
{
   a1558:	defff904 	addi	sp,sp,-28
   a155c:	dfc00615 	stw	ra,24(sp)
   a1560:	df000515 	stw	fp,20(sp)
   a1564:	df000504 	addi	fp,sp,20
   a1568:	e13ffd15 	stw	r4,-12(fp)
   a156c:	e17ffe15 	stw	r5,-8(fp)
   a1570:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the trigger slope strings (must match enumerated type) */
    const char * const  slopes[] =  {  " +", " -"  };
   a1574:	008002b4 	movhi	r2,10
   a1578:	10904204 	addi	r2,r2,16648
   a157c:	e0bffb15 	stw	r2,-20(fp)
   a1580:	008002b4 	movhi	r2,10
   a1584:	10904304 	addi	r2,r2,16652
   a1588:	e0bffc15 	stw	r2,-16(fp)



    /* display the trigger slope */
    plot_string(x_pos, y_pos, slopes[slope], style);
   a158c:	d0a01017 	ldw	r2,-32704(gp)
   a1590:	1085883a 	add	r2,r2,r2
   a1594:	1085883a 	add	r2,r2,r2
   a1598:	e0fffb04 	addi	r3,fp,-20
   a159c:	1885883a 	add	r2,r3,r2
   a15a0:	10c00017 	ldw	r3,0(r2)
   a15a4:	e0bfff17 	ldw	r2,-4(fp)
   a15a8:	e13ffd17 	ldw	r4,-12(fp)
   a15ac:	e17ffe17 	ldw	r5,-8(fp)
   a15b0:	180d883a 	mov	r6,r3
   a15b4:	100f883a 	mov	r7,r2
   a15b8:	00a04e40 	call	a04e4 <plot_string>


    /* all done displaying the trigger slope - return */
    return;

}
   a15bc:	e037883a 	mov	sp,fp
   a15c0:	dfc00117 	ldw	ra,4(sp)
   a15c4:	df000017 	ldw	fp,0(sp)
   a15c8:	dec00204 	addi	sp,sp,8
   a15cc:	f800283a 	ret

000a15d0 <set_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_delay(long int d)
{
   a15d0:	defffd04 	addi	sp,sp,-12
   a15d4:	dfc00215 	stw	ra,8(sp)
   a15d8:	df000115 	stw	fp,4(sp)
   a15dc:	df000104 	addi	fp,sp,4
   a15e0:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger delay */
    delay = d;
   a15e4:	e0bfff17 	ldw	r2,-4(fp)
   a15e8:	d0a00e15 	stw	r2,-32712(gp)

    /* set the trigger delay in hardware too */
    set_delay(delay);
   a15ec:	d0a00e17 	ldw	r2,-32712(gp)
   a15f0:	1009883a 	mov	r4,r2
   a15f4:	00a1c180 	call	a1c18 <set_delay>


    /* all done initializing the trigger delay - return */
    return;
   a15f8:	0001883a 	nop

}
   a15fc:	e037883a 	mov	sp,fp
   a1600:	dfc00117 	ldw	ra,4(sp)
   a1604:	df000017 	ldw	fp,0(sp)
   a1608:	dec00204 	addi	sp,sp,8
   a160c:	f800283a 	ret

000a1610 <trg_delay_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_down()
{
   a1610:	defffe04 	addi	sp,sp,-8
   a1614:	dfc00115 	stw	ra,4(sp)
   a1618:	df000015 	stw	fp,0(sp)
   a161c:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger delay, if not already the minimum */
    if (delay > MIN_DELAY)
   a1620:	d0a00e17 	ldw	r2,-32712(gp)
   a1624:	0080030e 	bge	zero,r2,a1634 <trg_delay_down+0x24>
        delay--;
   a1628:	d0a00e17 	ldw	r2,-32712(gp)
   a162c:	10bfffc4 	addi	r2,r2,-1
   a1630:	d0a00e15 	stw	r2,-32712(gp)

    /* set the trigger delay for the hardware */
    set_delay(delay);
   a1634:	d0a00e17 	ldw	r2,-32712(gp)
   a1638:	1009883a 	mov	r4,r2
   a163c:	00a1c180 	call	a1c18 <set_delay>


    /* all done with lowering the trigger delay - return */
    return;
   a1640:	0001883a 	nop

}
   a1644:	e037883a 	mov	sp,fp
   a1648:	dfc00117 	ldw	ra,4(sp)
   a164c:	df000017 	ldw	fp,0(sp)
   a1650:	dec00204 	addi	sp,sp,8
   a1654:	f800283a 	ret

000a1658 <trg_delay_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_up()
{
   a1658:	defffe04 	addi	sp,sp,-8
   a165c:	dfc00115 	stw	ra,4(sp)
   a1660:	df000015 	stw	fp,0(sp)
   a1664:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger delay, if not already the maximum */
    if (delay < MAX_DELAY)
   a1668:	d0a00e17 	ldw	r2,-32712(gp)
   a166c:	00f0d3d4 	movui	r3,49999
   a1670:	18800316 	blt	r3,r2,a1680 <trg_delay_up+0x28>
        delay++;
   a1674:	d0a00e17 	ldw	r2,-32712(gp)
   a1678:	10800044 	addi	r2,r2,1
   a167c:	d0a00e15 	stw	r2,-32712(gp)

    /* tell the hardware the new trigger delay */
    set_delay(delay);
   a1680:	d0a00e17 	ldw	r2,-32712(gp)
   a1684:	1009883a 	mov	r4,r2
   a1688:	00a1c180 	call	a1c18 <set_delay>


    /* all done raising the trigger delay - return */
    return;
   a168c:	0001883a 	nop

}
   a1690:	e037883a 	mov	sp,fp
   a1694:	dfc00117 	ldw	ra,4(sp)
   a1698:	df000017 	ldw	fp,0(sp)
   a169c:	dec00204 	addi	sp,sp,8
   a16a0:	f800283a 	ret

000a16a4 <adjust_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  adjust_trg_delay(int old_sweep, int new_sweep)
{
   a16a4:	defffc04 	addi	sp,sp,-16
   a16a8:	dfc00315 	stw	ra,12(sp)
   a16ac:	df000215 	stw	fp,8(sp)
   a16b0:	df000204 	addi	fp,sp,8
   a16b4:	e13ffe15 	stw	r4,-8(fp)
   a16b8:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* multiply by 10 times the ratio of sweep rates */
    delay *= (10 * sweep_rates[new_sweep].sample_rate) / sweep_rates[old_sweep].sample_rate;
   a16bc:	00c002b4 	movhi	r3,10
   a16c0:	18d01104 	addi	r3,r3,16452
   a16c4:	e0bfff17 	ldw	r2,-4(fp)
   a16c8:	100490fa 	slli	r2,r2,3
   a16cc:	1885883a 	add	r2,r3,r2
   a16d0:	10800017 	ldw	r2,0(r2)
   a16d4:	1009883a 	mov	r4,r2
   a16d8:	01400284 	movi	r5,10
   a16dc:	00a2e3c0 	call	a2e3c <__mulsi3>
   a16e0:	1007883a 	mov	r3,r2
   a16e4:	010002b4 	movhi	r4,10
   a16e8:	21101104 	addi	r4,r4,16452
   a16ec:	e0bffe17 	ldw	r2,-8(fp)
   a16f0:	100490fa 	slli	r2,r2,3
   a16f4:	2085883a 	add	r2,r4,r2
   a16f8:	10800017 	ldw	r2,0(r2)
   a16fc:	1809883a 	mov	r4,r3
   a1700:	100b883a 	mov	r5,r2
   a1704:	00a2d800 	call	a2d80 <__divsi3>
   a1708:	1007883a 	mov	r3,r2
   a170c:	d0a00e17 	ldw	r2,-32712(gp)
   a1710:	1809883a 	mov	r4,r3
   a1714:	100b883a 	mov	r5,r2
   a1718:	00a2e3c0 	call	a2e3c <__mulsi3>
   a171c:	d0a00e15 	stw	r2,-32712(gp)
    /* now divide the factor of 10 back out */
    delay /= 10;
   a1720:	d0a00e17 	ldw	r2,-32712(gp)
   a1724:	1009883a 	mov	r4,r2
   a1728:	01400284 	movi	r5,10
   a172c:	00a2d800 	call	a2d80 <__divsi3>
   a1730:	d0a00e15 	stw	r2,-32712(gp)

    /* make sure delay is not out of range */
    if (delay > MAX_DELAY)
   a1734:	d0a00e17 	ldw	r2,-32712(gp)
   a1738:	00f0d414 	movui	r3,50000
   a173c:	1880020e 	bge	r3,r2,a1748 <adjust_trg_delay+0xa4>
        /* delay is too large - set to maximum */
        delay = MAX_DELAY;
   a1740:	00b0d414 	movui	r2,50000
   a1744:	d0a00e15 	stw	r2,-32712(gp)
    if (delay < MIN_DELAY)
   a1748:	d0a00e17 	ldw	r2,-32712(gp)
   a174c:	1000010e 	bge	r2,zero,a1754 <adjust_trg_delay+0xb0>
        /* delay is too small - set to minimum */
	delay = MIN_DELAY;
   a1750:	d0200e15 	stw	zero,-32712(gp)


    /* tell the hardware the new trigger delay */
    set_delay(delay);
   a1754:	d0a00e17 	ldw	r2,-32712(gp)
   a1758:	1009883a 	mov	r4,r2
   a175c:	00a1c180 	call	a1c18 <set_delay>


    /* all done adjusting the trigger delay - return */
    return;
   a1760:	0001883a 	nop

}
   a1764:	e037883a 	mov	sp,fp
   a1768:	dfc00117 	ldw	ra,4(sp)
   a176c:	df000017 	ldw	fp,0(sp)
   a1770:	dec00204 	addi	sp,sp,8
   a1774:	f800283a 	ret

000a1778 <display_trg_delay>:
   Last Modified:    May 3, 2006

*/

void  display_trg_delay(int x_pos, int y_pos, int style)
{
   a1778:	defff604 	addi	sp,sp,-40
   a177c:	dfc00915 	stw	ra,36(sp)
   a1780:	df000815 	stw	fp,32(sp)
   a1784:	df000804 	addi	fp,sp,32
   a1788:	e13ffd15 	stw	r4,-12(fp)
   a178c:	e17ffe15 	stw	r5,-8(fp)
   a1790:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      delay_str[] = "         "; /* string containing the trigger delay */
   a1794:	00880834 	movhi	r2,8224
   a1798:	10880804 	addi	r2,r2,8224
   a179c:	e0bffa15 	stw	r2,-24(fp)
   a17a0:	00880834 	movhi	r2,8224
   a17a4:	10880804 	addi	r2,r2,8224
   a17a8:	e0bffb15 	stw	r2,-20(fp)
   a17ac:	00800804 	movi	r2,32
   a17b0:	e0bffc0d 	sth	r2,-16(fp)
    long int  d;                         /* delay in appropriate units */


    /* compute the delay in the appropriate units */
    /* have to watch out for overflow, so be careful */
    if (sweep_rates[sweep].sample_rate > 1000000L)  {
   a17b4:	d0a00d17 	ldw	r2,-32716(gp)
   a17b8:	00c002b4 	movhi	r3,10
   a17bc:	18d01104 	addi	r3,r3,16452
   a17c0:	100490fa 	slli	r2,r2,3
   a17c4:	1885883a 	add	r2,r3,r2
   a17c8:	10800017 	ldw	r2,0(r2)
   a17cc:	00c003f4 	movhi	r3,15
   a17d0:	18d09004 	addi	r3,r3,16960
   a17d4:	1880170e 	bge	r3,r2,a1834 <display_trg_delay+0xbc>
        /* have a fast sweep rate, could overflow */
        /* first compute in units of 100 ns */
        d = delay * (10000000L / sweep_rates[sweep].sample_rate);
   a17d8:	d0a00d17 	ldw	r2,-32716(gp)
   a17dc:	00c002b4 	movhi	r3,10
   a17e0:	18d01104 	addi	r3,r3,16452
   a17e4:	100490fa 	slli	r2,r2,3
   a17e8:	1885883a 	add	r2,r3,r2
   a17ec:	10800017 	ldw	r2,0(r2)
   a17f0:	01002674 	movhi	r4,153
   a17f4:	2125a004 	addi	r4,r4,-27008
   a17f8:	100b883a 	mov	r5,r2
   a17fc:	00a2d800 	call	a2d80 <__divsi3>
   a1800:	1007883a 	mov	r3,r2
   a1804:	d0a00e17 	ldw	r2,-32712(gp)
   a1808:	1809883a 	mov	r4,r3
   a180c:	100b883a 	mov	r5,r2
   a1810:	00a2e3c0 	call	a2e3c <__mulsi3>
   a1814:	e0bff915 	stw	r2,-28(fp)
	/* now convert to nanoseconds */
	d *= 100L;
   a1818:	e13ff917 	ldw	r4,-28(fp)
   a181c:	01401904 	movi	r5,100
   a1820:	00a2e3c0 	call	a2e3c <__mulsi3>
   a1824:	e0bff915 	stw	r2,-28(fp)
	/* need to divide by 1000 to get to microseconds */
	units_adj = 1000;
   a1828:	0080fa04 	movi	r2,1000
   a182c:	e0bff815 	stw	r2,-32(fp)
   a1830:	00001206 	br	a187c <display_trg_delay+0x104>
    }
    else  {
        /* slow sweep rate, don't have to worry about overflow */
        d = delay * (1000000L / sweep_rates[sweep].sample_rate);
   a1834:	d0a00d17 	ldw	r2,-32716(gp)
   a1838:	00c002b4 	movhi	r3,10
   a183c:	18d01104 	addi	r3,r3,16452
   a1840:	100490fa 	slli	r2,r2,3
   a1844:	1885883a 	add	r2,r3,r2
   a1848:	10800017 	ldw	r2,0(r2)
   a184c:	010003f4 	movhi	r4,15
   a1850:	21109004 	addi	r4,r4,16960
   a1854:	100b883a 	mov	r5,r2
   a1858:	00a2d800 	call	a2d80 <__divsi3>
   a185c:	1007883a 	mov	r3,r2
   a1860:	d0a00e17 	ldw	r2,-32712(gp)
   a1864:	1809883a 	mov	r4,r3
   a1868:	100b883a 	mov	r5,r2
   a186c:	00a2e3c0 	call	a2e3c <__mulsi3>
   a1870:	e0bff915 	stw	r2,-28(fp)
	/* already in microseconds, so adjustment is 1 */
	units_adj = 1;
   a1874:	00800044 	movi	r2,1
   a1878:	e0bff815 	stw	r2,-32(fp)
    }

    /* convert it to the string (leave first character blank) */
    cvt_num_field(d, &delay_str[1]);
   a187c:	e0bffa04 	addi	r2,fp,-24
   a1880:	10800044 	addi	r2,r2,1
   a1884:	e13ff917 	ldw	r4,-28(fp)
   a1888:	100b883a 	mov	r5,r2
   a188c:	00a19a80 	call	a19a8 <cvt_num_field>

    /* add in the units */
    if (((d / units_adj) < 1000) && ((d / units_adj) > -1000) && (units_adj == 1000)) {
   a1890:	e13ff917 	ldw	r4,-28(fp)
   a1894:	e17ff817 	ldw	r5,-32(fp)
   a1898:	00a2d800 	call	a2d80 <__divsi3>
   a189c:	1080fa08 	cmpgei	r2,r2,1000
   a18a0:	10000d1e 	bne	r2,zero,a18d8 <display_trg_delay+0x160>
   a18a4:	e13ff917 	ldw	r4,-28(fp)
   a18a8:	e17ff817 	ldw	r5,-32(fp)
   a18ac:	00a2d800 	call	a2d80 <__divsi3>
   a18b0:	10bf0650 	cmplti	r2,r2,-999
   a18b4:	1000081e 	bne	r2,zero,a18d8 <display_trg_delay+0x160>
   a18b8:	e0bff817 	ldw	r2,-32(fp)
   a18bc:	1080fa18 	cmpnei	r2,r2,1000
   a18c0:	1000051e 	bne	r2,zero,a18d8 <display_trg_delay+0x160>
        /* delay is in microseconds */
	delay_str[7] = '\004';
   a18c4:	00800104 	movi	r2,4
   a18c8:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
   a18cc:	00801cc4 	movi	r2,115
   a18d0:	e0bffc05 	stb	r2,-16(fp)
   a18d4:	00002806 	br	a1978 <display_trg_delay+0x200>
    }
    else if (((d / units_adj) < 1000000) && ((d / units_adj) > -1000000)) {
   a18d8:	e13ff917 	ldw	r4,-28(fp)
   a18dc:	e17ff817 	ldw	r5,-32(fp)
   a18e0:	00a2d800 	call	a2d80 <__divsi3>
   a18e4:	00c003f4 	movhi	r3,15
   a18e8:	18d08fc4 	addi	r3,r3,16959
   a18ec:	18800c16 	blt	r3,r2,a1920 <display_trg_delay+0x1a8>
   a18f0:	e13ff917 	ldw	r4,-28(fp)
   a18f4:	e17ff817 	ldw	r5,-32(fp)
   a18f8:	00a2d800 	call	a2d80 <__divsi3>
   a18fc:	1007883a 	mov	r3,r2
   a1900:	00bffc74 	movhi	r2,65521
   a1904:	10af7044 	addi	r2,r2,-16959
   a1908:	18800516 	blt	r3,r2,a1920 <display_trg_delay+0x1a8>
        /* delay is in milliseconds */
	delay_str[7] = 'm';
   a190c:	00801b44 	movi	r2,109
   a1910:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
   a1914:	00801cc4 	movi	r2,115
   a1918:	e0bffc05 	stb	r2,-16(fp)
   a191c:	00001606 	br	a1978 <display_trg_delay+0x200>
    }
    else if (((d / units_adj) < 1000000000) && ((d / units_adj) > -1000000000))  {
   a1920:	e13ff917 	ldw	r4,-28(fp)
   a1924:	e17ff817 	ldw	r5,-32(fp)
   a1928:	00a2d800 	call	a2d80 <__divsi3>
   a192c:	00cee6f4 	movhi	r3,15259
   a1930:	18f27fc4 	addi	r3,r3,-13825
   a1934:	18800c16 	blt	r3,r2,a1968 <display_trg_delay+0x1f0>
   a1938:	e13ff917 	ldw	r4,-28(fp)
   a193c:	e17ff817 	ldw	r5,-32(fp)
   a1940:	00a2d800 	call	a2d80 <__divsi3>
   a1944:	1007883a 	mov	r3,r2
   a1948:	00b11974 	movhi	r2,50277
   a194c:	108d8044 	addi	r2,r2,13825
   a1950:	18800516 	blt	r3,r2,a1968 <display_trg_delay+0x1f0>
        /* delay is in seconds */
	delay_str[7] = 's';
   a1954:	00801cc4 	movi	r2,115
   a1958:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = ' ';
   a195c:	00800804 	movi	r2,32
   a1960:	e0bffc05 	stb	r2,-16(fp)
   a1964:	00000406 	br	a1978 <display_trg_delay+0x200>
    }
    else  {
        /* delay is in kiloseconds */
	delay_str[7] = 'k';
   a1968:	00801ac4 	movi	r2,107
   a196c:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
   a1970:	00801cc4 	movi	r2,115
   a1974:	e0bffc05 	stb	r2,-16(fp)
    }


    /* now actually display the trigger delay */
    plot_string(x_pos, y_pos, delay_str, style);
   a1978:	e0bfff17 	ldw	r2,-4(fp)
   a197c:	e0fffa04 	addi	r3,fp,-24
   a1980:	e13ffd17 	ldw	r4,-12(fp)
   a1984:	e17ffe17 	ldw	r5,-8(fp)
   a1988:	180d883a 	mov	r6,r3
   a198c:	100f883a 	mov	r7,r2
   a1990:	00a04e40 	call	a04e4 <plot_string>


    /* all done displaying the trigger delay - return */
    return;

}
   a1994:	e037883a 	mov	sp,fp
   a1998:	dfc00117 	ldw	ra,4(sp)
   a199c:	df000017 	ldw	fp,0(sp)
   a19a0:	dec00204 	addi	sp,sp,8
   a19a4:	f800283a 	ret

000a19a8 <cvt_num_field>:
   Last Modified:    Mar. 8, 1994

*/

void  cvt_num_field(long int n, char *s)
{
   a19a8:	defff804 	addi	sp,sp,-32
   a19ac:	dfc00715 	stw	ra,28(sp)
   a19b0:	df000615 	stw	fp,24(sp)
   a19b4:	dc000515 	stw	r16,20(sp)
   a19b8:	df000504 	addi	fp,sp,20
   a19bc:	e13ffe15 	stw	r4,-8(fp)
   a19c0:	e17fff15 	stw	r5,-4(fp)
    /* variables */
    int  dp = 3;		/* digits to right of decimal point */
   a19c4:	008000c4 	movi	r2,3
   a19c8:	e0bffb15 	stw	r2,-20(fp)
    int  d;			/* digit weight (power of 10) */

    int  i = 0;			/* string index */
   a19cc:	e03ffd15 	stw	zero,-12(fp)



    /* first get the sign (and make n positive for conversion) */
    if (n < 0)  {
   a19d0:	e0bffe17 	ldw	r2,-8(fp)
   a19d4:	10000c0e 	bge	r2,zero,a1a08 <cvt_num_field+0x60>
        /* n is negative, set sign and convert to positive */
	s[i++] = '-';
   a19d8:	e0bffd17 	ldw	r2,-12(fp)
   a19dc:	e0ffff17 	ldw	r3,-4(fp)
   a19e0:	1885883a 	add	r2,r3,r2
   a19e4:	00c00b44 	movi	r3,45
   a19e8:	10c00005 	stb	r3,0(r2)
   a19ec:	e0bffd17 	ldw	r2,-12(fp)
   a19f0:	10800044 	addi	r2,r2,1
   a19f4:	e0bffd15 	stw	r2,-12(fp)
	n = -n;
   a19f8:	e0bffe17 	ldw	r2,-8(fp)
   a19fc:	0085c83a 	sub	r2,zero,r2
   a1a00:	e0bffe15 	stw	r2,-8(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
   a1a04:	00001106 	br	a1a4c <cvt_num_field+0xa4>
	s[i++] = '-';
	n = -n;
    }
    else  {
        /* n is positive, set sign only */
	s[i++] = '+';
   a1a08:	e0bffd17 	ldw	r2,-12(fp)
   a1a0c:	e0ffff17 	ldw	r3,-4(fp)
   a1a10:	1885883a 	add	r2,r3,r2
   a1a14:	00c00ac4 	movi	r3,43
   a1a18:	10c00005 	stb	r3,0(r2)
   a1a1c:	e0bffd17 	ldw	r2,-12(fp)
   a1a20:	10800044 	addi	r2,r2,1
   a1a24:	e0bffd15 	stw	r2,-12(fp)
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
   a1a28:	00000806 	br	a1a4c <cvt_num_field+0xa4>
        /* have more than 4 digits - get rid of one */
	n /= 10;
   a1a2c:	e0bffe17 	ldw	r2,-8(fp)
   a1a30:	1009883a 	mov	r4,r2
   a1a34:	01400284 	movi	r5,10
   a1a38:	00a2d800 	call	a2d80 <__divsi3>
   a1a3c:	e0bffe15 	stw	r2,-8(fp)
	/* adjust the decimal point */
	dp--;
   a1a40:	e0bffb17 	ldw	r2,-20(fp)
   a1a44:	10bfffc4 	addi	r2,r2,-1
   a1a48:	e0bffb15 	stw	r2,-20(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
   a1a4c:	e0bffe17 	ldw	r2,-8(fp)
   a1a50:	1089c408 	cmpgei	r2,r2,10000
   a1a54:	103ff51e 	bne	r2,zero,a1a2c <cvt_num_field+0x84>
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
   a1a58:	00000306 	br	a1a68 <cvt_num_field+0xc0>
       dp += 3;
   a1a5c:	e0bffb17 	ldw	r2,-20(fp)
   a1a60:	108000c4 	addi	r2,r2,3
   a1a64:	e0bffb15 	stw	r2,-20(fp)
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
   a1a68:	e0bffb17 	ldw	r2,-20(fp)
   a1a6c:	00bffb0e 	bge	zero,r2,a1a5c <cvt_num_field+0xb4>
       dp += 3;


    /* adjust dp to be digits to the right of the decimal point */
    /* (assuming 4 digits) */
    dp = 4 - dp;
   a1a70:	00c00104 	movi	r3,4
   a1a74:	e0bffb17 	ldw	r2,-20(fp)
   a1a78:	1885c83a 	sub	r2,r3,r2
   a1a7c:	e0bffb15 	stw	r2,-20(fp)


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
   a1a80:	0080fa04 	movi	r2,1000
   a1a84:	e0bffc15 	stw	r2,-16(fp)
   a1a88:	00002406 	br	a1b1c <cvt_num_field+0x174>

        /* check if need decimal the decimal point now */
	if (dp-- == 0)
   a1a8c:	e0bffb17 	ldw	r2,-20(fp)
   a1a90:	1005003a 	cmpeq	r2,r2,zero
   a1a94:	e0fffb17 	ldw	r3,-20(fp)
   a1a98:	18ffffc4 	addi	r3,r3,-1
   a1a9c:	e0fffb15 	stw	r3,-20(fp)
   a1aa0:	10803fcc 	andi	r2,r2,255
   a1aa4:	10000826 	beq	r2,zero,a1ac8 <cvt_num_field+0x120>
	    /* time for decimal point */
	    s[i++] = '.';
   a1aa8:	e0bffd17 	ldw	r2,-12(fp)
   a1aac:	e0ffff17 	ldw	r3,-4(fp)
   a1ab0:	1885883a 	add	r2,r3,r2
   a1ab4:	00c00b84 	movi	r3,46
   a1ab8:	10c00005 	stb	r3,0(r2)
   a1abc:	e0bffd17 	ldw	r2,-12(fp)
   a1ac0:	10800044 	addi	r2,r2,1
   a1ac4:	e0bffd15 	stw	r2,-12(fp)

	/* get and convert this digit */
	s[i++] = (n / d) + '0';
   a1ac8:	e0bffd17 	ldw	r2,-12(fp)
   a1acc:	e0ffff17 	ldw	r3,-4(fp)
   a1ad0:	18a1883a 	add	r16,r3,r2
   a1ad4:	e13ffe17 	ldw	r4,-8(fp)
   a1ad8:	e17ffc17 	ldw	r5,-16(fp)
   a1adc:	00a2d800 	call	a2d80 <__divsi3>
   a1ae0:	10800c04 	addi	r2,r2,48
   a1ae4:	80800005 	stb	r2,0(r16)
   a1ae8:	e0bffd17 	ldw	r2,-12(fp)
   a1aec:	10800044 	addi	r2,r2,1
   a1af0:	e0bffd15 	stw	r2,-12(fp)
	/* remove this digit from n */
	n %= d;
   a1af4:	e0bffe17 	ldw	r2,-8(fp)
   a1af8:	1009883a 	mov	r4,r2
   a1afc:	e17ffc17 	ldw	r5,-16(fp)
   a1b00:	00a2dd00 	call	a2dd0 <__modsi3>
   a1b04:	e0bffe15 	stw	r2,-8(fp)
    /* (assuming 4 digits) */
    dp = 4 - dp;


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
   a1b08:	e0bffc17 	ldw	r2,-16(fp)
   a1b0c:	1009883a 	mov	r4,r2
   a1b10:	01400284 	movi	r5,10
   a1b14:	00a2d800 	call	a2d80 <__divsi3>
   a1b18:	e0bffc15 	stw	r2,-16(fp)
   a1b1c:	e0bffc17 	ldw	r2,-16(fp)
   a1b20:	00bfda16 	blt	zero,r2,a1a8c <cvt_num_field+0xe4>
	n %= d;
    }


    /* all done converting the number, return */
    return;
   a1b24:	0001883a 	nop

}
   a1b28:	e037883a 	mov	sp,fp
   a1b2c:	dfc00217 	ldw	ra,8(sp)
   a1b30:	df000117 	ldw	fp,4(sp)
   a1b34:	dc000017 	ldw	r16,0(sp)
   a1b38:	dec00304 	addi	sp,sp,12
   a1b3c:	f800283a 	ret

000a1b40 <key_available>:


/* keypad functions */

unsigned char  key_available()
{
   a1b40:	deffff04 	addi	sp,sp,-4
   a1b44:	df000015 	stw	fp,0(sp)
   a1b48:	d839883a 	mov	fp,sp
    return  FALSE;
   a1b4c:	0005883a 	mov	r2,zero
}
   a1b50:	e037883a 	mov	sp,fp
   a1b54:	df000017 	ldw	fp,0(sp)
   a1b58:	dec00104 	addi	sp,sp,4
   a1b5c:	f800283a 	ret

000a1b60 <getkey>:

int  getkey()
{
   a1b60:	deffff04 	addi	sp,sp,-4
   a1b64:	df000015 	stw	fp,0(sp)
   a1b68:	d839883a 	mov	fp,sp
    return  KEY_ILLEGAL;
   a1b6c:	00800184 	movi	r2,6
}
   a1b70:	e037883a 	mov	sp,fp
   a1b74:	df000017 	ldw	fp,0(sp)
   a1b78:	dec00104 	addi	sp,sp,4
   a1b7c:	f800283a 	ret

000a1b80 <clear_display>:


/* display functions  */

void  clear_display()
{
   a1b80:	deffff04 	addi	sp,sp,-4
   a1b84:	df000015 	stw	fp,0(sp)
   a1b88:	d839883a 	mov	fp,sp
    return;
   a1b8c:	0001883a 	nop
}
   a1b90:	e037883a 	mov	sp,fp
   a1b94:	df000017 	ldw	fp,0(sp)
   a1b98:	dec00104 	addi	sp,sp,4
   a1b9c:	f800283a 	ret

000a1ba0 <plot_pixel>:

void  plot_pixel(unsigned int x, unsigned int y, int p)
{
   a1ba0:	defffc04 	addi	sp,sp,-16
   a1ba4:	df000315 	stw	fp,12(sp)
   a1ba8:	df000304 	addi	fp,sp,12
   a1bac:	e13ffd15 	stw	r4,-12(fp)
   a1bb0:	e17ffe15 	stw	r5,-8(fp)
   a1bb4:	e1bfff15 	stw	r6,-4(fp)
    return;
   a1bb8:	0001883a 	nop
}
   a1bbc:	e037883a 	mov	sp,fp
   a1bc0:	df000017 	ldw	fp,0(sp)
   a1bc4:	dec00104 	addi	sp,sp,4
   a1bc8:	f800283a 	ret

000a1bcc <set_sample_rate>:


/* sampling parameter functions */

int  set_sample_rate(long int rate)
{
   a1bcc:	defffe04 	addi	sp,sp,-8
   a1bd0:	df000115 	stw	fp,4(sp)
   a1bd4:	df000104 	addi	fp,sp,4
   a1bd8:	e13fff15 	stw	r4,-4(fp)
    return  SIZE_X;
   a1bdc:	00807804 	movi	r2,480
}
   a1be0:	e037883a 	mov	sp,fp
   a1be4:	df000017 	ldw	fp,0(sp)
   a1be8:	dec00104 	addi	sp,sp,4
   a1bec:	f800283a 	ret

000a1bf0 <set_trigger>:

void  set_trigger(int level, int slope)
{
   a1bf0:	defffd04 	addi	sp,sp,-12
   a1bf4:	df000215 	stw	fp,8(sp)
   a1bf8:	df000204 	addi	fp,sp,8
   a1bfc:	e13ffe15 	stw	r4,-8(fp)
   a1c00:	e17fff15 	stw	r5,-4(fp)
    return;
   a1c04:	0001883a 	nop
}
   a1c08:	e037883a 	mov	sp,fp
   a1c0c:	df000017 	ldw	fp,0(sp)
   a1c10:	dec00104 	addi	sp,sp,4
   a1c14:	f800283a 	ret

000a1c18 <set_delay>:

void  set_delay(long int delay)
{
   a1c18:	defffe04 	addi	sp,sp,-8
   a1c1c:	df000115 	stw	fp,4(sp)
   a1c20:	df000104 	addi	fp,sp,4
   a1c24:	e13fff15 	stw	r4,-4(fp)
    return;
   a1c28:	0001883a 	nop
}
   a1c2c:	e037883a 	mov	sp,fp
   a1c30:	df000017 	ldw	fp,0(sp)
   a1c34:	dec00104 	addi	sp,sp,4
   a1c38:	f800283a 	ret

000a1c3c <start_sample>:


/* sampling functions */

void  start_sample(int auto_trigger)
{
   a1c3c:	defffe04 	addi	sp,sp,-8
   a1c40:	df000115 	stw	fp,4(sp)
   a1c44:	df000104 	addi	fp,sp,4
   a1c48:	e13fff15 	stw	r4,-4(fp)
    return;
   a1c4c:	0001883a 	nop
}
   a1c50:	e037883a 	mov	sp,fp
   a1c54:	df000017 	ldw	fp,0(sp)
   a1c58:	dec00104 	addi	sp,sp,4
   a1c5c:	f800283a 	ret

000a1c60 <sample_done>:

unsigned char *sample_done()
{
   a1c60:	deffff04 	addi	sp,sp,-4
   a1c64:	df000015 	stw	fp,0(sp)
   a1c68:	d839883a 	mov	fp,sp
    return  NULL;
   a1c6c:	0005883a 	mov	r2,zero
}
   a1c70:	e037883a 	mov	sp,fp
   a1c74:	df000017 	ldw	fp,0(sp)
   a1c78:	dec00104 	addi	sp,sp,4
   a1c7c:	f800283a 	ret

000a1c80 <get_test_sample>:
   Last Modified:    May 3, 2006

*/

void  get_test_sample(long int sample_rate, int sample_size, unsigned char *sample)
{
   a1c80:	deff8104 	addi	sp,sp,-508
   a1c84:	dfc07e15 	stw	ra,504(sp)
   a1c88:	df007d15 	stw	fp,500(sp)
   a1c8c:	df007d04 	addi	fp,sp,500
   a1c90:	e13ffd15 	stw	r4,-12(fp)
   a1c94:	e17ffe15 	stw	r5,-8(fp)
   a1c98:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* a half-cycle of the ringing square wave */
    const unsigned char  waveform[] =
   a1c9c:	008002b4 	movhi	r2,10
   a1ca0:	10904404 	addi	r2,r2,16656
   a1ca4:	e13f8504 	addi	r4,fp,-492
   a1ca8:	1007883a 	mov	r3,r2
   a1cac:	00807804 	movi	r2,480
   a1cb0:	180b883a 	mov	r5,r3
   a1cb4:	100d883a 	mov	r6,r2
   a1cb8:	00a2e640 	call	a2e64 <memcpy>
	    63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,
	    63,  63,  63,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,
	    64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64
	  };

    long int  sample_pt = 0;	/* current sample within the waveform */
   a1cbc:	e03f8315 	stw	zero,-500(fp)

    int       sample_sign = 1;	/* sample waveform sign */
   a1cc0:	00800044 	movi	r2,1
   a1cc4:	e0bf8415 	stw	r2,-496(fp)



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
   a1cc8:	00003106 	br	a1d90 <get_test_sample+0x110>

        /* get this sample point (value based on sign) */
	if (sample_sign > 0)
   a1ccc:	e0bf8417 	ldw	r2,-496(fp)
   a1cd0:	00800f0e 	bge	zero,r2,a1d10 <get_test_sample+0x90>
	    *sample++ = waveform[sample_pt/20] + 127;
   a1cd4:	e0bf8317 	ldw	r2,-500(fp)
   a1cd8:	1009883a 	mov	r4,r2
   a1cdc:	01400504 	movi	r5,20
   a1ce0:	00a2d800 	call	a2d80 <__divsi3>
   a1ce4:	e0ff8504 	addi	r3,fp,-492
   a1ce8:	1885883a 	add	r2,r3,r2
   a1cec:	10800003 	ldbu	r2,0(r2)
   a1cf0:	10801fc4 	addi	r2,r2,127
   a1cf4:	1007883a 	mov	r3,r2
   a1cf8:	e0bfff17 	ldw	r2,-4(fp)
   a1cfc:	10c00005 	stb	r3,0(r2)
   a1d00:	e0bfff17 	ldw	r2,-4(fp)
   a1d04:	10800044 	addi	r2,r2,1
   a1d08:	e0bfff15 	stw	r2,-4(fp)
   a1d0c:	00000f06 	br	a1d4c <get_test_sample+0xcc>
	else
	    *sample++ = 128 - waveform[sample_pt/20];
   a1d10:	e0bf8317 	ldw	r2,-500(fp)
   a1d14:	1009883a 	mov	r4,r2
   a1d18:	01400504 	movi	r5,20
   a1d1c:	00a2d800 	call	a2d80 <__divsi3>
   a1d20:	e0ff8504 	addi	r3,fp,-492
   a1d24:	1885883a 	add	r2,r3,r2
   a1d28:	10800003 	ldbu	r2,0(r2)
   a1d2c:	00ffe004 	movi	r3,-128
   a1d30:	1885c83a 	sub	r2,r3,r2
   a1d34:	1007883a 	mov	r3,r2
   a1d38:	e0bfff17 	ldw	r2,-4(fp)
   a1d3c:	10c00005 	stb	r3,0(r2)
   a1d40:	e0bfff17 	ldw	r2,-4(fp)
   a1d44:	10800044 	addi	r2,r2,1
   a1d48:	e0bfff15 	stw	r2,-4(fp)

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
   a1d4c:	01002674 	movhi	r4,153
   a1d50:	2125a004 	addi	r4,r4,-27008
   a1d54:	e17ffd17 	ldw	r5,-12(fp)
   a1d58:	00a2d800 	call	a2d80 <__divsi3>
   a1d5c:	e0ff8317 	ldw	r3,-500(fp)
   a1d60:	1885883a 	add	r2,r3,r2
   a1d64:	e0bf8315 	stw	r2,-500(fp)
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
   a1d68:	00000606 	br	a1d84 <get_test_sample+0x104>
	    /* keep sample_pt within the test waveform */
	    sample_pt -= (20 * NO_TEST_PTS);
   a1d6c:	e0bf8317 	ldw	r2,-500(fp)
   a1d70:	10b6a004 	addi	r2,r2,-9600
   a1d74:	e0bf8315 	stw	r2,-500(fp)
	    /* each time through the waveform, invert it */
	    sample_sign = -sample_sign;
   a1d78:	e0bf8417 	ldw	r2,-496(fp)
   a1d7c:	0085c83a 	sub	r2,zero,r2
   a1d80:	e0bf8415 	stw	r2,-496(fp)
	    *sample++ = 128 - waveform[sample_pt/20];

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
   a1d84:	e0bf8317 	ldw	r2,-500(fp)
   a1d88:	10896028 	cmpgeui	r2,r2,9600
   a1d8c:	103ff71e 	bne	r2,zero,a1d6c <get_test_sample+0xec>
    int       sample_sign = 1;	/* sample waveform sign */



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
   a1d90:	e0bffe17 	ldw	r2,-8(fp)
   a1d94:	0084803a 	cmplt	r2,zero,r2
   a1d98:	e0fffe17 	ldw	r3,-8(fp)
   a1d9c:	18ffffc4 	addi	r3,r3,-1
   a1da0:	e0fffe15 	stw	r3,-8(fp)
   a1da4:	10803fcc 	andi	r2,r2,255
   a1da8:	103fc81e 	bne	r2,zero,a1ccc <get_test_sample+0x4c>


    /* done getting the sample - return */
    return;

}
   a1dac:	e037883a 	mov	sp,fp
   a1db0:	dfc00117 	ldw	ra,4(sp)
   a1db4:	df000017 	ldw	fp,0(sp)
   a1db8:	dec00204 	addi	sp,sp,8
   a1dbc:	f800283a 	ret

000a1dc0 <init_trace>:
   Last Modified:    May 9, 2006

*/

void  init_trace()
{
   a1dc0:	defffe04 	addi	sp,sp,-8
   a1dc4:	dfc00115 	stw	ra,4(sp)
   a1dc8:	df000015 	stw	fp,0(sp)
   a1dcc:	d839883a 	mov	fp,sp


    /* initialize system status variables */

    /* ready for a trace */
    trace_status = TRUE;
   a1dd0:	00800044 	movi	r2,1
   a1dd4:	d0a01215 	stw	r2,-32696(gp)

    /* not currently sampling data */
    sampling = FALSE;
   a1dd8:	d0201815 	stw	zero,-32672(gp)

    /* turn off the displayed scale */
    cur_scale = SCALE_NONE;
   a1ddc:	d0201115 	stw	zero,-32700(gp)

    /* sample size is the screen size */
    sample_size = SIZE_X;
   a1de0:	00807804 	movi	r2,480
   a1de4:	d0a01515 	stw	r2,-32684(gp)


    /* clear save areas */
    clear_saved_areas();
   a1de8:	00a23400 	call	a2340 <clear_saved_areas>

    /* also clear the general saved area location variables (off-screen) */
    saved_pos_x = SIZE_X + 1;
   a1dec:	00807844 	movi	r2,481
   a1df0:	d0a01715 	stw	r2,-32676(gp)
    saved_pos_y = SIZE_Y + 1;
   a1df4:	00802044 	movi	r2,129
   a1df8:	d0a01415 	stw	r2,-32688(gp)
    saved_end_x = SIZE_X + 1;
   a1dfc:	00807844 	movi	r2,481
   a1e00:	d0a01615 	stw	r2,-32680(gp)
    saved_end_y = SIZE_Y + 1;
   a1e04:	00802044 	movi	r2,129
   a1e08:	d0a01315 	stw	r2,-32692(gp)


    /* done initializing, return */
    return;
   a1e0c:	0001883a 	nop

}
   a1e10:	e037883a 	mov	sp,fp
   a1e14:	dfc00117 	ldw	ra,4(sp)
   a1e18:	df000017 	ldw	fp,0(sp)
   a1e1c:	dec00204 	addi	sp,sp,8
   a1e20:	f800283a 	ret

000a1e24 <set_mode>:
   Last Modified:    May 27, 2008

*/

void  set_mode(enum trigger_type trigger_mode)
{
   a1e24:	defffe04 	addi	sp,sp,-8
   a1e28:	df000115 	stw	fp,4(sp)
   a1e2c:	df000104 	addi	fp,sp,4
   a1e30:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* if not one-shot triggering - ready for trace too */
    trace_status = (trigger_mode != ONESHOT_TRIGGER);
   a1e34:	e0bfff17 	ldw	r2,-4(fp)
   a1e38:	10800098 	cmpnei	r2,r2,2
   a1e3c:	10803fcc 	andi	r2,r2,255
   a1e40:	d0a01215 	stw	r2,-32696(gp)


    /* turn off the sampling flag so will start a new sample */
    sampling = FALSE;
   a1e44:	d0201815 	stw	zero,-32672(gp)


    /* all done, return */
    return;
   a1e48:	0001883a 	nop

}
   a1e4c:	e037883a 	mov	sp,fp
   a1e50:	df000017 	ldw	fp,0(sp)
   a1e54:	dec00104 	addi	sp,sp,4
   a1e58:	f800283a 	ret

000a1e5c <is_sampling>:
   Last Modified:    May 27, 2008

*/

int  is_sampling()
{
   a1e5c:	deffff04 	addi	sp,sp,-4
   a1e60:	df000015 	stw	fp,0(sp)
   a1e64:	d839883a 	mov	fp,sp
      /* none */



    /* currently sampling if sampling flag is set */
    return  sampling;
   a1e68:	d0a01817 	ldw	r2,-32672(gp)

}
   a1e6c:	e037883a 	mov	sp,fp
   a1e70:	df000017 	ldw	fp,0(sp)
   a1e74:	dec00104 	addi	sp,sp,4
   a1e78:	f800283a 	ret

000a1e7c <trace_rdy>:
   Last Modified:    Mar. 13, 1994

*/

int  trace_rdy()
{
   a1e7c:	deffff04 	addi	sp,sp,-4
   a1e80:	df000015 	stw	fp,0(sp)
   a1e84:	d839883a 	mov	fp,sp
      /* none */



    /* ready for another trace if not sampling and trace is ready */
    return  (!sampling && trace_status);
   a1e88:	d0a01817 	ldw	r2,-32672(gp)
   a1e8c:	1000041e 	bne	r2,zero,a1ea0 <trace_rdy+0x24>
   a1e90:	d0a01217 	ldw	r2,-32696(gp)
   a1e94:	10000226 	beq	r2,zero,a1ea0 <trace_rdy+0x24>
   a1e98:	00800044 	movi	r2,1
   a1e9c:	00000106 	br	a1ea4 <trace_rdy+0x28>
   a1ea0:	0005883a 	mov	r2,zero

}
   a1ea4:	e037883a 	mov	sp,fp
   a1ea8:	df000017 	ldw	fp,0(sp)
   a1eac:	dec00104 	addi	sp,sp,4
   a1eb0:	f800283a 	ret

000a1eb4 <trace_done>:
   Last Modified:    May 9, 2006

*/

void  trace_done()
{
   a1eb4:	defffe04 	addi	sp,sp,-8
   a1eb8:	dfc00115 	stw	ra,4(sp)
   a1ebc:	df000015 	stw	fp,0(sp)
   a1ec0:	d839883a 	mov	fp,sp
      /* none */



    /* done with a trace - if retriggering, ready for another one */
    if (get_trigger_mode() != ONESHOT_TRIGGER)
   a1ec4:	00a0e680 	call	a0e68 <get_trigger_mode>
   a1ec8:	108000a0 	cmpeqi	r2,r2,2
   a1ecc:	1000021e 	bne	r2,zero,a1ed8 <trace_done+0x24>
        /* in a retriggering mode - set trace_status to TRUE (ready) */
	trace_status = TRUE;
   a1ed0:	00800044 	movi	r2,1
   a1ed4:	d0a01215 	stw	r2,-32696(gp)

    /* no longer sampling data */
    sampling = FALSE;
   a1ed8:	d0201815 	stw	zero,-32672(gp)


    /* done so return */
    return;
   a1edc:	0001883a 	nop

}
   a1ee0:	e037883a 	mov	sp,fp
   a1ee4:	dfc00117 	ldw	ra,4(sp)
   a1ee8:	df000017 	ldw	fp,0(sp)
   a1eec:	dec00204 	addi	sp,sp,8
   a1ef0:	f800283a 	ret

000a1ef4 <trace_rearm>:
   Last Modified:    Mar. 8, 1994

*/

void  trace_rearm()
{
   a1ef4:	deffff04 	addi	sp,sp,-4
   a1ef8:	df000015 	stw	fp,0(sp)
   a1efc:	d839883a 	mov	fp,sp
      /* none */



    /* rearm the trace - set status to ready (TRUE) */
    trace_status = TRUE;
   a1f00:	00800044 	movi	r2,1
   a1f04:	d0a01215 	stw	r2,-32696(gp)


    /* all done - return */
    return;
   a1f08:	0001883a 	nop

}
   a1f0c:	e037883a 	mov	sp,fp
   a1f10:	df000017 	ldw	fp,0(sp)
   a1f14:	dec00104 	addi	sp,sp,4
   a1f18:	f800283a 	ret

000a1f1c <set_trace_size>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trace_size(int size)
{
   a1f1c:	defffe04 	addi	sp,sp,-8
   a1f20:	df000115 	stw	fp,4(sp)
   a1f24:	df000104 	addi	fp,sp,4
   a1f28:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the locally global sample size */
    sample_size = size;
   a1f2c:	e0bfff17 	ldw	r2,-4(fp)
   a1f30:	d0a01515 	stw	r2,-32684(gp)


    /* all done, return */
    return;
   a1f34:	0001883a 	nop

}
   a1f38:	e037883a 	mov	sp,fp
   a1f3c:	df000017 	ldw	fp,0(sp)
   a1f40:	dec00104 	addi	sp,sp,4
   a1f44:	f800283a 	ret

000a1f48 <set_display_scale>:
   Last Modified:    May 9, 2006

*/

void  set_display_scale(enum scale_type scale)
{
   a1f48:	defff804 	addi	sp,sp,-32
   a1f4c:	dfc00715 	stw	ra,28(sp)
   a1f50:	df000615 	stw	fp,24(sp)
   a1f54:	dc400515 	stw	r17,20(sp)
   a1f58:	dc000415 	stw	r16,16(sp)
   a1f5c:	df000404 	addi	fp,sp,16
   a1f60:	e13fff15 	stw	r4,-4(fp)



    /* whenever change scale type, need to clear out previous scale */
    /* unnecessary if going to SCALE_GRID or from SCALE_NONE or not changing the scale */
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {
   a1f64:	e0bfff17 	ldw	r2,-4(fp)
   a1f68:	108000a0 	cmpeqi	r2,r2,2
   a1f6c:	1000921e 	bne	r2,zero,a21b8 <set_display_scale+0x270>
   a1f70:	d0a01117 	ldw	r2,-32700(gp)
   a1f74:	10009026 	beq	r2,zero,a21b8 <set_display_scale+0x270>
   a1f78:	d0a01117 	ldw	r2,-32700(gp)
   a1f7c:	e0ffff17 	ldw	r3,-4(fp)
   a1f80:	18808d26 	beq	r3,r2,a21b8 <set_display_scale+0x270>

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
   a1f84:	00bfffc4 	movi	r2,-1
   a1f88:	e0bffe15 	stw	r2,-8(fp)
   a1f8c:	00004206 	br	a2098 <set_display_scale+0x150>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
   a1f90:	e13ffe17 	ldw	r4,-8(fp)
   a1f94:	01400c04 	movi	r5,48
   a1f98:	00a2e3c0 	call	a2e3c <__mulsi3>
   a1f9c:	10801004 	addi	r2,r2,64
   a1fa0:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
   a1fa4:	e0bffc17 	ldw	r2,-16(fp)
   a1fa8:	10802010 	cmplti	r2,r2,128
   a1fac:	1000021e 	bne	r2,zero,a1fb8 <set_display_scale+0x70>
	        p = PLOT_SIZE_Y - 1;
   a1fb0:	00801fc4 	movi	r2,127
   a1fb4:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
   a1fb8:	e0bffc17 	ldw	r2,-16(fp)
   a1fbc:	1000010e 	bge	r2,zero,a1fc4 <set_display_scale+0x7c>
	        p = 0;
   a1fc0:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
   a1fc4:	e03ffd15 	stw	zero,-12(fp)
   a1fc8:	00002d06 	br	a2080 <set_display_scale+0x138>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_x[j + Y_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
   a1fcc:	e0bffe17 	ldw	r2,-8(fp)
   a1fd0:	10c00044 	addi	r3,r2,1
   a1fd4:	e0bffd17 	ldw	r2,-12(fp)
   a1fd8:	1000010e 	bge	r2,zero,a1fe0 <set_display_scale+0x98>
   a1fdc:	108001c4 	addi	r2,r2,7
   a1fe0:	1005d0fa 	srai	r2,r2,3
   a1fe4:	1023883a 	mov	r17,r2
   a1fe8:	040002b4 	movhi	r16,10
   a1fec:	84131c04 	addi	r16,r16,19568
   a1ff0:	1809883a 	mov	r4,r3
   a1ff4:	01400f04 	movi	r5,60
   a1ff8:	00a2e3c0 	call	a2e3c <__mulsi3>
   a1ffc:	1445883a 	add	r2,r2,r17
   a2000:	8085883a 	add	r2,r16,r2
   a2004:	10800003 	ldbu	r2,0(r2)
   a2008:	10c03fcc 	andi	r3,r2,255
   a200c:	e13ffd17 	ldw	r4,-12(fp)
   a2010:	00a00034 	movhi	r2,32768
   a2014:	108001c4 	addi	r2,r2,7
   a2018:	2084703a 	and	r2,r4,r2
   a201c:	1000040e 	bge	r2,zero,a2030 <set_display_scale+0xe8>
   a2020:	10bfffc4 	addi	r2,r2,-1
   a2024:	013ffe04 	movi	r4,-8
   a2028:	1104b03a 	or	r2,r2,r4
   a202c:	10800044 	addi	r2,r2,1
   a2030:	01002004 	movi	r4,128
   a2034:	2085d83a 	sra	r2,r4,r2
   a2038:	1884703a 	and	r2,r3,r2
   a203c:	1000071e 	bne	r2,zero,a205c <set_display_scale+0x114>
		    /* saved pixel is off */
		    plot_pixel(i, p, PIXEL_WHITE);
   a2040:	e0fffd17 	ldw	r3,-12(fp)
   a2044:	e0bffc17 	ldw	r2,-16(fp)
   a2048:	1809883a 	mov	r4,r3
   a204c:	100b883a 	mov	r5,r2
   a2050:	000d883a 	mov	r6,zero
   a2054:	00a1ba00 	call	a1ba0 <plot_pixel>
   a2058:	00000606 	br	a2074 <set_display_scale+0x12c>
		else
		    /* saved pixel is on */
		    plot_pixel(i, p, PIXEL_BLACK);
   a205c:	e0fffd17 	ldw	r3,-12(fp)
   a2060:	e0bffc17 	ldw	r2,-16(fp)
   a2064:	1809883a 	mov	r4,r3
   a2068:	100b883a 	mov	r5,r2
   a206c:	01800044 	movi	r6,1
   a2070:	00a1ba00 	call	a1ba0 <plot_pixel>
	        p = PLOT_SIZE_Y - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
   a2074:	e0bffd17 	ldw	r2,-12(fp)
   a2078:	10800044 	addi	r2,r2,1
   a207c:	e0bffd15 	stw	r2,-12(fp)
   a2080:	e0bffd17 	ldw	r2,-12(fp)
   a2084:	10807810 	cmplti	r2,r2,480
   a2088:	103fd01e 	bne	r2,zero,a1fcc <set_display_scale+0x84>
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
   a208c:	e0bffe17 	ldw	r2,-8(fp)
   a2090:	10800044 	addi	r2,r2,1
   a2094:	e0bffe15 	stw	r2,-8(fp)
   a2098:	e0bffe17 	ldw	r2,-8(fp)
   a209c:	10800090 	cmplti	r2,r2,2
   a20a0:	103fbb1e 	bne	r2,zero,a1f90 <set_display_scale+0x48>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
   a20a4:	00bffec4 	movi	r2,-5
   a20a8:	e0bffe15 	stw	r2,-8(fp)
   a20ac:	00003f06 	br	a21ac <set_display_scale+0x264>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
   a20b0:	e13ffe17 	ldw	r4,-8(fp)
   a20b4:	01400c04 	movi	r5,48
   a20b8:	00a2e3c0 	call	a2e3c <__mulsi3>
   a20bc:	10803c04 	addi	r2,r2,240
   a20c0:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
   a20c4:	e0bffc17 	ldw	r2,-16(fp)
   a20c8:	10807810 	cmplti	r2,r2,480
   a20cc:	1000021e 	bne	r2,zero,a20d8 <set_display_scale+0x190>
	        p = PLOT_SIZE_X - 1;
   a20d0:	008077c4 	movi	r2,479
   a20d4:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
   a20d8:	e0bffc17 	ldw	r2,-16(fp)
   a20dc:	1000010e 	bge	r2,zero,a20e4 <set_display_scale+0x19c>
	        p = 0;
   a20e0:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
   a20e4:	e03ffd15 	stw	zero,-12(fp)
   a20e8:	00002a06 	br	a2194 <set_display_scale+0x24c>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_y[j + X_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
   a20ec:	e0bffe17 	ldw	r2,-8(fp)
   a20f0:	11000144 	addi	r4,r2,5
   a20f4:	e0bffd17 	ldw	r2,-12(fp)
   a20f8:	1000010e 	bge	r2,zero,a2100 <set_display_scale+0x1b8>
   a20fc:	108001c4 	addi	r2,r2,7
   a2100:	1005d0fa 	srai	r2,r2,3
   a2104:	00c002b4 	movhi	r3,10
   a2108:	18d2f004 	addi	r3,r3,19392
   a210c:	2008913a 	slli	r4,r4,4
   a2110:	2085883a 	add	r2,r4,r2
   a2114:	1885883a 	add	r2,r3,r2
   a2118:	10800003 	ldbu	r2,0(r2)
   a211c:	10c03fcc 	andi	r3,r2,255
   a2120:	e13ffd17 	ldw	r4,-12(fp)
   a2124:	00a00034 	movhi	r2,32768
   a2128:	108001c4 	addi	r2,r2,7
   a212c:	2084703a 	and	r2,r4,r2
   a2130:	1000040e 	bge	r2,zero,a2144 <set_display_scale+0x1fc>
   a2134:	10bfffc4 	addi	r2,r2,-1
   a2138:	013ffe04 	movi	r4,-8
   a213c:	1104b03a 	or	r2,r2,r4
   a2140:	10800044 	addi	r2,r2,1
   a2144:	01002004 	movi	r4,128
   a2148:	2085d83a 	sra	r2,r4,r2
   a214c:	1884703a 	and	r2,r3,r2
   a2150:	1000071e 	bne	r2,zero,a2170 <set_display_scale+0x228>
		    /* saved pixel is off */
		    plot_pixel(p, i, PIXEL_WHITE);
   a2154:	e0fffc17 	ldw	r3,-16(fp)
   a2158:	e0bffd17 	ldw	r2,-12(fp)
   a215c:	1809883a 	mov	r4,r3
   a2160:	100b883a 	mov	r5,r2
   a2164:	000d883a 	mov	r6,zero
   a2168:	00a1ba00 	call	a1ba0 <plot_pixel>
   a216c:	00000606 	br	a2188 <set_display_scale+0x240>
		else
		    /* saved pixel is on */
		    plot_pixel(p, i, PIXEL_BLACK);
   a2170:	e0fffc17 	ldw	r3,-16(fp)
   a2174:	e0bffd17 	ldw	r2,-12(fp)
   a2178:	1809883a 	mov	r4,r3
   a217c:	100b883a 	mov	r5,r2
   a2180:	01800044 	movi	r6,1
   a2184:	00a1ba00 	call	a1ba0 <plot_pixel>
	        p = PLOT_SIZE_X - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
   a2188:	e0bffd17 	ldw	r2,-12(fp)
   a218c:	10800044 	addi	r2,r2,1
   a2190:	e0bffd15 	stw	r2,-12(fp)
   a2194:	e0bffd17 	ldw	r2,-12(fp)
   a2198:	10802010 	cmplti	r2,r2,128
   a219c:	103fd31e 	bne	r2,zero,a20ec <set_display_scale+0x1a4>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
   a21a0:	e0bffe17 	ldw	r2,-8(fp)
   a21a4:	10800044 	addi	r2,r2,1
   a21a8:	e0bffe15 	stw	r2,-8(fp)
   a21ac:	e0bffe17 	ldw	r2,-8(fp)
   a21b0:	10800190 	cmplti	r2,r2,6
   a21b4:	103fbe1e 	bne	r2,zero,a20b0 <set_display_scale+0x168>
	}
    }


    /* now handle the scale type appropriately */
    switch (scale)  {
   a21b8:	e0bfff17 	ldw	r2,-4(fp)
   a21bc:	10005526 	beq	r2,zero,a2314 <set_display_scale+0x3cc>
   a21c0:	108000e8 	cmpgeui	r2,r2,3
   a21c4:	1000541e 	bne	r2,zero,a2318 <set_display_scale+0x3d0>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
   a21c8:	00bfffc4 	movi	r2,-1
   a21cc:	e0bffd15 	stw	r2,-12(fp)
   a21d0:	00002306 	br	a2260 <set_display_scale+0x318>

				/* get y position of the line */
				p = X_AXIS_POS + i * Y_TICK_SIZE;
   a21d4:	e13ffd17 	ldw	r4,-12(fp)
   a21d8:	01400c04 	movi	r5,48
   a21dc:	00a2e3c0 	call	a2e3c <__mulsi3>
   a21e0:	10801004 	addi	r2,r2,64
   a21e4:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_Y)
   a21e8:	e0bffc17 	ldw	r2,-16(fp)
   a21ec:	10802010 	cmplti	r2,r2,128
   a21f0:	1000021e 	bne	r2,zero,a21fc <set_display_scale+0x2b4>
				    p = PLOT_SIZE_Y - 1;
   a21f4:	00801fc4 	movi	r2,127
   a21f8:	e0bffc15 	stw	r2,-16(fp)
				if (p < 0)
   a21fc:	e0bffc17 	ldw	r2,-16(fp)
   a2200:	1000010e 	bge	r2,zero,a2208 <set_display_scale+0x2c0>
				    p = 0;
   a2204:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
   a2208:	e0bfff17 	ldw	r2,-4(fp)
   a220c:	10800098 	cmpnei	r2,r2,2
   a2210:	1000051e 	bne	r2,zero,a2228 <set_display_scale+0x2e0>
				    /* drawing a grid line */
			            plot_hline(X_GRID_START, p, (X_GRID_END - X_GRID_START));
   a2214:	0009883a 	mov	r4,zero
   a2218:	e17ffc17 	ldw	r5,-16(fp)
   a221c:	018077c4 	movi	r6,479
   a2220:	00a02140 	call	a0214 <plot_hline>
   a2224:	00000b06 	br	a2254 <set_display_scale+0x30c>
				else if (i == 0)
   a2228:	e0bffd17 	ldw	r2,-12(fp)
   a222c:	1000051e 	bne	r2,zero,a2244 <set_display_scale+0x2fc>
				    /* drawing the x axis */
			            plot_hline(X_AXIS_START, p, (X_AXIS_END - X_AXIS_START));
   a2230:	0009883a 	mov	r4,zero
   a2234:	e17ffc17 	ldw	r5,-16(fp)
   a2238:	018077c4 	movi	r6,479
   a223c:	00a02140 	call	a0214 <plot_hline>
   a2240:	00000406 	br	a2254 <set_display_scale+0x30c>
				else
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
   a2244:	01003b84 	movi	r4,238
   a2248:	e17ffc17 	ldw	r5,-16(fp)
   a224c:	01800144 	movi	r6,5
   a2250:	00a02140 	call	a0214 <plot_hline>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
   a2254:	e0bffd17 	ldw	r2,-12(fp)
   a2258:	10800044 	addi	r2,r2,1
   a225c:	e0bffd15 	stw	r2,-12(fp)
   a2260:	e0bffd17 	ldw	r2,-12(fp)
   a2264:	10800090 	cmplti	r2,r2,2
   a2268:	103fda1e 	bne	r2,zero,a21d4 <set_display_scale+0x28c>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
   a226c:	00bffec4 	movi	r2,-5
   a2270:	e0bffd15 	stw	r2,-12(fp)
   a2274:	00002306 	br	a2304 <set_display_scale+0x3bc>

				/* get x position of the line */
				p = Y_AXIS_POS + i * X_TICK_SIZE;
   a2278:	e13ffd17 	ldw	r4,-12(fp)
   a227c:	01400c04 	movi	r5,48
   a2280:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2284:	10803c04 	addi	r2,r2,240
   a2288:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_X)
   a228c:	e0bffc17 	ldw	r2,-16(fp)
   a2290:	10807810 	cmplti	r2,r2,480
   a2294:	1000021e 	bne	r2,zero,a22a0 <set_display_scale+0x358>
				    p = PLOT_SIZE_X - 1;
   a2298:	008077c4 	movi	r2,479
   a229c:	e0bffc15 	stw	r2,-16(fp)
			        if (p < 0)
   a22a0:	e0bffc17 	ldw	r2,-16(fp)
   a22a4:	1000010e 	bge	r2,zero,a22ac <set_display_scale+0x364>
				    p = 0;
   a22a8:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
   a22ac:	e0bfff17 	ldw	r2,-4(fp)
   a22b0:	10800098 	cmpnei	r2,r2,2
   a22b4:	1000051e 	bne	r2,zero,a22cc <set_display_scale+0x384>
				    /* drawing a grid line */
			            plot_vline(p, Y_GRID_START, (Y_GRID_END - Y_GRID_START));
   a22b8:	e13ffc17 	ldw	r4,-16(fp)
   a22bc:	000b883a 	mov	r5,zero
   a22c0:	01801fc4 	movi	r6,127
   a22c4:	00a02c00 	call	a02c0 <plot_vline>
   a22c8:	00000b06 	br	a22f8 <set_display_scale+0x3b0>
				else if (i == 0)
   a22cc:	e0bffd17 	ldw	r2,-12(fp)
   a22d0:	1000051e 	bne	r2,zero,a22e8 <set_display_scale+0x3a0>
				    /* drawing the y axis */
			            plot_vline(p, Y_AXIS_START, (Y_AXIS_END - Y_AXIS_START));
   a22d4:	e13ffc17 	ldw	r4,-16(fp)
   a22d8:	000b883a 	mov	r5,zero
   a22dc:	01801fc4 	movi	r6,127
   a22e0:	00a02c00 	call	a02c0 <plot_vline>
   a22e4:	00000406 	br	a22f8 <set_display_scale+0x3b0>
				else
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
   a22e8:	e13ffc17 	ldw	r4,-16(fp)
   a22ec:	01400f84 	movi	r5,62
   a22f0:	01800144 	movi	r6,5
   a22f4:	00a02c00 	call	a02c0 <plot_vline>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
   a22f8:	e0bffd17 	ldw	r2,-12(fp)
   a22fc:	10800044 	addi	r2,r2,1
   a2300:	e0bffd15 	stw	r2,-12(fp)
   a2304:	e0bffd17 	ldw	r2,-12(fp)
   a2308:	10800190 	cmplti	r2,r2,6
   a230c:	103fda1e 	bne	r2,zero,a2278 <set_display_scale+0x330>
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
			    }

			    /* done with the axes */
			    break;
   a2310:	00000106 	br	a2318 <set_display_scale+0x3d0>

        case SCALE_NONE:    /* there is no scale */
			    /* already restored plot so nothing to do */
			    break;
   a2314:	0001883a 	nop

    }


    /* now remember the new (now current) scale type */
    cur_scale = scale;
   a2318:	e0bfff17 	ldw	r2,-4(fp)
   a231c:	d0a01115 	stw	r2,-32700(gp)


    /* scale is taken care of, return */
    return;
   a2320:	0001883a 	nop

}
   a2324:	e037883a 	mov	sp,fp
   a2328:	dfc00317 	ldw	ra,12(sp)
   a232c:	df000217 	ldw	fp,8(sp)
   a2330:	dc400117 	ldw	r17,4(sp)
   a2334:	dc000017 	ldw	r16,0(sp)
   a2338:	dec00404 	addi	sp,sp,16
   a233c:	f800283a 	ret

000a2340 <clear_saved_areas>:
   Last Modified:    May 9, 2006

*/

void  clear_saved_areas()
{
   a2340:	defffb04 	addi	sp,sp,-20
   a2344:	dfc00415 	stw	ra,16(sp)
   a2348:	df000315 	stw	fp,12(sp)
   a234c:	dc000215 	stw	r16,8(sp)
   a2350:	df000204 	addi	fp,sp,8
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
   a2354:	e03fff15 	stw	zero,-4(fp)
   a2358:	00001506 	br	a23b0 <clear_saved_areas+0x70>
        for (i = 0; i < (SIZE_X / 8); i++)
   a235c:	e03ffe15 	stw	zero,-8(fp)
   a2360:	00000d06 	br	a2398 <clear_saved_areas+0x58>
            saved_axis_x[j][i] = 0;
   a2364:	040002b4 	movhi	r16,10
   a2368:	84131c04 	addi	r16,r16,19568
   a236c:	e0bfff17 	ldw	r2,-4(fp)
   a2370:	1009883a 	mov	r4,r2
   a2374:	01400f04 	movi	r5,60
   a2378:	00a2e3c0 	call	a2e3c <__mulsi3>
   a237c:	e0fffe17 	ldw	r3,-8(fp)
   a2380:	10c5883a 	add	r2,r2,r3
   a2384:	8085883a 	add	r2,r16,r2
   a2388:	10000005 	stb	zero,0(r2)



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
   a238c:	e0bffe17 	ldw	r2,-8(fp)
   a2390:	10800044 	addi	r2,r2,1
   a2394:	e0bffe15 	stw	r2,-8(fp)
   a2398:	e0bffe17 	ldw	r2,-8(fp)
   a239c:	10800f10 	cmplti	r2,r2,60
   a23a0:	103ff01e 	bne	r2,zero,a2364 <clear_saved_areas+0x24>
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
   a23a4:	e0bfff17 	ldw	r2,-4(fp)
   a23a8:	10800044 	addi	r2,r2,1
   a23ac:	e0bfff15 	stw	r2,-4(fp)
   a23b0:	e0bfff17 	ldw	r2,-4(fp)
   a23b4:	108000d0 	cmplti	r2,r2,3
   a23b8:	103fe81e 	bne	r2,zero,a235c <clear_saved_areas+0x1c>
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
   a23bc:	e03fff15 	stw	zero,-4(fp)
   a23c0:	00001306 	br	a2410 <clear_saved_areas+0xd0>
        for (i = 0; i < (SIZE_Y / 8); i++)
   a23c4:	e03ffe15 	stw	zero,-8(fp)
   a23c8:	00000b06 	br	a23f8 <clear_saved_areas+0xb8>
            saved_axis_y[j][i] = 0;
   a23cc:	00c002b4 	movhi	r3,10
   a23d0:	18d2f004 	addi	r3,r3,19392
   a23d4:	e0bfff17 	ldw	r2,-4(fp)
   a23d8:	1008913a 	slli	r4,r2,4
   a23dc:	e0bffe17 	ldw	r2,-8(fp)
   a23e0:	2085883a 	add	r2,r4,r2
   a23e4:	1885883a 	add	r2,r3,r2
   a23e8:	10000005 	stb	zero,0(r2)
    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
   a23ec:	e0bffe17 	ldw	r2,-8(fp)
   a23f0:	10800044 	addi	r2,r2,1
   a23f4:	e0bffe15 	stw	r2,-8(fp)
   a23f8:	e0bffe17 	ldw	r2,-8(fp)
   a23fc:	10800410 	cmplti	r2,r2,16
   a2400:	103ff21e 	bne	r2,zero,a23cc <clear_saved_areas+0x8c>

    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
   a2404:	e0bfff17 	ldw	r2,-4(fp)
   a2408:	10800044 	addi	r2,r2,1
   a240c:	e0bfff15 	stw	r2,-4(fp)
   a2410:	e0bfff17 	ldw	r2,-4(fp)
   a2414:	108002d0 	cmplti	r2,r2,11
   a2418:	103fea1e 	bne	r2,zero,a23c4 <clear_saved_areas+0x84>
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
   a241c:	e03ffe15 	stw	zero,-8(fp)
   a2420:	00001506 	br	a2478 <clear_saved_areas+0x138>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
   a2424:	e03fff15 	stw	zero,-4(fp)
   a2428:	00000d06 	br	a2460 <clear_saved_areas+0x120>
	    saved_menu[i][j] = 0;
   a242c:	040002b4 	movhi	r16,10
   a2430:	84124804 	addi	r16,r16,18720
   a2434:	e0bffe17 	ldw	r2,-8(fp)
   a2438:	1009883a 	mov	r4,r2
   a243c:	01400304 	movi	r5,12
   a2440:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2444:	e0ffff17 	ldw	r3,-4(fp)
   a2448:	10c5883a 	add	r2,r2,r3
   a244c:	8085883a 	add	r2,r16,r2
   a2450:	10000005 	stb	zero,0(r2)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
   a2454:	e0bfff17 	ldw	r2,-4(fp)
   a2458:	10800044 	addi	r2,r2,1
   a245c:	e0bfff15 	stw	r2,-4(fp)
   a2460:	e0bfff17 	ldw	r2,-4(fp)
   a2464:	10800310 	cmplti	r2,r2,12
   a2468:	103ff01e 	bne	r2,zero,a242c <clear_saved_areas+0xec>
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
   a246c:	e0bffe17 	ldw	r2,-8(fp)
   a2470:	10800044 	addi	r2,r2,1
   a2474:	e0bffe15 	stw	r2,-8(fp)
   a2478:	e0bffe17 	ldw	r2,-8(fp)
   a247c:	10800e10 	cmplti	r2,r2,56
   a2480:	103fe81e 	bne	r2,zero,a2424 <clear_saved_areas+0xe4>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
   a2484:	e03ffe15 	stw	zero,-8(fp)
   a2488:	00001506 	br	a24e0 <clear_saved_areas+0x1a0>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
   a248c:	e03fff15 	stw	zero,-4(fp)
   a2490:	00000d06 	br	a24c8 <clear_saved_areas+0x188>
	    saved_area[i][j] = 0;
   a2494:	040002b4 	movhi	r16,10
   a2498:	84134904 	addi	r16,r16,19748
   a249c:	e0bffe17 	ldw	r2,-8(fp)
   a24a0:	1009883a 	mov	r4,r2
   a24a4:	014003c4 	movi	r5,15
   a24a8:	00a2e3c0 	call	a2e3c <__mulsi3>
   a24ac:	e0ffff17 	ldw	r3,-4(fp)
   a24b0:	10c5883a 	add	r2,r2,r3
   a24b4:	8085883a 	add	r2,r16,r2
   a24b8:	10000005 	stb	zero,0(r2)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
   a24bc:	e0bfff17 	ldw	r2,-4(fp)
   a24c0:	10800044 	addi	r2,r2,1
   a24c4:	e0bfff15 	stw	r2,-4(fp)
   a24c8:	e0bfff17 	ldw	r2,-4(fp)
   a24cc:	108003d0 	cmplti	r2,r2,15
   a24d0:	103ff01e 	bne	r2,zero,a2494 <clear_saved_areas+0x154>
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
   a24d4:	e0bffe17 	ldw	r2,-8(fp)
   a24d8:	10800044 	addi	r2,r2,1
   a24dc:	e0bffe15 	stw	r2,-8(fp)
   a24e0:	e0bffe17 	ldw	r2,-8(fp)
   a24e4:	10800410 	cmplti	r2,r2,16
   a24e8:	103fe81e 	bne	r2,zero,a248c <clear_saved_areas+0x14c>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
	    saved_area[i][j] = 0;


    /* done clearing the saved areas - return */
    return;
   a24ec:	0001883a 	nop

}
   a24f0:	e037883a 	mov	sp,fp
   a24f4:	dfc00217 	ldw	ra,8(sp)
   a24f8:	df000117 	ldw	fp,4(sp)
   a24fc:	dc000017 	ldw	r16,0(sp)
   a2500:	dec00304 	addi	sp,sp,12
   a2504:	f800283a 	ret

000a2508 <restore_menu_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_menu_trace()
{
   a2508:	defff904 	addi	sp,sp,-28
   a250c:	dfc00615 	stw	ra,24(sp)
   a2510:	df000515 	stw	fp,20(sp)
   a2514:	dc000415 	stw	r16,16(sp)
   a2518:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
   a251c:	e03fff15 	stw	zero,-4(fp)
   a2520:	00003406 	br	a25f4 <restore_menu_trace+0xec>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
   a2524:	00802004 	movi	r2,128
   a2528:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
   a252c:	e03ffd15 	stw	zero,-12(fp)

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
   a2530:	00805e84 	movi	r2,378
   a2534:	e0bffe15 	stw	r2,-8(fp)
   a2538:	00002806 	br	a25dc <restore_menu_trace+0xd4>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_menu[y - MENU_UL_Y][bit_offset] & bit_position) == 0)
   a253c:	040002b4 	movhi	r16,10
   a2540:	84124804 	addi	r16,r16,18720
   a2544:	e0bfff17 	ldw	r2,-4(fp)
   a2548:	1009883a 	mov	r4,r2
   a254c:	01400304 	movi	r5,12
   a2550:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2554:	e0fffd17 	ldw	r3,-12(fp)
   a2558:	10c5883a 	add	r2,r2,r3
   a255c:	8085883a 	add	r2,r16,r2
   a2560:	10800003 	ldbu	r2,0(r2)
   a2564:	10c03fcc 	andi	r3,r2,255
   a2568:	e0bffc17 	ldw	r2,-16(fp)
   a256c:	1884703a 	and	r2,r3,r2
   a2570:	1000071e 	bne	r2,zero,a2590 <restore_menu_trace+0x88>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
   a2574:	e0fffe17 	ldw	r3,-8(fp)
   a2578:	e0bfff17 	ldw	r2,-4(fp)
   a257c:	1809883a 	mov	r4,r3
   a2580:	100b883a 	mov	r5,r2
   a2584:	000d883a 	mov	r6,zero
   a2588:	00a1ba00 	call	a1ba0 <plot_pixel>
   a258c:	00000606 	br	a25a8 <restore_menu_trace+0xa0>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
   a2590:	e0fffe17 	ldw	r3,-8(fp)
   a2594:	e0bfff17 	ldw	r2,-4(fp)
   a2598:	1809883a 	mov	r4,r3
   a259c:	100b883a 	mov	r5,r2
   a25a0:	01800044 	movi	r6,1
   a25a4:	00a1ba00 	call	a1ba0 <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
   a25a8:	e0bffc17 	ldw	r2,-16(fp)
   a25ac:	1005d07a 	srai	r2,r2,1
   a25b0:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
   a25b4:	e0bffc17 	ldw	r2,-16(fp)
   a25b8:	1000051e 	bne	r2,zero,a25d0 <restore_menu_trace+0xc8>
	        /* now on high bit of next byte */
		bit_position = 0x80;
   a25bc:	00802004 	movi	r2,128
   a25c0:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
   a25c4:	e0bffd17 	ldw	r2,-12(fp)
   a25c8:	10800044 	addi	r2,r2,1
   a25cc:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
   a25d0:	e0bffe17 	ldw	r2,-8(fp)
   a25d4:	10800044 	addi	r2,r2,1
   a25d8:	e0bffe15 	stw	r2,-8(fp)
   a25dc:	e0bffe17 	ldw	r2,-8(fp)
   a25e0:	10807690 	cmplti	r2,r2,474
   a25e4:	103fd51e 	bne	r2,zero,a253c <restore_menu_trace+0x34>
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
   a25e8:	e0bfff17 	ldw	r2,-4(fp)
   a25ec:	10800044 	addi	r2,r2,1
   a25f0:	e0bfff15 	stw	r2,-4(fp)
   a25f4:	e0bfff17 	ldw	r2,-4(fp)
   a25f8:	10800e10 	cmplti	r2,r2,56
   a25fc:	103fc91e 	bne	r2,zero,a2524 <restore_menu_trace+0x1c>
        }
    }


    /* restored menu area - return */
    return;
   a2600:	0001883a 	nop

}
   a2604:	e037883a 	mov	sp,fp
   a2608:	dfc00217 	ldw	ra,8(sp)
   a260c:	df000117 	ldw	fp,4(sp)
   a2610:	dc000017 	ldw	r16,0(sp)
   a2614:	dec00304 	addi	sp,sp,12
   a2618:	f800283a 	ret

000a261c <set_save_area>:
   Last Modified:    Mar. 8, 1994

*/

void  set_save_area(int pos_x, int pos_y, int size_x, int size_y)
{
   a261c:	defff704 	addi	sp,sp,-36
   a2620:	dfc00815 	stw	ra,32(sp)
   a2624:	df000715 	stw	fp,28(sp)
   a2628:	dc000615 	stw	r16,24(sp)
   a262c:	df000604 	addi	fp,sp,24
   a2630:	e13ffc15 	stw	r4,-16(fp)
   a2634:	e17ffd15 	stw	r5,-12(fp)
   a2638:	e1bffe15 	stw	r6,-8(fp)
   a263c:	e1ffff15 	stw	r7,-4(fp)
    int  y;



    /* just setup all the locally global variables from the passed values */
    saved_pos_x = pos_x;
   a2640:	e0bffc17 	ldw	r2,-16(fp)
   a2644:	d0a01715 	stw	r2,-32676(gp)
    saved_pos_y = pos_y;
   a2648:	e0bffd17 	ldw	r2,-12(fp)
   a264c:	d0a01415 	stw	r2,-32688(gp)
    saved_end_x = pos_x + size_x;
   a2650:	e0fffc17 	ldw	r3,-16(fp)
   a2654:	e0bffe17 	ldw	r2,-8(fp)
   a2658:	1885883a 	add	r2,r3,r2
   a265c:	d0a01615 	stw	r2,-32680(gp)
    saved_end_y = pos_y + size_y;
   a2660:	e0fffd17 	ldw	r3,-12(fp)
   a2664:	e0bfff17 	ldw	r2,-4(fp)
   a2668:	1885883a 	add	r2,r3,r2
   a266c:	d0a01315 	stw	r2,-32692(gp)


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
   a2670:	e03ffb15 	stw	zero,-20(fp)
   a2674:	00001506 	br	a26cc <set_save_area+0xb0>
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
   a2678:	e03ffa15 	stw	zero,-24(fp)
   a267c:	00000d06 	br	a26b4 <set_save_area+0x98>
	    saved_area[y][x] = 0;
   a2680:	040002b4 	movhi	r16,10
   a2684:	84134904 	addi	r16,r16,19748
   a2688:	e0bffb17 	ldw	r2,-20(fp)
   a268c:	1009883a 	mov	r4,r2
   a2690:	014003c4 	movi	r5,15
   a2694:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2698:	e0fffa17 	ldw	r3,-24(fp)
   a269c:	10c5883a 	add	r2,r2,r3
   a26a0:	8085883a 	add	r2,r16,r2
   a26a4:	10000005 	stb	zero,0(r2)
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
   a26a8:	e0bffa17 	ldw	r2,-24(fp)
   a26ac:	10800044 	addi	r2,r2,1
   a26b0:	e0bffa15 	stw	r2,-24(fp)
   a26b4:	e0bffa17 	ldw	r2,-24(fp)
   a26b8:	108003d0 	cmplti	r2,r2,15
   a26bc:	103ff01e 	bne	r2,zero,a2680 <set_save_area+0x64>
    saved_end_x = pos_x + size_x;
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
   a26c0:	e0bffb17 	ldw	r2,-20(fp)
   a26c4:	10800044 	addi	r2,r2,1
   a26c8:	e0bffb15 	stw	r2,-20(fp)
   a26cc:	e0bffb17 	ldw	r2,-20(fp)
   a26d0:	10800410 	cmplti	r2,r2,16
   a26d4:	103fe81e 	bne	r2,zero,a2678 <set_save_area+0x5c>
        }
    }


    /* setup the saved area - return */
    return;
   a26d8:	0001883a 	nop

}
   a26dc:	e037883a 	mov	sp,fp
   a26e0:	dfc00217 	ldw	ra,8(sp)
   a26e4:	df000117 	ldw	fp,4(sp)
   a26e8:	dc000017 	ldw	r16,0(sp)
   a26ec:	dec00304 	addi	sp,sp,12
   a26f0:	f800283a 	ret

000a26f4 <restore_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_trace()
{
   a26f4:	defff904 	addi	sp,sp,-28
   a26f8:	dfc00615 	stw	ra,24(sp)
   a26fc:	df000515 	stw	fp,20(sp)
   a2700:	dc000415 	stw	r16,16(sp)
   a2704:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
   a2708:	d0a01417 	ldw	r2,-32688(gp)
   a270c:	e0bfff15 	stw	r2,-4(fp)
   a2710:	00003606 	br	a27ec <restore_trace+0xf8>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
   a2714:	00802004 	movi	r2,128
   a2718:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
   a271c:	e03ffd15 	stw	zero,-12(fp)

        for (x = saved_pos_x; x < saved_end_x; x++)  {
   a2720:	d0a01717 	ldw	r2,-32676(gp)
   a2724:	e0bffe15 	stw	r2,-8(fp)
   a2728:	00002a06 	br	a27d4 <restore_trace+0xe0>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_area[y - saved_pos_y][bit_offset] & bit_position) == 0)
   a272c:	d0a01417 	ldw	r2,-32688(gp)
   a2730:	e0ffff17 	ldw	r3,-4(fp)
   a2734:	1885c83a 	sub	r2,r3,r2
   a2738:	040002b4 	movhi	r16,10
   a273c:	84134904 	addi	r16,r16,19748
   a2740:	1009883a 	mov	r4,r2
   a2744:	014003c4 	movi	r5,15
   a2748:	00a2e3c0 	call	a2e3c <__mulsi3>
   a274c:	e0fffd17 	ldw	r3,-12(fp)
   a2750:	10c5883a 	add	r2,r2,r3
   a2754:	8085883a 	add	r2,r16,r2
   a2758:	10800003 	ldbu	r2,0(r2)
   a275c:	10c03fcc 	andi	r3,r2,255
   a2760:	e0bffc17 	ldw	r2,-16(fp)
   a2764:	1884703a 	and	r2,r3,r2
   a2768:	1000071e 	bne	r2,zero,a2788 <restore_trace+0x94>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
   a276c:	e0fffe17 	ldw	r3,-8(fp)
   a2770:	e0bfff17 	ldw	r2,-4(fp)
   a2774:	1809883a 	mov	r4,r3
   a2778:	100b883a 	mov	r5,r2
   a277c:	000d883a 	mov	r6,zero
   a2780:	00a1ba00 	call	a1ba0 <plot_pixel>
   a2784:	00000606 	br	a27a0 <restore_trace+0xac>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
   a2788:	e0fffe17 	ldw	r3,-8(fp)
   a278c:	e0bfff17 	ldw	r2,-4(fp)
   a2790:	1809883a 	mov	r4,r3
   a2794:	100b883a 	mov	r5,r2
   a2798:	01800044 	movi	r6,1
   a279c:	00a1ba00 	call	a1ba0 <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
   a27a0:	e0bffc17 	ldw	r2,-16(fp)
   a27a4:	1005d07a 	srai	r2,r2,1
   a27a8:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
   a27ac:	e0bffc17 	ldw	r2,-16(fp)
   a27b0:	1000051e 	bne	r2,zero,a27c8 <restore_trace+0xd4>
	        /* now on high bit of next byte */
		bit_position = 0x80;
   a27b4:	00802004 	movi	r2,128
   a27b8:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
   a27bc:	e0bffd17 	ldw	r2,-12(fp)
   a27c0:	10800044 	addi	r2,r2,1
   a27c4:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = saved_pos_x; x < saved_end_x; x++)  {
   a27c8:	e0bffe17 	ldw	r2,-8(fp)
   a27cc:	10800044 	addi	r2,r2,1
   a27d0:	e0bffe15 	stw	r2,-8(fp)
   a27d4:	d0a01617 	ldw	r2,-32680(gp)
   a27d8:	e0fffe17 	ldw	r3,-8(fp)
   a27dc:	18bfd316 	blt	r3,r2,a272c <restore_trace+0x38>
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
   a27e0:	e0bfff17 	ldw	r2,-4(fp)
   a27e4:	10800044 	addi	r2,r2,1
   a27e8:	e0bfff15 	stw	r2,-4(fp)
   a27ec:	d0a01317 	ldw	r2,-32692(gp)
   a27f0:	e0ffff17 	ldw	r3,-4(fp)
   a27f4:	18bfc716 	blt	r3,r2,a2714 <restore_trace+0x20>
        }
    }


    /* restored the saved area - return */
    return;
   a27f8:	0001883a 	nop

}
   a27fc:	e037883a 	mov	sp,fp
   a2800:	dfc00217 	ldw	ra,8(sp)
   a2804:	df000117 	ldw	fp,4(sp)
   a2808:	dc000017 	ldw	r16,0(sp)
   a280c:	dec00304 	addi	sp,sp,12
   a2810:	f800283a 	ret

000a2814 <do_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  do_trace()
{
   a2814:	defffe04 	addi	sp,sp,-8
   a2818:	dfc00115 	stw	ra,4(sp)
   a281c:	df000015 	stw	fp,0(sp)
   a2820:	d839883a 	mov	fp,sp



    /* start up the trace */
    /* indicate whether using automatic triggering or not */
    start_sample(get_trigger_mode() == AUTO_TRIGGER);
   a2824:	00a0e680 	call	a0e68 <get_trigger_mode>
   a2828:	10800060 	cmpeqi	r2,r2,1
   a282c:	10803fcc 	andi	r2,r2,255
   a2830:	1009883a 	mov	r4,r2
   a2834:	00a1c3c0 	call	a1c3c <start_sample>

    /* now not ready for another trace (currently doing one) */
    trace_status = FALSE;
   a2838:	d0201215 	stw	zero,-32696(gp)

    /* and are currently sampling data */
    sampling = TRUE;
   a283c:	00800044 	movi	r2,1
   a2840:	d0a01815 	stw	r2,-32672(gp)


    /* trace is going, return */
    return;
   a2844:	0001883a 	nop

}
   a2848:	e037883a 	mov	sp,fp
   a284c:	dfc00117 	ldw	ra,4(sp)
   a2850:	df000017 	ldw	fp,0(sp)
   a2854:	dec00204 	addi	sp,sp,8
   a2858:	f800283a 	ret

000a285c <plot_trace>:
   Last Modified:    May 9, 2006

*/

void  plot_trace(unsigned char *sample)
{
   a285c:	defff304 	addi	sp,sp,-52
   a2860:	dfc00c15 	stw	ra,48(sp)
   a2864:	df000b15 	stw	fp,44(sp)
   a2868:	dcc00a15 	stw	r19,40(sp)
   a286c:	dc800915 	stw	r18,36(sp)
   a2870:	dc400815 	stw	r17,32(sp)
   a2874:	dc000715 	stw	r16,28(sp)
   a2878:	df000704 	addi	fp,sp,28
   a287c:	e13fff15 	stw	r4,-4(fp)
    /* variables */
    int  x = 0;				/* current x position to plot */
   a2880:	e03ff915 	stw	zero,-28(fp)
    int  x_pos = (PLOT_SIZE_X / 2);	/* "fine" x position for multiple point plotting */
   a2884:	00803c04 	movi	r2,240
   a2888:	e0bffa15 	stw	r2,-24(fp)
    int  j;



    /* first, clear the display to get rid of old plots */
    clear_display();
   a288c:	00a1b800 	call	a1b80 <clear_display>

    /* clear the saved areas too */
    clear_saved_areas();
   a2890:	00a23400 	call	a2340 <clear_saved_areas>

    /* re-display the menu (if it was on) */
    refresh_menu();
   a2894:	00a09c40 	call	a09c4 <refresh_menu>


    /* plot the sample */
    for (i = 0; i < sample_size; i++)  {
   a2898:	e03ffc15 	stw	zero,-16(fp)
   a289c:	00010b06 	br	a2ccc <plot_trace+0x470>

        /* determine y position of point (note: screen coordinates invert) */
	y = (PLOT_SIZE_Y - 1) - ((sample[i] * (PLOT_SIZE_Y - 1)) / 255);
   a28a0:	e0bffc17 	ldw	r2,-16(fp)
   a28a4:	e0ffff17 	ldw	r3,-4(fp)
   a28a8:	1885883a 	add	r2,r3,r2
   a28ac:	10800003 	ldbu	r2,0(r2)
   a28b0:	10803fcc 	andi	r2,r2,255
   a28b4:	1009883a 	mov	r4,r2
   a28b8:	01401fc4 	movi	r5,127
   a28bc:	00a2e3c0 	call	a2e3c <__mulsi3>
   a28c0:	1009883a 	mov	r4,r2
   a28c4:	01403fc4 	movi	r5,255
   a28c8:	00a2d800 	call	a2d80 <__divsi3>
   a28cc:	00c01fc4 	movi	r3,127
   a28d0:	1885c83a 	sub	r2,r3,r2
   a28d4:	e0bffe15 	stw	r2,-8(fp)

        /* plot this point */
	plot_pixel(x, y, PIXEL_BLACK);
   a28d8:	e0fff917 	ldw	r3,-28(fp)
   a28dc:	e0bffe17 	ldw	r2,-8(fp)
   a28e0:	1809883a 	mov	r4,r3
   a28e4:	100b883a 	mov	r5,r2
   a28e8:	01800044 	movi	r6,1
   a28ec:	00a1ba00 	call	a1ba0 <plot_pixel>


	/* check if the point is in a save area */

	/* check if in the menu area */
	if ((x >= MENU_UL_X) && (x < (MENU_UL_X + MENU_SIZE_X)) &&
   a28f0:	e0bff917 	ldw	r2,-28(fp)
   a28f4:	10805e90 	cmplti	r2,r2,378
   a28f8:	10002f1e 	bne	r2,zero,a29b8 <plot_trace+0x15c>
   a28fc:	e0bff917 	ldw	r2,-28(fp)
   a2900:	10807688 	cmpgei	r2,r2,474
   a2904:	10002c1e 	bne	r2,zero,a29b8 <plot_trace+0x15c>
   a2908:	e0bffe17 	ldw	r2,-8(fp)
   a290c:	10002a16 	blt	r2,zero,a29b8 <plot_trace+0x15c>
	    (y >= MENU_UL_Y) && (y < (MENU_UL_Y + MENU_SIZE_Y)))
   a2910:	e0bffe17 	ldw	r2,-8(fp)
   a2914:	10800e08 	cmpgei	r2,r2,56
   a2918:	1000271e 	bne	r2,zero,a29b8 <plot_trace+0x15c>
	    /* point is in the menu area - save it */
	    saved_menu[y - MENU_UL_Y][(x - MENU_UL_X)/8] |= (0x80 >> ((x - MENU_UL_X) % 8));
   a291c:	e0bff917 	ldw	r2,-28(fp)
   a2920:	10bfa184 	addi	r2,r2,-378
   a2924:	1000010e 	bge	r2,zero,a292c <plot_trace+0xd0>
   a2928:	108001c4 	addi	r2,r2,7
   a292c:	1005d0fa 	srai	r2,r2,3
   a2930:	1021883a 	mov	r16,r2
   a2934:	044002b4 	movhi	r17,10
   a2938:	8c524804 	addi	r17,r17,18720
   a293c:	e0bffe17 	ldw	r2,-8(fp)
   a2940:	1009883a 	mov	r4,r2
   a2944:	01400304 	movi	r5,12
   a2948:	00a2e3c0 	call	a2e3c <__mulsi3>
   a294c:	1405883a 	add	r2,r2,r16
   a2950:	8885883a 	add	r2,r17,r2
   a2954:	10800003 	ldbu	r2,0(r2)
   a2958:	1007883a 	mov	r3,r2
   a295c:	e0bff917 	ldw	r2,-28(fp)
   a2960:	113fa184 	addi	r4,r2,-378
   a2964:	00a00034 	movhi	r2,32768
   a2968:	108001c4 	addi	r2,r2,7
   a296c:	2084703a 	and	r2,r4,r2
   a2970:	1000040e 	bge	r2,zero,a2984 <plot_trace+0x128>
   a2974:	10bfffc4 	addi	r2,r2,-1
   a2978:	013ffe04 	movi	r4,-8
   a297c:	1104b03a 	or	r2,r2,r4
   a2980:	10800044 	addi	r2,r2,1
   a2984:	01002004 	movi	r4,128
   a2988:	2085d83a 	sra	r2,r4,r2
   a298c:	1884b03a 	or	r2,r3,r2
   a2990:	1023883a 	mov	r17,r2
   a2994:	048002b4 	movhi	r18,10
   a2998:	94924804 	addi	r18,r18,18720
   a299c:	e0bffe17 	ldw	r2,-8(fp)
   a29a0:	1009883a 	mov	r4,r2
   a29a4:	01400304 	movi	r5,12
   a29a8:	00a2e3c0 	call	a2e3c <__mulsi3>
   a29ac:	1405883a 	add	r2,r2,r16
   a29b0:	9085883a 	add	r2,r18,r2
   a29b4:	14400005 	stb	r17,0(r2)

	/* check if in the saved area */
	if ((x >= saved_pos_x) && (x <= saved_end_x) && (y >= saved_pos_y) && (y <= saved_end_y))
   a29b8:	d0a01717 	ldw	r2,-32676(gp)
   a29bc:	e0fff917 	ldw	r3,-28(fp)
   a29c0:	18803616 	blt	r3,r2,a2a9c <plot_trace+0x240>
   a29c4:	d0e01617 	ldw	r3,-32680(gp)
   a29c8:	e0bff917 	ldw	r2,-28(fp)
   a29cc:	18803316 	blt	r3,r2,a2a9c <plot_trace+0x240>
   a29d0:	d0a01417 	ldw	r2,-32688(gp)
   a29d4:	e0fffe17 	ldw	r3,-8(fp)
   a29d8:	18803016 	blt	r3,r2,a2a9c <plot_trace+0x240>
   a29dc:	d0e01317 	ldw	r3,-32692(gp)
   a29e0:	e0bffe17 	ldw	r2,-8(fp)
   a29e4:	18802d16 	blt	r3,r2,a2a9c <plot_trace+0x240>
	    /* point is in the save area - save it */
	    saved_area[y - saved_pos_y][(x - saved_pos_x)/8] |= (0x80 >> ((x - saved_pos_x) % 8));
   a29e8:	d0a01417 	ldw	r2,-32688(gp)
   a29ec:	e0fffe17 	ldw	r3,-8(fp)
   a29f0:	18a3c83a 	sub	r17,r3,r2
   a29f4:	d0a01717 	ldw	r2,-32676(gp)
   a29f8:	e0fff917 	ldw	r3,-28(fp)
   a29fc:	1885c83a 	sub	r2,r3,r2
   a2a00:	1000010e 	bge	r2,zero,a2a08 <plot_trace+0x1ac>
   a2a04:	108001c4 	addi	r2,r2,7
   a2a08:	1005d0fa 	srai	r2,r2,3
   a2a0c:	1021883a 	mov	r16,r2
   a2a10:	d0a01417 	ldw	r2,-32688(gp)
   a2a14:	e0fffe17 	ldw	r3,-8(fp)
   a2a18:	1885c83a 	sub	r2,r3,r2
   a2a1c:	048002b4 	movhi	r18,10
   a2a20:	94934904 	addi	r18,r18,19748
   a2a24:	1009883a 	mov	r4,r2
   a2a28:	014003c4 	movi	r5,15
   a2a2c:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2a30:	1405883a 	add	r2,r2,r16
   a2a34:	9085883a 	add	r2,r18,r2
   a2a38:	10800003 	ldbu	r2,0(r2)
   a2a3c:	1007883a 	mov	r3,r2
   a2a40:	d0a01717 	ldw	r2,-32676(gp)
   a2a44:	e13ff917 	ldw	r4,-28(fp)
   a2a48:	2089c83a 	sub	r4,r4,r2
   a2a4c:	00a00034 	movhi	r2,32768
   a2a50:	108001c4 	addi	r2,r2,7
   a2a54:	2084703a 	and	r2,r4,r2
   a2a58:	1000040e 	bge	r2,zero,a2a6c <plot_trace+0x210>
   a2a5c:	10bfffc4 	addi	r2,r2,-1
   a2a60:	013ffe04 	movi	r4,-8
   a2a64:	1104b03a 	or	r2,r2,r4
   a2a68:	10800044 	addi	r2,r2,1
   a2a6c:	01002004 	movi	r4,128
   a2a70:	2085d83a 	sra	r2,r4,r2
   a2a74:	1884b03a 	or	r2,r3,r2
   a2a78:	1025883a 	mov	r18,r2
   a2a7c:	04c002b4 	movhi	r19,10
   a2a80:	9cd34904 	addi	r19,r19,19748
   a2a84:	8809883a 	mov	r4,r17
   a2a88:	014003c4 	movi	r5,15
   a2a8c:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2a90:	1405883a 	add	r2,r2,r16
   a2a94:	9885883a 	add	r2,r19,r2
   a2a98:	14800005 	stb	r18,0(r2)

	/* check if on a grid line */
	/* go through all the horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
   a2a9c:	00bfffc4 	movi	r2,-1
   a2aa0:	e0bffd15 	stw	r2,-12(fp)
   a2aa4:	00003a06 	br	a2b90 <plot_trace+0x334>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
   a2aa8:	e13ffd17 	ldw	r4,-12(fp)
   a2aac:	01400c04 	movi	r5,48
   a2ab0:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2ab4:	10801004 	addi	r2,r2,64
   a2ab8:	e0bffb15 	stw	r2,-20(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
   a2abc:	e0bffb17 	ldw	r2,-20(fp)
   a2ac0:	10802010 	cmplti	r2,r2,128
   a2ac4:	1000021e 	bne	r2,zero,a2ad0 <plot_trace+0x274>
	        p = PLOT_SIZE_Y - 1;
   a2ac8:	00801fc4 	movi	r2,127
   a2acc:	e0bffb15 	stw	r2,-20(fp)
	    if (p < 0)
   a2ad0:	e0bffb17 	ldw	r2,-20(fp)
   a2ad4:	1000010e 	bge	r2,zero,a2adc <plot_trace+0x280>
	        p = 0;
   a2ad8:	e03ffb15 	stw	zero,-20(fp)

	    /* if the point is on this line, save it */
	    if (y == p)
   a2adc:	e0fffe17 	ldw	r3,-8(fp)
   a2ae0:	e0bffb17 	ldw	r2,-20(fp)
   a2ae4:	1880271e 	bne	r3,r2,a2b84 <plot_trace+0x328>
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
   a2ae8:	e0bffd17 	ldw	r2,-12(fp)
   a2aec:	14400044 	addi	r17,r2,1
   a2af0:	e0bff917 	ldw	r2,-28(fp)
   a2af4:	1000010e 	bge	r2,zero,a2afc <plot_trace+0x2a0>
   a2af8:	108001c4 	addi	r2,r2,7
   a2afc:	1005d0fa 	srai	r2,r2,3
   a2b00:	1021883a 	mov	r16,r2
   a2b04:	e0bffd17 	ldw	r2,-12(fp)
   a2b08:	10800044 	addi	r2,r2,1
   a2b0c:	048002b4 	movhi	r18,10
   a2b10:	94931c04 	addi	r18,r18,19568
   a2b14:	1009883a 	mov	r4,r2
   a2b18:	01400f04 	movi	r5,60
   a2b1c:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2b20:	1405883a 	add	r2,r2,r16
   a2b24:	9085883a 	add	r2,r18,r2
   a2b28:	10800003 	ldbu	r2,0(r2)
   a2b2c:	1007883a 	mov	r3,r2
   a2b30:	e13ff917 	ldw	r4,-28(fp)
   a2b34:	00a00034 	movhi	r2,32768
   a2b38:	108001c4 	addi	r2,r2,7
   a2b3c:	2084703a 	and	r2,r4,r2
   a2b40:	1000040e 	bge	r2,zero,a2b54 <plot_trace+0x2f8>
   a2b44:	10bfffc4 	addi	r2,r2,-1
   a2b48:	013ffe04 	movi	r4,-8
   a2b4c:	1104b03a 	or	r2,r2,r4
   a2b50:	10800044 	addi	r2,r2,1
   a2b54:	01002004 	movi	r4,128
   a2b58:	2085d83a 	sra	r2,r4,r2
   a2b5c:	1884b03a 	or	r2,r3,r2
   a2b60:	1025883a 	mov	r18,r2
   a2b64:	04c002b4 	movhi	r19,10
   a2b68:	9cd31c04 	addi	r19,r19,19568
   a2b6c:	8809883a 	mov	r4,r17
   a2b70:	01400f04 	movi	r5,60
   a2b74:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2b78:	1405883a 	add	r2,r2,r16
   a2b7c:	9885883a 	add	r2,r19,r2
   a2b80:	14800005 	stb	r18,0(r2)
	    /* point is in the save area - save it */
	    saved_area[y - saved_pos_y][(x - saved_pos_x)/8] |= (0x80 >> ((x - saved_pos_x) % 8));

	/* check if on a grid line */
	/* go through all the horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
   a2b84:	e0bffd17 	ldw	r2,-12(fp)
   a2b88:	10800044 	addi	r2,r2,1
   a2b8c:	e0bffd15 	stw	r2,-12(fp)
   a2b90:	e0bffd17 	ldw	r2,-12(fp)
   a2b94:	10800090 	cmplti	r2,r2,2
   a2b98:	103fc31e 	bne	r2,zero,a2aa8 <plot_trace+0x24c>
	    if (y == p)
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
	}

	/* go through all the vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
   a2b9c:	00bffec4 	movi	r2,-5
   a2ba0:	e0bffd15 	stw	r2,-12(fp)
   a2ba4:	00003606 	br	a2c80 <plot_trace+0x424>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
   a2ba8:	e13ffd17 	ldw	r4,-12(fp)
   a2bac:	01400c04 	movi	r5,48
   a2bb0:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2bb4:	10803c04 	addi	r2,r2,240
   a2bb8:	e0bffb15 	stw	r2,-20(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
   a2bbc:	e0bffb17 	ldw	r2,-20(fp)
   a2bc0:	10807810 	cmplti	r2,r2,480
   a2bc4:	1000021e 	bne	r2,zero,a2bd0 <plot_trace+0x374>
	        p = PLOT_SIZE_X - 1;
   a2bc8:	008077c4 	movi	r2,479
   a2bcc:	e0bffb15 	stw	r2,-20(fp)
	    if (p < 0)
   a2bd0:	e0bffb17 	ldw	r2,-20(fp)
   a2bd4:	1000010e 	bge	r2,zero,a2bdc <plot_trace+0x380>
	        p = 0;
   a2bd8:	e03ffb15 	stw	zero,-20(fp)

	    /* if the point is on this line, save it */
	    if (x == p)
   a2bdc:	e0fff917 	ldw	r3,-28(fp)
   a2be0:	e0bffb17 	ldw	r2,-20(fp)
   a2be4:	1880231e 	bne	r3,r2,a2c74 <plot_trace+0x418>
		saved_axis_y[j + X_TICK_CNT][y / 8] |= (0x80 >> (y % 8));
   a2be8:	e0bffd17 	ldw	r2,-12(fp)
   a2bec:	11800144 	addi	r6,r2,5
   a2bf0:	e0bffe17 	ldw	r2,-8(fp)
   a2bf4:	1000010e 	bge	r2,zero,a2bfc <plot_trace+0x3a0>
   a2bf8:	108001c4 	addi	r2,r2,7
   a2bfc:	1005d0fa 	srai	r2,r2,3
   a2c00:	1007883a 	mov	r3,r2
   a2c04:	e0bffd17 	ldw	r2,-12(fp)
   a2c08:	10800144 	addi	r2,r2,5
   a2c0c:	010002b4 	movhi	r4,10
   a2c10:	2112f004 	addi	r4,r4,19392
   a2c14:	1004913a 	slli	r2,r2,4
   a2c18:	10c5883a 	add	r2,r2,r3
   a2c1c:	2085883a 	add	r2,r4,r2
   a2c20:	10800003 	ldbu	r2,0(r2)
   a2c24:	1009883a 	mov	r4,r2
   a2c28:	e17ffe17 	ldw	r5,-8(fp)
   a2c2c:	00a00034 	movhi	r2,32768
   a2c30:	108001c4 	addi	r2,r2,7
   a2c34:	2884703a 	and	r2,r5,r2
   a2c38:	1000040e 	bge	r2,zero,a2c4c <plot_trace+0x3f0>
   a2c3c:	10bfffc4 	addi	r2,r2,-1
   a2c40:	017ffe04 	movi	r5,-8
   a2c44:	1144b03a 	or	r2,r2,r5
   a2c48:	10800044 	addi	r2,r2,1
   a2c4c:	01402004 	movi	r5,128
   a2c50:	2885d83a 	sra	r2,r5,r2
   a2c54:	2084b03a 	or	r2,r4,r2
   a2c58:	1009883a 	mov	r4,r2
   a2c5c:	014002b4 	movhi	r5,10
   a2c60:	2952f004 	addi	r5,r5,19392
   a2c64:	3004913a 	slli	r2,r6,4
   a2c68:	10c5883a 	add	r2,r2,r3
   a2c6c:	2885883a 	add	r2,r5,r2
   a2c70:	11000005 	stb	r4,0(r2)
	    if (y == p)
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
	}

	/* go through all the vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
   a2c74:	e0bffd17 	ldw	r2,-12(fp)
   a2c78:	10800044 	addi	r2,r2,1
   a2c7c:	e0bffd15 	stw	r2,-12(fp)
   a2c80:	e0bffd17 	ldw	r2,-12(fp)
   a2c84:	10800190 	cmplti	r2,r2,6
   a2c88:	103fc71e 	bne	r2,zero,a2ba8 <plot_trace+0x34c>
		saved_axis_y[j + X_TICK_CNT][y / 8] |= (0x80 >> (y % 8));
	}


	/* update x position */
	x_pos += PLOT_SIZE_X;
   a2c8c:	e0bffa17 	ldw	r2,-24(fp)
   a2c90:	10807804 	addi	r2,r2,480
   a2c94:	e0bffa15 	stw	r2,-24(fp)
	/* check if at next horizontal position */
	if (x_pos >= sample_size)  {
   a2c98:	d0a01517 	ldw	r2,-32684(gp)
   a2c9c:	e0fffa17 	ldw	r3,-24(fp)
   a2ca0:	18800716 	blt	r3,r2,a2cc0 <plot_trace+0x464>
	    /* at next position - update positions */
	    x++;
   a2ca4:	e0bff917 	ldw	r2,-28(fp)
   a2ca8:	10800044 	addi	r2,r2,1
   a2cac:	e0bff915 	stw	r2,-28(fp)
	    x_pos -= sample_size;
   a2cb0:	d0a01517 	ldw	r2,-32684(gp)
   a2cb4:	e0fffa17 	ldw	r3,-24(fp)
   a2cb8:	1885c83a 	sub	r2,r3,r2
   a2cbc:	e0bffa15 	stw	r2,-24(fp)
    /* re-display the menu (if it was on) */
    refresh_menu();


    /* plot the sample */
    for (i = 0; i < sample_size; i++)  {
   a2cc0:	e0bffc17 	ldw	r2,-16(fp)
   a2cc4:	10800044 	addi	r2,r2,1
   a2cc8:	e0bffc15 	stw	r2,-16(fp)
   a2ccc:	d0a01517 	ldw	r2,-32684(gp)
   a2cd0:	e0fffc17 	ldw	r3,-16(fp)
   a2cd4:	18bef216 	blt	r3,r2,a28a0 <plot_trace+0x44>
	}
    }


    /* finally, output the scale if need be */
    set_display_scale(cur_scale);
   a2cd8:	d0a01117 	ldw	r2,-32700(gp)
   a2cdc:	1009883a 	mov	r4,r2
   a2ce0:	00a1f480 	call	a1f48 <set_display_scale>


    /* done with plot, return */
    return;
   a2ce4:	0001883a 	nop

}
   a2ce8:	e037883a 	mov	sp,fp
   a2cec:	dfc00517 	ldw	ra,20(sp)
   a2cf0:	df000417 	ldw	fp,16(sp)
   a2cf4:	dcc00317 	ldw	r19,12(sp)
   a2cf8:	dc800217 	ldw	r18,8(sp)
   a2cfc:	dc400117 	ldw	r17,4(sp)
   a2d00:	dc000017 	ldw	r16,0(sp)
   a2d04:	dec00604 	addi	sp,sp,24
   a2d08:	f800283a 	ret

000a2d0c <udivmodsi4>:
   a2d0c:	2005883a 	mov	r2,r4
   a2d10:	2900182e 	bgeu	r5,r4,a2d74 <udivmodsi4+0x68>
   a2d14:	28001716 	blt	r5,zero,a2d74 <udivmodsi4+0x68>
   a2d18:	01000804 	movi	r4,32
   a2d1c:	00c00044 	movi	r3,1
   a2d20:	00000206 	br	a2d2c <udivmodsi4+0x20>
   a2d24:	20001126 	beq	r4,zero,a2d6c <udivmodsi4+0x60>
   a2d28:	28000516 	blt	r5,zero,a2d40 <udivmodsi4+0x34>
   a2d2c:	294b883a 	add	r5,r5,r5
   a2d30:	213fffc4 	addi	r4,r4,-1
   a2d34:	18c7883a 	add	r3,r3,r3
   a2d38:	28bffa36 	bltu	r5,r2,a2d24 <udivmodsi4+0x18>
   a2d3c:	18000b26 	beq	r3,zero,a2d6c <udivmodsi4+0x60>
   a2d40:	0009883a 	mov	r4,zero
   a2d44:	11400236 	bltu	r2,r5,a2d50 <udivmodsi4+0x44>
   a2d48:	1145c83a 	sub	r2,r2,r5
   a2d4c:	20c8b03a 	or	r4,r4,r3
   a2d50:	1806d07a 	srli	r3,r3,1
   a2d54:	280ad07a 	srli	r5,r5,1
   a2d58:	183ffa1e 	bne	r3,zero,a2d44 <udivmodsi4+0x38>
   a2d5c:	3000021e 	bne	r6,zero,a2d68 <udivmodsi4+0x5c>
   a2d60:	2005883a 	mov	r2,r4
   a2d64:	f800283a 	ret
   a2d68:	f800283a 	ret
   a2d6c:	0009883a 	mov	r4,zero
   a2d70:	003ffa06 	br	a2d5c <udivmodsi4+0x50>
   a2d74:	00c00044 	movi	r3,1
   a2d78:	0009883a 	mov	r4,zero
   a2d7c:	003ff106 	br	a2d44 <udivmodsi4+0x38>

000a2d80 <__divsi3>:
   a2d80:	defffe04 	addi	sp,sp,-8
   a2d84:	dfc00115 	stw	ra,4(sp)
   a2d88:	dc000015 	stw	r16,0(sp)
   a2d8c:	20000a16 	blt	r4,zero,a2db8 <__divsi3+0x38>
   a2d90:	0021883a 	mov	r16,zero
   a2d94:	28000b16 	blt	r5,zero,a2dc4 <__divsi3+0x44>
   a2d98:	000d883a 	mov	r6,zero
   a2d9c:	00a2d0c0 	call	a2d0c <udivmodsi4>
   a2da0:	80000126 	beq	r16,zero,a2da8 <__divsi3+0x28>
   a2da4:	0085c83a 	sub	r2,zero,r2
   a2da8:	dfc00117 	ldw	ra,4(sp)
   a2dac:	dc000017 	ldw	r16,0(sp)
   a2db0:	dec00204 	addi	sp,sp,8
   a2db4:	f800283a 	ret
   a2db8:	0109c83a 	sub	r4,zero,r4
   a2dbc:	04000044 	movi	r16,1
   a2dc0:	283ff50e 	bge	r5,zero,a2d98 <__divsi3+0x18>
   a2dc4:	014bc83a 	sub	r5,zero,r5
   a2dc8:	8400005c 	xori	r16,r16,1
   a2dcc:	003ff206 	br	a2d98 <__divsi3+0x18>

000a2dd0 <__modsi3>:
   a2dd0:	deffff04 	addi	sp,sp,-4
   a2dd4:	dfc00015 	stw	ra,0(sp)
   a2dd8:	20000516 	blt	r4,zero,a2df0 <__modsi3+0x20>
   a2ddc:	28000c16 	blt	r5,zero,a2e10 <__modsi3+0x40>
   a2de0:	01800044 	movi	r6,1
   a2de4:	dfc00017 	ldw	ra,0(sp)
   a2de8:	dec00104 	addi	sp,sp,4
   a2dec:	00a2d0c1 	jmpi	a2d0c <udivmodsi4>
   a2df0:	0109c83a 	sub	r4,zero,r4
   a2df4:	28000b16 	blt	r5,zero,a2e24 <__modsi3+0x54>
   a2df8:	01800044 	movi	r6,1
   a2dfc:	00a2d0c0 	call	a2d0c <udivmodsi4>
   a2e00:	0085c83a 	sub	r2,zero,r2
   a2e04:	dfc00017 	ldw	ra,0(sp)
   a2e08:	dec00104 	addi	sp,sp,4
   a2e0c:	f800283a 	ret
   a2e10:	014bc83a 	sub	r5,zero,r5
   a2e14:	01800044 	movi	r6,1
   a2e18:	dfc00017 	ldw	ra,0(sp)
   a2e1c:	dec00104 	addi	sp,sp,4
   a2e20:	00a2d0c1 	jmpi	a2d0c <udivmodsi4>
   a2e24:	014bc83a 	sub	r5,zero,r5
   a2e28:	003ff306 	br	a2df8 <__modsi3+0x28>

000a2e2c <__udivsi3>:
   a2e2c:	000d883a 	mov	r6,zero
   a2e30:	00a2d0c1 	jmpi	a2d0c <udivmodsi4>

000a2e34 <__umodsi3>:
   a2e34:	01800044 	movi	r6,1
   a2e38:	00a2d0c1 	jmpi	a2d0c <udivmodsi4>

000a2e3c <__mulsi3>:
   a2e3c:	0005883a 	mov	r2,zero
   a2e40:	20000726 	beq	r4,zero,a2e60 <__mulsi3+0x24>
   a2e44:	20c0004c 	andi	r3,r4,1
   a2e48:	2008d07a 	srli	r4,r4,1
   a2e4c:	18000126 	beq	r3,zero,a2e54 <__mulsi3+0x18>
   a2e50:	1145883a 	add	r2,r2,r5
   a2e54:	294b883a 	add	r5,r5,r5
   a2e58:	203ffa1e 	bne	r4,zero,a2e44 <__mulsi3+0x8>
   a2e5c:	f800283a 	ret
   a2e60:	f800283a 	ret

000a2e64 <memcpy>:
   a2e64:	defffb04 	addi	sp,sp,-20
   a2e68:	dc000015 	stw	r16,0(sp)
   a2e6c:	dfc00415 	stw	ra,16(sp)
   a2e70:	dcc00315 	stw	r19,12(sp)
   a2e74:	dc800215 	stw	r18,8(sp)
   a2e78:	dc400115 	stw	r17,4(sp)
   a2e7c:	00c003c4 	movi	r3,15
   a2e80:	2021883a 	mov	r16,r4
   a2e84:	3005883a 	mov	r2,r6
   a2e88:	1980032e 	bgeu	r3,r6,a2e98 <memcpy+0x34>
   a2e8c:	2906b03a 	or	r3,r5,r4
   a2e90:	18c000cc 	andi	r3,r3,3
   a2e94:	18001026 	beq	r3,zero,a2ed8 <memcpy+0x74>
   a2e98:	8007883a 	mov	r3,r16
   a2e9c:	288f883a 	add	r7,r5,r2
   a2ea0:	10000526 	beq	r2,zero,a2eb8 <memcpy+0x54>
   a2ea4:	29800003 	ldbu	r6,0(r5)
   a2ea8:	18c00044 	addi	r3,r3,1
   a2eac:	29400044 	addi	r5,r5,1
   a2eb0:	19bfffc5 	stb	r6,-1(r3)
   a2eb4:	29fffb1e 	bne	r5,r7,a2ea4 <memcpy+0x40>
   a2eb8:	8005883a 	mov	r2,r16
   a2ebc:	dfc00417 	ldw	ra,16(sp)
   a2ec0:	dcc00317 	ldw	r19,12(sp)
   a2ec4:	dc800217 	ldw	r18,8(sp)
   a2ec8:	dc400117 	ldw	r17,4(sp)
   a2ecc:	dc000017 	ldw	r16,0(sp)
   a2ed0:	dec00504 	addi	sp,sp,20
   a2ed4:	f800283a 	ret
   a2ed8:	32bffc04 	addi	r10,r6,-16
   a2edc:	5014d13a 	srli	r10,r10,4
   a2ee0:	20800404 	addi	r2,r4,16
   a2ee4:	2007883a 	mov	r3,r4
   a2ee8:	5008913a 	slli	r4,r10,4
   a2eec:	280f883a 	mov	r7,r5
   a2ef0:	1105883a 	add	r2,r2,r4
   a2ef4:	3a000017 	ldw	r8,0(r7)
   a2ef8:	18c00404 	addi	r3,r3,16
   a2efc:	39c00404 	addi	r7,r7,16
   a2f00:	1a3ffc15 	stw	r8,-16(r3)
   a2f04:	3a3ffd17 	ldw	r8,-12(r7)
   a2f08:	1a3ffd15 	stw	r8,-12(r3)
   a2f0c:	3a3ffe17 	ldw	r8,-8(r7)
   a2f10:	1a3ffe15 	stw	r8,-8(r3)
   a2f14:	3a3fff17 	ldw	r8,-4(r7)
   a2f18:	1a3fff15 	stw	r8,-4(r3)
   a2f1c:	18bff51e 	bne	r3,r2,a2ef4 <memcpy+0x90>
   a2f20:	52800044 	addi	r10,r10,1
   a2f24:	5014913a 	slli	r10,r10,4
   a2f28:	308003cc 	andi	r2,r6,15
   a2f2c:	010000c4 	movi	r4,3
   a2f30:	8287883a 	add	r3,r16,r10
   a2f34:	2a95883a 	add	r10,r5,r10
   a2f38:	2080182e 	bgeu	r4,r2,a2f9c <memcpy+0x138>
   a2f3c:	147fff04 	addi	r17,r2,-4
   a2f40:	8808d0ba 	srli	r4,r17,2
   a2f44:	1a400104 	addi	r9,r3,4
   a2f48:	180d883a 	mov	r6,r3
   a2f4c:	2105883a 	add	r2,r4,r4
   a2f50:	1085883a 	add	r2,r2,r2
   a2f54:	4893883a 	add	r9,r9,r2
   a2f58:	500f883a 	mov	r7,r10
   a2f5c:	3a000017 	ldw	r8,0(r7)
   a2f60:	31800104 	addi	r6,r6,4
   a2f64:	39c00104 	addi	r7,r7,4
   a2f68:	323fff15 	stw	r8,-4(r6)
   a2f6c:	327ffb1e 	bne	r6,r9,a2f5c <memcpy+0xf8>
   a2f70:	20800044 	addi	r2,r4,1
   a2f74:	1085883a 	add	r2,r2,r2
   a2f78:	1085883a 	add	r2,r2,r2
   a2f7c:	017fff04 	movi	r5,-4
   a2f80:	18a5883a 	add	r18,r3,r2
   a2f84:	50a7883a 	add	r19,r10,r2
   a2f88:	00a2e3c0 	call	a2e3c <__mulsi3>
   a2f8c:	1445883a 	add	r2,r2,r17
   a2f90:	980b883a 	mov	r5,r19
   a2f94:	9007883a 	mov	r3,r18
   a2f98:	003fc006 	br	a2e9c <memcpy+0x38>
   a2f9c:	500b883a 	mov	r5,r10
   a2fa0:	003fbe06 	br	a2e9c <memcpy+0x38>

000a2fa4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   a2fa4:	defff904 	addi	sp,sp,-28
   a2fa8:	dfc00615 	stw	ra,24(sp)
   a2fac:	df000515 	stw	fp,20(sp)
   a2fb0:	df000504 	addi	fp,sp,20
   a2fb4:	e13ffc15 	stw	r4,-16(fp)
   a2fb8:	e17ffd15 	stw	r5,-12(fp)
   a2fbc:	e1bffe15 	stw	r6,-8(fp)
   a2fc0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   a2fc4:	e0800217 	ldw	r2,8(fp)
   a2fc8:	d8800015 	stw	r2,0(sp)
   a2fcc:	e13ffc17 	ldw	r4,-16(fp)
   a2fd0:	e17ffd17 	ldw	r5,-12(fp)
   a2fd4:	e1bffe17 	ldw	r6,-8(fp)
   a2fd8:	e1ffff17 	ldw	r7,-4(fp)
   a2fdc:	00a317c0 	call	a317c <alt_iic_isr_register>
}  
   a2fe0:	e037883a 	mov	sp,fp
   a2fe4:	dfc00117 	ldw	ra,4(sp)
   a2fe8:	df000017 	ldw	fp,0(sp)
   a2fec:	dec00204 	addi	sp,sp,8
   a2ff0:	f800283a 	ret

000a2ff4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   a2ff4:	defff904 	addi	sp,sp,-28
   a2ff8:	df000615 	stw	fp,24(sp)
   a2ffc:	df000604 	addi	fp,sp,24
   a3000:	e13ffe15 	stw	r4,-8(fp)
   a3004:	e17fff15 	stw	r5,-4(fp)
   a3008:	e0bfff17 	ldw	r2,-4(fp)
   a300c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   a3010:	0005303a 	rdctl	r2,status
   a3014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   a3018:	e0fffb17 	ldw	r3,-20(fp)
   a301c:	00bfff84 	movi	r2,-2
   a3020:	1884703a 	and	r2,r3,r2
   a3024:	1001703a 	wrctl	status,r2
  
  return context;
   a3028:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   a302c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   a3030:	e0bffa17 	ldw	r2,-24(fp)
   a3034:	00c00044 	movi	r3,1
   a3038:	1884983a 	sll	r2,r3,r2
   a303c:	1007883a 	mov	r3,r2
   a3040:	008002b4 	movhi	r2,10
   a3044:	10924304 	addi	r2,r2,18700
   a3048:	10800017 	ldw	r2,0(r2)
   a304c:	1886b03a 	or	r3,r3,r2
   a3050:	008002b4 	movhi	r2,10
   a3054:	10924304 	addi	r2,r2,18700
   a3058:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   a305c:	008002b4 	movhi	r2,10
   a3060:	10924304 	addi	r2,r2,18700
   a3064:	10800017 	ldw	r2,0(r2)
   a3068:	100170fa 	wrctl	ienable,r2
   a306c:	e0bffc17 	ldw	r2,-16(fp)
   a3070:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   a3074:	e0bffd17 	ldw	r2,-12(fp)
   a3078:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   a307c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   a3080:	e037883a 	mov	sp,fp
   a3084:	df000017 	ldw	fp,0(sp)
   a3088:	dec00104 	addi	sp,sp,4
   a308c:	f800283a 	ret

000a3090 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   a3090:	defff904 	addi	sp,sp,-28
   a3094:	df000615 	stw	fp,24(sp)
   a3098:	df000604 	addi	fp,sp,24
   a309c:	e13ffe15 	stw	r4,-8(fp)
   a30a0:	e17fff15 	stw	r5,-4(fp)
   a30a4:	e0bfff17 	ldw	r2,-4(fp)
   a30a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   a30ac:	0005303a 	rdctl	r2,status
   a30b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   a30b4:	e0fffb17 	ldw	r3,-20(fp)
   a30b8:	00bfff84 	movi	r2,-2
   a30bc:	1884703a 	and	r2,r3,r2
   a30c0:	1001703a 	wrctl	status,r2
  
  return context;
   a30c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   a30c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   a30cc:	e0bffa17 	ldw	r2,-24(fp)
   a30d0:	00c00044 	movi	r3,1
   a30d4:	1884983a 	sll	r2,r3,r2
   a30d8:	0084303a 	nor	r2,zero,r2
   a30dc:	1007883a 	mov	r3,r2
   a30e0:	008002b4 	movhi	r2,10
   a30e4:	10924304 	addi	r2,r2,18700
   a30e8:	10800017 	ldw	r2,0(r2)
   a30ec:	1886703a 	and	r3,r3,r2
   a30f0:	008002b4 	movhi	r2,10
   a30f4:	10924304 	addi	r2,r2,18700
   a30f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   a30fc:	008002b4 	movhi	r2,10
   a3100:	10924304 	addi	r2,r2,18700
   a3104:	10800017 	ldw	r2,0(r2)
   a3108:	100170fa 	wrctl	ienable,r2
   a310c:	e0bffc17 	ldw	r2,-16(fp)
   a3110:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   a3114:	e0bffd17 	ldw	r2,-12(fp)
   a3118:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   a311c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   a3120:	e037883a 	mov	sp,fp
   a3124:	df000017 	ldw	fp,0(sp)
   a3128:	dec00104 	addi	sp,sp,4
   a312c:	f800283a 	ret

000a3130 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   a3130:	defffc04 	addi	sp,sp,-16
   a3134:	df000315 	stw	fp,12(sp)
   a3138:	df000304 	addi	fp,sp,12
   a313c:	e13ffe15 	stw	r4,-8(fp)
   a3140:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   a3144:	000530fa 	rdctl	r2,ienable
   a3148:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   a314c:	e0bfff17 	ldw	r2,-4(fp)
   a3150:	00c00044 	movi	r3,1
   a3154:	1884983a 	sll	r2,r3,r2
   a3158:	1007883a 	mov	r3,r2
   a315c:	e0bffd17 	ldw	r2,-12(fp)
   a3160:	1884703a 	and	r2,r3,r2
   a3164:	1004c03a 	cmpne	r2,r2,zero
   a3168:	10803fcc 	andi	r2,r2,255
}
   a316c:	e037883a 	mov	sp,fp
   a3170:	df000017 	ldw	fp,0(sp)
   a3174:	dec00104 	addi	sp,sp,4
   a3178:	f800283a 	ret

000a317c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   a317c:	defff504 	addi	sp,sp,-44
   a3180:	dfc00a15 	stw	ra,40(sp)
   a3184:	df000915 	stw	fp,36(sp)
   a3188:	df000904 	addi	fp,sp,36
   a318c:	e13ffc15 	stw	r4,-16(fp)
   a3190:	e17ffd15 	stw	r5,-12(fp)
   a3194:	e1bffe15 	stw	r6,-8(fp)
   a3198:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   a319c:	00bffa84 	movi	r2,-22
   a31a0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   a31a4:	e0bffd17 	ldw	r2,-12(fp)
   a31a8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   a31ac:	e0bff817 	ldw	r2,-32(fp)
   a31b0:	10800808 	cmpgei	r2,r2,32
   a31b4:	1000271e 	bne	r2,zero,a3254 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   a31b8:	0005303a 	rdctl	r2,status
   a31bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   a31c0:	e0fffa17 	ldw	r3,-24(fp)
   a31c4:	00bfff84 	movi	r2,-2
   a31c8:	1884703a 	and	r2,r3,r2
   a31cc:	1001703a 	wrctl	status,r2
  
  return context;
   a31d0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   a31d4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   a31d8:	00c002b4 	movhi	r3,10
   a31dc:	18d38504 	addi	r3,r3,19988
   a31e0:	e0bff817 	ldw	r2,-32(fp)
   a31e4:	100490fa 	slli	r2,r2,3
   a31e8:	1885883a 	add	r2,r3,r2
   a31ec:	e0fffe17 	ldw	r3,-8(fp)
   a31f0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   a31f4:	00c002b4 	movhi	r3,10
   a31f8:	18d38504 	addi	r3,r3,19988
   a31fc:	e0bff817 	ldw	r2,-32(fp)
   a3200:	100490fa 	slli	r2,r2,3
   a3204:	1885883a 	add	r2,r3,r2
   a3208:	10800104 	addi	r2,r2,4
   a320c:	e0ffff17 	ldw	r3,-4(fp)
   a3210:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   a3214:	e0bffe17 	ldw	r2,-8(fp)
   a3218:	10000526 	beq	r2,zero,a3230 <alt_iic_isr_register+0xb4>
   a321c:	e0bff817 	ldw	r2,-32(fp)
   a3220:	e13ffc17 	ldw	r4,-16(fp)
   a3224:	100b883a 	mov	r5,r2
   a3228:	00a2ff40 	call	a2ff4 <alt_ic_irq_enable>
   a322c:	00000406 	br	a3240 <alt_iic_isr_register+0xc4>
   a3230:	e0bff817 	ldw	r2,-32(fp)
   a3234:	e13ffc17 	ldw	r4,-16(fp)
   a3238:	100b883a 	mov	r5,r2
   a323c:	00a30900 	call	a3090 <alt_ic_irq_disable>
   a3240:	e0bff715 	stw	r2,-36(fp)
   a3244:	e0bff917 	ldw	r2,-28(fp)
   a3248:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   a324c:	e0bffb17 	ldw	r2,-20(fp)
   a3250:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   a3254:	e0bff717 	ldw	r2,-36(fp)
}
   a3258:	e037883a 	mov	sp,fp
   a325c:	dfc00117 	ldw	ra,4(sp)
   a3260:	df000017 	ldw	fp,0(sp)
   a3264:	dec00204 	addi	sp,sp,8
   a3268:	f800283a 	ret

000a326c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   a326c:	defffd04 	addi	sp,sp,-12
   a3270:	dfc00215 	stw	ra,8(sp)
   a3274:	df000115 	stw	fp,4(sp)
   a3278:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   a327c:	0009883a 	mov	r4,zero
   a3280:	00a32c80 	call	a32c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   a3284:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   a3288:	00a32fc0 	call	a32fc <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   a328c:	00a34640 	call	a3464 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   a3290:	010002b4 	movhi	r4,10
   a3294:	210d3004 	addi	r4,r4,13504
   a3298:	00a35bc0 	call	a35bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   a329c:	d1201a17 	ldw	r4,-32664(gp)
   a32a0:	d0e01b17 	ldw	r3,-32660(gp)
   a32a4:	d0a01c17 	ldw	r2,-32656(gp)
   a32a8:	180b883a 	mov	r5,r3
   a32ac:	100d883a 	mov	r6,r2
   a32b0:	00a06040 	call	a0604 <main>
   a32b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   a32b8:	01000044 	movi	r4,1
   a32bc:	00a336c0 	call	a336c <close>
  exit (result);
   a32c0:	e13fff17 	ldw	r4,-4(fp)
   a32c4:	00a35d00 	call	a35d0 <exit>

000a32c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   a32c8:	defffd04 	addi	sp,sp,-12
   a32cc:	dfc00215 	stw	ra,8(sp)
   a32d0:	df000115 	stw	fp,4(sp)
   a32d4:	df000104 	addi	fp,sp,4
   a32d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( PROC, PROC);
   a32dc:	00a359c0 	call	a359c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   a32e0:	00800044 	movi	r2,1
   a32e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   a32e8:	e037883a 	mov	sp,fp
   a32ec:	dfc00117 	ldw	ra,4(sp)
   a32f0:	df000017 	ldw	fp,0(sp)
   a32f4:	dec00204 	addi	sp,sp,8
   a32f8:	f800283a 	ret

000a32fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   a32fc:	deffff04 	addi	sp,sp,-4
   a3300:	df000015 	stw	fp,0(sp)
   a3304:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   a3308:	0001883a 	nop
}
   a330c:	e037883a 	mov	sp,fp
   a3310:	df000017 	ldw	fp,0(sp)
   a3314:	dec00104 	addi	sp,sp,4
   a3318:	f800283a 	ret

000a331c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   a331c:	defffe04 	addi	sp,sp,-8
   a3320:	dfc00115 	stw	ra,4(sp)
   a3324:	df000015 	stw	fp,0(sp)
   a3328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   a332c:	008002b4 	movhi	r2,10
   a3330:	10923004 	addi	r2,r2,18624
   a3334:	10800017 	ldw	r2,0(r2)
   a3338:	10000526 	beq	r2,zero,a3350 <alt_get_errno+0x34>
   a333c:	008002b4 	movhi	r2,10
   a3340:	10923004 	addi	r2,r2,18624
   a3344:	10800017 	ldw	r2,0(r2)
   a3348:	103ee83a 	callr	r2
   a334c:	00000206 	br	a3358 <alt_get_errno+0x3c>
   a3350:	008002b4 	movhi	r2,10
   a3354:	10924704 	addi	r2,r2,18716
}
   a3358:	e037883a 	mov	sp,fp
   a335c:	dfc00117 	ldw	ra,4(sp)
   a3360:	df000017 	ldw	fp,0(sp)
   a3364:	dec00204 	addi	sp,sp,8
   a3368:	f800283a 	ret

000a336c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   a336c:	defffb04 	addi	sp,sp,-20
   a3370:	dfc00415 	stw	ra,16(sp)
   a3374:	df000315 	stw	fp,12(sp)
   a3378:	df000304 	addi	fp,sp,12
   a337c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   a3380:	e0bfff17 	ldw	r2,-4(fp)
   a3384:	10000716 	blt	r2,zero,a33a4 <close+0x38>
   a3388:	e13fff17 	ldw	r4,-4(fp)
   a338c:	01400304 	movi	r5,12
   a3390:	00a2e3c0 	call	a2e3c <__mulsi3>
   a3394:	00c002b4 	movhi	r3,10
   a3398:	18d0ca04 	addi	r3,r3,17192
   a339c:	10c5883a 	add	r2,r2,r3
   a33a0:	00000106 	br	a33a8 <close+0x3c>
   a33a4:	0005883a 	mov	r2,zero
   a33a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   a33ac:	e0bffd17 	ldw	r2,-12(fp)
   a33b0:	10001826 	beq	r2,zero,a3414 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   a33b4:	e0bffd17 	ldw	r2,-12(fp)
   a33b8:	10800017 	ldw	r2,0(r2)
   a33bc:	10800417 	ldw	r2,16(r2)
   a33c0:	10000626 	beq	r2,zero,a33dc <close+0x70>
   a33c4:	e0bffd17 	ldw	r2,-12(fp)
   a33c8:	10800017 	ldw	r2,0(r2)
   a33cc:	10800417 	ldw	r2,16(r2)
   a33d0:	e13ffd17 	ldw	r4,-12(fp)
   a33d4:	103ee83a 	callr	r2
   a33d8:	00000106 	br	a33e0 <close+0x74>
   a33dc:	0005883a 	mov	r2,zero
   a33e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   a33e4:	e13fff17 	ldw	r4,-4(fp)
   a33e8:	00a351c0 	call	a351c <alt_release_fd>
    if (rval < 0)
   a33ec:	e0bffe17 	ldw	r2,-8(fp)
   a33f0:	1000060e 	bge	r2,zero,a340c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   a33f4:	00a331c0 	call	a331c <alt_get_errno>
   a33f8:	e0fffe17 	ldw	r3,-8(fp)
   a33fc:	00c7c83a 	sub	r3,zero,r3
   a3400:	10c00015 	stw	r3,0(r2)
      return -1;
   a3404:	00bfffc4 	movi	r2,-1
   a3408:	00000606 	br	a3424 <close+0xb8>
    }
    return 0;
   a340c:	0005883a 	mov	r2,zero
   a3410:	00000406 	br	a3424 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   a3414:	00a331c0 	call	a331c <alt_get_errno>
   a3418:	00c01444 	movi	r3,81
   a341c:	10c00015 	stw	r3,0(r2)
    return -1;
   a3420:	00bfffc4 	movi	r2,-1
  }
}
   a3424:	e037883a 	mov	sp,fp
   a3428:	dfc00117 	ldw	ra,4(sp)
   a342c:	df000017 	ldw	fp,0(sp)
   a3430:	dec00204 	addi	sp,sp,8
   a3434:	f800283a 	ret

000a3438 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   a3438:	defffc04 	addi	sp,sp,-16
   a343c:	df000315 	stw	fp,12(sp)
   a3440:	df000304 	addi	fp,sp,12
   a3444:	e13ffd15 	stw	r4,-12(fp)
   a3448:	e17ffe15 	stw	r5,-8(fp)
   a344c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   a3450:	e0bfff17 	ldw	r2,-4(fp)
}
   a3454:	e037883a 	mov	sp,fp
   a3458:	df000017 	ldw	fp,0(sp)
   a345c:	dec00104 	addi	sp,sp,4
   a3460:	f800283a 	ret

000a3464 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   a3464:	defffd04 	addi	sp,sp,-12
   a3468:	dfc00215 	stw	ra,8(sp)
   a346c:	df000115 	stw	fp,4(sp)
   a3470:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   a3474:	008002b4 	movhi	r2,10
   a3478:	108e4404 	addi	r2,r2,14608
   a347c:	e0bfff15 	stw	r2,-4(fp)
   a3480:	00000606 	br	a349c <_do_ctors+0x38>
        (*ctor) (); 
   a3484:	e0bfff17 	ldw	r2,-4(fp)
   a3488:	10800017 	ldw	r2,0(r2)
   a348c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   a3490:	e0bfff17 	ldw	r2,-4(fp)
   a3494:	10bfff04 	addi	r2,r2,-4
   a3498:	e0bfff15 	stw	r2,-4(fp)
   a349c:	e0ffff17 	ldw	r3,-4(fp)
   a34a0:	008002b4 	movhi	r2,10
   a34a4:	108e4504 	addi	r2,r2,14612
   a34a8:	18bff62e 	bgeu	r3,r2,a3484 <_do_ctors+0x20>
        (*ctor) (); 
}
   a34ac:	e037883a 	mov	sp,fp
   a34b0:	dfc00117 	ldw	ra,4(sp)
   a34b4:	df000017 	ldw	fp,0(sp)
   a34b8:	dec00204 	addi	sp,sp,8
   a34bc:	f800283a 	ret

000a34c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   a34c0:	defffd04 	addi	sp,sp,-12
   a34c4:	dfc00215 	stw	ra,8(sp)
   a34c8:	df000115 	stw	fp,4(sp)
   a34cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   a34d0:	008002b4 	movhi	r2,10
   a34d4:	108e4404 	addi	r2,r2,14608
   a34d8:	e0bfff15 	stw	r2,-4(fp)
   a34dc:	00000606 	br	a34f8 <_do_dtors+0x38>
        (*dtor) (); 
   a34e0:	e0bfff17 	ldw	r2,-4(fp)
   a34e4:	10800017 	ldw	r2,0(r2)
   a34e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   a34ec:	e0bfff17 	ldw	r2,-4(fp)
   a34f0:	10bfff04 	addi	r2,r2,-4
   a34f4:	e0bfff15 	stw	r2,-4(fp)
   a34f8:	e0ffff17 	ldw	r3,-4(fp)
   a34fc:	008002b4 	movhi	r2,10
   a3500:	108e4504 	addi	r2,r2,14612
   a3504:	18bff62e 	bgeu	r3,r2,a34e0 <_do_dtors+0x20>
        (*dtor) (); 
}
   a3508:	e037883a 	mov	sp,fp
   a350c:	dfc00117 	ldw	ra,4(sp)
   a3510:	df000017 	ldw	fp,0(sp)
   a3514:	dec00204 	addi	sp,sp,8
   a3518:	f800283a 	ret

000a351c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   a351c:	defffc04 	addi	sp,sp,-16
   a3520:	dfc00315 	stw	ra,12(sp)
   a3524:	df000215 	stw	fp,8(sp)
   a3528:	dc000115 	stw	r16,4(sp)
   a352c:	df000104 	addi	fp,sp,4
   a3530:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   a3534:	e0bfff17 	ldw	r2,-4(fp)
   a3538:	108000d0 	cmplti	r2,r2,3
   a353c:	1000111e 	bne	r2,zero,a3584 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   a3540:	040002b4 	movhi	r16,10
   a3544:	8410ca04 	addi	r16,r16,17192
   a3548:	e0bfff17 	ldw	r2,-4(fp)
   a354c:	1009883a 	mov	r4,r2
   a3550:	01400304 	movi	r5,12
   a3554:	00a2e3c0 	call	a2e3c <__mulsi3>
   a3558:	8085883a 	add	r2,r16,r2
   a355c:	10800204 	addi	r2,r2,8
   a3560:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   a3564:	040002b4 	movhi	r16,10
   a3568:	8410ca04 	addi	r16,r16,17192
   a356c:	e0bfff17 	ldw	r2,-4(fp)
   a3570:	1009883a 	mov	r4,r2
   a3574:	01400304 	movi	r5,12
   a3578:	00a2e3c0 	call	a2e3c <__mulsi3>
   a357c:	8085883a 	add	r2,r16,r2
   a3580:	10000015 	stw	zero,0(r2)
  }
}
   a3584:	e037883a 	mov	sp,fp
   a3588:	dfc00217 	ldw	ra,8(sp)
   a358c:	df000117 	ldw	fp,4(sp)
   a3590:	dc000017 	ldw	r16,0(sp)
   a3594:	dec00304 	addi	sp,sp,12
   a3598:	f800283a 	ret

000a359c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   a359c:	deffff04 	addi	sp,sp,-4
   a35a0:	df000015 	stw	fp,0(sp)
   a35a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   a35a8:	000170fa 	wrctl	ienable,zero
}
   a35ac:	e037883a 	mov	sp,fp
   a35b0:	df000017 	ldw	fp,0(sp)
   a35b4:	dec00104 	addi	sp,sp,4
   a35b8:	f800283a 	ret

000a35bc <atexit>:
   a35bc:	200b883a 	mov	r5,r4
   a35c0:	000d883a 	mov	r6,zero
   a35c4:	0009883a 	mov	r4,zero
   a35c8:	000f883a 	mov	r7,zero
   a35cc:	00a36081 	jmpi	a3608 <__register_exitproc>

000a35d0 <exit>:
   a35d0:	defffe04 	addi	sp,sp,-8
   a35d4:	000b883a 	mov	r5,zero
   a35d8:	dc000015 	stw	r16,0(sp)
   a35dc:	dfc00115 	stw	ra,4(sp)
   a35e0:	2021883a 	mov	r16,r4
   a35e4:	00a37380 	call	a3738 <__call_exitprocs>
   a35e8:	008002b4 	movhi	r2,10
   a35ec:	10923104 	addi	r2,r2,18628
   a35f0:	11000017 	ldw	r4,0(r2)
   a35f4:	20800f17 	ldw	r2,60(r4)
   a35f8:	10000126 	beq	r2,zero,a3600 <exit+0x30>
   a35fc:	103ee83a 	callr	r2
   a3600:	8009883a 	mov	r4,r16
   a3604:	00a38d80 	call	a38d8 <_exit>

000a3608 <__register_exitproc>:
   a3608:	defffa04 	addi	sp,sp,-24
   a360c:	008002b4 	movhi	r2,10
   a3610:	10923104 	addi	r2,r2,18628
   a3614:	dc000315 	stw	r16,12(sp)
   a3618:	14000017 	ldw	r16,0(r2)
   a361c:	dc400415 	stw	r17,16(sp)
   a3620:	dfc00515 	stw	ra,20(sp)
   a3624:	80805217 	ldw	r2,328(r16)
   a3628:	2023883a 	mov	r17,r4
   a362c:	10003e26 	beq	r2,zero,a3728 <__register_exitproc+0x120>
   a3630:	10c00117 	ldw	r3,4(r2)
   a3634:	020007c4 	movi	r8,31
   a3638:	40c0180e 	bge	r8,r3,a369c <__register_exitproc+0x94>
   a363c:	00800034 	movhi	r2,0
   a3640:	10800004 	addi	r2,r2,0
   a3644:	1000061e 	bne	r2,zero,a3660 <__register_exitproc+0x58>
   a3648:	00bfffc4 	movi	r2,-1
   a364c:	dfc00517 	ldw	ra,20(sp)
   a3650:	dc400417 	ldw	r17,16(sp)
   a3654:	dc000317 	ldw	r16,12(sp)
   a3658:	dec00604 	addi	sp,sp,24
   a365c:	f800283a 	ret
   a3660:	01006404 	movi	r4,400
   a3664:	d9400015 	stw	r5,0(sp)
   a3668:	d9800115 	stw	r6,4(sp)
   a366c:	d9c00215 	stw	r7,8(sp)
   a3670:	00000000 	call	0 <__alt_mem_VRAM_ctrl-0x40000>
   a3674:	d9400017 	ldw	r5,0(sp)
   a3678:	d9800117 	ldw	r6,4(sp)
   a367c:	d9c00217 	ldw	r7,8(sp)
   a3680:	103ff126 	beq	r2,zero,a3648 <__register_exitproc+0x40>
   a3684:	80c05217 	ldw	r3,328(r16)
   a3688:	10000115 	stw	zero,4(r2)
   a368c:	10c00015 	stw	r3,0(r2)
   a3690:	80805215 	stw	r2,328(r16)
   a3694:	10006215 	stw	zero,392(r2)
   a3698:	10006315 	stw	zero,396(r2)
   a369c:	10c00117 	ldw	r3,4(r2)
   a36a0:	88000d1e 	bne	r17,zero,a36d8 <__register_exitproc+0xd0>
   a36a4:	19000084 	addi	r4,r3,2
   a36a8:	2109883a 	add	r4,r4,r4
   a36ac:	18c00044 	addi	r3,r3,1
   a36b0:	2109883a 	add	r4,r4,r4
   a36b4:	1109883a 	add	r4,r2,r4
   a36b8:	10c00115 	stw	r3,4(r2)
   a36bc:	0005883a 	mov	r2,zero
   a36c0:	21400015 	stw	r5,0(r4)
   a36c4:	dfc00517 	ldw	ra,20(sp)
   a36c8:	dc400417 	ldw	r17,16(sp)
   a36cc:	dc000317 	ldw	r16,12(sp)
   a36d0:	dec00604 	addi	sp,sp,24
   a36d4:	f800283a 	ret
   a36d8:	02400044 	movi	r9,1
   a36dc:	12806217 	ldw	r10,392(r2)
   a36e0:	48d2983a 	sll	r9,r9,r3
   a36e4:	19000804 	addi	r4,r3,32
   a36e8:	18d1883a 	add	r8,r3,r3
   a36ec:	2109883a 	add	r4,r4,r4
   a36f0:	4211883a 	add	r8,r8,r8
   a36f4:	2109883a 	add	r4,r4,r4
   a36f8:	1109883a 	add	r4,r2,r4
   a36fc:	1211883a 	add	r8,r2,r8
   a3700:	5254b03a 	or	r10,r10,r9
   a3704:	21c02215 	stw	r7,136(r4)
   a3708:	41802215 	stw	r6,136(r8)
   a370c:	12806215 	stw	r10,392(r2)
   a3710:	01000084 	movi	r4,2
   a3714:	893fe31e 	bne	r17,r4,a36a4 <__register_exitproc+0x9c>
   a3718:	11006317 	ldw	r4,396(r2)
   a371c:	2252b03a 	or	r9,r4,r9
   a3720:	12406315 	stw	r9,396(r2)
   a3724:	003fdf06 	br	a36a4 <__register_exitproc+0x9c>
   a3728:	008002b4 	movhi	r2,10
   a372c:	1093c504 	addi	r2,r2,20244
   a3730:	80805215 	stw	r2,328(r16)
   a3734:	003fbe06 	br	a3630 <__register_exitproc+0x28>

000a3738 <__call_exitprocs>:
   a3738:	008002b4 	movhi	r2,10
   a373c:	10923104 	addi	r2,r2,18628
   a3740:	10800017 	ldw	r2,0(r2)
   a3744:	defff304 	addi	sp,sp,-52
   a3748:	df000b15 	stw	fp,44(sp)
   a374c:	d8800015 	stw	r2,0(sp)
   a3750:	10805204 	addi	r2,r2,328
   a3754:	dd400815 	stw	r21,32(sp)
   a3758:	dfc00c15 	stw	ra,48(sp)
   a375c:	ddc00a15 	stw	r23,40(sp)
   a3760:	dd800915 	stw	r22,36(sp)
   a3764:	dd000715 	stw	r20,28(sp)
   a3768:	dcc00615 	stw	r19,24(sp)
   a376c:	dc800515 	stw	r18,20(sp)
   a3770:	dc400415 	stw	r17,16(sp)
   a3774:	dc000315 	stw	r16,12(sp)
   a3778:	d9000115 	stw	r4,4(sp)
   a377c:	2839883a 	mov	fp,r5
   a3780:	d8800215 	stw	r2,8(sp)
   a3784:	057fffc4 	movi	r21,-1
   a3788:	d8800017 	ldw	r2,0(sp)
   a378c:	ddc00217 	ldw	r23,8(sp)
   a3790:	14805217 	ldw	r18,328(r2)
   a3794:	90001726 	beq	r18,zero,a37f4 <__call_exitprocs+0xbc>
   a3798:	94400117 	ldw	r17,4(r18)
   a379c:	8c3fffc4 	addi	r16,r17,-1
   a37a0:	80001116 	blt	r16,zero,a37e8 <__call_exitprocs+0xb0>
   a37a4:	8c400044 	addi	r17,r17,1
   a37a8:	8427883a 	add	r19,r16,r16
   a37ac:	8c63883a 	add	r17,r17,r17
   a37b0:	95802204 	addi	r22,r18,136
   a37b4:	9ce7883a 	add	r19,r19,r19
   a37b8:	8c63883a 	add	r17,r17,r17
   a37bc:	b4e7883a 	add	r19,r22,r19
   a37c0:	9463883a 	add	r17,r18,r17
   a37c4:	e0001726 	beq	fp,zero,a3824 <__call_exitprocs+0xec>
   a37c8:	8c87c83a 	sub	r3,r17,r18
   a37cc:	b0c7883a 	add	r3,r22,r3
   a37d0:	18c01e17 	ldw	r3,120(r3)
   a37d4:	1f001326 	beq	r3,fp,a3824 <__call_exitprocs+0xec>
   a37d8:	843fffc4 	addi	r16,r16,-1
   a37dc:	9cffff04 	addi	r19,r19,-4
   a37e0:	8c7fff04 	addi	r17,r17,-4
   a37e4:	857ff71e 	bne	r16,r21,a37c4 <__call_exitprocs+0x8c>
   a37e8:	00800034 	movhi	r2,0
   a37ec:	10800004 	addi	r2,r2,0
   a37f0:	10002a1e 	bne	r2,zero,a389c <__call_exitprocs+0x164>
   a37f4:	dfc00c17 	ldw	ra,48(sp)
   a37f8:	df000b17 	ldw	fp,44(sp)
   a37fc:	ddc00a17 	ldw	r23,40(sp)
   a3800:	dd800917 	ldw	r22,36(sp)
   a3804:	dd400817 	ldw	r21,32(sp)
   a3808:	dd000717 	ldw	r20,28(sp)
   a380c:	dcc00617 	ldw	r19,24(sp)
   a3810:	dc800517 	ldw	r18,20(sp)
   a3814:	dc400417 	ldw	r17,16(sp)
   a3818:	dc000317 	ldw	r16,12(sp)
   a381c:	dec00d04 	addi	sp,sp,52
   a3820:	f800283a 	ret
   a3824:	91000117 	ldw	r4,4(r18)
   a3828:	88c00017 	ldw	r3,0(r17)
   a382c:	213fffc4 	addi	r4,r4,-1
   a3830:	24001526 	beq	r4,r16,a3888 <__call_exitprocs+0x150>
   a3834:	88000015 	stw	zero,0(r17)
   a3838:	183fe726 	beq	r3,zero,a37d8 <__call_exitprocs+0xa0>
   a383c:	00800044 	movi	r2,1
   a3840:	1408983a 	sll	r4,r2,r16
   a3844:	91406217 	ldw	r5,392(r18)
   a3848:	95000117 	ldw	r20,4(r18)
   a384c:	214a703a 	and	r5,r4,r5
   a3850:	28000b26 	beq	r5,zero,a3880 <__call_exitprocs+0x148>
   a3854:	91406317 	ldw	r5,396(r18)
   a3858:	2148703a 	and	r4,r4,r5
   a385c:	20000c1e 	bne	r4,zero,a3890 <__call_exitprocs+0x158>
   a3860:	99400017 	ldw	r5,0(r19)
   a3864:	d9000117 	ldw	r4,4(sp)
   a3868:	183ee83a 	callr	r3
   a386c:	90c00117 	ldw	r3,4(r18)
   a3870:	1d3fc51e 	bne	r3,r20,a3788 <__call_exitprocs+0x50>
   a3874:	b8c00017 	ldw	r3,0(r23)
   a3878:	1cbfd726 	beq	r3,r18,a37d8 <__call_exitprocs+0xa0>
   a387c:	003fc206 	br	a3788 <__call_exitprocs+0x50>
   a3880:	183ee83a 	callr	r3
   a3884:	003ff906 	br	a386c <__call_exitprocs+0x134>
   a3888:	94000115 	stw	r16,4(r18)
   a388c:	003fea06 	br	a3838 <__call_exitprocs+0x100>
   a3890:	99000017 	ldw	r4,0(r19)
   a3894:	183ee83a 	callr	r3
   a3898:	003ff406 	br	a386c <__call_exitprocs+0x134>
   a389c:	90c00117 	ldw	r3,4(r18)
   a38a0:	1800071e 	bne	r3,zero,a38c0 <__call_exitprocs+0x188>
   a38a4:	90c00017 	ldw	r3,0(r18)
   a38a8:	18000926 	beq	r3,zero,a38d0 <__call_exitprocs+0x198>
   a38ac:	9009883a 	mov	r4,r18
   a38b0:	b8c00015 	stw	r3,0(r23)
   a38b4:	00000000 	call	0 <__alt_mem_VRAM_ctrl-0x40000>
   a38b8:	bc800017 	ldw	r18,0(r23)
   a38bc:	003fb506 	br	a3794 <__call_exitprocs+0x5c>
   a38c0:	90c00017 	ldw	r3,0(r18)
   a38c4:	902f883a 	mov	r23,r18
   a38c8:	1825883a 	mov	r18,r3
   a38cc:	003fb106 	br	a3794 <__call_exitprocs+0x5c>
   a38d0:	0007883a 	mov	r3,zero
   a38d4:	003ffb06 	br	a38c4 <__call_exitprocs+0x18c>

000a38d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   a38d8:	defffc04 	addi	sp,sp,-16
   a38dc:	df000315 	stw	fp,12(sp)
   a38e0:	df000304 	addi	fp,sp,12
   a38e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   a38e8:	0001883a 	nop
   a38ec:	e0bfff17 	ldw	r2,-4(fp)
   a38f0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   a38f4:	e0bffd17 	ldw	r2,-12(fp)
   a38f8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   a38fc:	e0bffe17 	ldw	r2,-8(fp)
   a3900:	10000226 	beq	r2,zero,a390c <_exit+0x34>
    ALT_SIM_FAIL();
   a3904:	002af070 	cmpltui	zero,zero,43969
   a3908:	00000106 	br	a3910 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   a390c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   a3910:	003fff06 	br	a3910 <_exit+0x38>
