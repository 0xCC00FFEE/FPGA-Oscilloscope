
osc.elf:     file format elf32-littlenios2
osc.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00120000

Program Header:
    LOAD off    0x00001000 vaddr 0x00120000 paddr 0x00120000 align 2**12
         filesz 0x00004f9c memsz 0x00005774 flags rwx
    LOAD off    0x00006000 vaddr 0x00148000 paddr 0x00148000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00006020 vaddr 0x00148020 paddr 0x00148020 align 2**12
         filesz 0x00000198 memsz 0x00000198 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00148000  00148000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00148020  00148020  00006020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003fc0  00120000  00120000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009ec  00123fc0  00123fc0  00004fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  001249b0  001249b0  000059b0  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000007d8  00124f9c  00124f9c  00005f9c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000004e0  00000000  00000000  000061e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005fd5  00000000  00000000  000066c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001e46  00000000  00000000  0000c695  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002155  00000000  00000000  0000e4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000cac  00000000  00000000  00010630  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000163c  00000000  00000000  000112dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000019bf  00000000  00000000  00012918  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000142d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b0  00000000  00000000  000142e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00016a79  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00016a7c  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00016a80  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00016a81  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00016a82  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00016a86  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00016a8a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  00016a8e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  00016a92  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00016a96  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00016a9a  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000036  00000000  00000000  00016a9e  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00082337  00000000  00000000  00016ad4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00148000 l    d  .entry	00000000 .entry
00148020 l    d  .exceptions	00000000 .exceptions
00120000 l    d  .text	00000000 .text
00123fc0 l    d  .rodata	00000000 .rodata
001249b0 l    d  .rwdata	00000000 .rwdata
00124f9c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../osc_bsp//obj/HAL/src/crt0.o
00120034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00148094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 char712.c
00000000 l    df *ABS*	00000000 keyproc.c
00000000 l    df *ABS*	00000000 lcdout.c
00000000 l    df *ABS*	00000000 mainloop.c
00000000 l    df *ABS*	00000000 menu.c
00000000 l    df *ABS*	00000000 menuact.c
00000000 l    df *ABS*	00000000 stubfncs.c
00000000 l    df *ABS*	00000000 testcode.c
00000000 l    df *ABS*	00000000 tracutil.c
00000000 l    df *ABS*	00000000 obj/default/keyint.o
000fffff l       *ABS*	00000000 SWITCH_ALL
00000008 l       *ABS*	00000000 PIO_IRQ_MASK
0000000c l       *ABS*	00000000 PIO_EDGE_CAP
001249c0 l       .rwdata	00000000 adc_speed
00122b10 l     F .text	00000000 key_handler
00122af8 l       .text	00000000 key_int_installer_done
001249b0 l       .rwdata	00000000 key_press
00122b54 l       .text	00000000 loop_keys
00122b68 l       .text	00000000 key_lookup
00122ce0 l       .text	00000000 key_map
001249b1 l       .rwdata	00000000 key_value
00122c08 l       .text	00000000 inc_speed
00122bd4 l       .text	00000000 dec_speed
00122b94 l       .text	00000000 key_lookup_cont
00122bbc l       .text	00000000 key_hndler_done
00122c38 l       .text	00000000 set_speed_2
00122bf4 l       .text	00000000 dec_speed_cont
00122c30 l       .text	00000000 set_speed_1
00122c1c l       .text	00000000 inc_speed_cont
00122c64 l       .text	00000000 key_available_done
00122cc8 l       .text	00000000 getkey_done
00000000 l    df *ABS*	00000000 obj/default/testadc.o
000fffff l       *ABS*	00000000 SWITCH_ALL
00000008 l       *ABS*	00000000 PIO_IRQ_MASK
0000000c l       *ABS*	00000000 PIO_EDGE_CAP
00122ec4 l       .text	00000000 adc_int_installer_done
00123094 l       .text	00000000 adc_int_handler_done
00122f48 l       .text	00000000 adc_int_handler_clear_front
00122fc0 l       .text	00000000 adc_int_handler_loop
00123048 l       .text	00000000 adc_int_handler_draw_col
0012305c l       .text	00000000 adc_int_handler_draw_col_loop
001231bc l       .text	00000000 adc_int_handler_draw_vaxis
001231b0 l       .text	00000000 adc_int_handler_draw_thresh
001231a4 l       .text	00000000 adc_int_handler_draw_pt
00123078 l       .text	00000000 adc_int_handler_draw_col_loop_cont
00000000 l    df *ABS*	00000000 obj/default/testdisp.o
001231d8 l       .text	00000000 disp
00123200 l       .text	00000000 draw_top
0012320c l       .text	00000000 draw_bot
001231e4 l       .text	00000000 disp_cont
00123248 l       .text	00000000 draw_border
001232f0 l       .text	00000000 disp_reset
00123218 l       .text	00000000 draw_red
00123224 l       .text	00000000 draw_yellow
00123230 l       .text	00000000 draw_green
0012323c l       .text	00000000 draw_blue
00123254 l       .text	00000000 draw_border_top
00123264 l       .text	00000000 dbt_loop
00123278 l       .text	00000000 draw_border_bot
00123290 l       .text	00000000 dbb_loop
001232a4 l       .text	00000000 draw_border_left
001232b0 l       .text	00000000 dbl_loop
001232c4 l       .text	00000000 draw_border_right
001232dc l       .text	00000000 dbr_loop
001232fc l       .text	00000000 test_disp_done
00000000 l    df *ABS*	00000000 obj/default/testvram.o
0012335c l     F .text	00000000 write_all
00123388 l     F .text	00000000 read_all
0012333c l       .text	00000000 test_vram_fail
00123344 l       .text	00000000 test_vram_done
00123364 l       .text	00000000 write_all_loop
00123384 l       .text	00000000 write_all_done
0012337c l       .text	00000000 write_all_reset_cnt
00123390 l       .text	00000000 read_all_loop
001233b4 l       .text	00000000 read_all_done
001233ac l       .text	00000000 read_all_reset_cnt
00000000 l    df *ABS*	00000000 lib2-divmod.c
001233b8 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
001239c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00123ae4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00124b78 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00123918 g     F .text	0000005c alt_main
001254e4 g     O .bss	00000100 alt_irq
001213dc g     F .text	00000048 trg_delay_down
00120ea8 g     F .text	00000084 display_scale
00124fbc g     O .bss	00000004 cur_scale
00121c80 g     F .text	00000028 trace_rearm
001219ec g     F .text	00000020 sample_done
00120c34 g     F .text	00000020 get_trigger_mode
001245f8 g     O .rodata	00000070 menu
00120ba8 g     F .text	00000020 no_menu_action
001219a4 g     F .text	00000024 set_delay
00000000  w      *UND*	00000000 __errno
00148000 g     F .entry	00000000 __reset
00120038 g     F .text	00000024 no_action
00124fec g     O .bss	00000004 errno
00124fa4 g     O .bss	00000004 trigger_mode
0012013c g     F .text	00000030 menu_right
001210f8 g     F .text	00000048 set_trg_level
00124fe4 g     O .bss	00000004 alt_argv
00120674 g     F .text	00000064 init_menu
0012cf78 g       *ABS*	00000000 _gp
00121be8 g     F .text	00000020 is_sampling
00120000 g       *ABS*	00000000 __alt_mem_RAM_ctrl
0012010c g     F .text	00000030 menu_left
001249f8 g     O .rwdata	00000180 alt_fd_list
00123510 g     F .text	00000140 memcpy
00121190 g     F .text	00000054 trg_level_up
00123fc0 g       *ABS*	00000000 __DTOR_END__
00120bf4 g     F .text	00000040 set_trigger_mode
0012192c g     F .text	0000002c plot_pixel
00000000  w      *UND*	00000000 malloc
001234d8 g     F .text	00000008 __udivsi3
00122480 g     F .text	00000120 restore_trace
00121774 g     F .text	00000198 cvt_num_field
00124fc0 g     O .bss	00000004 trace_status
001223a8 g     F .text	000000d8 set_save_area
001219c8 g     F .text	00000024 start_sample
00120de0 g     F .text	00000064 scale_down
00124f8c g     O .rwdata	00000004 alt_max_fd
00122c44 g     F .text	00000000 key_available
00124f9c g     O .bss	00000004 menu_entry
00130000 g       *ABS*	00000000 __alt_mem_ROM_ctrl
00121090 g     F .text	00000068 display_sweep
00121cd4 g     F .text	000003f8 set_display_scale
001225a0 g     F .text	00000048 do_trace
00124f94 g     O .rwdata	00000004 _global_impure_ptr
00125774 g       *ABS*	00000000 __bss_end
00123828 g     F .text	000000f0 alt_iic_isr_register
00121b4c g     F .text	00000064 init_trace
001237dc g     F .text	0000004c alt_ic_irq_enabled
0012139c g     F .text	00000040 set_trg_delay
001200dc g     F .text	00000030 menu_down
00124fdc g     O .bss	00000004 alt_irq_active
00121a0c g     F .text	00000140 get_test_sample
001480ec g     F .exceptions	000000cc alt_irq_handler
001249d0 g     O .rwdata	00000028 alt_dev_null
0012016c g     F .text	000000a8 clear_region
00123fc0 g     O .rodata	00000600 char_patterns
00120894 g     F .text	0000006c previous_entry
00124f84 g     O .rwdata	00000008 alt_dev_list
00121bb0 g     F .text	00000038 set_mode
00120ad8 g     F .text	000000d0 display_entry
00124fc4 g     O .bss	00000004 saved_end_y
001234e0 g     F .text	00000008 __umodsi3
00120d1c g     F .text	00000084 display_mode
00124fa0 g     O .bss	00000004 menu_display
00125774 g       *ABS*	00000000 end
00120bc8 g     F .text	0000002c no_display
001211e4 g     F .text	000000a4 display_trg_level
0012100c g     F .text	00000084 sweep_up
001207c8 g     F .text	0000005c reset_menu
001206d8 g     F .text	00000038 clear_menu
00121424 g     F .text	0000004c trg_delay_up
00123fc0 g       *ABS*	00000000 __CTOR_LIST__
00130000 g       *ABS*	00000000 __alt_stack_pointer
00122a98 g     F .text	00000000 key_int_installer
00123de4 g     F .text	000001a0 __call_exitprocs
00120000 g     F .text	00000038 _start
00124fa8 g     O .bss	00000004 level
00124fc8 g     O .bss	00000004 saved_pos_y
001212d0 g     F .text	00000054 trg_slope_toggle
001239a8 g     F .text	00000020 alt_sys_init
00123cb4 g     F .text	00000130 __register_exitproc
001234e8 g     F .text	00000028 __mulsi3
00124fcc g     O .bss	00000004 sample_size
001246f0 g     O .rodata	00000088 sweep_rates
0012190c g     F .text	00000020 clear_display
00124fd0 g     O .bss	00000004 saved_end_x
00122edc g     F .text	00000000 adc_int_handler
00125774 g       *ABS*	00000000 __alt_stack_base
00122294 g     F .text	00000114 restore_menu_trace
00121ca8 g     F .text	0000002c set_trace_size
001204e4 g     F .text	00000098 plot_string
00124f9c g       *ABS*	00000000 __bss_start
00124fd4 g     O .bss	00000004 saved_pos_x
0012057c g     F .text	0000001c main
00124fe8 g     O .bss	00000004 alt_envp
00121470 g     F .text	000000d4 adjust_trg_delay
001225e8 g     F .text	000004b0 plot_trace
001255e4 g     O .bss	00000190 _atexit0
00120f8c g     F .text	00000080 sweep_down
00124f90 g     O .rwdata	00000004 alt_errno
00124fac g     O .bss	00000004 sweep
00120c54 g     F .text	00000064 mode_down
00122cf4 g     F .text	00000000 adc_int_installer
00121958 g     F .text	00000024 set_sample_rate
0012342c g     F .text	00000050 __divsi3
0012197c g     F .text	00000028 set_trigger
00123fc0 g       *ABS*	00000000 __CTOR_END__
00148000 g       *ABS*	00000000 __alt_mem_ONCHIP_mem
00120790 g     F .text	00000038 refresh_menu
00123fc0 g       *ABS*	00000000 __DTOR_LIST__
001200ac g     F .text	00000030 menu_up
001209ec g     F .text	000000ec menu_entry_right
00124fb0 g     O .bss	00000004 delay
00123974 g     F .text	00000034 alt_irq_init
00123bc8 g     F .text	00000080 alt_release_fd
00123c68 g     F .text	00000014 atexit
00121c40 g     F .text	00000040 trace_done
00124f98 g     O .rwdata	00000004 _impure_ptr
00124fe0 g     O .bss	00000004 alt_argc
00121288 g     F .text	00000048 set_trg_slope
00121140 g     F .text	00000050 trg_level_down
00123b6c g     F .text	0000005c _do_dtors
00122c7c g     F .text	00000000 getkey
0012036c g     F .text	00000178 plot_char
00124ff0 g     O .bss	000002a0 saved_menu
00148020 g       .exceptions	00000000 alt_irq_entry
00120900 g     F .text	000000ec menu_entry_left
00124f7c g     O .rwdata	00000008 alt_fs_list
001220cc g     F .text	000001c8 clear_saved_areas
00120214 g     F .text	000000ac plot_hline
00120da0 g     F .text	00000040 set_scale
00123650 g     F .text	00000050 alt_ic_isr_register
00125290 g     O .bss	000000b0 saved_axis_y
00123300 g     F .text	00000000 test_vram
00124f9c g       *ABS*	00000000 _edata
00125774 g       *ABS*	00000000 _end
00120cb8 g     F .text	00000064 mode_up
0012373c g     F .text	000000a0 alt_ic_irq_disable
00125340 g     O .bss	000000b4 saved_axis_x
00123c48 g     F .text	00000020 altera_nios2_qsys_irq_init
00123c7c g     F .text	00000038 exit
00121544 g     F .text	00000230 display_trg_delay
0012347c g     F .text	0000005c __modsi3
001231c8 g     F .text	00000000 test_disp
00130000 g       *ABS*	00000000 __alt_data_end
00148020 g     F .exceptions	00000000 alt_exception
00121324 g     F .text	00000078 display_trg_slope
001253f4 g     O .bss	000000f0 saved_area
00124fd8 g     O .bss	00000004 sampling
00123f84 g     F .text	0000003c _exit
00080000 g       *ABS*	00000000 __alt_mem_VRAM_ctrl
00124fb4 g     O .bss	00000004 scale
00120598 g     F .text	000000dc key_lookup
00124f78 g     O .rwdata	00000004 alt_priority_mask
001236a0 g     F .text	0000009c alt_ic_irq_enable
001202c0 g     F .text	000000ac plot_vline
00120710 g     F .text	00000080 display_menu
00123b10 g     F .text	0000005c _do_ctors
00120824 g     F .text	00000070 next_entry
00123a18 g     F .text	000000cc close
00121c08 g     F .text	00000038 trace_rdy
00124fb8 g     O .bss	00000004 slope
00120f2c g     F .text	00000060 set_sweep
00120e44 g     F .text	00000064 scale_up
0012005c g     F .text	00000050 menu_key
00000000  w      *UND*	00000000 free



Disassembly of section .exceptions:

00148020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  148020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  148024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  148028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  14802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  148030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  148034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  148038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  14803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  148040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  148044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  148048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  14804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  148050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  148054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  148058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  14805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  148060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  148064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  148068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  14806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  148070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  148074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  148078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  14807c:	10000326 	beq	r2,zero,14808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  148080:	20000226 	beq	r4,zero,14808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  148084:	01480ec0 	call	1480ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  148088:	00000306 	br	148098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  14808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  148090:	e8bfff17 	ldw	r2,-4(ea)

00148094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  148094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  148098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  14809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1480a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1480a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1480a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1480ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1480b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1480b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1480b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1480bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1480c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1480c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1480c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1480cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1480d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1480d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1480d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1480dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1480e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1480e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1480e8:	ef80083a 	eret

001480ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1480ec:	defff904 	addi	sp,sp,-28
  1480f0:	dfc00615 	stw	ra,24(sp)
  1480f4:	df000515 	stw	fp,20(sp)
  1480f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1480fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  148100:	0005313a 	rdctl	r2,ipending
  148104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  148108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  14810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  148110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  148114:	00800044 	movi	r2,1
  148118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  14811c:	e0fffb17 	ldw	r3,-20(fp)
  148120:	e0bffc17 	ldw	r2,-16(fp)
  148124:	1884703a 	and	r2,r3,r2
  148128:	10001726 	beq	r2,zero,148188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  14812c:	00c004b4 	movhi	r3,18
  148130:	18d53904 	addi	r3,r3,21732
  148134:	e0bffd17 	ldw	r2,-12(fp)
  148138:	100490fa 	slli	r2,r2,3
  14813c:	1885883a 	add	r2,r3,r2
  148140:	10c00017 	ldw	r3,0(r2)
  148144:	010004b4 	movhi	r4,18
  148148:	21153904 	addi	r4,r4,21732
  14814c:	e0bffd17 	ldw	r2,-12(fp)
  148150:	100490fa 	slli	r2,r2,3
  148154:	2085883a 	add	r2,r4,r2
  148158:	10800104 	addi	r2,r2,4
  14815c:	10800017 	ldw	r2,0(r2)
  148160:	1009883a 	mov	r4,r2
  148164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  148168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  14816c:	0005313a 	rdctl	r2,ipending
  148170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  148174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  148178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  14817c:	e0bffb17 	ldw	r2,-20(fp)
  148180:	103fe31e 	bne	r2,zero,148110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  148184:	00000706 	br	1481a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  148188:	e0bffc17 	ldw	r2,-16(fp)
  14818c:	1085883a 	add	r2,r2,r2
  148190:	e0bffc15 	stw	r2,-16(fp)
      i++;
  148194:	e0bffd17 	ldw	r2,-12(fp)
  148198:	10800044 	addi	r2,r2,1
  14819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1481a0:	003fde06 	br	14811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  1481a4:	e037883a 	mov	sp,fp
  1481a8:	dfc00117 	ldw	ra,4(sp)
  1481ac:	df000017 	ldw	fp,0(sp)
  1481b0:	dec00204 	addi	sp,sp,8
  1481b4:	f800283a 	ret

Disassembly of section .text:

00120000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  120000:	06c004f4 	movhi	sp,19
    ori sp, sp, %lo(__alt_stack_pointer)
  120004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  120008:	068004b4 	movhi	gp,18
    ori gp, gp, %lo(_gp)
  12000c:	d6b3de14 	ori	gp,gp,53112
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  120010:	008004b4 	movhi	r2,18
    ori r2, r2, %lo(__bss_start)
  120014:	1093e714 	ori	r2,r2,20380

    movhi r3, %hi(__bss_end)
  120018:	00c004b4 	movhi	r3,18
    ori r3, r3, %lo(__bss_end)
  12001c:	18d5dd14 	ori	r3,r3,22388

    beq r2, r3, 1f
  120020:	10c00326 	beq	r2,r3,120030 <_start+0x30>

0:
    stw zero, (r2)
  120024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  120028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  12002c:	10fffd36 	bltu	r2,r3,120024 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  120030:	01239180 	call	123918 <alt_main>

00120034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  120034:	003fff06 	br	120034 <alt_after_alt_main>

00120038 <no_action>:
   Last Modified:    Mar. 8, 1994

*/

enum status  no_action(enum status cur_state)
{
  120038:	defffe04 	addi	sp,sp,-8
  12003c:	df000115 	stw	fp,4(sp)
  120040:	df000104 	addi	fp,sp,4
  120044:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* return the current state */
    return  cur_state;
  120048:	e0bfff17 	ldw	r2,-4(fp)

}
  12004c:	e037883a 	mov	sp,fp
  120050:	df000017 	ldw	fp,0(sp)
  120054:	dec00104 	addi	sp,sp,4
  120058:	f800283a 	ret

0012005c <menu_key>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_key(enum status cur_state)
{
  12005c:	defffd04 	addi	sp,sp,-12
  120060:	dfc00215 	stw	ra,8(sp)
  120064:	df000115 	stw	fp,4(sp)
  120068:	df000104 	addi	fp,sp,4
  12006c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* check if need to turn the menu on or off */
    if (cur_state == MENU_ON)
  120070:	e0bfff17 	ldw	r2,-4(fp)
  120074:	1000021e 	bne	r2,zero,120080 <menu_key+0x24>
        /* currently the menu is on, turn it off */
	clear_menu();
  120078:	01206d80 	call	1206d8 <clear_menu>
  12007c:	00000106 	br	120084 <menu_key+0x28>
    else
        /* currently the menu is off, turn it on */
	display_menu();
  120080:	01207100 	call	120710 <display_menu>


    /* all done, return the "opposite" of the current state */
    if (cur_state == MENU_ON)
  120084:	e0bfff17 	ldw	r2,-4(fp)
  120088:	1000021e 	bne	r2,zero,120094 <menu_key+0x38>
        /* state was MENU_ON, change it to MENU_OFF */
        return  MENU_OFF;
  12008c:	00800044 	movi	r2,1
  120090:	00000106 	br	120098 <menu_key+0x3c>
    else
        /* state was MENU_OFF, change it to MENU_ON */
        return  MENU_ON;
  120094:	0005883a 	mov	r2,zero

}
  120098:	e037883a 	mov	sp,fp
  12009c:	dfc00117 	ldw	ra,4(sp)
  1200a0:	df000017 	ldw	fp,0(sp)
  1200a4:	dec00204 	addi	sp,sp,8
  1200a8:	f800283a 	ret

001200ac <menu_up>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_up(enum status cur_state)
{
  1200ac:	defffd04 	addi	sp,sp,-12
  1200b0:	dfc00215 	stw	ra,8(sp)
  1200b4:	df000115 	stw	fp,4(sp)
  1200b8:	df000104 	addi	fp,sp,4
  1200bc:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the previous menu entry */
    previous_entry();
  1200c0:	01208940 	call	120894 <previous_entry>


    /* return the current state */
    return  cur_state;
  1200c4:	e0bfff17 	ldw	r2,-4(fp)

}
  1200c8:	e037883a 	mov	sp,fp
  1200cc:	dfc00117 	ldw	ra,4(sp)
  1200d0:	df000017 	ldw	fp,0(sp)
  1200d4:	dec00204 	addi	sp,sp,8
  1200d8:	f800283a 	ret

001200dc <menu_down>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_down(enum status cur_state)
{
  1200dc:	defffd04 	addi	sp,sp,-12
  1200e0:	dfc00215 	stw	ra,8(sp)
  1200e4:	df000115 	stw	fp,4(sp)
  1200e8:	df000104 	addi	fp,sp,4
  1200ec:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the next menu entry */
    next_entry();
  1200f0:	01208240 	call	120824 <next_entry>


    /* return the current state */
    return  cur_state;
  1200f4:	e0bfff17 	ldw	r2,-4(fp)

}
  1200f8:	e037883a 	mov	sp,fp
  1200fc:	dfc00117 	ldw	ra,4(sp)
  120100:	df000017 	ldw	fp,0(sp)
  120104:	dec00204 	addi	sp,sp,8
  120108:	f800283a 	ret

0012010c <menu_left>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_left(enum status cur_state)
{
  12010c:	defffd04 	addi	sp,sp,-12
  120110:	dfc00215 	stw	ra,8(sp)
  120114:	df000115 	stw	fp,4(sp)
  120118:	df000104 	addi	fp,sp,4
  12011c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Left> key function for the current menu entry */
    menu_entry_left();
  120120:	01209000 	call	120900 <menu_entry_left>


    /* return the current state */
    return  cur_state;
  120124:	e0bfff17 	ldw	r2,-4(fp)

}
  120128:	e037883a 	mov	sp,fp
  12012c:	dfc00117 	ldw	ra,4(sp)
  120130:	df000017 	ldw	fp,0(sp)
  120134:	dec00204 	addi	sp,sp,8
  120138:	f800283a 	ret

0012013c <menu_right>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_right(enum status cur_state)
{
  12013c:	defffd04 	addi	sp,sp,-12
  120140:	dfc00215 	stw	ra,8(sp)
  120144:	df000115 	stw	fp,4(sp)
  120148:	df000104 	addi	fp,sp,4
  12014c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Right> key function for the current menu entry */
    menu_entry_right();
  120150:	01209ec0 	call	1209ec <menu_entry_right>


    /* return the current state */
    return  cur_state;
  120154:	e0bfff17 	ldw	r2,-4(fp)

}
  120158:	e037883a 	mov	sp,fp
  12015c:	dfc00117 	ldw	ra,4(sp)
  120160:	df000017 	ldw	fp,0(sp)
  120164:	dec00204 	addi	sp,sp,8
  120168:	f800283a 	ret

0012016c <clear_region>:
   Last Modified:    Mar. 8, 1994

*/

void  clear_region(int x_ul, int y_ul, int x_size, int y_size)
{
  12016c:	defff804 	addi	sp,sp,-32
  120170:	dfc00715 	stw	ra,28(sp)
  120174:	df000615 	stw	fp,24(sp)
  120178:	df000604 	addi	fp,sp,24
  12017c:	e13ffc15 	stw	r4,-16(fp)
  120180:	e17ffd15 	stw	r5,-12(fp)
  120184:	e1bffe15 	stw	r6,-8(fp)
  120188:	e1ffff15 	stw	r7,-4(fp)
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
  12018c:	e0bffc17 	ldw	r2,-16(fp)
  120190:	e0bffa15 	stw	r2,-24(fp)
  120194:	00001406 	br	1201e8 <clear_region+0x7c>
        for (y = y_ul; y < (y_ul + y_size); y++)  {
  120198:	e0bffd17 	ldw	r2,-12(fp)
  12019c:	e0bffb15 	stw	r2,-20(fp)
  1201a0:	00000906 	br	1201c8 <clear_region+0x5c>

	    /* clear this pixel */
	    plot_pixel(x, y, PIXEL_WHITE);
  1201a4:	e0fffa17 	ldw	r3,-24(fp)
  1201a8:	e0bffb17 	ldw	r2,-20(fp)
  1201ac:	1809883a 	mov	r4,r3
  1201b0:	100b883a 	mov	r5,r2
  1201b4:	000d883a 	mov	r6,zero
  1201b8:	012192c0 	call	12192c <plot_pixel>



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
        for (y = y_ul; y < (y_ul + y_size); y++)  {
  1201bc:	e0bffb17 	ldw	r2,-20(fp)
  1201c0:	10800044 	addi	r2,r2,1
  1201c4:	e0bffb15 	stw	r2,-20(fp)
  1201c8:	e0fffd17 	ldw	r3,-12(fp)
  1201cc:	e0bfff17 	ldw	r2,-4(fp)
  1201d0:	1885883a 	add	r2,r3,r2
  1201d4:	e0fffb17 	ldw	r3,-20(fp)
  1201d8:	18bff216 	blt	r3,r2,1201a4 <clear_region+0x38>
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
  1201dc:	e0bffa17 	ldw	r2,-24(fp)
  1201e0:	10800044 	addi	r2,r2,1
  1201e4:	e0bffa15 	stw	r2,-24(fp)
  1201e8:	e0fffc17 	ldw	r3,-16(fp)
  1201ec:	e0bffe17 	ldw	r2,-8(fp)
  1201f0:	1885883a 	add	r2,r3,r2
  1201f4:	e0fffa17 	ldw	r3,-24(fp)
  1201f8:	18bfe716 	blt	r3,r2,120198 <clear_region+0x2c>
        }
    }


    /* done clearing the display region - return */
    return;
  1201fc:	0001883a 	nop

}
  120200:	e037883a 	mov	sp,fp
  120204:	dfc00117 	ldw	ra,4(sp)
  120208:	df000017 	ldw	fp,0(sp)
  12020c:	dec00204 	addi	sp,sp,8
  120210:	f800283a 	ret

00120214 <plot_hline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_hline(int start_x, int start_y, int length)
{
  120214:	defff804 	addi	sp,sp,-32
  120218:	dfc00715 	stw	ra,28(sp)
  12021c:	df000615 	stw	fp,24(sp)
  120220:	df000604 	addi	fp,sp,24
  120224:	e13ffd15 	stw	r4,-12(fp)
  120228:	e17ffe15 	stw	r5,-8(fp)
  12022c:	e1bfff15 	stw	r6,-4(fp)
    int  end_x;		/* ending x position to plot */



    /* check if a line to the "right" or "left" */
    if (length > 0)  {
  120230:	e0bfff17 	ldw	r2,-4(fp)
  120234:	0080070e 	bge	zero,r2,120254 <plot_hline+0x40>

        /* line to the "right" - start at start_x, end at start_x + length */
	init_x = start_x;
  120238:	e0bffd17 	ldw	r2,-12(fp)
  12023c:	e0bffb15 	stw	r2,-20(fp)
	end_x = start_x + length;
  120240:	e0fffd17 	ldw	r3,-12(fp)
  120244:	e0bfff17 	ldw	r2,-4(fp)
  120248:	1885883a 	add	r2,r3,r2
  12024c:	e0bffc15 	stw	r2,-16(fp)
  120250:	00000606 	br	12026c <plot_hline+0x58>
    }
    else  {

        /* line to the "left" - start at start_x + length, end at start_x */
	init_x = start_x + length;
  120254:	e0fffd17 	ldw	r3,-12(fp)
  120258:	e0bfff17 	ldw	r2,-4(fp)
  12025c:	1885883a 	add	r2,r3,r2
  120260:	e0bffb15 	stw	r2,-20(fp)
	end_x = start_x;
  120264:	e0bffd17 	ldw	r2,-12(fp)
  120268:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
  12026c:	e0bffb17 	ldw	r2,-20(fp)
  120270:	e0bffa15 	stw	r2,-24(fp)
  120274:	00000906 	br	12029c <plot_hline+0x88>
        /* plot a point of the line */
	plot_pixel(x, start_y, PIXEL_BLACK);
  120278:	e0fffa17 	ldw	r3,-24(fp)
  12027c:	e0bffe17 	ldw	r2,-8(fp)
  120280:	1809883a 	mov	r4,r3
  120284:	100b883a 	mov	r5,r2
  120288:	01800044 	movi	r6,1
  12028c:	012192c0 	call	12192c <plot_pixel>
	end_x = start_x;
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
  120290:	e0bffa17 	ldw	r2,-24(fp)
  120294:	10800044 	addi	r2,r2,1
  120298:	e0bffa15 	stw	r2,-24(fp)
  12029c:	e0fffa17 	ldw	r3,-24(fp)
  1202a0:	e0bffc17 	ldw	r2,-16(fp)
  1202a4:	18bff416 	blt	r3,r2,120278 <plot_hline+0x64>
        /* plot a point of the line */
	plot_pixel(x, start_y, PIXEL_BLACK);


    /* done plotting the line - return */
    return;
  1202a8:	0001883a 	nop

}
  1202ac:	e037883a 	mov	sp,fp
  1202b0:	dfc00117 	ldw	ra,4(sp)
  1202b4:	df000017 	ldw	fp,0(sp)
  1202b8:	dec00204 	addi	sp,sp,8
  1202bc:	f800283a 	ret

001202c0 <plot_vline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_vline(int start_x, int start_y, int length)
{
  1202c0:	defff804 	addi	sp,sp,-32
  1202c4:	dfc00715 	stw	ra,28(sp)
  1202c8:	df000615 	stw	fp,24(sp)
  1202cc:	df000604 	addi	fp,sp,24
  1202d0:	e13ffd15 	stw	r4,-12(fp)
  1202d4:	e17ffe15 	stw	r5,-8(fp)
  1202d8:	e1bfff15 	stw	r6,-4(fp)
    int  end_y;		/* ending y position to plot */



    /* check if an "up" or "down" line */
    if (length > 0)  {
  1202dc:	e0bfff17 	ldw	r2,-4(fp)
  1202e0:	0080070e 	bge	zero,r2,120300 <plot_vline+0x40>

        /* line going "down" - start at start_y, end at start_y + length */
	init_y = start_y;
  1202e4:	e0bffe17 	ldw	r2,-8(fp)
  1202e8:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y + length;
  1202ec:	e0fffe17 	ldw	r3,-8(fp)
  1202f0:	e0bfff17 	ldw	r2,-4(fp)
  1202f4:	1885883a 	add	r2,r3,r2
  1202f8:	e0bffc15 	stw	r2,-16(fp)
  1202fc:	00000606 	br	120318 <plot_vline+0x58>
    }
    else  {

        /* line going "up" - start at start_y + length, end at start_y */
	init_y = start_y + length;
  120300:	e0fffe17 	ldw	r3,-8(fp)
  120304:	e0bfff17 	ldw	r2,-4(fp)
  120308:	1885883a 	add	r2,r3,r2
  12030c:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y;
  120310:	e0bffe17 	ldw	r2,-8(fp)
  120314:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
  120318:	e0bffb17 	ldw	r2,-20(fp)
  12031c:	e0bffa15 	stw	r2,-24(fp)
  120320:	00000906 	br	120348 <plot_vline+0x88>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_BLACK);
  120324:	e0fffd17 	ldw	r3,-12(fp)
  120328:	e0bffa17 	ldw	r2,-24(fp)
  12032c:	1809883a 	mov	r4,r3
  120330:	100b883a 	mov	r5,r2
  120334:	01800044 	movi	r6,1
  120338:	012192c0 	call	12192c <plot_pixel>
	end_y = start_y;
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
  12033c:	e0bffa17 	ldw	r2,-24(fp)
  120340:	10800044 	addi	r2,r2,1
  120344:	e0bffa15 	stw	r2,-24(fp)
  120348:	e0fffa17 	ldw	r3,-24(fp)
  12034c:	e0bffc17 	ldw	r2,-16(fp)
  120350:	18bff416 	blt	r3,r2,120324 <plot_vline+0x64>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_BLACK);


    /* done plotting the line - return */
    return;
  120354:	0001883a 	nop

}
  120358:	e037883a 	mov	sp,fp
  12035c:	dfc00117 	ldw	ra,4(sp)
  120360:	df000017 	ldw	fp,0(sp)
  120364:	dec00204 	addi	sp,sp,8
  120368:	f800283a 	ret

0012036c <plot_char>:
   Last Modified:    May 27, 2008

*/

void  plot_char(int pos_x, int pos_y, char c, enum char_style style)
{
  12036c:	defff504 	addi	sp,sp,-44
  120370:	dfc00a15 	stw	ra,40(sp)
  120374:	df000915 	stw	fp,36(sp)
  120378:	df000904 	addi	fp,sp,36
  12037c:	e13ffc15 	stw	r4,-16(fp)
  120380:	e17ffd15 	stw	r5,-12(fp)
  120384:	3005883a 	mov	r2,r6
  120388:	e1ffff15 	stw	r7,-4(fp)
  12038c:	e0bffe05 	stb	r2,-8(fp)
    int  y;		/* y pixel position for the character */



    /* setup the pixel positions for the character */
    x = pos_x * HORIZ_SIZE;
  120390:	e13ffc17 	ldw	r4,-16(fp)
  120394:	01400184 	movi	r5,6
  120398:	01234e80 	call	1234e8 <__mulsi3>
  12039c:	e0bffb15 	stw	r2,-20(fp)
    y = pos_y * VERT_SIZE;
  1203a0:	e0bffd17 	ldw	r2,-12(fp)
  1203a4:	100490fa 	slli	r2,r2,3
  1203a8:	e0bffa15 	stw	r2,-24(fp)


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
  1203ac:	e03ff915 	stw	zero,-28(fp)
  1203b0:	00004306 	br	1204c0 <plot_char+0x154>

        /* get the character bits for this row from the character table */
	if (row == (VERT_SIZE - 1))
  1203b4:	e0bff917 	ldw	r2,-28(fp)
  1203b8:	108001d8 	cmpnei	r2,r2,7
  1203bc:	1000021e 	bne	r2,zero,1203c8 <plot_char+0x5c>
	    /* last row - blank it */
	    bits = 0;
  1203c0:	e03ff715 	stw	zero,-36(fp)
  1203c4:	00000d06 	br	1203fc <plot_char+0x90>
	else
	    /* in middle of character, get the row from the bit patterns */
            bits = char_patterns[(c * (VERT_SIZE - 1)) + row];
  1203c8:	e0bffe07 	ldb	r2,-8(fp)
  1203cc:	1009883a 	mov	r4,r2
  1203d0:	014001c4 	movi	r5,7
  1203d4:	01234e80 	call	1234e8 <__mulsi3>
  1203d8:	1007883a 	mov	r3,r2
  1203dc:	e0bff917 	ldw	r2,-28(fp)
  1203e0:	1885883a 	add	r2,r3,r2
  1203e4:	00c004b4 	movhi	r3,18
  1203e8:	18cff004 	addi	r3,r3,16320
  1203ec:	1885883a 	add	r2,r3,r2
  1203f0:	10800003 	ldbu	r2,0(r2)
  1203f4:	10803fcc 	andi	r2,r2,255
  1203f8:	e0bff715 	stw	r2,-36(fp)

	/* take care of "normal/reverse video" */
	if (style == REVERSE)
  1203fc:	e0bfff17 	ldw	r2,-4(fp)
  120400:	10800058 	cmpnei	r2,r2,1
  120404:	1000031e 	bne	r2,zero,120414 <plot_char+0xa8>
	    /* invert the bits for "reverse video" */
	    bits = ~bits;
  120408:	e0bff717 	ldw	r2,-36(fp)
  12040c:	0084303a 	nor	r2,zero,r2
  120410:	e0bff715 	stw	r2,-36(fp)

        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);
  120414:	e0bff717 	ldw	r2,-36(fp)
  120418:	1085883a 	add	r2,r2,r2
  12041c:	1085883a 	add	r2,r2,r2
  120420:	e0bff715 	stw	r2,-36(fp)


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
  120424:	e03ff815 	stw	zero,-32(fp)
  120428:	00001c06 	br	12049c <plot_char+0x130>

            /* output this pixel in the appropriate color */
	    if ((bits & 0x80) == 0)
  12042c:	e0bff717 	ldw	r2,-36(fp)
  120430:	1080200c 	andi	r2,r2,128
  120434:	10000a1e 	bne	r2,zero,120460 <plot_char+0xf4>
	        /* blank pixel - output in PIXEL_WHITE */
		plot_pixel(x + col, y, PIXEL_WHITE);
  120438:	e0fffb17 	ldw	r3,-20(fp)
  12043c:	e0bff817 	ldw	r2,-32(fp)
  120440:	1885883a 	add	r2,r3,r2
  120444:	1007883a 	mov	r3,r2
  120448:	e0bffa17 	ldw	r2,-24(fp)
  12044c:	1809883a 	mov	r4,r3
  120450:	100b883a 	mov	r5,r2
  120454:	000d883a 	mov	r6,zero
  120458:	012192c0 	call	12192c <plot_pixel>
  12045c:	00000906 	br	120484 <plot_char+0x118>
	    else
	        /* black pixel - output in PIXEL_BLACK */
		plot_pixel(x + col, y, PIXEL_BLACK);
  120460:	e0fffb17 	ldw	r3,-20(fp)
  120464:	e0bff817 	ldw	r2,-32(fp)
  120468:	1885883a 	add	r2,r3,r2
  12046c:	1007883a 	mov	r3,r2
  120470:	e0bffa17 	ldw	r2,-24(fp)
  120474:	1809883a 	mov	r4,r3
  120478:	100b883a 	mov	r5,r2
  12047c:	01800044 	movi	r6,1
  120480:	012192c0 	call	12192c <plot_pixel>

	    /* shift the next bit into position */
	    bits <<= 1;
  120484:	e0bff717 	ldw	r2,-36(fp)
  120488:	1085883a 	add	r2,r2,r2
  12048c:	e0bff715 	stw	r2,-36(fp)
        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
  120490:	e0bff817 	ldw	r2,-32(fp)
  120494:	10800044 	addi	r2,r2,1
  120498:	e0bff815 	stw	r2,-32(fp)
  12049c:	e0bff817 	ldw	r2,-32(fp)
  1204a0:	10800190 	cmplti	r2,r2,6
  1204a4:	103fe11e 	bne	r2,zero,12042c <plot_char+0xc0>
	    bits <<= 1;
        }


	/* next row - update the y position */
	y++;
  1204a8:	e0bffa17 	ldw	r2,-24(fp)
  1204ac:	10800044 	addi	r2,r2,1
  1204b0:	e0bffa15 	stw	r2,-24(fp)
    x = pos_x * HORIZ_SIZE;
    y = pos_y * VERT_SIZE;


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
  1204b4:	e0bff917 	ldw	r2,-28(fp)
  1204b8:	10800044 	addi	r2,r2,1
  1204bc:	e0bff915 	stw	r2,-28(fp)
  1204c0:	e0bff917 	ldw	r2,-28(fp)
  1204c4:	10800210 	cmplti	r2,r2,8
  1204c8:	103fba1e 	bne	r2,zero,1203b4 <plot_char+0x48>
	y++;
    }


    /* all done, return */
    return;
  1204cc:	0001883a 	nop

}
  1204d0:	e037883a 	mov	sp,fp
  1204d4:	dfc00117 	ldw	ra,4(sp)
  1204d8:	df000017 	ldw	fp,0(sp)
  1204dc:	dec00204 	addi	sp,sp,8
  1204e0:	f800283a 	ret

001204e4 <plot_string>:
   Last Modified:    Mar. 17, 1997

*/

void  plot_string(int pos_x, int pos_y, const char *s, enum char_style style)
{
  1204e4:	defffa04 	addi	sp,sp,-24
  1204e8:	dfc00515 	stw	ra,20(sp)
  1204ec:	df000415 	stw	fp,16(sp)
  1204f0:	df000404 	addi	fp,sp,16
  1204f4:	e13ffc15 	stw	r4,-16(fp)
  1204f8:	e17ffd15 	stw	r5,-12(fp)
  1204fc:	e1bffe15 	stw	r6,-8(fp)
  120500:	e1ffff15 	stw	r7,-4(fp)
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
  120504:	00001106 	br	12054c <plot_string+0x68>

        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);
  120508:	e0fffc17 	ldw	r3,-16(fp)
  12050c:	e0bffc17 	ldw	r2,-16(fp)
  120510:	10800044 	addi	r2,r2,1
  120514:	e0bffc15 	stw	r2,-16(fp)
  120518:	e0bffe17 	ldw	r2,-8(fp)
  12051c:	10800003 	ldbu	r2,0(r2)
  120520:	10803fcc 	andi	r2,r2,255
  120524:	1080201c 	xori	r2,r2,128
  120528:	10bfe004 	addi	r2,r2,-128
  12052c:	e13ffe17 	ldw	r4,-8(fp)
  120530:	21000044 	addi	r4,r4,1
  120534:	e13ffe15 	stw	r4,-8(fp)
  120538:	1809883a 	mov	r4,r3
  12053c:	e17ffd17 	ldw	r5,-12(fp)
  120540:	100d883a 	mov	r6,r2
  120544:	e1ffff17 	ldw	r7,-4(fp)
  120548:	012036c0 	call	12036c <plot_char>
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
  12054c:	e0bffe17 	ldw	r2,-8(fp)
  120550:	10800003 	ldbu	r2,0(r2)
  120554:	10803fcc 	andi	r2,r2,255
  120558:	1080201c 	xori	r2,r2,128
  12055c:	10bfe004 	addi	r2,r2,-128
  120560:	103fe91e 	bne	r2,zero,120508 <plot_string+0x24>
        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);


    /* all done, return */
    return;
  120564:	0001883a 	nop

}
  120568:	e037883a 	mov	sp,fp
  12056c:	dfc00117 	ldw	ra,4(sp)
  120570:	df000017 	ldw	fp,0(sp)
  120574:	dec00204 	addi	sp,sp,8
  120578:	f800283a 	ret

0012057c <main>:

   Author:           Glen George
   Last Modified:    May 27, 2008
*/

int  main() {
  12057c:	defff204 	addi	sp,sp,-56
  120580:	dfc00d15 	stw	ra,52(sp)
  120584:	df000c15 	stw	fp,48(sp)
  120588:	df000c04 	addi	fp,sp,48
    	srampt++;
    	c++;
    	if(c >= 100) c = 0;
    }*/

	adc_int_installer();
  12058c:	0122cf40 	call	122cf4 <adc_int_installer>
	key_int_installer();
  120590:	0122a980 	call	122a98 <key_int_installer>

	//test_adc2();
	while(1);
  120594:	003fff06 	br	120594 <main+0x18>

00120598 <key_lookup>:
   Last Modified:    Mar. 17, 1997

*/

enum keycode  	key_lookup()
{
  120598:	defff104 	addi	sp,sp,-60
  12059c:	dfc00e15 	stw	ra,56(sp)
  1205a0:	df000d15 	stw	fp,52(sp)
  1205a4:	df000d04 	addi	fp,sp,52
    /* variables */

    const enum keycode  keycodes[] = /* array of keycodes */
  1205a8:	e03ff515 	stw	zero,-44(fp)
  1205ac:	00800044 	movi	r2,1
  1205b0:	e0bff615 	stw	r2,-40(fp)
  1205b4:	00800084 	movi	r2,2
  1205b8:	e0bff715 	stw	r2,-36(fp)
  1205bc:	008000c4 	movi	r2,3
  1205c0:	e0bff815 	stw	r2,-32(fp)
  1205c4:	00800104 	movi	r2,4
  1205c8:	e0bff915 	stw	r2,-28(fp)
  1205cc:	00800144 	movi	r2,5
  1205d0:	e0bffa15 	stw	r2,-24(fp)
	   KEYCODE_LEFT,      /* <Left>     */
	   KEYCODE_RIGHT,     /* <Right>    */
	   KEYCODE_ILLEGAL    /* other keys */
        }; 

    const int  keys[] =   /* array of key values */
  1205d4:	e03ffb15 	stw	zero,-20(fp)
  1205d8:	00800044 	movi	r2,1
  1205dc:	e0bffc15 	stw	r2,-16(fp)
  1205e0:	00800084 	movi	r2,2
  1205e4:	e0bffd15 	stw	r2,-12(fp)
  1205e8:	008000c4 	movi	r2,3
  1205ec:	e0bffe15 	stw	r2,-8(fp)
  1205f0:	00800104 	movi	r2,4
  1205f4:	e0bfff15 	stw	r2,-4(fp)
    int  i;           	/* general loop index */



    /* get a key */
    key = getkey();
  1205f8:	0122c7c0 	call	122c7c <getkey>
  1205fc:	e0bff415 	stw	r2,-48(fp)


    /* lookup key in keys array */
    for (i = 0; ((i < (sizeof(keys)/sizeof(int))) && (key != keys[i])); i++);
  120600:	e03ff315 	stw	zero,-52(fp)
  120604:	00000306 	br	120614 <key_lookup+0x7c>
  120608:	e0bff317 	ldw	r2,-52(fp)
  12060c:	10800044 	addi	r2,r2,1
  120610:	e0bff315 	stw	r2,-52(fp)
  120614:	e0bff317 	ldw	r2,-52(fp)
  120618:	10800168 	cmpgeui	r2,r2,5
  12061c:	1000091e 	bne	r2,zero,120644 <key_lookup+0xac>
  120620:	e0bff317 	ldw	r2,-52(fp)
  120624:	1085883a 	add	r2,r2,r2
  120628:	1085883a 	add	r2,r2,r2
  12062c:	e0fff304 	addi	r3,fp,-52
  120630:	1885883a 	add	r2,r3,r2
  120634:	10800804 	addi	r2,r2,32
  120638:	10c00017 	ldw	r3,0(r2)
  12063c:	e0bff417 	ldw	r2,-48(fp)
  120640:	18bff11e 	bne	r3,r2,120608 <key_lookup+0x70>


    /* return the appropriate key type */
    return  keycodes[i];
  120644:	e0bff317 	ldw	r2,-52(fp)
  120648:	1085883a 	add	r2,r2,r2
  12064c:	1085883a 	add	r2,r2,r2
  120650:	e0fff304 	addi	r3,fp,-52
  120654:	1885883a 	add	r2,r3,r2
  120658:	10800204 	addi	r2,r2,8
  12065c:	10800017 	ldw	r2,0(r2)

}
  120660:	e037883a 	mov	sp,fp
  120664:	dfc00117 	ldw	ra,4(sp)
  120668:	df000017 	ldw	fp,0(sp)
  12066c:	dec00204 	addi	sp,sp,8
  120670:	f800283a 	ret

00120674 <init_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  init_menu(void)
{
  120674:	defffe04 	addi	sp,sp,-8
  120678:	dfc00115 	stw	ra,4(sp)
  12067c:	df000015 	stw	fp,0(sp)
  120680:	d839883a 	mov	fp,sp
      /* none */



    /* set the menu parameters */
    menu_entry = 0;		/* first menu entry */
  120684:	d0200915 	stw	zero,-32732(gp)
    menu_display = FALSE;	/* menu is not currently displayed (but it will be shortly) */
  120688:	d0200a15 	stw	zero,-32728(gp)


    /* set the scope (option) parameters */
    set_trigger_mode(NORMAL_TRIGGER);	/* normal triggering */
  12068c:	0009883a 	mov	r4,zero
  120690:	0120bf40 	call	120bf4 <set_trigger_mode>
    set_scale(SCALE_AXES);		/* scale is axes */
  120694:	01000044 	movi	r4,1
  120698:	0120da00 	call	120da0 <set_scale>
    set_sweep(0);			/* first sweep rate */
  12069c:	0009883a 	mov	r4,zero
  1206a0:	0120f2c0 	call	120f2c <set_sweep>
    set_trg_level((MIN_TRG_LEVEL_SET + MAX_TRG_LEVEL_SET) / 2);	/* middle trigger level */
  1206a4:	01000fc4 	movi	r4,63
  1206a8:	01210f80 	call	1210f8 <set_trg_level>
    set_trg_slope(SLOPE_POSITIVE);	/* positive slope */
  1206ac:	0009883a 	mov	r4,zero
  1206b0:	01212880 	call	121288 <set_trg_slope>
    set_trg_delay(MIN_DELAY);		/* minimum delay */
  1206b4:	0009883a 	mov	r4,zero
  1206b8:	012139c0 	call	12139c <set_trg_delay>


    /* now display the menu */
    display_menu();
  1206bc:	01207100 	call	120710 <display_menu>


    /* done initializing, return */
    return;
  1206c0:	0001883a 	nop

}
  1206c4:	e037883a 	mov	sp,fp
  1206c8:	dfc00117 	ldw	ra,4(sp)
  1206cc:	df000017 	ldw	fp,0(sp)
  1206d0:	dec00204 	addi	sp,sp,8
  1206d4:	f800283a 	ret

001206d8 <clear_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  clear_menu(void)
{
  1206d8:	defffe04 	addi	sp,sp,-8
  1206dc:	dfc00115 	stw	ra,4(sp)
  1206e0:	df000015 	stw	fp,0(sp)
  1206e4:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  1206e8:	d0a00a17 	ldw	r2,-32728(gp)
  1206ec:	10000126 	beq	r2,zero,1206f4 <clear_menu+0x1c>

        /* menu is being displayed - turn it off and restore the trace in that area */
	restore_menu_trace();
  1206f0:	01222940 	call	122294 <restore_menu_trace>
    }


    /* no longer displaying the menu */
    menu_display = FALSE;
  1206f4:	d0200a15 	stw	zero,-32728(gp)


    /* all done, return */
    return;
  1206f8:	0001883a 	nop

}
  1206fc:	e037883a 	mov	sp,fp
  120700:	dfc00117 	ldw	ra,4(sp)
  120704:	df000017 	ldw	fp,0(sp)
  120708:	dec00204 	addi	sp,sp,8
  12070c:	f800283a 	ret

00120710 <display_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  display_menu(void)
{
  120710:	defffd04 	addi	sp,sp,-12
  120714:	dfc00215 	stw	ra,8(sp)
  120718:	df000115 	stw	fp,4(sp)
  12071c:	df000104 	addi	fp,sp,4
    int  i;		/* loop index */



    /* check if the menu is currently being displayed */
    if (!menu_display)  {
  120720:	d0a00a17 	ldw	r2,-32728(gp)
  120724:	1000121e 	bne	r2,zero,120770 <display_menu+0x60>

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
  120728:	e03fff15 	stw	zero,-4(fp)
  12072c:	00000d06 	br	120764 <display_menu+0x54>

	    /* display this entry - check if it should be highlighted */
	    if (i == menu_entry)
  120730:	d0a00917 	ldw	r2,-32732(gp)
  120734:	e0ffff17 	ldw	r3,-4(fp)
  120738:	1880041e 	bne	r3,r2,12074c <display_menu+0x3c>
	        /* currently selected entry - highlight it */
	        display_entry(i, TRUE);
  12073c:	e13fff17 	ldw	r4,-4(fp)
  120740:	01400044 	movi	r5,1
  120744:	0120ad80 	call	120ad8 <display_entry>
  120748:	00000306 	br	120758 <display_menu+0x48>
	    else
	        /* not the currently selected entry - "normal video" */
	        display_entry(i, FALSE);
  12074c:	e13fff17 	ldw	r4,-4(fp)
  120750:	000b883a 	mov	r5,zero
  120754:	0120ad80 	call	120ad8 <display_entry>
    /* check if the menu is currently being displayed */
    if (!menu_display)  {

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
  120758:	e0bfff17 	ldw	r2,-4(fp)
  12075c:	10800044 	addi	r2,r2,1
  120760:	e0bfff15 	stw	r2,-4(fp)
  120764:	e0bfff17 	ldw	r2,-4(fp)
  120768:	108001f0 	cmpltui	r2,r2,7
  12076c:	103ff01e 	bne	r2,zero,120730 <display_menu+0x20>
        }
    }


    /* now are displaying the menu */
    menu_display = TRUE;
  120770:	00800044 	movi	r2,1
  120774:	d0a00a15 	stw	r2,-32728(gp)


    /* all done, return */
    return;
  120778:	0001883a 	nop

}
  12077c:	e037883a 	mov	sp,fp
  120780:	dfc00117 	ldw	ra,4(sp)
  120784:	df000017 	ldw	fp,0(sp)
  120788:	dec00204 	addi	sp,sp,8
  12078c:	f800283a 	ret

00120790 <refresh_menu>:
   Last Modified:    Mar. 8, 1994

*/

void  refresh_menu(void)
{
  120790:	defffe04 	addi	sp,sp,-8
  120794:	dfc00115 	stw	ra,4(sp)
  120798:	df000015 	stw	fp,0(sp)
  12079c:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  1207a0:	d0a00a17 	ldw	r2,-32728(gp)
  1207a4:	10000226 	beq	r2,zero,1207b0 <refresh_menu+0x20>

    	/* menu is currently being displayed - need to refresh it */
	/* do this by turning off the display, then forcing it back on */
	menu_display = FALSE;
  1207a8:	d0200a15 	stw	zero,-32728(gp)
	display_menu();
  1207ac:	01207100 	call	120710 <display_menu>
    }


    /* refreshed the menu if it was displayed, now return */
    return;
  1207b0:	0001883a 	nop

}
  1207b4:	e037883a 	mov	sp,fp
  1207b8:	dfc00117 	ldw	ra,4(sp)
  1207bc:	df000017 	ldw	fp,0(sp)
  1207c0:	dec00204 	addi	sp,sp,8
  1207c4:	f800283a 	ret

001207c8 <reset_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  reset_menu(void)
{
  1207c8:	defffe04 	addi	sp,sp,-8
  1207cc:	dfc00115 	stw	ra,4(sp)
  1207d0:	df000015 	stw	fp,0(sp)
  1207d4:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
  1207d8:	d0a00a17 	ldw	r2,-32728(gp)
  1207dc:	10000426 	beq	r2,zero,1207f0 <reset_menu+0x28>

        /* menu is being displayed */
	/* remove highlight from currently selected entry */
	display_entry(menu_entry, FALSE);
  1207e0:	d0a00917 	ldw	r2,-32732(gp)
  1207e4:	1009883a 	mov	r4,r2
  1207e8:	000b883a 	mov	r5,zero
  1207ec:	0120ad80 	call	120ad8 <display_entry>
    }


    /* reset the currently selected entry */
    menu_entry = 0;
  1207f0:	d0200915 	stw	zero,-32732(gp)


    /* finally, highlight the first entry if the menu is being displayed */
    if (menu_display)
  1207f4:	d0a00a17 	ldw	r2,-32728(gp)
  1207f8:	10000426 	beq	r2,zero,12080c <reset_menu+0x44>
	display_entry(menu_entry, TRUE);
  1207fc:	d0a00917 	ldw	r2,-32732(gp)
  120800:	1009883a 	mov	r4,r2
  120804:	01400044 	movi	r5,1
  120808:	0120ad80 	call	120ad8 <display_entry>



    /* all done, return */
    return;
  12080c:	0001883a 	nop

}
  120810:	e037883a 	mov	sp,fp
  120814:	dfc00117 	ldw	ra,4(sp)
  120818:	df000017 	ldw	fp,0(sp)
  12081c:	dec00204 	addi	sp,sp,8
  120820:	f800283a 	ret

00120824 <next_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  next_entry(void)
{
  120824:	defffe04 	addi	sp,sp,-8
  120828:	dfc00115 	stw	ra,4(sp)
  12082c:	df000015 	stw	fp,0(sp)
  120830:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at end of the menu */
    if (menu_entry < (NO_MENU_ENTRIES - 1))  {
  120834:	d0a00917 	ldw	r2,-32732(gp)
  120838:	108001a8 	cmpgeui	r2,r2,6
  12083c:	10000f1e 	bne	r2,zero,12087c <next_entry+0x58>

        /* not at the end of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
  120840:	d0a00a17 	ldw	r2,-32728(gp)
  120844:	10000426 	beq	r2,zero,120858 <next_entry+0x34>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
  120848:	d0a00917 	ldw	r2,-32732(gp)
  12084c:	1009883a 	mov	r4,r2
  120850:	000b883a 	mov	r5,zero
  120854:	0120ad80 	call	120ad8 <display_entry>

	/* update the menu entry to the next one */
	menu_entry++;
  120858:	d0a00917 	ldw	r2,-32732(gp)
  12085c:	10800044 	addi	r2,r2,1
  120860:	d0a00915 	stw	r2,-32732(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
  120864:	d0a00a17 	ldw	r2,-32728(gp)
  120868:	10000426 	beq	r2,zero,12087c <next_entry+0x58>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
  12086c:	d0a00917 	ldw	r2,-32732(gp)
  120870:	1009883a 	mov	r4,r2
  120874:	01400044 	movi	r5,1
  120878:	0120ad80 	call	120ad8 <display_entry>
    }


    /* all done, return */
    return;
  12087c:	0001883a 	nop

}
  120880:	e037883a 	mov	sp,fp
  120884:	dfc00117 	ldw	ra,4(sp)
  120888:	df000017 	ldw	fp,0(sp)
  12088c:	dec00204 	addi	sp,sp,8
  120890:	f800283a 	ret

00120894 <previous_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  previous_entry(void)
{
  120894:	defffe04 	addi	sp,sp,-8
  120898:	dfc00115 	stw	ra,4(sp)
  12089c:	df000015 	stw	fp,0(sp)
  1208a0:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at the start of the menu */
    if (menu_entry > 0)  {
  1208a4:	d0a00917 	ldw	r2,-32732(gp)
  1208a8:	00800f0e 	bge	zero,r2,1208e8 <previous_entry+0x54>

        /* not at the start of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
  1208ac:	d0a00a17 	ldw	r2,-32728(gp)
  1208b0:	10000426 	beq	r2,zero,1208c4 <previous_entry+0x30>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
  1208b4:	d0a00917 	ldw	r2,-32732(gp)
  1208b8:	1009883a 	mov	r4,r2
  1208bc:	000b883a 	mov	r5,zero
  1208c0:	0120ad80 	call	120ad8 <display_entry>

	/* update the menu entry to the previous one */
	menu_entry--;
  1208c4:	d0a00917 	ldw	r2,-32732(gp)
  1208c8:	10bfffc4 	addi	r2,r2,-1
  1208cc:	d0a00915 	stw	r2,-32732(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
  1208d0:	d0a00a17 	ldw	r2,-32728(gp)
  1208d4:	10000426 	beq	r2,zero,1208e8 <previous_entry+0x54>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
  1208d8:	d0a00917 	ldw	r2,-32732(gp)
  1208dc:	1009883a 	mov	r4,r2
  1208e0:	01400044 	movi	r5,1
  1208e4:	0120ad80 	call	120ad8 <display_entry>

    }


    /* all done, return */
    return;
  1208e8:	0001883a 	nop

}
  1208ec:	e037883a 	mov	sp,fp
  1208f0:	dfc00117 	ldw	ra,4(sp)
  1208f4:	df000017 	ldw	fp,0(sp)
  1208f8:	dec00204 	addi	sp,sp,8
  1208fc:	f800283a 	ret

00120900 <menu_entry_left>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_left(void)
{
  120900:	defff704 	addi	sp,sp,-36
  120904:	dfc00815 	stw	ra,32(sp)
  120908:	df000715 	stw	fp,28(sp)
  12090c:	df000704 	addi	fp,sp,28
    /* variables */

    /* key processing functions */
    void  (* const process[])(void) =
  120910:	008004b4 	movhi	r2,18
  120914:	10831504 	addi	r2,r2,3156
  120918:	e0bff915 	stw	r2,-28(fp)
  12091c:	008004b4 	movhi	r2,18
  120920:	10837804 	addi	r2,r2,3552
  120924:	e0bffa15 	stw	r2,-24(fp)
  120928:	008004b4 	movhi	r2,18
  12092c:	1083e304 	addi	r2,r2,3980
  120930:	e0bffb15 	stw	r2,-20(fp)
  120934:	008004b4 	movhi	r2,18
  120938:	10872004 	addi	r2,r2,7296
  12093c:	e0bffc15 	stw	r2,-16(fp)
  120940:	008004b4 	movhi	r2,18
  120944:	10845004 	addi	r2,r2,4416
  120948:	e0bffd15 	stw	r2,-12(fp)
  12094c:	008004b4 	movhi	r2,18
  120950:	1084b404 	addi	r2,r2,4816
  120954:	e0bffe15 	stw	r2,-8(fp)
  120958:	008004b4 	movhi	r2,18
  12095c:	1084f704 	addi	r2,r2,5084
  120960:	e0bfff15 	stw	r2,-4(fp)
       /*  Level           Slope             Delay                        */



    /* invoke the appropriate <Left> key function */
    process[menu_entry]();
  120964:	d0a00917 	ldw	r2,-32732(gp)
  120968:	1085883a 	add	r2,r2,r2
  12096c:	1085883a 	add	r2,r2,r2
  120970:	e0fff904 	addi	r3,fp,-28
  120974:	1885883a 	add	r2,r3,r2
  120978:	10800017 	ldw	r2,0(r2)
  12097c:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
  120980:	d0a00a17 	ldw	r2,-32728(gp)
  120984:	10001426 	beq	r2,zero,1209d8 <menu_entry_left+0xd8>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
  120988:	d0a00917 	ldw	r2,-32732(gp)
  12098c:	00c004b4 	movhi	r3,18
  120990:	18d17e04 	addi	r3,r3,17912
  120994:	1004913a 	slli	r2,r2,4
  120998:	1885883a 	add	r2,r3,r2
  12099c:	10800304 	addi	r2,r2,12
  1209a0:	11c00017 	ldw	r7,0(r2)
  1209a4:	d0a00917 	ldw	r2,-32732(gp)
  1209a8:	00c004b4 	movhi	r3,18
  1209ac:	18d17e04 	addi	r3,r3,17912
  1209b0:	1004913a 	slli	r2,r2,4
  1209b4:	1885883a 	add	r2,r3,r2
  1209b8:	10800204 	addi	r2,r2,8
  1209bc:	10800017 	ldw	r2,0(r2)
  1209c0:	10c00fc4 	addi	r3,r2,63
  1209c4:	d0a00917 	ldw	r2,-32732(gp)
  1209c8:	1809883a 	mov	r4,r3
  1209cc:	100b883a 	mov	r5,r2
  1209d0:	000d883a 	mov	r6,zero
  1209d4:	383ee83a 	callr	r7


    /* all done, return */
    return;

}
  1209d8:	e037883a 	mov	sp,fp
  1209dc:	dfc00117 	ldw	ra,4(sp)
  1209e0:	df000017 	ldw	fp,0(sp)
  1209e4:	dec00204 	addi	sp,sp,8
  1209e8:	f800283a 	ret

001209ec <menu_entry_right>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_right(void)
{
  1209ec:	defff704 	addi	sp,sp,-36
  1209f0:	dfc00815 	stw	ra,32(sp)
  1209f4:	df000715 	stw	fp,28(sp)
  1209f8:	df000704 	addi	fp,sp,28
    /* variables */

    /* key processing functions */
    void  (* const process[])(void) =
  1209fc:	008004b4 	movhi	r2,18
  120a00:	10832e04 	addi	r2,r2,3256
  120a04:	e0bff915 	stw	r2,-28(fp)
  120a08:	008004b4 	movhi	r2,18
  120a0c:	10839104 	addi	r2,r2,3652
  120a10:	e0bffa15 	stw	r2,-24(fp)
  120a14:	008004b4 	movhi	r2,18
  120a18:	10840304 	addi	r2,r2,4108
  120a1c:	e0bffb15 	stw	r2,-20(fp)
  120a20:	008004b4 	movhi	r2,18
  120a24:	10872004 	addi	r2,r2,7296
  120a28:	e0bffc15 	stw	r2,-16(fp)
  120a2c:	008004b4 	movhi	r2,18
  120a30:	10846404 	addi	r2,r2,4496
  120a34:	e0bffd15 	stw	r2,-12(fp)
  120a38:	008004b4 	movhi	r2,18
  120a3c:	1084b404 	addi	r2,r2,4816
  120a40:	e0bffe15 	stw	r2,-8(fp)
  120a44:	008004b4 	movhi	r2,18
  120a48:	10850904 	addi	r2,r2,5156
  120a4c:	e0bfff15 	stw	r2,-4(fp)
       /*  Level         Slope             Delay                        */



    /* invoke the appropriate <Right> key function */
    process[menu_entry]();
  120a50:	d0a00917 	ldw	r2,-32732(gp)
  120a54:	1085883a 	add	r2,r2,r2
  120a58:	1085883a 	add	r2,r2,r2
  120a5c:	e0fff904 	addi	r3,fp,-28
  120a60:	1885883a 	add	r2,r3,r2
  120a64:	10800017 	ldw	r2,0(r2)
  120a68:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
  120a6c:	d0a00a17 	ldw	r2,-32728(gp)
  120a70:	10001426 	beq	r2,zero,120ac4 <menu_entry_right+0xd8>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
  120a74:	d0a00917 	ldw	r2,-32732(gp)
  120a78:	00c004b4 	movhi	r3,18
  120a7c:	18d17e04 	addi	r3,r3,17912
  120a80:	1004913a 	slli	r2,r2,4
  120a84:	1885883a 	add	r2,r3,r2
  120a88:	10800304 	addi	r2,r2,12
  120a8c:	11c00017 	ldw	r7,0(r2)
  120a90:	d0a00917 	ldw	r2,-32732(gp)
  120a94:	00c004b4 	movhi	r3,18
  120a98:	18d17e04 	addi	r3,r3,17912
  120a9c:	1004913a 	slli	r2,r2,4
  120aa0:	1885883a 	add	r2,r3,r2
  120aa4:	10800204 	addi	r2,r2,8
  120aa8:	10800017 	ldw	r2,0(r2)
  120aac:	10c00fc4 	addi	r3,r2,63
  120ab0:	d0a00917 	ldw	r2,-32732(gp)
  120ab4:	1809883a 	mov	r4,r3
  120ab8:	100b883a 	mov	r5,r2
  120abc:	000d883a 	mov	r6,zero
  120ac0:	383ee83a 	callr	r7


    /* all done, return */
    return;

}
  120ac4:	e037883a 	mov	sp,fp
  120ac8:	dfc00117 	ldw	ra,4(sp)
  120acc:	df000017 	ldw	fp,0(sp)
  120ad0:	dec00204 	addi	sp,sp,8
  120ad4:	f800283a 	ret

00120ad8 <display_entry>:
   Last Modified:    Aug. 13, 2004

*/

void  display_entry(int entry, int selected)
{
  120ad8:	defffc04 	addi	sp,sp,-16
  120adc:	dfc00315 	stw	ra,12(sp)
  120ae0:	df000215 	stw	fp,8(sp)
  120ae4:	df000204 	addi	fp,sp,8
  120ae8:	e13ffe15 	stw	r4,-8(fp)
  120aec:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* output the menu entry with the appropriate color */
    plot_string((MENU_X + menu[entry].h_off), (MENU_Y + entry), menu[entry].s,
  120af0:	00c004b4 	movhi	r3,18
  120af4:	18d17e04 	addi	r3,r3,17912
  120af8:	e0bffe17 	ldw	r2,-8(fp)
  120afc:	1004913a 	slli	r2,r2,4
  120b00:	1885883a 	add	r2,r3,r2
  120b04:	10800104 	addi	r2,r2,4
  120b08:	10800017 	ldw	r2,0(r2)
  120b0c:	11000fc4 	addi	r4,r2,63
  120b10:	00c004b4 	movhi	r3,18
  120b14:	18d17e04 	addi	r3,r3,17912
  120b18:	e0bffe17 	ldw	r2,-8(fp)
  120b1c:	1004913a 	slli	r2,r2,4
  120b20:	1885883a 	add	r2,r3,r2
  120b24:	10c00017 	ldw	r3,0(r2)
  120b28:	e0bfff17 	ldw	r2,-4(fp)
  120b2c:	1004c03a 	cmpne	r2,r2,zero
  120b30:	10803fcc 	andi	r2,r2,255
  120b34:	e17ffe17 	ldw	r5,-8(fp)
  120b38:	180d883a 	mov	r6,r3
  120b3c:	100f883a 	mov	r7,r2
  120b40:	01204e40 	call	1204e4 <plot_string>
    		(selected ? SELECTED : NORMAL));
    /* also output the menu option with the appropriate color */
    menu[entry].display((MENU_X + menu[entry].opt_off), (MENU_Y + entry),
  120b44:	00c004b4 	movhi	r3,18
  120b48:	18d17e04 	addi	r3,r3,17912
  120b4c:	e0bffe17 	ldw	r2,-8(fp)
  120b50:	1004913a 	slli	r2,r2,4
  120b54:	1885883a 	add	r2,r3,r2
  120b58:	10800304 	addi	r2,r2,12
  120b5c:	10c00017 	ldw	r3,0(r2)
  120b60:	010004b4 	movhi	r4,18
  120b64:	21117e04 	addi	r4,r4,17912
  120b68:	e0bffe17 	ldw	r2,-8(fp)
  120b6c:	1004913a 	slli	r2,r2,4
  120b70:	2085883a 	add	r2,r4,r2
  120b74:	10800204 	addi	r2,r2,8
  120b78:	10800017 	ldw	r2,0(r2)
  120b7c:	10800fc4 	addi	r2,r2,63
  120b80:	1009883a 	mov	r4,r2
  120b84:	e17ffe17 	ldw	r5,-8(fp)
  120b88:	000d883a 	mov	r6,zero
  120b8c:	183ee83a 	callr	r3
    			(selected ? OPTION_SELECTED : OPTION_NORMAL));


    /* all done outputting this menu entry - return */
    return;
  120b90:	0001883a 	nop

}
  120b94:	e037883a 	mov	sp,fp
  120b98:	dfc00117 	ldw	ra,4(sp)
  120b9c:	df000017 	ldw	fp,0(sp)
  120ba0:	dec00204 	addi	sp,sp,8
  120ba4:	f800283a 	ret

00120ba8 <no_menu_action>:
   Last Modified:    Mar. 8, 1994

*/

void  no_menu_action()
{
  120ba8:	deffff04 	addi	sp,sp,-4
  120bac:	df000015 	stw	fp,0(sp)
  120bb0:	d839883a 	mov	fp,sp
      /* none */



    /* nothing to do - return */
    return;
  120bb4:	0001883a 	nop

}
  120bb8:	e037883a 	mov	sp,fp
  120bbc:	df000017 	ldw	fp,0(sp)
  120bc0:	dec00104 	addi	sp,sp,4
  120bc4:	f800283a 	ret

00120bc8 <no_display>:
   Last Modified:    Mar. 8, 1994

*/

void  no_display(int x_pos, int y_pos, int style)
{
  120bc8:	defffc04 	addi	sp,sp,-16
  120bcc:	df000315 	stw	fp,12(sp)
  120bd0:	df000304 	addi	fp,sp,12
  120bd4:	e13ffd15 	stw	r4,-12(fp)
  120bd8:	e17ffe15 	stw	r5,-8(fp)
  120bdc:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* nothing to do - return */
    return;
  120be0:	0001883a 	nop

}
  120be4:	e037883a 	mov	sp,fp
  120be8:	df000017 	ldw	fp,0(sp)
  120bec:	dec00104 	addi	sp,sp,4
  120bf0:	f800283a 	ret

00120bf4 <set_trigger_mode>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trigger_mode(enum trigger_type m)
{
  120bf4:	defffd04 	addi	sp,sp,-12
  120bf8:	dfc00215 	stw	ra,8(sp)
  120bfc:	df000115 	stw	fp,4(sp)
  120c00:	df000104 	addi	fp,sp,4
  120c04:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger mode */
    trigger_mode = m;
  120c08:	e0bfff17 	ldw	r2,-4(fp)
  120c0c:	d0a00b15 	stw	r2,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  120c10:	d0a00b17 	ldw	r2,-32724(gp)
  120c14:	1009883a 	mov	r4,r2
  120c18:	0121bb00 	call	121bb0 <set_mode>


    /* all done setting the trigger mode - return */
    return;
  120c1c:	0001883a 	nop

}
  120c20:	e037883a 	mov	sp,fp
  120c24:	dfc00117 	ldw	ra,4(sp)
  120c28:	df000017 	ldw	fp,0(sp)
  120c2c:	dec00204 	addi	sp,sp,8
  120c30:	f800283a 	ret

00120c34 <get_trigger_mode>:
   Last Modified:    May 9, 2006

*/

enum trigger_type  get_trigger_mode()
{
  120c34:	deffff04 	addi	sp,sp,-4
  120c38:	df000015 	stw	fp,0(sp)
  120c3c:	d839883a 	mov	fp,sp
      /* none */



    /* return the current trigger mode */
    return  trigger_mode;
  120c40:	d0a00b17 	ldw	r2,-32724(gp)

}
  120c44:	e037883a 	mov	sp,fp
  120c48:	df000017 	ldw	fp,0(sp)
  120c4c:	dec00104 	addi	sp,sp,4
  120c50:	f800283a 	ret

00120c54 <mode_down>:
   Last Modified:    May 9, 2006

*/

void  mode_down()
{
  120c54:	defffe04 	addi	sp,sp,-8
  120c58:	dfc00115 	stw	ra,4(sp)
  120c5c:	df000015 	stw	fp,0(sp)
  120c60:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "next" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
  120c64:	d0a00b17 	ldw	r2,-32724(gp)
  120c68:	1000031e 	bne	r2,zero,120c78 <mode_down+0x24>
        trigger_mode = AUTO_TRIGGER;
  120c6c:	00800044 	movi	r2,1
  120c70:	d0a00b15 	stw	r2,-32724(gp)
  120c74:	00000706 	br	120c94 <mode_down+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
  120c78:	d0a00b17 	ldw	r2,-32724(gp)
  120c7c:	10800058 	cmpnei	r2,r2,1
  120c80:	1000031e 	bne	r2,zero,120c90 <mode_down+0x3c>
        trigger_mode = ONESHOT_TRIGGER;
  120c84:	00800084 	movi	r2,2
  120c88:	d0a00b15 	stw	r2,-32724(gp)
  120c8c:	00000106 	br	120c94 <mode_down+0x40>
    else
        trigger_mode = NORMAL_TRIGGER;
  120c90:	d0200b15 	stw	zero,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  120c94:	d0a00b17 	ldw	r2,-32724(gp)
  120c98:	1009883a 	mov	r4,r2
  120c9c:	0121bb00 	call	121bb0 <set_mode>


    /* all done with the trigger mode - return */
    return;
  120ca0:	0001883a 	nop

}
  120ca4:	e037883a 	mov	sp,fp
  120ca8:	dfc00117 	ldw	ra,4(sp)
  120cac:	df000017 	ldw	fp,0(sp)
  120cb0:	dec00204 	addi	sp,sp,8
  120cb4:	f800283a 	ret

00120cb8 <mode_up>:
   Last Modified:    May 9, 2006

*/

void  mode_up()
{
  120cb8:	defffe04 	addi	sp,sp,-8
  120cbc:	dfc00115 	stw	ra,4(sp)
  120cc0:	df000015 	stw	fp,0(sp)
  120cc4:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "previous" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
  120cc8:	d0a00b17 	ldw	r2,-32724(gp)
  120ccc:	1000031e 	bne	r2,zero,120cdc <mode_up+0x24>
        trigger_mode = ONESHOT_TRIGGER;
  120cd0:	00800084 	movi	r2,2
  120cd4:	d0a00b15 	stw	r2,-32724(gp)
  120cd8:	00000706 	br	120cf8 <mode_up+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
  120cdc:	d0a00b17 	ldw	r2,-32724(gp)
  120ce0:	10800058 	cmpnei	r2,r2,1
  120ce4:	1000021e 	bne	r2,zero,120cf0 <mode_up+0x38>
        trigger_mode = NORMAL_TRIGGER;
  120ce8:	d0200b15 	stw	zero,-32724(gp)
  120cec:	00000206 	br	120cf8 <mode_up+0x40>
    else
        trigger_mode = AUTO_TRIGGER;
  120cf0:	00800044 	movi	r2,1
  120cf4:	d0a00b15 	stw	r2,-32724(gp)

    /* set the new mode */
    set_mode(trigger_mode);
  120cf8:	d0a00b17 	ldw	r2,-32724(gp)
  120cfc:	1009883a 	mov	r4,r2
  120d00:	0121bb00 	call	121bb0 <set_mode>


    /* all done with the trigger mode - return */
    return;
  120d04:	0001883a 	nop

}
  120d08:	e037883a 	mov	sp,fp
  120d0c:	dfc00117 	ldw	ra,4(sp)
  120d10:	df000017 	ldw	fp,0(sp)
  120d14:	dec00204 	addi	sp,sp,8
  120d18:	f800283a 	ret

00120d1c <display_mode>:
   Last Modified:    May 9, 2006

*/

void  display_mode(int x_pos, int y_pos, int style)
{
  120d1c:	defff804 	addi	sp,sp,-32
  120d20:	dfc00715 	stw	ra,28(sp)
  120d24:	df000615 	stw	fp,24(sp)
  120d28:	df000604 	addi	fp,sp,24
  120d2c:	e13ffd15 	stw	r4,-12(fp)
  120d30:	e17ffe15 	stw	r5,-8(fp)
  120d34:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the mode strings (must match enumerated type) */
    const char * const  modes[] =  {  " Normal   ",
  120d38:	008004b4 	movhi	r2,18
  120d3c:	1091de04 	addi	r2,r2,18296
  120d40:	e0bffa15 	stw	r2,-24(fp)
  120d44:	008004b4 	movhi	r2,18
  120d48:	1091e104 	addi	r2,r2,18308
  120d4c:	e0bffb15 	stw	r2,-20(fp)
  120d50:	008004b4 	movhi	r2,18
  120d54:	1091e404 	addi	r2,r2,18320
  120d58:	e0bffc15 	stw	r2,-16(fp)
                                             " One-Shot "  };



    /* display the trigger mode */
    plot_string(x_pos, y_pos, modes[trigger_mode], style);
  120d5c:	d0a00b17 	ldw	r2,-32724(gp)
  120d60:	1085883a 	add	r2,r2,r2
  120d64:	1085883a 	add	r2,r2,r2
  120d68:	e0fffa04 	addi	r3,fp,-24
  120d6c:	1885883a 	add	r2,r3,r2
  120d70:	10c00017 	ldw	r3,0(r2)
  120d74:	e0bfff17 	ldw	r2,-4(fp)
  120d78:	e13ffd17 	ldw	r4,-12(fp)
  120d7c:	e17ffe17 	ldw	r5,-8(fp)
  120d80:	180d883a 	mov	r6,r3
  120d84:	100f883a 	mov	r7,r2
  120d88:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the trigger mode - return */
    return;

}
  120d8c:	e037883a 	mov	sp,fp
  120d90:	dfc00117 	ldw	ra,4(sp)
  120d94:	df000017 	ldw	fp,0(sp)
  120d98:	dec00204 	addi	sp,sp,8
  120d9c:	f800283a 	ret

00120da0 <set_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  set_scale(enum scale_type s)
{
  120da0:	defffd04 	addi	sp,sp,-12
  120da4:	dfc00215 	stw	ra,8(sp)
  120da8:	df000115 	stw	fp,4(sp)
  120dac:	df000104 	addi	fp,sp,4
  120db0:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the scale type */
    scale = s;
  120db4:	e0bfff17 	ldw	r2,-4(fp)
  120db8:	d0a00f15 	stw	r2,-32708(gp)

    /* output the scale appropriately */
    set_display_scale(scale);
  120dbc:	d0a00f17 	ldw	r2,-32708(gp)
  120dc0:	1009883a 	mov	r4,r2
  120dc4:	0121cd40 	call	121cd4 <set_display_scale>


    /* all done setting the scale type - return */
    return;
  120dc8:	0001883a 	nop

}
  120dcc:	e037883a 	mov	sp,fp
  120dd0:	dfc00117 	ldw	ra,4(sp)
  120dd4:	df000017 	ldw	fp,0(sp)
  120dd8:	dec00204 	addi	sp,sp,8
  120ddc:	f800283a 	ret

00120de0 <scale_down>:
   Last Modified:    May 9, 2006

*/

void  scale_down()
{
  120de0:	defffe04 	addi	sp,sp,-8
  120de4:	dfc00115 	stw	ra,4(sp)
  120de8:	df000015 	stw	fp,0(sp)
  120dec:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "next" scale type */
    if (scale == SCALE_NONE)
  120df0:	d0a00f17 	ldw	r2,-32708(gp)
  120df4:	1000031e 	bne	r2,zero,120e04 <scale_down+0x24>
        scale = SCALE_AXES;
  120df8:	00800044 	movi	r2,1
  120dfc:	d0a00f15 	stw	r2,-32708(gp)
  120e00:	00000706 	br	120e20 <scale_down+0x40>
    else if (scale == SCALE_AXES)
  120e04:	d0a00f17 	ldw	r2,-32708(gp)
  120e08:	10800058 	cmpnei	r2,r2,1
  120e0c:	1000031e 	bne	r2,zero,120e1c <scale_down+0x3c>
        scale = SCALE_GRID;
  120e10:	00800084 	movi	r2,2
  120e14:	d0a00f15 	stw	r2,-32708(gp)
  120e18:	00000106 	br	120e20 <scale_down+0x40>
    else
        scale = SCALE_NONE;
  120e1c:	d0200f15 	stw	zero,-32708(gp)

    /* set the scale type */
    set_display_scale(scale);
  120e20:	d0a00f17 	ldw	r2,-32708(gp)
  120e24:	1009883a 	mov	r4,r2
  120e28:	0121cd40 	call	121cd4 <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
  120e2c:	0001883a 	nop

}
  120e30:	e037883a 	mov	sp,fp
  120e34:	dfc00117 	ldw	ra,4(sp)
  120e38:	df000017 	ldw	fp,0(sp)
  120e3c:	dec00204 	addi	sp,sp,8
  120e40:	f800283a 	ret

00120e44 <scale_up>:
   Last Modified:    May 9, 2006

*/

void  scale_up()
{
  120e44:	defffe04 	addi	sp,sp,-8
  120e48:	dfc00115 	stw	ra,4(sp)
  120e4c:	df000015 	stw	fp,0(sp)
  120e50:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "previous" scale type */
    if (scale == SCALE_NONE)
  120e54:	d0a00f17 	ldw	r2,-32708(gp)
  120e58:	1000031e 	bne	r2,zero,120e68 <scale_up+0x24>
        scale = SCALE_GRID;
  120e5c:	00800084 	movi	r2,2
  120e60:	d0a00f15 	stw	r2,-32708(gp)
  120e64:	00000706 	br	120e84 <scale_up+0x40>
    else if (scale == SCALE_AXES)
  120e68:	d0a00f17 	ldw	r2,-32708(gp)
  120e6c:	10800058 	cmpnei	r2,r2,1
  120e70:	1000021e 	bne	r2,zero,120e7c <scale_up+0x38>
        scale = SCALE_NONE;
  120e74:	d0200f15 	stw	zero,-32708(gp)
  120e78:	00000206 	br	120e84 <scale_up+0x40>
    else
        scale = SCALE_AXES;
  120e7c:	00800044 	movi	r2,1
  120e80:	d0a00f15 	stw	r2,-32708(gp)

    /* set the scale type */
    set_display_scale(scale);
  120e84:	d0a00f17 	ldw	r2,-32708(gp)
  120e88:	1009883a 	mov	r4,r2
  120e8c:	0121cd40 	call	121cd4 <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
  120e90:	0001883a 	nop

}
  120e94:	e037883a 	mov	sp,fp
  120e98:	dfc00117 	ldw	ra,4(sp)
  120e9c:	df000017 	ldw	fp,0(sp)
  120ea0:	dec00204 	addi	sp,sp,8
  120ea4:	f800283a 	ret

00120ea8 <display_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  display_scale(int x_pos, int y_pos, int style)
{
  120ea8:	defff804 	addi	sp,sp,-32
  120eac:	dfc00715 	stw	ra,28(sp)
  120eb0:	df000615 	stw	fp,24(sp)
  120eb4:	df000604 	addi	fp,sp,24
  120eb8:	e13ffd15 	stw	r4,-12(fp)
  120ebc:	e17ffe15 	stw	r5,-8(fp)
  120ec0:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the scale type strings (must match enumerated type) */
    const char * const  scale_stat[] =  {  " None",
  120ec4:	008004b4 	movhi	r2,18
  120ec8:	1091e704 	addi	r2,r2,18332
  120ecc:	e0bffa15 	stw	r2,-24(fp)
  120ed0:	008004b4 	movhi	r2,18
  120ed4:	1091e904 	addi	r2,r2,18340
  120ed8:	e0bffb15 	stw	r2,-20(fp)
  120edc:	008004b4 	movhi	r2,18
  120ee0:	1091eb04 	addi	r2,r2,18348
  120ee4:	e0bffc15 	stw	r2,-16(fp)
                                                  " Grid"  };



    /* display the scale status */
    plot_string(x_pos, y_pos, scale_stat[scale], style);
  120ee8:	d0a00f17 	ldw	r2,-32708(gp)
  120eec:	1085883a 	add	r2,r2,r2
  120ef0:	1085883a 	add	r2,r2,r2
  120ef4:	e0fffa04 	addi	r3,fp,-24
  120ef8:	1885883a 	add	r2,r3,r2
  120efc:	10c00017 	ldw	r3,0(r2)
  120f00:	e0bfff17 	ldw	r2,-4(fp)
  120f04:	e13ffd17 	ldw	r4,-12(fp)
  120f08:	e17ffe17 	ldw	r5,-8(fp)
  120f0c:	180d883a 	mov	r6,r3
  120f10:	100f883a 	mov	r7,r2
  120f14:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the scale status - return */
    return;

}
  120f18:	e037883a 	mov	sp,fp
  120f1c:	dfc00117 	ldw	ra,4(sp)
  120f20:	df000017 	ldw	fp,0(sp)
  120f24:	dec00204 	addi	sp,sp,8
  120f28:	f800283a 	ret

00120f2c <set_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  set_sweep(int s)
{
  120f2c:	defffc04 	addi	sp,sp,-16
  120f30:	dfc00315 	stw	ra,12(sp)
  120f34:	df000215 	stw	fp,8(sp)
  120f38:	df000204 	addi	fp,sp,8
  120f3c:	e13fff15 	stw	r4,-4(fp)
    int  sample_size;		/* sample size for this sweep rate */



    /* set the new sweep rate */
    sweep = s;
  120f40:	e0bfff17 	ldw	r2,-4(fp)
  120f44:	d0a00d15 	stw	r2,-32716(gp)

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  120f48:	d0a00d17 	ldw	r2,-32716(gp)
  120f4c:	00c004b4 	movhi	r3,18
  120f50:	18d1bc04 	addi	r3,r3,18160
  120f54:	100490fa 	slli	r2,r2,3
  120f58:	1885883a 	add	r2,r3,r2
  120f5c:	10800017 	ldw	r2,0(r2)
  120f60:	1009883a 	mov	r4,r2
  120f64:	01219580 	call	121958 <set_sample_rate>
  120f68:	e0bffe15 	stw	r2,-8(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  120f6c:	e13ffe17 	ldw	r4,-8(fp)
  120f70:	0121ca80 	call	121ca8 <set_trace_size>


    /* all done initializing the sweep rate - return */
    return;
  120f74:	0001883a 	nop

}
  120f78:	e037883a 	mov	sp,fp
  120f7c:	dfc00117 	ldw	ra,4(sp)
  120f80:	df000017 	ldw	fp,0(sp)
  120f84:	dec00204 	addi	sp,sp,8
  120f88:	f800283a 	ret

00120f8c <sweep_down>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_down()
{
  120f8c:	defffd04 	addi	sp,sp,-12
  120f90:	dfc00215 	stw	ra,8(sp)
  120f94:	df000115 	stw	fp,4(sp)
  120f98:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* decrease the sweep rate, if not already the minimum */
    if (sweep > 0)  {
  120f9c:	d0a00d17 	ldw	r2,-32716(gp)
  120fa0:	0080090e 	bge	zero,r2,120fc8 <sweep_down+0x3c>
        /* not at minimum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep - 1));
  120fa4:	d0e00d17 	ldw	r3,-32716(gp)
  120fa8:	d0a00d17 	ldw	r2,-32716(gp)
  120fac:	10bfffc4 	addi	r2,r2,-1
  120fb0:	1809883a 	mov	r4,r3
  120fb4:	100b883a 	mov	r5,r2
  120fb8:	01214700 	call	121470 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep--;
  120fbc:	d0a00d17 	ldw	r2,-32716(gp)
  120fc0:	10bfffc4 	addi	r2,r2,-1
  120fc4:	d0a00d15 	stw	r2,-32716(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  120fc8:	d0a00d17 	ldw	r2,-32716(gp)
  120fcc:	00c004b4 	movhi	r3,18
  120fd0:	18d1bc04 	addi	r3,r3,18160
  120fd4:	100490fa 	slli	r2,r2,3
  120fd8:	1885883a 	add	r2,r3,r2
  120fdc:	10800017 	ldw	r2,0(r2)
  120fe0:	1009883a 	mov	r4,r2
  120fe4:	01219580 	call	121958 <set_sample_rate>
  120fe8:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  120fec:	e13fff17 	ldw	r4,-4(fp)
  120ff0:	0121ca80 	call	121ca8 <set_trace_size>


    /* all done with lowering the sweep rate - return */
    return;
  120ff4:	0001883a 	nop

}
  120ff8:	e037883a 	mov	sp,fp
  120ffc:	dfc00117 	ldw	ra,4(sp)
  121000:	df000017 	ldw	fp,0(sp)
  121004:	dec00204 	addi	sp,sp,8
  121008:	f800283a 	ret

0012100c <sweep_up>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_up()
{
  12100c:	defffd04 	addi	sp,sp,-12
  121010:	dfc00215 	stw	ra,8(sp)
  121014:	df000115 	stw	fp,4(sp)
  121018:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* increase the sweep rate, if not already the maximum */
    if (sweep < (NO_SWEEP_RATES - 1))  {
  12101c:	d0a00d17 	ldw	r2,-32716(gp)
  121020:	10800428 	cmpgeui	r2,r2,16
  121024:	1000091e 	bne	r2,zero,12104c <sweep_up+0x40>
        /* not at maximum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep + 1));
  121028:	d0e00d17 	ldw	r3,-32716(gp)
  12102c:	d0a00d17 	ldw	r2,-32716(gp)
  121030:	10800044 	addi	r2,r2,1
  121034:	1809883a 	mov	r4,r3
  121038:	100b883a 	mov	r5,r2
  12103c:	01214700 	call	121470 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep++;
  121040:	d0a00d17 	ldw	r2,-32716(gp)
  121044:	10800044 	addi	r2,r2,1
  121048:	d0a00d15 	stw	r2,-32716(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
  12104c:	d0a00d17 	ldw	r2,-32716(gp)
  121050:	00c004b4 	movhi	r3,18
  121054:	18d1bc04 	addi	r3,r3,18160
  121058:	100490fa 	slli	r2,r2,3
  12105c:	1885883a 	add	r2,r3,r2
  121060:	10800017 	ldw	r2,0(r2)
  121064:	1009883a 	mov	r4,r2
  121068:	01219580 	call	121958 <set_sample_rate>
  12106c:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
  121070:	e13fff17 	ldw	r4,-4(fp)
  121074:	0121ca80 	call	121ca8 <set_trace_size>


    /* all done with raising the sweep rate - return */
    return;
  121078:	0001883a 	nop

}
  12107c:	e037883a 	mov	sp,fp
  121080:	dfc00117 	ldw	ra,4(sp)
  121084:	df000017 	ldw	fp,0(sp)
  121088:	dec00204 	addi	sp,sp,8
  12108c:	f800283a 	ret

00121090 <display_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  display_sweep(int x_pos, int y_pos, int style)
{
  121090:	defffb04 	addi	sp,sp,-20
  121094:	dfc00415 	stw	ra,16(sp)
  121098:	df000315 	stw	fp,12(sp)
  12109c:	df000304 	addi	fp,sp,12
  1210a0:	e13ffd15 	stw	r4,-12(fp)
  1210a4:	e17ffe15 	stw	r5,-8(fp)
  1210a8:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* display the sweep rate */
    plot_string(x_pos, y_pos, sweep_rates[sweep].s, style);
  1210ac:	d0a00d17 	ldw	r2,-32716(gp)
  1210b0:	00c004b4 	movhi	r3,18
  1210b4:	18d1bc04 	addi	r3,r3,18160
  1210b8:	100490fa 	slli	r2,r2,3
  1210bc:	1885883a 	add	r2,r3,r2
  1210c0:	10800104 	addi	r2,r2,4
  1210c4:	10c00017 	ldw	r3,0(r2)
  1210c8:	e0bfff17 	ldw	r2,-4(fp)
  1210cc:	e13ffd17 	ldw	r4,-12(fp)
  1210d0:	e17ffe17 	ldw	r5,-8(fp)
  1210d4:	180d883a 	mov	r6,r3
  1210d8:	100f883a 	mov	r7,r2
  1210dc:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the sweep rate - return */
    return;
  1210e0:	0001883a 	nop

}
  1210e4:	e037883a 	mov	sp,fp
  1210e8:	dfc00117 	ldw	ra,4(sp)
  1210ec:	df000017 	ldw	fp,0(sp)
  1210f0:	dec00204 	addi	sp,sp,8
  1210f4:	f800283a 	ret

001210f8 <set_trg_level>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_level(int l)
{
  1210f8:	defffd04 	addi	sp,sp,-12
  1210fc:	dfc00215 	stw	ra,8(sp)
  121100:	df000115 	stw	fp,4(sp)
  121104:	df000104 	addi	fp,sp,4
  121108:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger level */
    level = l;
  12110c:	e0bfff17 	ldw	r2,-4(fp)
  121110:	d0a00c15 	stw	r2,-32720(gp)

    /* set the trigger level in hardware too */
    set_trigger(level, slope);
  121114:	d0e00c17 	ldw	r3,-32720(gp)
  121118:	d0a01017 	ldw	r2,-32704(gp)
  12111c:	1809883a 	mov	r4,r3
  121120:	100b883a 	mov	r5,r2
  121124:	012197c0 	call	12197c <set_trigger>


    /* all done initializing the trigger level - return */
    return;
  121128:	0001883a 	nop

}
  12112c:	e037883a 	mov	sp,fp
  121130:	dfc00117 	ldw	ra,4(sp)
  121134:	df000017 	ldw	fp,0(sp)
  121138:	dec00204 	addi	sp,sp,8
  12113c:	f800283a 	ret

00121140 <trg_level_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_down()
{
  121140:	defffe04 	addi	sp,sp,-8
  121144:	dfc00115 	stw	ra,4(sp)
  121148:	df000015 	stw	fp,0(sp)
  12114c:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger level, if not already the minimum */
    if (level > MIN_TRG_LEVEL_SET)
  121150:	d0a00c17 	ldw	r2,-32720(gp)
  121154:	0080030e 	bge	zero,r2,121164 <trg_level_down+0x24>
        level--;
  121158:	d0a00c17 	ldw	r2,-32720(gp)
  12115c:	10bfffc4 	addi	r2,r2,-1
  121160:	d0a00c15 	stw	r2,-32720(gp)

    /* set the trigger level for the hardware */
    set_trigger(level, slope);
  121164:	d0e00c17 	ldw	r3,-32720(gp)
  121168:	d0a01017 	ldw	r2,-32704(gp)
  12116c:	1809883a 	mov	r4,r3
  121170:	100b883a 	mov	r5,r2
  121174:	012197c0 	call	12197c <set_trigger>


    /* all done with lowering the trigger level - return */
    return;
  121178:	0001883a 	nop

}
  12117c:	e037883a 	mov	sp,fp
  121180:	dfc00117 	ldw	ra,4(sp)
  121184:	df000017 	ldw	fp,0(sp)
  121188:	dec00204 	addi	sp,sp,8
  12118c:	f800283a 	ret

00121190 <trg_level_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_up()
{
  121190:	defffe04 	addi	sp,sp,-8
  121194:	dfc00115 	stw	ra,4(sp)
  121198:	df000015 	stw	fp,0(sp)
  12119c:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger level, if not already the maximum */
    if (level < MAX_TRG_LEVEL_SET)
  1211a0:	d0a00c17 	ldw	r2,-32720(gp)
  1211a4:	10801fc8 	cmpgei	r2,r2,127
  1211a8:	1000031e 	bne	r2,zero,1211b8 <trg_level_up+0x28>
        level++;
  1211ac:	d0a00c17 	ldw	r2,-32720(gp)
  1211b0:	10800044 	addi	r2,r2,1
  1211b4:	d0a00c15 	stw	r2,-32720(gp)

    /* tell the hardware the new trigger level */
    set_trigger(level, slope);
  1211b8:	d0e00c17 	ldw	r3,-32720(gp)
  1211bc:	d0a01017 	ldw	r2,-32704(gp)
  1211c0:	1809883a 	mov	r4,r3
  1211c4:	100b883a 	mov	r5,r2
  1211c8:	012197c0 	call	12197c <set_trigger>


    /* all done raising the trigger level - return */
    return;
  1211cc:	0001883a 	nop

}
  1211d0:	e037883a 	mov	sp,fp
  1211d4:	dfc00117 	ldw	ra,4(sp)
  1211d8:	df000017 	ldw	fp,0(sp)
  1211dc:	dec00204 	addi	sp,sp,8
  1211e0:	f800283a 	ret

001211e4 <display_trg_level>:
   Last Modified:    Mar. 10, 1995

*/

void  display_trg_level(int x_pos, int y_pos, int style)
{
  1211e4:	defff704 	addi	sp,sp,-36
  1211e8:	dfc00815 	stw	ra,32(sp)
  1211ec:	df000715 	stw	fp,28(sp)
  1211f0:	df000704 	addi	fp,sp,28
  1211f4:	e13ffd15 	stw	r4,-12(fp)
  1211f8:	e17ffe15 	stw	r5,-8(fp)
  1211fc:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      level_str[] = "        "; /* string containing the trigger level */
  121200:	00880834 	movhi	r2,8224
  121204:	10880804 	addi	r2,r2,8224
  121208:	e0bffa15 	stw	r2,-24(fp)
  12120c:	00880834 	movhi	r2,8224
  121210:	10880804 	addi	r2,r2,8224
  121214:	e0bffb15 	stw	r2,-20(fp)
  121218:	e03ffc05 	stb	zero,-16(fp)
    long int  l;			/* trigger level in mV */



    /* compute the trigger level in millivolts */
    l = ((long int) MAX_LEVEL - MIN_LEVEL) * level / (MAX_TRG_LEVEL_SET - MIN_TRG_LEVEL_SET) + MIN_LEVEL;
  12121c:	d0a00c17 	ldw	r2,-32720(gp)
  121220:	1009883a 	mov	r4,r2
  121224:	0144e204 	movi	r5,5000
  121228:	01234e80 	call	1234e8 <__mulsi3>
  12122c:	1009883a 	mov	r4,r2
  121230:	01401fc4 	movi	r5,127
  121234:	012342c0 	call	12342c <__divsi3>
  121238:	e0bff915 	stw	r2,-28(fp)

    /* convert the level to the string (leave first character blank) */
    cvt_num_field(l, &level_str[1]);
  12123c:	e0bffa04 	addi	r2,fp,-24
  121240:	10800044 	addi	r2,r2,1
  121244:	e13ff917 	ldw	r4,-28(fp)
  121248:	100b883a 	mov	r5,r2
  12124c:	01217740 	call	121774 <cvt_num_field>

    /* add in the units */
    level_str[7] = 'V';
  121250:	00801584 	movi	r2,86
  121254:	e0bffbc5 	stb	r2,-17(fp)


    /* now finally display the trigger level */
    plot_string(x_pos, y_pos, level_str, style);
  121258:	e0bfff17 	ldw	r2,-4(fp)
  12125c:	e0fffa04 	addi	r3,fp,-24
  121260:	e13ffd17 	ldw	r4,-12(fp)
  121264:	e17ffe17 	ldw	r5,-8(fp)
  121268:	180d883a 	mov	r6,r3
  12126c:	100f883a 	mov	r7,r2
  121270:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the trigger level - return */
    return;

}
  121274:	e037883a 	mov	sp,fp
  121278:	dfc00117 	ldw	ra,4(sp)
  12127c:	df000017 	ldw	fp,0(sp)
  121280:	dec00204 	addi	sp,sp,8
  121284:	f800283a 	ret

00121288 <set_trg_slope>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_slope(enum slope_type s)
{
  121288:	defffd04 	addi	sp,sp,-12
  12128c:	dfc00215 	stw	ra,8(sp)
  121290:	df000115 	stw	fp,4(sp)
  121294:	df000104 	addi	fp,sp,4
  121298:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the slope type */
    slope = s;
  12129c:	e0bfff17 	ldw	r2,-4(fp)
  1212a0:	d0a01015 	stw	r2,-32704(gp)

    /* also tell the hardware what the slope is */
    set_trigger(level, slope);
  1212a4:	d0e00c17 	ldw	r3,-32720(gp)
  1212a8:	d0a01017 	ldw	r2,-32704(gp)
  1212ac:	1809883a 	mov	r4,r3
  1212b0:	100b883a 	mov	r5,r2
  1212b4:	012197c0 	call	12197c <set_trigger>


    /* all done setting the trigger slope - return */
    return;
  1212b8:	0001883a 	nop

}
  1212bc:	e037883a 	mov	sp,fp
  1212c0:	dfc00117 	ldw	ra,4(sp)
  1212c4:	df000017 	ldw	fp,0(sp)
  1212c8:	dec00204 	addi	sp,sp,8
  1212cc:	f800283a 	ret

001212d0 <trg_slope_toggle>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_slope_toggle()
{
  1212d0:	defffe04 	addi	sp,sp,-8
  1212d4:	dfc00115 	stw	ra,4(sp)
  1212d8:	df000015 	stw	fp,0(sp)
  1212dc:	d839883a 	mov	fp,sp
      /* none */



    /* toggle the trigger slope */
    if (slope == SLOPE_POSITIVE)
  1212e0:	d0a01017 	ldw	r2,-32704(gp)
  1212e4:	1000031e 	bne	r2,zero,1212f4 <trg_slope_toggle+0x24>
        slope = SLOPE_NEGATIVE;
  1212e8:	00800044 	movi	r2,1
  1212ec:	d0a01015 	stw	r2,-32704(gp)
  1212f0:	00000106 	br	1212f8 <trg_slope_toggle+0x28>
    else
        slope = SLOPE_POSITIVE;
  1212f4:	d0201015 	stw	zero,-32704(gp)

    /* set the new trigger slope */
    set_trigger(level, slope);
  1212f8:	d0e00c17 	ldw	r3,-32720(gp)
  1212fc:	d0a01017 	ldw	r2,-32704(gp)
  121300:	1809883a 	mov	r4,r3
  121304:	100b883a 	mov	r5,r2
  121308:	012197c0 	call	12197c <set_trigger>


    /* all done with the trigger slope - return */
    return;
  12130c:	0001883a 	nop

}
  121310:	e037883a 	mov	sp,fp
  121314:	dfc00117 	ldw	ra,4(sp)
  121318:	df000017 	ldw	fp,0(sp)
  12131c:	dec00204 	addi	sp,sp,8
  121320:	f800283a 	ret

00121324 <display_trg_slope>:
   Last Modified:    Mar. 13, 1994

*/

void  display_trg_slope(int x_pos, int y_pos, int style)
{
  121324:	defff904 	addi	sp,sp,-28
  121328:	dfc00615 	stw	ra,24(sp)
  12132c:	df000515 	stw	fp,20(sp)
  121330:	df000504 	addi	fp,sp,20
  121334:	e13ffd15 	stw	r4,-12(fp)
  121338:	e17ffe15 	stw	r5,-8(fp)
  12133c:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* the trigger slope strings (must match enumerated type) */
    const char * const  slopes[] =  {  " +", " -"  };
  121340:	008004b4 	movhi	r2,18
  121344:	1091ed04 	addi	r2,r2,18356
  121348:	e0bffb15 	stw	r2,-20(fp)
  12134c:	008004b4 	movhi	r2,18
  121350:	1091ee04 	addi	r2,r2,18360
  121354:	e0bffc15 	stw	r2,-16(fp)



    /* display the trigger slope */
    plot_string(x_pos, y_pos, slopes[slope], style);
  121358:	d0a01017 	ldw	r2,-32704(gp)
  12135c:	1085883a 	add	r2,r2,r2
  121360:	1085883a 	add	r2,r2,r2
  121364:	e0fffb04 	addi	r3,fp,-20
  121368:	1885883a 	add	r2,r3,r2
  12136c:	10c00017 	ldw	r3,0(r2)
  121370:	e0bfff17 	ldw	r2,-4(fp)
  121374:	e13ffd17 	ldw	r4,-12(fp)
  121378:	e17ffe17 	ldw	r5,-8(fp)
  12137c:	180d883a 	mov	r6,r3
  121380:	100f883a 	mov	r7,r2
  121384:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the trigger slope - return */
    return;

}
  121388:	e037883a 	mov	sp,fp
  12138c:	dfc00117 	ldw	ra,4(sp)
  121390:	df000017 	ldw	fp,0(sp)
  121394:	dec00204 	addi	sp,sp,8
  121398:	f800283a 	ret

0012139c <set_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_delay(long int d)
{
  12139c:	defffd04 	addi	sp,sp,-12
  1213a0:	dfc00215 	stw	ra,8(sp)
  1213a4:	df000115 	stw	fp,4(sp)
  1213a8:	df000104 	addi	fp,sp,4
  1213ac:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger delay */
    delay = d;
  1213b0:	e0bfff17 	ldw	r2,-4(fp)
  1213b4:	d0a00e15 	stw	r2,-32712(gp)

    /* set the trigger delay in hardware too */
    set_delay(delay);
  1213b8:	d0a00e17 	ldw	r2,-32712(gp)
  1213bc:	1009883a 	mov	r4,r2
  1213c0:	01219a40 	call	1219a4 <set_delay>


    /* all done initializing the trigger delay - return */
    return;
  1213c4:	0001883a 	nop

}
  1213c8:	e037883a 	mov	sp,fp
  1213cc:	dfc00117 	ldw	ra,4(sp)
  1213d0:	df000017 	ldw	fp,0(sp)
  1213d4:	dec00204 	addi	sp,sp,8
  1213d8:	f800283a 	ret

001213dc <trg_delay_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_down()
{
  1213dc:	defffe04 	addi	sp,sp,-8
  1213e0:	dfc00115 	stw	ra,4(sp)
  1213e4:	df000015 	stw	fp,0(sp)
  1213e8:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger delay, if not already the minimum */
    if (delay > MIN_DELAY)
  1213ec:	d0a00e17 	ldw	r2,-32712(gp)
  1213f0:	0080030e 	bge	zero,r2,121400 <trg_delay_down+0x24>
        delay--;
  1213f4:	d0a00e17 	ldw	r2,-32712(gp)
  1213f8:	10bfffc4 	addi	r2,r2,-1
  1213fc:	d0a00e15 	stw	r2,-32712(gp)

    /* set the trigger delay for the hardware */
    set_delay(delay);
  121400:	d0a00e17 	ldw	r2,-32712(gp)
  121404:	1009883a 	mov	r4,r2
  121408:	01219a40 	call	1219a4 <set_delay>


    /* all done with lowering the trigger delay - return */
    return;
  12140c:	0001883a 	nop

}
  121410:	e037883a 	mov	sp,fp
  121414:	dfc00117 	ldw	ra,4(sp)
  121418:	df000017 	ldw	fp,0(sp)
  12141c:	dec00204 	addi	sp,sp,8
  121420:	f800283a 	ret

00121424 <trg_delay_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_up()
{
  121424:	defffe04 	addi	sp,sp,-8
  121428:	dfc00115 	stw	ra,4(sp)
  12142c:	df000015 	stw	fp,0(sp)
  121430:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger delay, if not already the maximum */
    if (delay < MAX_DELAY)
  121434:	d0a00e17 	ldw	r2,-32712(gp)
  121438:	00f0d3d4 	movui	r3,49999
  12143c:	18800316 	blt	r3,r2,12144c <trg_delay_up+0x28>
        delay++;
  121440:	d0a00e17 	ldw	r2,-32712(gp)
  121444:	10800044 	addi	r2,r2,1
  121448:	d0a00e15 	stw	r2,-32712(gp)

    /* tell the hardware the new trigger delay */
    set_delay(delay);
  12144c:	d0a00e17 	ldw	r2,-32712(gp)
  121450:	1009883a 	mov	r4,r2
  121454:	01219a40 	call	1219a4 <set_delay>


    /* all done raising the trigger delay - return */
    return;
  121458:	0001883a 	nop

}
  12145c:	e037883a 	mov	sp,fp
  121460:	dfc00117 	ldw	ra,4(sp)
  121464:	df000017 	ldw	fp,0(sp)
  121468:	dec00204 	addi	sp,sp,8
  12146c:	f800283a 	ret

00121470 <adjust_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  adjust_trg_delay(int old_sweep, int new_sweep)
{
  121470:	defffc04 	addi	sp,sp,-16
  121474:	dfc00315 	stw	ra,12(sp)
  121478:	df000215 	stw	fp,8(sp)
  12147c:	df000204 	addi	fp,sp,8
  121480:	e13ffe15 	stw	r4,-8(fp)
  121484:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* multiply by 10 times the ratio of sweep rates */
    delay *= (10 * sweep_rates[new_sweep].sample_rate) / sweep_rates[old_sweep].sample_rate;
  121488:	00c004b4 	movhi	r3,18
  12148c:	18d1bc04 	addi	r3,r3,18160
  121490:	e0bfff17 	ldw	r2,-4(fp)
  121494:	100490fa 	slli	r2,r2,3
  121498:	1885883a 	add	r2,r3,r2
  12149c:	10800017 	ldw	r2,0(r2)
  1214a0:	1009883a 	mov	r4,r2
  1214a4:	01400284 	movi	r5,10
  1214a8:	01234e80 	call	1234e8 <__mulsi3>
  1214ac:	1007883a 	mov	r3,r2
  1214b0:	010004b4 	movhi	r4,18
  1214b4:	2111bc04 	addi	r4,r4,18160
  1214b8:	e0bffe17 	ldw	r2,-8(fp)
  1214bc:	100490fa 	slli	r2,r2,3
  1214c0:	2085883a 	add	r2,r4,r2
  1214c4:	10800017 	ldw	r2,0(r2)
  1214c8:	1809883a 	mov	r4,r3
  1214cc:	100b883a 	mov	r5,r2
  1214d0:	012342c0 	call	12342c <__divsi3>
  1214d4:	1007883a 	mov	r3,r2
  1214d8:	d0a00e17 	ldw	r2,-32712(gp)
  1214dc:	1809883a 	mov	r4,r3
  1214e0:	100b883a 	mov	r5,r2
  1214e4:	01234e80 	call	1234e8 <__mulsi3>
  1214e8:	d0a00e15 	stw	r2,-32712(gp)
    /* now divide the factor of 10 back out */
    delay /= 10;
  1214ec:	d0a00e17 	ldw	r2,-32712(gp)
  1214f0:	1009883a 	mov	r4,r2
  1214f4:	01400284 	movi	r5,10
  1214f8:	012342c0 	call	12342c <__divsi3>
  1214fc:	d0a00e15 	stw	r2,-32712(gp)

    /* make sure delay is not out of range */
    if (delay > MAX_DELAY)
  121500:	d0a00e17 	ldw	r2,-32712(gp)
  121504:	00f0d414 	movui	r3,50000
  121508:	1880020e 	bge	r3,r2,121514 <adjust_trg_delay+0xa4>
        /* delay is too large - set to maximum */
        delay = MAX_DELAY;
  12150c:	00b0d414 	movui	r2,50000
  121510:	d0a00e15 	stw	r2,-32712(gp)
    if (delay < MIN_DELAY)
  121514:	d0a00e17 	ldw	r2,-32712(gp)
  121518:	1000010e 	bge	r2,zero,121520 <adjust_trg_delay+0xb0>
        /* delay is too small - set to minimum */
	delay = MIN_DELAY;
  12151c:	d0200e15 	stw	zero,-32712(gp)


    /* tell the hardware the new trigger delay */
    set_delay(delay);
  121520:	d0a00e17 	ldw	r2,-32712(gp)
  121524:	1009883a 	mov	r4,r2
  121528:	01219a40 	call	1219a4 <set_delay>


    /* all done adjusting the trigger delay - return */
    return;
  12152c:	0001883a 	nop

}
  121530:	e037883a 	mov	sp,fp
  121534:	dfc00117 	ldw	ra,4(sp)
  121538:	df000017 	ldw	fp,0(sp)
  12153c:	dec00204 	addi	sp,sp,8
  121540:	f800283a 	ret

00121544 <display_trg_delay>:
   Last Modified:    May 3, 2006

*/

void  display_trg_delay(int x_pos, int y_pos, int style)
{
  121544:	defff604 	addi	sp,sp,-40
  121548:	dfc00915 	stw	ra,36(sp)
  12154c:	df000815 	stw	fp,32(sp)
  121550:	df000804 	addi	fp,sp,32
  121554:	e13ffd15 	stw	r4,-12(fp)
  121558:	e17ffe15 	stw	r5,-8(fp)
  12155c:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      delay_str[] = "         "; /* string containing the trigger delay */
  121560:	00880834 	movhi	r2,8224
  121564:	10880804 	addi	r2,r2,8224
  121568:	e0bffa15 	stw	r2,-24(fp)
  12156c:	00880834 	movhi	r2,8224
  121570:	10880804 	addi	r2,r2,8224
  121574:	e0bffb15 	stw	r2,-20(fp)
  121578:	00800804 	movi	r2,32
  12157c:	e0bffc0d 	sth	r2,-16(fp)
    long int  d;                         /* delay in appropriate units */


    /* compute the delay in the appropriate units */
    /* have to watch out for overflow, so be careful */
    if (sweep_rates[sweep].sample_rate > 1000000L)  {
  121580:	d0a00d17 	ldw	r2,-32716(gp)
  121584:	00c004b4 	movhi	r3,18
  121588:	18d1bc04 	addi	r3,r3,18160
  12158c:	100490fa 	slli	r2,r2,3
  121590:	1885883a 	add	r2,r3,r2
  121594:	10800017 	ldw	r2,0(r2)
  121598:	00c003f4 	movhi	r3,15
  12159c:	18d09004 	addi	r3,r3,16960
  1215a0:	1880170e 	bge	r3,r2,121600 <display_trg_delay+0xbc>
        /* have a fast sweep rate, could overflow */
        /* first compute in units of 100 ns */
        d = delay * (10000000L / sweep_rates[sweep].sample_rate);
  1215a4:	d0a00d17 	ldw	r2,-32716(gp)
  1215a8:	00c004b4 	movhi	r3,18
  1215ac:	18d1bc04 	addi	r3,r3,18160
  1215b0:	100490fa 	slli	r2,r2,3
  1215b4:	1885883a 	add	r2,r3,r2
  1215b8:	10800017 	ldw	r2,0(r2)
  1215bc:	01002674 	movhi	r4,153
  1215c0:	2125a004 	addi	r4,r4,-27008
  1215c4:	100b883a 	mov	r5,r2
  1215c8:	012342c0 	call	12342c <__divsi3>
  1215cc:	1007883a 	mov	r3,r2
  1215d0:	d0a00e17 	ldw	r2,-32712(gp)
  1215d4:	1809883a 	mov	r4,r3
  1215d8:	100b883a 	mov	r5,r2
  1215dc:	01234e80 	call	1234e8 <__mulsi3>
  1215e0:	e0bff915 	stw	r2,-28(fp)
	/* now convert to nanoseconds */
	d *= 100L;
  1215e4:	e13ff917 	ldw	r4,-28(fp)
  1215e8:	01401904 	movi	r5,100
  1215ec:	01234e80 	call	1234e8 <__mulsi3>
  1215f0:	e0bff915 	stw	r2,-28(fp)
	/* need to divide by 1000 to get to microseconds */
	units_adj = 1000;
  1215f4:	0080fa04 	movi	r2,1000
  1215f8:	e0bff815 	stw	r2,-32(fp)
  1215fc:	00001206 	br	121648 <display_trg_delay+0x104>
    }
    else  {
        /* slow sweep rate, don't have to worry about overflow */
        d = delay * (1000000L / sweep_rates[sweep].sample_rate);
  121600:	d0a00d17 	ldw	r2,-32716(gp)
  121604:	00c004b4 	movhi	r3,18
  121608:	18d1bc04 	addi	r3,r3,18160
  12160c:	100490fa 	slli	r2,r2,3
  121610:	1885883a 	add	r2,r3,r2
  121614:	10800017 	ldw	r2,0(r2)
  121618:	010003f4 	movhi	r4,15
  12161c:	21109004 	addi	r4,r4,16960
  121620:	100b883a 	mov	r5,r2
  121624:	012342c0 	call	12342c <__divsi3>
  121628:	1007883a 	mov	r3,r2
  12162c:	d0a00e17 	ldw	r2,-32712(gp)
  121630:	1809883a 	mov	r4,r3
  121634:	100b883a 	mov	r5,r2
  121638:	01234e80 	call	1234e8 <__mulsi3>
  12163c:	e0bff915 	stw	r2,-28(fp)
	/* already in microseconds, so adjustment is 1 */
	units_adj = 1;
  121640:	00800044 	movi	r2,1
  121644:	e0bff815 	stw	r2,-32(fp)
    }

    /* convert it to the string (leave first character blank) */
    cvt_num_field(d, &delay_str[1]);
  121648:	e0bffa04 	addi	r2,fp,-24
  12164c:	10800044 	addi	r2,r2,1
  121650:	e13ff917 	ldw	r4,-28(fp)
  121654:	100b883a 	mov	r5,r2
  121658:	01217740 	call	121774 <cvt_num_field>

    /* add in the units */
    if (((d / units_adj) < 1000) && ((d / units_adj) > -1000) && (units_adj == 1000)) {
  12165c:	e13ff917 	ldw	r4,-28(fp)
  121660:	e17ff817 	ldw	r5,-32(fp)
  121664:	012342c0 	call	12342c <__divsi3>
  121668:	1080fa08 	cmpgei	r2,r2,1000
  12166c:	10000d1e 	bne	r2,zero,1216a4 <display_trg_delay+0x160>
  121670:	e13ff917 	ldw	r4,-28(fp)
  121674:	e17ff817 	ldw	r5,-32(fp)
  121678:	012342c0 	call	12342c <__divsi3>
  12167c:	10bf0650 	cmplti	r2,r2,-999
  121680:	1000081e 	bne	r2,zero,1216a4 <display_trg_delay+0x160>
  121684:	e0bff817 	ldw	r2,-32(fp)
  121688:	1080fa18 	cmpnei	r2,r2,1000
  12168c:	1000051e 	bne	r2,zero,1216a4 <display_trg_delay+0x160>
        /* delay is in microseconds */
	delay_str[7] = '\004';
  121690:	00800104 	movi	r2,4
  121694:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
  121698:	00801cc4 	movi	r2,115
  12169c:	e0bffc05 	stb	r2,-16(fp)
  1216a0:	00002806 	br	121744 <display_trg_delay+0x200>
    }
    else if (((d / units_adj) < 1000000) && ((d / units_adj) > -1000000)) {
  1216a4:	e13ff917 	ldw	r4,-28(fp)
  1216a8:	e17ff817 	ldw	r5,-32(fp)
  1216ac:	012342c0 	call	12342c <__divsi3>
  1216b0:	00c003f4 	movhi	r3,15
  1216b4:	18d08fc4 	addi	r3,r3,16959
  1216b8:	18800c16 	blt	r3,r2,1216ec <display_trg_delay+0x1a8>
  1216bc:	e13ff917 	ldw	r4,-28(fp)
  1216c0:	e17ff817 	ldw	r5,-32(fp)
  1216c4:	012342c0 	call	12342c <__divsi3>
  1216c8:	1007883a 	mov	r3,r2
  1216cc:	00bffc74 	movhi	r2,65521
  1216d0:	10af7044 	addi	r2,r2,-16959
  1216d4:	18800516 	blt	r3,r2,1216ec <display_trg_delay+0x1a8>
        /* delay is in milliseconds */
	delay_str[7] = 'm';
  1216d8:	00801b44 	movi	r2,109
  1216dc:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
  1216e0:	00801cc4 	movi	r2,115
  1216e4:	e0bffc05 	stb	r2,-16(fp)
  1216e8:	00001606 	br	121744 <display_trg_delay+0x200>
    }
    else if (((d / units_adj) < 1000000000) && ((d / units_adj) > -1000000000))  {
  1216ec:	e13ff917 	ldw	r4,-28(fp)
  1216f0:	e17ff817 	ldw	r5,-32(fp)
  1216f4:	012342c0 	call	12342c <__divsi3>
  1216f8:	00cee6f4 	movhi	r3,15259
  1216fc:	18f27fc4 	addi	r3,r3,-13825
  121700:	18800c16 	blt	r3,r2,121734 <display_trg_delay+0x1f0>
  121704:	e13ff917 	ldw	r4,-28(fp)
  121708:	e17ff817 	ldw	r5,-32(fp)
  12170c:	012342c0 	call	12342c <__divsi3>
  121710:	1007883a 	mov	r3,r2
  121714:	00b11974 	movhi	r2,50277
  121718:	108d8044 	addi	r2,r2,13825
  12171c:	18800516 	blt	r3,r2,121734 <display_trg_delay+0x1f0>
        /* delay is in seconds */
	delay_str[7] = 's';
  121720:	00801cc4 	movi	r2,115
  121724:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = ' ';
  121728:	00800804 	movi	r2,32
  12172c:	e0bffc05 	stb	r2,-16(fp)
  121730:	00000406 	br	121744 <display_trg_delay+0x200>
    }
    else  {
        /* delay is in kiloseconds */
	delay_str[7] = 'k';
  121734:	00801ac4 	movi	r2,107
  121738:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
  12173c:	00801cc4 	movi	r2,115
  121740:	e0bffc05 	stb	r2,-16(fp)
    }


    /* now actually display the trigger delay */
    plot_string(x_pos, y_pos, delay_str, style);
  121744:	e0bfff17 	ldw	r2,-4(fp)
  121748:	e0fffa04 	addi	r3,fp,-24
  12174c:	e13ffd17 	ldw	r4,-12(fp)
  121750:	e17ffe17 	ldw	r5,-8(fp)
  121754:	180d883a 	mov	r6,r3
  121758:	100f883a 	mov	r7,r2
  12175c:	01204e40 	call	1204e4 <plot_string>


    /* all done displaying the trigger delay - return */
    return;

}
  121760:	e037883a 	mov	sp,fp
  121764:	dfc00117 	ldw	ra,4(sp)
  121768:	df000017 	ldw	fp,0(sp)
  12176c:	dec00204 	addi	sp,sp,8
  121770:	f800283a 	ret

00121774 <cvt_num_field>:
   Last Modified:    Mar. 8, 1994

*/

void  cvt_num_field(long int n, char *s)
{
  121774:	defff804 	addi	sp,sp,-32
  121778:	dfc00715 	stw	ra,28(sp)
  12177c:	df000615 	stw	fp,24(sp)
  121780:	dc000515 	stw	r16,20(sp)
  121784:	df000504 	addi	fp,sp,20
  121788:	e13ffe15 	stw	r4,-8(fp)
  12178c:	e17fff15 	stw	r5,-4(fp)
    /* variables */
    int  dp = 3;		/* digits to right of decimal point */
  121790:	008000c4 	movi	r2,3
  121794:	e0bffb15 	stw	r2,-20(fp)
    int  d;			/* digit weight (power of 10) */

    int  i = 0;			/* string index */
  121798:	e03ffd15 	stw	zero,-12(fp)



    /* first get the sign (and make n positive for conversion) */
    if (n < 0)  {
  12179c:	e0bffe17 	ldw	r2,-8(fp)
  1217a0:	10000c0e 	bge	r2,zero,1217d4 <cvt_num_field+0x60>
        /* n is negative, set sign and convert to positive */
	s[i++] = '-';
  1217a4:	e0bffd17 	ldw	r2,-12(fp)
  1217a8:	e0ffff17 	ldw	r3,-4(fp)
  1217ac:	1885883a 	add	r2,r3,r2
  1217b0:	00c00b44 	movi	r3,45
  1217b4:	10c00005 	stb	r3,0(r2)
  1217b8:	e0bffd17 	ldw	r2,-12(fp)
  1217bc:	10800044 	addi	r2,r2,1
  1217c0:	e0bffd15 	stw	r2,-12(fp)
	n = -n;
  1217c4:	e0bffe17 	ldw	r2,-8(fp)
  1217c8:	0085c83a 	sub	r2,zero,r2
  1217cc:	e0bffe15 	stw	r2,-8(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  1217d0:	00001106 	br	121818 <cvt_num_field+0xa4>
	s[i++] = '-';
	n = -n;
    }
    else  {
        /* n is positive, set sign only */
	s[i++] = '+';
  1217d4:	e0bffd17 	ldw	r2,-12(fp)
  1217d8:	e0ffff17 	ldw	r3,-4(fp)
  1217dc:	1885883a 	add	r2,r3,r2
  1217e0:	00c00ac4 	movi	r3,43
  1217e4:	10c00005 	stb	r3,0(r2)
  1217e8:	e0bffd17 	ldw	r2,-12(fp)
  1217ec:	10800044 	addi	r2,r2,1
  1217f0:	e0bffd15 	stw	r2,-12(fp)
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  1217f4:	00000806 	br	121818 <cvt_num_field+0xa4>
        /* have more than 4 digits - get rid of one */
	n /= 10;
  1217f8:	e0bffe17 	ldw	r2,-8(fp)
  1217fc:	1009883a 	mov	r4,r2
  121800:	01400284 	movi	r5,10
  121804:	012342c0 	call	12342c <__divsi3>
  121808:	e0bffe15 	stw	r2,-8(fp)
	/* adjust the decimal point */
	dp--;
  12180c:	e0bffb17 	ldw	r2,-20(fp)
  121810:	10bfffc4 	addi	r2,r2,-1
  121814:	e0bffb15 	stw	r2,-20(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
  121818:	e0bffe17 	ldw	r2,-8(fp)
  12181c:	1089c408 	cmpgei	r2,r2,10000
  121820:	103ff51e 	bne	r2,zero,1217f8 <cvt_num_field+0x84>
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
  121824:	00000306 	br	121834 <cvt_num_field+0xc0>
       dp += 3;
  121828:	e0bffb17 	ldw	r2,-20(fp)
  12182c:	108000c4 	addi	r2,r2,3
  121830:	e0bffb15 	stw	r2,-20(fp)
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
  121834:	e0bffb17 	ldw	r2,-20(fp)
  121838:	00bffb0e 	bge	zero,r2,121828 <cvt_num_field+0xb4>
       dp += 3;


    /* adjust dp to be digits to the right of the decimal point */
    /* (assuming 4 digits) */
    dp = 4 - dp;
  12183c:	00c00104 	movi	r3,4
  121840:	e0bffb17 	ldw	r2,-20(fp)
  121844:	1885c83a 	sub	r2,r3,r2
  121848:	e0bffb15 	stw	r2,-20(fp)


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
  12184c:	0080fa04 	movi	r2,1000
  121850:	e0bffc15 	stw	r2,-16(fp)
  121854:	00002406 	br	1218e8 <cvt_num_field+0x174>

        /* check if need decimal the decimal point now */
	if (dp-- == 0)
  121858:	e0bffb17 	ldw	r2,-20(fp)
  12185c:	1005003a 	cmpeq	r2,r2,zero
  121860:	e0fffb17 	ldw	r3,-20(fp)
  121864:	18ffffc4 	addi	r3,r3,-1
  121868:	e0fffb15 	stw	r3,-20(fp)
  12186c:	10803fcc 	andi	r2,r2,255
  121870:	10000826 	beq	r2,zero,121894 <cvt_num_field+0x120>
	    /* time for decimal point */
	    s[i++] = '.';
  121874:	e0bffd17 	ldw	r2,-12(fp)
  121878:	e0ffff17 	ldw	r3,-4(fp)
  12187c:	1885883a 	add	r2,r3,r2
  121880:	00c00b84 	movi	r3,46
  121884:	10c00005 	stb	r3,0(r2)
  121888:	e0bffd17 	ldw	r2,-12(fp)
  12188c:	10800044 	addi	r2,r2,1
  121890:	e0bffd15 	stw	r2,-12(fp)

	/* get and convert this digit */
	s[i++] = (n / d) + '0';
  121894:	e0bffd17 	ldw	r2,-12(fp)
  121898:	e0ffff17 	ldw	r3,-4(fp)
  12189c:	18a1883a 	add	r16,r3,r2
  1218a0:	e13ffe17 	ldw	r4,-8(fp)
  1218a4:	e17ffc17 	ldw	r5,-16(fp)
  1218a8:	012342c0 	call	12342c <__divsi3>
  1218ac:	10800c04 	addi	r2,r2,48
  1218b0:	80800005 	stb	r2,0(r16)
  1218b4:	e0bffd17 	ldw	r2,-12(fp)
  1218b8:	10800044 	addi	r2,r2,1
  1218bc:	e0bffd15 	stw	r2,-12(fp)
	/* remove this digit from n */
	n %= d;
  1218c0:	e0bffe17 	ldw	r2,-8(fp)
  1218c4:	1009883a 	mov	r4,r2
  1218c8:	e17ffc17 	ldw	r5,-16(fp)
  1218cc:	012347c0 	call	12347c <__modsi3>
  1218d0:	e0bffe15 	stw	r2,-8(fp)
    /* (assuming 4 digits) */
    dp = 4 - dp;


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
  1218d4:	e0bffc17 	ldw	r2,-16(fp)
  1218d8:	1009883a 	mov	r4,r2
  1218dc:	01400284 	movi	r5,10
  1218e0:	012342c0 	call	12342c <__divsi3>
  1218e4:	e0bffc15 	stw	r2,-16(fp)
  1218e8:	e0bffc17 	ldw	r2,-16(fp)
  1218ec:	00bfda16 	blt	zero,r2,121858 <cvt_num_field+0xe4>
	n %= d;
    }


    /* all done converting the number, return */
    return;
  1218f0:	0001883a 	nop

}
  1218f4:	e037883a 	mov	sp,fp
  1218f8:	dfc00217 	ldw	ra,8(sp)
  1218fc:	df000117 	ldw	fp,4(sp)
  121900:	dc000017 	ldw	r16,0(sp)
  121904:	dec00304 	addi	sp,sp,12
  121908:	f800283a 	ret

0012190c <clear_display>:


/* display functions  */

void  clear_display()
{
  12190c:	deffff04 	addi	sp,sp,-4
  121910:	df000015 	stw	fp,0(sp)
  121914:	d839883a 	mov	fp,sp
    return;
  121918:	0001883a 	nop
}
  12191c:	e037883a 	mov	sp,fp
  121920:	df000017 	ldw	fp,0(sp)
  121924:	dec00104 	addi	sp,sp,4
  121928:	f800283a 	ret

0012192c <plot_pixel>:

void  plot_pixel(unsigned int x, unsigned int y, int p)
{
  12192c:	defffc04 	addi	sp,sp,-16
  121930:	df000315 	stw	fp,12(sp)
  121934:	df000304 	addi	fp,sp,12
  121938:	e13ffd15 	stw	r4,-12(fp)
  12193c:	e17ffe15 	stw	r5,-8(fp)
  121940:	e1bfff15 	stw	r6,-4(fp)
    return;
  121944:	0001883a 	nop
}
  121948:	e037883a 	mov	sp,fp
  12194c:	df000017 	ldw	fp,0(sp)
  121950:	dec00104 	addi	sp,sp,4
  121954:	f800283a 	ret

00121958 <set_sample_rate>:


/* sampling parameter functions */

int  set_sample_rate(long int rate)
{
  121958:	defffe04 	addi	sp,sp,-8
  12195c:	df000115 	stw	fp,4(sp)
  121960:	df000104 	addi	fp,sp,4
  121964:	e13fff15 	stw	r4,-4(fp)
    return  SIZE_X;
  121968:	00807804 	movi	r2,480
}
  12196c:	e037883a 	mov	sp,fp
  121970:	df000017 	ldw	fp,0(sp)
  121974:	dec00104 	addi	sp,sp,4
  121978:	f800283a 	ret

0012197c <set_trigger>:

void  set_trigger(int level, int slope)
{
  12197c:	defffd04 	addi	sp,sp,-12
  121980:	df000215 	stw	fp,8(sp)
  121984:	df000204 	addi	fp,sp,8
  121988:	e13ffe15 	stw	r4,-8(fp)
  12198c:	e17fff15 	stw	r5,-4(fp)
    return;
  121990:	0001883a 	nop
}
  121994:	e037883a 	mov	sp,fp
  121998:	df000017 	ldw	fp,0(sp)
  12199c:	dec00104 	addi	sp,sp,4
  1219a0:	f800283a 	ret

001219a4 <set_delay>:

void  set_delay(long int delay)
{
  1219a4:	defffe04 	addi	sp,sp,-8
  1219a8:	df000115 	stw	fp,4(sp)
  1219ac:	df000104 	addi	fp,sp,4
  1219b0:	e13fff15 	stw	r4,-4(fp)
    return;
  1219b4:	0001883a 	nop
}
  1219b8:	e037883a 	mov	sp,fp
  1219bc:	df000017 	ldw	fp,0(sp)
  1219c0:	dec00104 	addi	sp,sp,4
  1219c4:	f800283a 	ret

001219c8 <start_sample>:


/* sampling functions */

void  start_sample(int auto_trigger)
{
  1219c8:	defffe04 	addi	sp,sp,-8
  1219cc:	df000115 	stw	fp,4(sp)
  1219d0:	df000104 	addi	fp,sp,4
  1219d4:	e13fff15 	stw	r4,-4(fp)
    return;
  1219d8:	0001883a 	nop
}
  1219dc:	e037883a 	mov	sp,fp
  1219e0:	df000017 	ldw	fp,0(sp)
  1219e4:	dec00104 	addi	sp,sp,4
  1219e8:	f800283a 	ret

001219ec <sample_done>:

unsigned char *sample_done()
{
  1219ec:	deffff04 	addi	sp,sp,-4
  1219f0:	df000015 	stw	fp,0(sp)
  1219f4:	d839883a 	mov	fp,sp
    return  NULL;
  1219f8:	0005883a 	mov	r2,zero
}
  1219fc:	e037883a 	mov	sp,fp
  121a00:	df000017 	ldw	fp,0(sp)
  121a04:	dec00104 	addi	sp,sp,4
  121a08:	f800283a 	ret

00121a0c <get_test_sample>:
   Last Modified:    May 3, 2006

*/

void  get_test_sample(long int sample_rate, int sample_size, unsigned char *sample)
{
  121a0c:	deff8104 	addi	sp,sp,-508
  121a10:	dfc07e15 	stw	ra,504(sp)
  121a14:	df007d15 	stw	fp,500(sp)
  121a18:	df007d04 	addi	fp,sp,500
  121a1c:	e13ffd15 	stw	r4,-12(fp)
  121a20:	e17ffe15 	stw	r5,-8(fp)
  121a24:	e1bfff15 	stw	r6,-4(fp)
    /* variables */

    /* a half-cycle of the ringing square wave */
    const unsigned char  waveform[] =
  121a28:	008004b4 	movhi	r2,18
  121a2c:	1091ef04 	addi	r2,r2,18364
  121a30:	e13f8504 	addi	r4,fp,-492
  121a34:	1007883a 	mov	r3,r2
  121a38:	00807804 	movi	r2,480
  121a3c:	180b883a 	mov	r5,r3
  121a40:	100d883a 	mov	r6,r2
  121a44:	01235100 	call	123510 <memcpy>
	    63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,
	    63,  63,  63,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,
	    64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64
	  };

    long int  sample_pt = 0;	/* current sample within the waveform */
  121a48:	e03f8315 	stw	zero,-500(fp)

    int       sample_sign = 1;	/* sample waveform sign */
  121a4c:	00800044 	movi	r2,1
  121a50:	e0bf8415 	stw	r2,-496(fp)



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
  121a54:	00003106 	br	121b1c <get_test_sample+0x110>

        /* get this sample point (value based on sign) */
	if (sample_sign > 0)
  121a58:	e0bf8417 	ldw	r2,-496(fp)
  121a5c:	00800f0e 	bge	zero,r2,121a9c <get_test_sample+0x90>
	    *sample++ = waveform[sample_pt/20] + 127;
  121a60:	e0bf8317 	ldw	r2,-500(fp)
  121a64:	1009883a 	mov	r4,r2
  121a68:	01400504 	movi	r5,20
  121a6c:	012342c0 	call	12342c <__divsi3>
  121a70:	e0ff8504 	addi	r3,fp,-492
  121a74:	1885883a 	add	r2,r3,r2
  121a78:	10800003 	ldbu	r2,0(r2)
  121a7c:	10801fc4 	addi	r2,r2,127
  121a80:	1007883a 	mov	r3,r2
  121a84:	e0bfff17 	ldw	r2,-4(fp)
  121a88:	10c00005 	stb	r3,0(r2)
  121a8c:	e0bfff17 	ldw	r2,-4(fp)
  121a90:	10800044 	addi	r2,r2,1
  121a94:	e0bfff15 	stw	r2,-4(fp)
  121a98:	00000f06 	br	121ad8 <get_test_sample+0xcc>
	else
	    *sample++ = 128 - waveform[sample_pt/20];
  121a9c:	e0bf8317 	ldw	r2,-500(fp)
  121aa0:	1009883a 	mov	r4,r2
  121aa4:	01400504 	movi	r5,20
  121aa8:	012342c0 	call	12342c <__divsi3>
  121aac:	e0ff8504 	addi	r3,fp,-492
  121ab0:	1885883a 	add	r2,r3,r2
  121ab4:	10800003 	ldbu	r2,0(r2)
  121ab8:	00ffe004 	movi	r3,-128
  121abc:	1885c83a 	sub	r2,r3,r2
  121ac0:	1007883a 	mov	r3,r2
  121ac4:	e0bfff17 	ldw	r2,-4(fp)
  121ac8:	10c00005 	stb	r3,0(r2)
  121acc:	e0bfff17 	ldw	r2,-4(fp)
  121ad0:	10800044 	addi	r2,r2,1
  121ad4:	e0bfff15 	stw	r2,-4(fp)

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
  121ad8:	01002674 	movhi	r4,153
  121adc:	2125a004 	addi	r4,r4,-27008
  121ae0:	e17ffd17 	ldw	r5,-12(fp)
  121ae4:	012342c0 	call	12342c <__divsi3>
  121ae8:	e0ff8317 	ldw	r3,-500(fp)
  121aec:	1885883a 	add	r2,r3,r2
  121af0:	e0bf8315 	stw	r2,-500(fp)
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
  121af4:	00000606 	br	121b10 <get_test_sample+0x104>
	    /* keep sample_pt within the test waveform */
	    sample_pt -= (20 * NO_TEST_PTS);
  121af8:	e0bf8317 	ldw	r2,-500(fp)
  121afc:	10b6a004 	addi	r2,r2,-9600
  121b00:	e0bf8315 	stw	r2,-500(fp)
	    /* each time through the waveform, invert it */
	    sample_sign = -sample_sign;
  121b04:	e0bf8417 	ldw	r2,-496(fp)
  121b08:	0085c83a 	sub	r2,zero,r2
  121b0c:	e0bf8415 	stw	r2,-496(fp)
	    *sample++ = 128 - waveform[sample_pt/20];

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
  121b10:	e0bf8317 	ldw	r2,-500(fp)
  121b14:	10896028 	cmpgeui	r2,r2,9600
  121b18:	103ff71e 	bne	r2,zero,121af8 <get_test_sample+0xec>
    int       sample_sign = 1;	/* sample waveform sign */



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
  121b1c:	e0bffe17 	ldw	r2,-8(fp)
  121b20:	0084803a 	cmplt	r2,zero,r2
  121b24:	e0fffe17 	ldw	r3,-8(fp)
  121b28:	18ffffc4 	addi	r3,r3,-1
  121b2c:	e0fffe15 	stw	r3,-8(fp)
  121b30:	10803fcc 	andi	r2,r2,255
  121b34:	103fc81e 	bne	r2,zero,121a58 <get_test_sample+0x4c>


    /* done getting the sample - return */
    return;

}
  121b38:	e037883a 	mov	sp,fp
  121b3c:	dfc00117 	ldw	ra,4(sp)
  121b40:	df000017 	ldw	fp,0(sp)
  121b44:	dec00204 	addi	sp,sp,8
  121b48:	f800283a 	ret

00121b4c <init_trace>:
   Last Modified:    May 9, 2006

*/

void  init_trace()
{
  121b4c:	defffe04 	addi	sp,sp,-8
  121b50:	dfc00115 	stw	ra,4(sp)
  121b54:	df000015 	stw	fp,0(sp)
  121b58:	d839883a 	mov	fp,sp


    /* initialize system status variables */

    /* ready for a trace */
    trace_status = TRUE;
  121b5c:	00800044 	movi	r2,1
  121b60:	d0a01215 	stw	r2,-32696(gp)

    /* not currently sampling data */
    sampling = FALSE;
  121b64:	d0201815 	stw	zero,-32672(gp)

    /* turn off the displayed scale */
    cur_scale = SCALE_NONE;
  121b68:	d0201115 	stw	zero,-32700(gp)

    /* sample size is the screen size */
    sample_size = SIZE_X;
  121b6c:	00807804 	movi	r2,480
  121b70:	d0a01515 	stw	r2,-32684(gp)


    /* clear save areas */
    clear_saved_areas();
  121b74:	01220cc0 	call	1220cc <clear_saved_areas>

    /* also clear the general saved area location variables (off-screen) */
    saved_pos_x = SIZE_X + 1;
  121b78:	00807844 	movi	r2,481
  121b7c:	d0a01715 	stw	r2,-32676(gp)
    saved_pos_y = SIZE_Y + 1;
  121b80:	00802044 	movi	r2,129
  121b84:	d0a01415 	stw	r2,-32688(gp)
    saved_end_x = SIZE_X + 1;
  121b88:	00807844 	movi	r2,481
  121b8c:	d0a01615 	stw	r2,-32680(gp)
    saved_end_y = SIZE_Y + 1;
  121b90:	00802044 	movi	r2,129
  121b94:	d0a01315 	stw	r2,-32692(gp)


    /* done initializing, return */
    return;
  121b98:	0001883a 	nop

}
  121b9c:	e037883a 	mov	sp,fp
  121ba0:	dfc00117 	ldw	ra,4(sp)
  121ba4:	df000017 	ldw	fp,0(sp)
  121ba8:	dec00204 	addi	sp,sp,8
  121bac:	f800283a 	ret

00121bb0 <set_mode>:
   Last Modified:    May 27, 2008

*/

void  set_mode(enum trigger_type trigger_mode)
{
  121bb0:	defffe04 	addi	sp,sp,-8
  121bb4:	df000115 	stw	fp,4(sp)
  121bb8:	df000104 	addi	fp,sp,4
  121bbc:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* if not one-shot triggering - ready for trace too */
    trace_status = (trigger_mode != ONESHOT_TRIGGER);
  121bc0:	e0bfff17 	ldw	r2,-4(fp)
  121bc4:	10800098 	cmpnei	r2,r2,2
  121bc8:	10803fcc 	andi	r2,r2,255
  121bcc:	d0a01215 	stw	r2,-32696(gp)


    /* turn off the sampling flag so will start a new sample */
    sampling = FALSE;
  121bd0:	d0201815 	stw	zero,-32672(gp)


    /* all done, return */
    return;
  121bd4:	0001883a 	nop

}
  121bd8:	e037883a 	mov	sp,fp
  121bdc:	df000017 	ldw	fp,0(sp)
  121be0:	dec00104 	addi	sp,sp,4
  121be4:	f800283a 	ret

00121be8 <is_sampling>:
   Last Modified:    May 27, 2008

*/

int  is_sampling()
{
  121be8:	deffff04 	addi	sp,sp,-4
  121bec:	df000015 	stw	fp,0(sp)
  121bf0:	d839883a 	mov	fp,sp
      /* none */



    /* currently sampling if sampling flag is set */
    return  sampling;
  121bf4:	d0a01817 	ldw	r2,-32672(gp)

}
  121bf8:	e037883a 	mov	sp,fp
  121bfc:	df000017 	ldw	fp,0(sp)
  121c00:	dec00104 	addi	sp,sp,4
  121c04:	f800283a 	ret

00121c08 <trace_rdy>:
   Last Modified:    Mar. 13, 1994

*/

int  trace_rdy()
{
  121c08:	deffff04 	addi	sp,sp,-4
  121c0c:	df000015 	stw	fp,0(sp)
  121c10:	d839883a 	mov	fp,sp
      /* none */



    /* ready for another trace if not sampling and trace is ready */
    return  (!sampling && trace_status);
  121c14:	d0a01817 	ldw	r2,-32672(gp)
  121c18:	1000041e 	bne	r2,zero,121c2c <trace_rdy+0x24>
  121c1c:	d0a01217 	ldw	r2,-32696(gp)
  121c20:	10000226 	beq	r2,zero,121c2c <trace_rdy+0x24>
  121c24:	00800044 	movi	r2,1
  121c28:	00000106 	br	121c30 <trace_rdy+0x28>
  121c2c:	0005883a 	mov	r2,zero

}
  121c30:	e037883a 	mov	sp,fp
  121c34:	df000017 	ldw	fp,0(sp)
  121c38:	dec00104 	addi	sp,sp,4
  121c3c:	f800283a 	ret

00121c40 <trace_done>:
   Last Modified:    May 9, 2006

*/

void  trace_done()
{
  121c40:	defffe04 	addi	sp,sp,-8
  121c44:	dfc00115 	stw	ra,4(sp)
  121c48:	df000015 	stw	fp,0(sp)
  121c4c:	d839883a 	mov	fp,sp
      /* none */



    /* done with a trace - if retriggering, ready for another one */
    if (get_trigger_mode() != ONESHOT_TRIGGER)
  121c50:	0120c340 	call	120c34 <get_trigger_mode>
  121c54:	108000a0 	cmpeqi	r2,r2,2
  121c58:	1000021e 	bne	r2,zero,121c64 <trace_done+0x24>
        /* in a retriggering mode - set trace_status to TRUE (ready) */
	trace_status = TRUE;
  121c5c:	00800044 	movi	r2,1
  121c60:	d0a01215 	stw	r2,-32696(gp)

    /* no longer sampling data */
    sampling = FALSE;
  121c64:	d0201815 	stw	zero,-32672(gp)


    /* done so return */
    return;
  121c68:	0001883a 	nop

}
  121c6c:	e037883a 	mov	sp,fp
  121c70:	dfc00117 	ldw	ra,4(sp)
  121c74:	df000017 	ldw	fp,0(sp)
  121c78:	dec00204 	addi	sp,sp,8
  121c7c:	f800283a 	ret

00121c80 <trace_rearm>:
   Last Modified:    Mar. 8, 1994

*/

void  trace_rearm()
{
  121c80:	deffff04 	addi	sp,sp,-4
  121c84:	df000015 	stw	fp,0(sp)
  121c88:	d839883a 	mov	fp,sp
      /* none */



    /* rearm the trace - set status to ready (TRUE) */
    trace_status = TRUE;
  121c8c:	00800044 	movi	r2,1
  121c90:	d0a01215 	stw	r2,-32696(gp)


    /* all done - return */
    return;
  121c94:	0001883a 	nop

}
  121c98:	e037883a 	mov	sp,fp
  121c9c:	df000017 	ldw	fp,0(sp)
  121ca0:	dec00104 	addi	sp,sp,4
  121ca4:	f800283a 	ret

00121ca8 <set_trace_size>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trace_size(int size)
{
  121ca8:	defffe04 	addi	sp,sp,-8
  121cac:	df000115 	stw	fp,4(sp)
  121cb0:	df000104 	addi	fp,sp,4
  121cb4:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the locally global sample size */
    sample_size = size;
  121cb8:	e0bfff17 	ldw	r2,-4(fp)
  121cbc:	d0a01515 	stw	r2,-32684(gp)


    /* all done, return */
    return;
  121cc0:	0001883a 	nop

}
  121cc4:	e037883a 	mov	sp,fp
  121cc8:	df000017 	ldw	fp,0(sp)
  121ccc:	dec00104 	addi	sp,sp,4
  121cd0:	f800283a 	ret

00121cd4 <set_display_scale>:
   Last Modified:    May 9, 2006

*/

void  set_display_scale(enum scale_type scale)
{
  121cd4:	defff804 	addi	sp,sp,-32
  121cd8:	dfc00715 	stw	ra,28(sp)
  121cdc:	df000615 	stw	fp,24(sp)
  121ce0:	dc400515 	stw	r17,20(sp)
  121ce4:	dc000415 	stw	r16,16(sp)
  121ce8:	df000404 	addi	fp,sp,16
  121cec:	e13fff15 	stw	r4,-4(fp)



    /* whenever change scale type, need to clear out previous scale */
    /* unnecessary if going to SCALE_GRID or from SCALE_NONE or not changing the scale */
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {
  121cf0:	e0bfff17 	ldw	r2,-4(fp)
  121cf4:	108000a0 	cmpeqi	r2,r2,2
  121cf8:	1000921e 	bne	r2,zero,121f44 <set_display_scale+0x270>
  121cfc:	d0a01117 	ldw	r2,-32700(gp)
  121d00:	10009026 	beq	r2,zero,121f44 <set_display_scale+0x270>
  121d04:	d0a01117 	ldw	r2,-32700(gp)
  121d08:	e0ffff17 	ldw	r3,-4(fp)
  121d0c:	18808d26 	beq	r3,r2,121f44 <set_display_scale+0x270>

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  121d10:	00bfffc4 	movi	r2,-1
  121d14:	e0bffe15 	stw	r2,-8(fp)
  121d18:	00004206 	br	121e24 <set_display_scale+0x150>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
  121d1c:	e13ffe17 	ldw	r4,-8(fp)
  121d20:	01400c04 	movi	r5,48
  121d24:	01234e80 	call	1234e8 <__mulsi3>
  121d28:	10801004 	addi	r2,r2,64
  121d2c:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
  121d30:	e0bffc17 	ldw	r2,-16(fp)
  121d34:	10802010 	cmplti	r2,r2,128
  121d38:	1000021e 	bne	r2,zero,121d44 <set_display_scale+0x70>
	        p = PLOT_SIZE_Y - 1;
  121d3c:	00801fc4 	movi	r2,127
  121d40:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
  121d44:	e0bffc17 	ldw	r2,-16(fp)
  121d48:	1000010e 	bge	r2,zero,121d50 <set_display_scale+0x7c>
	        p = 0;
  121d4c:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
  121d50:	e03ffd15 	stw	zero,-12(fp)
  121d54:	00002d06 	br	121e0c <set_display_scale+0x138>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_x[j + Y_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
  121d58:	e0bffe17 	ldw	r2,-8(fp)
  121d5c:	10c00044 	addi	r3,r2,1
  121d60:	e0bffd17 	ldw	r2,-12(fp)
  121d64:	1000010e 	bge	r2,zero,121d6c <set_display_scale+0x98>
  121d68:	108001c4 	addi	r2,r2,7
  121d6c:	1005d0fa 	srai	r2,r2,3
  121d70:	1023883a 	mov	r17,r2
  121d74:	040004b4 	movhi	r16,18
  121d78:	8414d004 	addi	r16,r16,21312
  121d7c:	1809883a 	mov	r4,r3
  121d80:	01400f04 	movi	r5,60
  121d84:	01234e80 	call	1234e8 <__mulsi3>
  121d88:	1445883a 	add	r2,r2,r17
  121d8c:	8085883a 	add	r2,r16,r2
  121d90:	10800003 	ldbu	r2,0(r2)
  121d94:	10c03fcc 	andi	r3,r2,255
  121d98:	e13ffd17 	ldw	r4,-12(fp)
  121d9c:	00a00034 	movhi	r2,32768
  121da0:	108001c4 	addi	r2,r2,7
  121da4:	2084703a 	and	r2,r4,r2
  121da8:	1000040e 	bge	r2,zero,121dbc <set_display_scale+0xe8>
  121dac:	10bfffc4 	addi	r2,r2,-1
  121db0:	013ffe04 	movi	r4,-8
  121db4:	1104b03a 	or	r2,r2,r4
  121db8:	10800044 	addi	r2,r2,1
  121dbc:	01002004 	movi	r4,128
  121dc0:	2085d83a 	sra	r2,r4,r2
  121dc4:	1884703a 	and	r2,r3,r2
  121dc8:	1000071e 	bne	r2,zero,121de8 <set_display_scale+0x114>
		    /* saved pixel is off */
		    plot_pixel(i, p, PIXEL_WHITE);
  121dcc:	e0fffd17 	ldw	r3,-12(fp)
  121dd0:	e0bffc17 	ldw	r2,-16(fp)
  121dd4:	1809883a 	mov	r4,r3
  121dd8:	100b883a 	mov	r5,r2
  121ddc:	000d883a 	mov	r6,zero
  121de0:	012192c0 	call	12192c <plot_pixel>
  121de4:	00000606 	br	121e00 <set_display_scale+0x12c>
		else
		    /* saved pixel is on */
		    plot_pixel(i, p, PIXEL_BLACK);
  121de8:	e0fffd17 	ldw	r3,-12(fp)
  121dec:	e0bffc17 	ldw	r2,-16(fp)
  121df0:	1809883a 	mov	r4,r3
  121df4:	100b883a 	mov	r5,r2
  121df8:	01800044 	movi	r6,1
  121dfc:	012192c0 	call	12192c <plot_pixel>
	        p = PLOT_SIZE_Y - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
  121e00:	e0bffd17 	ldw	r2,-12(fp)
  121e04:	10800044 	addi	r2,r2,1
  121e08:	e0bffd15 	stw	r2,-12(fp)
  121e0c:	e0bffd17 	ldw	r2,-12(fp)
  121e10:	10807810 	cmplti	r2,r2,480
  121e14:	103fd01e 	bne	r2,zero,121d58 <set_display_scale+0x84>
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  121e18:	e0bffe17 	ldw	r2,-8(fp)
  121e1c:	10800044 	addi	r2,r2,1
  121e20:	e0bffe15 	stw	r2,-8(fp)
  121e24:	e0bffe17 	ldw	r2,-8(fp)
  121e28:	10800090 	cmplti	r2,r2,2
  121e2c:	103fbb1e 	bne	r2,zero,121d1c <set_display_scale+0x48>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  121e30:	00bffec4 	movi	r2,-5
  121e34:	e0bffe15 	stw	r2,-8(fp)
  121e38:	00003f06 	br	121f38 <set_display_scale+0x264>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
  121e3c:	e13ffe17 	ldw	r4,-8(fp)
  121e40:	01400c04 	movi	r5,48
  121e44:	01234e80 	call	1234e8 <__mulsi3>
  121e48:	10803c04 	addi	r2,r2,240
  121e4c:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
  121e50:	e0bffc17 	ldw	r2,-16(fp)
  121e54:	10807810 	cmplti	r2,r2,480
  121e58:	1000021e 	bne	r2,zero,121e64 <set_display_scale+0x190>
	        p = PLOT_SIZE_X - 1;
  121e5c:	008077c4 	movi	r2,479
  121e60:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
  121e64:	e0bffc17 	ldw	r2,-16(fp)
  121e68:	1000010e 	bge	r2,zero,121e70 <set_display_scale+0x19c>
	        p = 0;
  121e6c:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
  121e70:	e03ffd15 	stw	zero,-12(fp)
  121e74:	00002a06 	br	121f20 <set_display_scale+0x24c>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_y[j + X_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
  121e78:	e0bffe17 	ldw	r2,-8(fp)
  121e7c:	11000144 	addi	r4,r2,5
  121e80:	e0bffd17 	ldw	r2,-12(fp)
  121e84:	1000010e 	bge	r2,zero,121e8c <set_display_scale+0x1b8>
  121e88:	108001c4 	addi	r2,r2,7
  121e8c:	1005d0fa 	srai	r2,r2,3
  121e90:	00c004b4 	movhi	r3,18
  121e94:	18d4a404 	addi	r3,r3,21136
  121e98:	2008913a 	slli	r4,r4,4
  121e9c:	2085883a 	add	r2,r4,r2
  121ea0:	1885883a 	add	r2,r3,r2
  121ea4:	10800003 	ldbu	r2,0(r2)
  121ea8:	10c03fcc 	andi	r3,r2,255
  121eac:	e13ffd17 	ldw	r4,-12(fp)
  121eb0:	00a00034 	movhi	r2,32768
  121eb4:	108001c4 	addi	r2,r2,7
  121eb8:	2084703a 	and	r2,r4,r2
  121ebc:	1000040e 	bge	r2,zero,121ed0 <set_display_scale+0x1fc>
  121ec0:	10bfffc4 	addi	r2,r2,-1
  121ec4:	013ffe04 	movi	r4,-8
  121ec8:	1104b03a 	or	r2,r2,r4
  121ecc:	10800044 	addi	r2,r2,1
  121ed0:	01002004 	movi	r4,128
  121ed4:	2085d83a 	sra	r2,r4,r2
  121ed8:	1884703a 	and	r2,r3,r2
  121edc:	1000071e 	bne	r2,zero,121efc <set_display_scale+0x228>
		    /* saved pixel is off */
		    plot_pixel(p, i, PIXEL_WHITE);
  121ee0:	e0fffc17 	ldw	r3,-16(fp)
  121ee4:	e0bffd17 	ldw	r2,-12(fp)
  121ee8:	1809883a 	mov	r4,r3
  121eec:	100b883a 	mov	r5,r2
  121ef0:	000d883a 	mov	r6,zero
  121ef4:	012192c0 	call	12192c <plot_pixel>
  121ef8:	00000606 	br	121f14 <set_display_scale+0x240>
		else
		    /* saved pixel is on */
		    plot_pixel(p, i, PIXEL_BLACK);
  121efc:	e0fffc17 	ldw	r3,-16(fp)
  121f00:	e0bffd17 	ldw	r2,-12(fp)
  121f04:	1809883a 	mov	r4,r3
  121f08:	100b883a 	mov	r5,r2
  121f0c:	01800044 	movi	r6,1
  121f10:	012192c0 	call	12192c <plot_pixel>
	        p = PLOT_SIZE_X - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
  121f14:	e0bffd17 	ldw	r2,-12(fp)
  121f18:	10800044 	addi	r2,r2,1
  121f1c:	e0bffd15 	stw	r2,-12(fp)
  121f20:	e0bffd17 	ldw	r2,-12(fp)
  121f24:	10802010 	cmplti	r2,r2,128
  121f28:	103fd31e 	bne	r2,zero,121e78 <set_display_scale+0x1a4>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  121f2c:	e0bffe17 	ldw	r2,-8(fp)
  121f30:	10800044 	addi	r2,r2,1
  121f34:	e0bffe15 	stw	r2,-8(fp)
  121f38:	e0bffe17 	ldw	r2,-8(fp)
  121f3c:	10800190 	cmplti	r2,r2,6
  121f40:	103fbe1e 	bne	r2,zero,121e3c <set_display_scale+0x168>
	}
    }


    /* now handle the scale type appropriately */
    switch (scale)  {
  121f44:	e0bfff17 	ldw	r2,-4(fp)
  121f48:	10005526 	beq	r2,zero,1220a0 <set_display_scale+0x3cc>
  121f4c:	108000e8 	cmpgeui	r2,r2,3
  121f50:	1000541e 	bne	r2,zero,1220a4 <set_display_scale+0x3d0>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
  121f54:	00bfffc4 	movi	r2,-1
  121f58:	e0bffd15 	stw	r2,-12(fp)
  121f5c:	00002306 	br	121fec <set_display_scale+0x318>

				/* get y position of the line */
				p = X_AXIS_POS + i * Y_TICK_SIZE;
  121f60:	e13ffd17 	ldw	r4,-12(fp)
  121f64:	01400c04 	movi	r5,48
  121f68:	01234e80 	call	1234e8 <__mulsi3>
  121f6c:	10801004 	addi	r2,r2,64
  121f70:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_Y)
  121f74:	e0bffc17 	ldw	r2,-16(fp)
  121f78:	10802010 	cmplti	r2,r2,128
  121f7c:	1000021e 	bne	r2,zero,121f88 <set_display_scale+0x2b4>
				    p = PLOT_SIZE_Y - 1;
  121f80:	00801fc4 	movi	r2,127
  121f84:	e0bffc15 	stw	r2,-16(fp)
				if (p < 0)
  121f88:	e0bffc17 	ldw	r2,-16(fp)
  121f8c:	1000010e 	bge	r2,zero,121f94 <set_display_scale+0x2c0>
				    p = 0;
  121f90:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
  121f94:	e0bfff17 	ldw	r2,-4(fp)
  121f98:	10800098 	cmpnei	r2,r2,2
  121f9c:	1000051e 	bne	r2,zero,121fb4 <set_display_scale+0x2e0>
				    /* drawing a grid line */
			            plot_hline(X_GRID_START, p, (X_GRID_END - X_GRID_START));
  121fa0:	0009883a 	mov	r4,zero
  121fa4:	e17ffc17 	ldw	r5,-16(fp)
  121fa8:	018077c4 	movi	r6,479
  121fac:	01202140 	call	120214 <plot_hline>
  121fb0:	00000b06 	br	121fe0 <set_display_scale+0x30c>
				else if (i == 0)
  121fb4:	e0bffd17 	ldw	r2,-12(fp)
  121fb8:	1000051e 	bne	r2,zero,121fd0 <set_display_scale+0x2fc>
				    /* drawing the x axis */
			            plot_hline(X_AXIS_START, p, (X_AXIS_END - X_AXIS_START));
  121fbc:	0009883a 	mov	r4,zero
  121fc0:	e17ffc17 	ldw	r5,-16(fp)
  121fc4:	018077c4 	movi	r6,479
  121fc8:	01202140 	call	120214 <plot_hline>
  121fcc:	00000406 	br	121fe0 <set_display_scale+0x30c>
				else
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
  121fd0:	01003b84 	movi	r4,238
  121fd4:	e17ffc17 	ldw	r5,-16(fp)
  121fd8:	01800144 	movi	r6,5
  121fdc:	01202140 	call	120214 <plot_hline>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
  121fe0:	e0bffd17 	ldw	r2,-12(fp)
  121fe4:	10800044 	addi	r2,r2,1
  121fe8:	e0bffd15 	stw	r2,-12(fp)
  121fec:	e0bffd17 	ldw	r2,-12(fp)
  121ff0:	10800090 	cmplti	r2,r2,2
  121ff4:	103fda1e 	bne	r2,zero,121f60 <set_display_scale+0x28c>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
  121ff8:	00bffec4 	movi	r2,-5
  121ffc:	e0bffd15 	stw	r2,-12(fp)
  122000:	00002306 	br	122090 <set_display_scale+0x3bc>

				/* get x position of the line */
				p = Y_AXIS_POS + i * X_TICK_SIZE;
  122004:	e13ffd17 	ldw	r4,-12(fp)
  122008:	01400c04 	movi	r5,48
  12200c:	01234e80 	call	1234e8 <__mulsi3>
  122010:	10803c04 	addi	r2,r2,240
  122014:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_X)
  122018:	e0bffc17 	ldw	r2,-16(fp)
  12201c:	10807810 	cmplti	r2,r2,480
  122020:	1000021e 	bne	r2,zero,12202c <set_display_scale+0x358>
				    p = PLOT_SIZE_X - 1;
  122024:	008077c4 	movi	r2,479
  122028:	e0bffc15 	stw	r2,-16(fp)
			        if (p < 0)
  12202c:	e0bffc17 	ldw	r2,-16(fp)
  122030:	1000010e 	bge	r2,zero,122038 <set_display_scale+0x364>
				    p = 0;
  122034:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
  122038:	e0bfff17 	ldw	r2,-4(fp)
  12203c:	10800098 	cmpnei	r2,r2,2
  122040:	1000051e 	bne	r2,zero,122058 <set_display_scale+0x384>
				    /* drawing a grid line */
			            plot_vline(p, Y_GRID_START, (Y_GRID_END - Y_GRID_START));
  122044:	e13ffc17 	ldw	r4,-16(fp)
  122048:	000b883a 	mov	r5,zero
  12204c:	01801fc4 	movi	r6,127
  122050:	01202c00 	call	1202c0 <plot_vline>
  122054:	00000b06 	br	122084 <set_display_scale+0x3b0>
				else if (i == 0)
  122058:	e0bffd17 	ldw	r2,-12(fp)
  12205c:	1000051e 	bne	r2,zero,122074 <set_display_scale+0x3a0>
				    /* drawing the y axis */
			            plot_vline(p, Y_AXIS_START, (Y_AXIS_END - Y_AXIS_START));
  122060:	e13ffc17 	ldw	r4,-16(fp)
  122064:	000b883a 	mov	r5,zero
  122068:	01801fc4 	movi	r6,127
  12206c:	01202c00 	call	1202c0 <plot_vline>
  122070:	00000406 	br	122084 <set_display_scale+0x3b0>
				else
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
  122074:	e13ffc17 	ldw	r4,-16(fp)
  122078:	01400f84 	movi	r5,62
  12207c:	01800144 	movi	r6,5
  122080:	01202c00 	call	1202c0 <plot_vline>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
  122084:	e0bffd17 	ldw	r2,-12(fp)
  122088:	10800044 	addi	r2,r2,1
  12208c:	e0bffd15 	stw	r2,-12(fp)
  122090:	e0bffd17 	ldw	r2,-12(fp)
  122094:	10800190 	cmplti	r2,r2,6
  122098:	103fda1e 	bne	r2,zero,122004 <set_display_scale+0x330>
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
			    }

			    /* done with the axes */
			    break;
  12209c:	00000106 	br	1220a4 <set_display_scale+0x3d0>

        case SCALE_NONE:    /* there is no scale */
			    /* already restored plot so nothing to do */
			    break;
  1220a0:	0001883a 	nop

    }


    /* now remember the new (now current) scale type */
    cur_scale = scale;
  1220a4:	e0bfff17 	ldw	r2,-4(fp)
  1220a8:	d0a01115 	stw	r2,-32700(gp)


    /* scale is taken care of, return */
    return;
  1220ac:	0001883a 	nop

}
  1220b0:	e037883a 	mov	sp,fp
  1220b4:	dfc00317 	ldw	ra,12(sp)
  1220b8:	df000217 	ldw	fp,8(sp)
  1220bc:	dc400117 	ldw	r17,4(sp)
  1220c0:	dc000017 	ldw	r16,0(sp)
  1220c4:	dec00404 	addi	sp,sp,16
  1220c8:	f800283a 	ret

001220cc <clear_saved_areas>:
   Last Modified:    May 9, 2006

*/

void  clear_saved_areas()
{
  1220cc:	defffb04 	addi	sp,sp,-20
  1220d0:	dfc00415 	stw	ra,16(sp)
  1220d4:	df000315 	stw	fp,12(sp)
  1220d8:	dc000215 	stw	r16,8(sp)
  1220dc:	df000204 	addi	fp,sp,8
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
  1220e0:	e03fff15 	stw	zero,-4(fp)
  1220e4:	00001506 	br	12213c <clear_saved_areas+0x70>
        for (i = 0; i < (SIZE_X / 8); i++)
  1220e8:	e03ffe15 	stw	zero,-8(fp)
  1220ec:	00000d06 	br	122124 <clear_saved_areas+0x58>
            saved_axis_x[j][i] = 0;
  1220f0:	040004b4 	movhi	r16,18
  1220f4:	8414d004 	addi	r16,r16,21312
  1220f8:	e0bfff17 	ldw	r2,-4(fp)
  1220fc:	1009883a 	mov	r4,r2
  122100:	01400f04 	movi	r5,60
  122104:	01234e80 	call	1234e8 <__mulsi3>
  122108:	e0fffe17 	ldw	r3,-8(fp)
  12210c:	10c5883a 	add	r2,r2,r3
  122110:	8085883a 	add	r2,r16,r2
  122114:	10000005 	stb	zero,0(r2)



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
  122118:	e0bffe17 	ldw	r2,-8(fp)
  12211c:	10800044 	addi	r2,r2,1
  122120:	e0bffe15 	stw	r2,-8(fp)
  122124:	e0bffe17 	ldw	r2,-8(fp)
  122128:	10800f10 	cmplti	r2,r2,60
  12212c:	103ff01e 	bne	r2,zero,1220f0 <clear_saved_areas+0x24>
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
  122130:	e0bfff17 	ldw	r2,-4(fp)
  122134:	10800044 	addi	r2,r2,1
  122138:	e0bfff15 	stw	r2,-4(fp)
  12213c:	e0bfff17 	ldw	r2,-4(fp)
  122140:	108000d0 	cmplti	r2,r2,3
  122144:	103fe81e 	bne	r2,zero,1220e8 <clear_saved_areas+0x1c>
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
  122148:	e03fff15 	stw	zero,-4(fp)
  12214c:	00001306 	br	12219c <clear_saved_areas+0xd0>
        for (i = 0; i < (SIZE_Y / 8); i++)
  122150:	e03ffe15 	stw	zero,-8(fp)
  122154:	00000b06 	br	122184 <clear_saved_areas+0xb8>
            saved_axis_y[j][i] = 0;
  122158:	00c004b4 	movhi	r3,18
  12215c:	18d4a404 	addi	r3,r3,21136
  122160:	e0bfff17 	ldw	r2,-4(fp)
  122164:	1008913a 	slli	r4,r2,4
  122168:	e0bffe17 	ldw	r2,-8(fp)
  12216c:	2085883a 	add	r2,r4,r2
  122170:	1885883a 	add	r2,r3,r2
  122174:	10000005 	stb	zero,0(r2)
    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
  122178:	e0bffe17 	ldw	r2,-8(fp)
  12217c:	10800044 	addi	r2,r2,1
  122180:	e0bffe15 	stw	r2,-8(fp)
  122184:	e0bffe17 	ldw	r2,-8(fp)
  122188:	10800410 	cmplti	r2,r2,16
  12218c:	103ff21e 	bne	r2,zero,122158 <clear_saved_areas+0x8c>

    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
  122190:	e0bfff17 	ldw	r2,-4(fp)
  122194:	10800044 	addi	r2,r2,1
  122198:	e0bfff15 	stw	r2,-4(fp)
  12219c:	e0bfff17 	ldw	r2,-4(fp)
  1221a0:	108002d0 	cmplti	r2,r2,11
  1221a4:	103fea1e 	bne	r2,zero,122150 <clear_saved_areas+0x84>
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
  1221a8:	e03ffe15 	stw	zero,-8(fp)
  1221ac:	00001506 	br	122204 <clear_saved_areas+0x138>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
  1221b0:	e03fff15 	stw	zero,-4(fp)
  1221b4:	00000d06 	br	1221ec <clear_saved_areas+0x120>
	    saved_menu[i][j] = 0;
  1221b8:	040004b4 	movhi	r16,18
  1221bc:	8413fc04 	addi	r16,r16,20464
  1221c0:	e0bffe17 	ldw	r2,-8(fp)
  1221c4:	1009883a 	mov	r4,r2
  1221c8:	01400304 	movi	r5,12
  1221cc:	01234e80 	call	1234e8 <__mulsi3>
  1221d0:	e0ffff17 	ldw	r3,-4(fp)
  1221d4:	10c5883a 	add	r2,r2,r3
  1221d8:	8085883a 	add	r2,r16,r2
  1221dc:	10000005 	stb	zero,0(r2)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
  1221e0:	e0bfff17 	ldw	r2,-4(fp)
  1221e4:	10800044 	addi	r2,r2,1
  1221e8:	e0bfff15 	stw	r2,-4(fp)
  1221ec:	e0bfff17 	ldw	r2,-4(fp)
  1221f0:	10800310 	cmplti	r2,r2,12
  1221f4:	103ff01e 	bne	r2,zero,1221b8 <clear_saved_areas+0xec>
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
  1221f8:	e0bffe17 	ldw	r2,-8(fp)
  1221fc:	10800044 	addi	r2,r2,1
  122200:	e0bffe15 	stw	r2,-8(fp)
  122204:	e0bffe17 	ldw	r2,-8(fp)
  122208:	10800e10 	cmplti	r2,r2,56
  12220c:	103fe81e 	bne	r2,zero,1221b0 <clear_saved_areas+0xe4>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
  122210:	e03ffe15 	stw	zero,-8(fp)
  122214:	00001506 	br	12226c <clear_saved_areas+0x1a0>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
  122218:	e03fff15 	stw	zero,-4(fp)
  12221c:	00000d06 	br	122254 <clear_saved_areas+0x188>
	    saved_area[i][j] = 0;
  122220:	040004b4 	movhi	r16,18
  122224:	8414fd04 	addi	r16,r16,21492
  122228:	e0bffe17 	ldw	r2,-8(fp)
  12222c:	1009883a 	mov	r4,r2
  122230:	014003c4 	movi	r5,15
  122234:	01234e80 	call	1234e8 <__mulsi3>
  122238:	e0ffff17 	ldw	r3,-4(fp)
  12223c:	10c5883a 	add	r2,r2,r3
  122240:	8085883a 	add	r2,r16,r2
  122244:	10000005 	stb	zero,0(r2)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
  122248:	e0bfff17 	ldw	r2,-4(fp)
  12224c:	10800044 	addi	r2,r2,1
  122250:	e0bfff15 	stw	r2,-4(fp)
  122254:	e0bfff17 	ldw	r2,-4(fp)
  122258:	108003d0 	cmplti	r2,r2,15
  12225c:	103ff01e 	bne	r2,zero,122220 <clear_saved_areas+0x154>
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
  122260:	e0bffe17 	ldw	r2,-8(fp)
  122264:	10800044 	addi	r2,r2,1
  122268:	e0bffe15 	stw	r2,-8(fp)
  12226c:	e0bffe17 	ldw	r2,-8(fp)
  122270:	10800410 	cmplti	r2,r2,16
  122274:	103fe81e 	bne	r2,zero,122218 <clear_saved_areas+0x14c>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
	    saved_area[i][j] = 0;


    /* done clearing the saved areas - return */
    return;
  122278:	0001883a 	nop

}
  12227c:	e037883a 	mov	sp,fp
  122280:	dfc00217 	ldw	ra,8(sp)
  122284:	df000117 	ldw	fp,4(sp)
  122288:	dc000017 	ldw	r16,0(sp)
  12228c:	dec00304 	addi	sp,sp,12
  122290:	f800283a 	ret

00122294 <restore_menu_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_menu_trace()
{
  122294:	defff904 	addi	sp,sp,-28
  122298:	dfc00615 	stw	ra,24(sp)
  12229c:	df000515 	stw	fp,20(sp)
  1222a0:	dc000415 	stw	r16,16(sp)
  1222a4:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
  1222a8:	e03fff15 	stw	zero,-4(fp)
  1222ac:	00003406 	br	122380 <restore_menu_trace+0xec>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
  1222b0:	00802004 	movi	r2,128
  1222b4:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
  1222b8:	e03ffd15 	stw	zero,-12(fp)

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
  1222bc:	00805e84 	movi	r2,378
  1222c0:	e0bffe15 	stw	r2,-8(fp)
  1222c4:	00002806 	br	122368 <restore_menu_trace+0xd4>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_menu[y - MENU_UL_Y][bit_offset] & bit_position) == 0)
  1222c8:	040004b4 	movhi	r16,18
  1222cc:	8413fc04 	addi	r16,r16,20464
  1222d0:	e0bfff17 	ldw	r2,-4(fp)
  1222d4:	1009883a 	mov	r4,r2
  1222d8:	01400304 	movi	r5,12
  1222dc:	01234e80 	call	1234e8 <__mulsi3>
  1222e0:	e0fffd17 	ldw	r3,-12(fp)
  1222e4:	10c5883a 	add	r2,r2,r3
  1222e8:	8085883a 	add	r2,r16,r2
  1222ec:	10800003 	ldbu	r2,0(r2)
  1222f0:	10c03fcc 	andi	r3,r2,255
  1222f4:	e0bffc17 	ldw	r2,-16(fp)
  1222f8:	1884703a 	and	r2,r3,r2
  1222fc:	1000071e 	bne	r2,zero,12231c <restore_menu_trace+0x88>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
  122300:	e0fffe17 	ldw	r3,-8(fp)
  122304:	e0bfff17 	ldw	r2,-4(fp)
  122308:	1809883a 	mov	r4,r3
  12230c:	100b883a 	mov	r5,r2
  122310:	000d883a 	mov	r6,zero
  122314:	012192c0 	call	12192c <plot_pixel>
  122318:	00000606 	br	122334 <restore_menu_trace+0xa0>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
  12231c:	e0fffe17 	ldw	r3,-8(fp)
  122320:	e0bfff17 	ldw	r2,-4(fp)
  122324:	1809883a 	mov	r4,r3
  122328:	100b883a 	mov	r5,r2
  12232c:	01800044 	movi	r6,1
  122330:	012192c0 	call	12192c <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
  122334:	e0bffc17 	ldw	r2,-16(fp)
  122338:	1005d07a 	srai	r2,r2,1
  12233c:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
  122340:	e0bffc17 	ldw	r2,-16(fp)
  122344:	1000051e 	bne	r2,zero,12235c <restore_menu_trace+0xc8>
	        /* now on high bit of next byte */
		bit_position = 0x80;
  122348:	00802004 	movi	r2,128
  12234c:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
  122350:	e0bffd17 	ldw	r2,-12(fp)
  122354:	10800044 	addi	r2,r2,1
  122358:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
  12235c:	e0bffe17 	ldw	r2,-8(fp)
  122360:	10800044 	addi	r2,r2,1
  122364:	e0bffe15 	stw	r2,-8(fp)
  122368:	e0bffe17 	ldw	r2,-8(fp)
  12236c:	10807690 	cmplti	r2,r2,474
  122370:	103fd51e 	bne	r2,zero,1222c8 <restore_menu_trace+0x34>
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
  122374:	e0bfff17 	ldw	r2,-4(fp)
  122378:	10800044 	addi	r2,r2,1
  12237c:	e0bfff15 	stw	r2,-4(fp)
  122380:	e0bfff17 	ldw	r2,-4(fp)
  122384:	10800e10 	cmplti	r2,r2,56
  122388:	103fc91e 	bne	r2,zero,1222b0 <restore_menu_trace+0x1c>
        }
    }


    /* restored menu area - return */
    return;
  12238c:	0001883a 	nop

}
  122390:	e037883a 	mov	sp,fp
  122394:	dfc00217 	ldw	ra,8(sp)
  122398:	df000117 	ldw	fp,4(sp)
  12239c:	dc000017 	ldw	r16,0(sp)
  1223a0:	dec00304 	addi	sp,sp,12
  1223a4:	f800283a 	ret

001223a8 <set_save_area>:
   Last Modified:    Mar. 8, 1994

*/

void  set_save_area(int pos_x, int pos_y, int size_x, int size_y)
{
  1223a8:	defff704 	addi	sp,sp,-36
  1223ac:	dfc00815 	stw	ra,32(sp)
  1223b0:	df000715 	stw	fp,28(sp)
  1223b4:	dc000615 	stw	r16,24(sp)
  1223b8:	df000604 	addi	fp,sp,24
  1223bc:	e13ffc15 	stw	r4,-16(fp)
  1223c0:	e17ffd15 	stw	r5,-12(fp)
  1223c4:	e1bffe15 	stw	r6,-8(fp)
  1223c8:	e1ffff15 	stw	r7,-4(fp)
    int  y;



    /* just setup all the locally global variables from the passed values */
    saved_pos_x = pos_x;
  1223cc:	e0bffc17 	ldw	r2,-16(fp)
  1223d0:	d0a01715 	stw	r2,-32676(gp)
    saved_pos_y = pos_y;
  1223d4:	e0bffd17 	ldw	r2,-12(fp)
  1223d8:	d0a01415 	stw	r2,-32688(gp)
    saved_end_x = pos_x + size_x;
  1223dc:	e0fffc17 	ldw	r3,-16(fp)
  1223e0:	e0bffe17 	ldw	r2,-8(fp)
  1223e4:	1885883a 	add	r2,r3,r2
  1223e8:	d0a01615 	stw	r2,-32680(gp)
    saved_end_y = pos_y + size_y;
  1223ec:	e0fffd17 	ldw	r3,-12(fp)
  1223f0:	e0bfff17 	ldw	r2,-4(fp)
  1223f4:	1885883a 	add	r2,r3,r2
  1223f8:	d0a01315 	stw	r2,-32692(gp)


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
  1223fc:	e03ffb15 	stw	zero,-20(fp)
  122400:	00001506 	br	122458 <set_save_area+0xb0>
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
  122404:	e03ffa15 	stw	zero,-24(fp)
  122408:	00000d06 	br	122440 <set_save_area+0x98>
	    saved_area[y][x] = 0;
  12240c:	040004b4 	movhi	r16,18
  122410:	8414fd04 	addi	r16,r16,21492
  122414:	e0bffb17 	ldw	r2,-20(fp)
  122418:	1009883a 	mov	r4,r2
  12241c:	014003c4 	movi	r5,15
  122420:	01234e80 	call	1234e8 <__mulsi3>
  122424:	e0fffa17 	ldw	r3,-24(fp)
  122428:	10c5883a 	add	r2,r2,r3
  12242c:	8085883a 	add	r2,r16,r2
  122430:	10000005 	stb	zero,0(r2)
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
  122434:	e0bffa17 	ldw	r2,-24(fp)
  122438:	10800044 	addi	r2,r2,1
  12243c:	e0bffa15 	stw	r2,-24(fp)
  122440:	e0bffa17 	ldw	r2,-24(fp)
  122444:	108003d0 	cmplti	r2,r2,15
  122448:	103ff01e 	bne	r2,zero,12240c <set_save_area+0x64>
    saved_end_x = pos_x + size_x;
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
  12244c:	e0bffb17 	ldw	r2,-20(fp)
  122450:	10800044 	addi	r2,r2,1
  122454:	e0bffb15 	stw	r2,-20(fp)
  122458:	e0bffb17 	ldw	r2,-20(fp)
  12245c:	10800410 	cmplti	r2,r2,16
  122460:	103fe81e 	bne	r2,zero,122404 <set_save_area+0x5c>
        }
    }


    /* setup the saved area - return */
    return;
  122464:	0001883a 	nop

}
  122468:	e037883a 	mov	sp,fp
  12246c:	dfc00217 	ldw	ra,8(sp)
  122470:	df000117 	ldw	fp,4(sp)
  122474:	dc000017 	ldw	r16,0(sp)
  122478:	dec00304 	addi	sp,sp,12
  12247c:	f800283a 	ret

00122480 <restore_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_trace()
{
  122480:	defff904 	addi	sp,sp,-28
  122484:	dfc00615 	stw	ra,24(sp)
  122488:	df000515 	stw	fp,20(sp)
  12248c:	dc000415 	stw	r16,16(sp)
  122490:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
  122494:	d0a01417 	ldw	r2,-32688(gp)
  122498:	e0bfff15 	stw	r2,-4(fp)
  12249c:	00003606 	br	122578 <restore_trace+0xf8>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
  1224a0:	00802004 	movi	r2,128
  1224a4:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
  1224a8:	e03ffd15 	stw	zero,-12(fp)

        for (x = saved_pos_x; x < saved_end_x; x++)  {
  1224ac:	d0a01717 	ldw	r2,-32676(gp)
  1224b0:	e0bffe15 	stw	r2,-8(fp)
  1224b4:	00002a06 	br	122560 <restore_trace+0xe0>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_area[y - saved_pos_y][bit_offset] & bit_position) == 0)
  1224b8:	d0a01417 	ldw	r2,-32688(gp)
  1224bc:	e0ffff17 	ldw	r3,-4(fp)
  1224c0:	1885c83a 	sub	r2,r3,r2
  1224c4:	040004b4 	movhi	r16,18
  1224c8:	8414fd04 	addi	r16,r16,21492
  1224cc:	1009883a 	mov	r4,r2
  1224d0:	014003c4 	movi	r5,15
  1224d4:	01234e80 	call	1234e8 <__mulsi3>
  1224d8:	e0fffd17 	ldw	r3,-12(fp)
  1224dc:	10c5883a 	add	r2,r2,r3
  1224e0:	8085883a 	add	r2,r16,r2
  1224e4:	10800003 	ldbu	r2,0(r2)
  1224e8:	10c03fcc 	andi	r3,r2,255
  1224ec:	e0bffc17 	ldw	r2,-16(fp)
  1224f0:	1884703a 	and	r2,r3,r2
  1224f4:	1000071e 	bne	r2,zero,122514 <restore_trace+0x94>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
  1224f8:	e0fffe17 	ldw	r3,-8(fp)
  1224fc:	e0bfff17 	ldw	r2,-4(fp)
  122500:	1809883a 	mov	r4,r3
  122504:	100b883a 	mov	r5,r2
  122508:	000d883a 	mov	r6,zero
  12250c:	012192c0 	call	12192c <plot_pixel>
  122510:	00000606 	br	12252c <restore_trace+0xac>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
  122514:	e0fffe17 	ldw	r3,-8(fp)
  122518:	e0bfff17 	ldw	r2,-4(fp)
  12251c:	1809883a 	mov	r4,r3
  122520:	100b883a 	mov	r5,r2
  122524:	01800044 	movi	r6,1
  122528:	012192c0 	call	12192c <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
  12252c:	e0bffc17 	ldw	r2,-16(fp)
  122530:	1005d07a 	srai	r2,r2,1
  122534:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
  122538:	e0bffc17 	ldw	r2,-16(fp)
  12253c:	1000051e 	bne	r2,zero,122554 <restore_trace+0xd4>
	        /* now on high bit of next byte */
		bit_position = 0x80;
  122540:	00802004 	movi	r2,128
  122544:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
  122548:	e0bffd17 	ldw	r2,-12(fp)
  12254c:	10800044 	addi	r2,r2,1
  122550:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = saved_pos_x; x < saved_end_x; x++)  {
  122554:	e0bffe17 	ldw	r2,-8(fp)
  122558:	10800044 	addi	r2,r2,1
  12255c:	e0bffe15 	stw	r2,-8(fp)
  122560:	d0a01617 	ldw	r2,-32680(gp)
  122564:	e0fffe17 	ldw	r3,-8(fp)
  122568:	18bfd316 	blt	r3,r2,1224b8 <restore_trace+0x38>
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
  12256c:	e0bfff17 	ldw	r2,-4(fp)
  122570:	10800044 	addi	r2,r2,1
  122574:	e0bfff15 	stw	r2,-4(fp)
  122578:	d0a01317 	ldw	r2,-32692(gp)
  12257c:	e0ffff17 	ldw	r3,-4(fp)
  122580:	18bfc716 	blt	r3,r2,1224a0 <restore_trace+0x20>
        }
    }


    /* restored the saved area - return */
    return;
  122584:	0001883a 	nop

}
  122588:	e037883a 	mov	sp,fp
  12258c:	dfc00217 	ldw	ra,8(sp)
  122590:	df000117 	ldw	fp,4(sp)
  122594:	dc000017 	ldw	r16,0(sp)
  122598:	dec00304 	addi	sp,sp,12
  12259c:	f800283a 	ret

001225a0 <do_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  do_trace()
{
  1225a0:	defffe04 	addi	sp,sp,-8
  1225a4:	dfc00115 	stw	ra,4(sp)
  1225a8:	df000015 	stw	fp,0(sp)
  1225ac:	d839883a 	mov	fp,sp



    /* start up the trace */
    /* indicate whether using automatic triggering or not */
    start_sample(get_trigger_mode() == AUTO_TRIGGER);
  1225b0:	0120c340 	call	120c34 <get_trigger_mode>
  1225b4:	10800060 	cmpeqi	r2,r2,1
  1225b8:	10803fcc 	andi	r2,r2,255
  1225bc:	1009883a 	mov	r4,r2
  1225c0:	01219c80 	call	1219c8 <start_sample>

    /* now not ready for another trace (currently doing one) */
    trace_status = FALSE;
  1225c4:	d0201215 	stw	zero,-32696(gp)

    /* and are currently sampling data */
    sampling = TRUE;
  1225c8:	00800044 	movi	r2,1
  1225cc:	d0a01815 	stw	r2,-32672(gp)


    /* trace is going, return */
    return;
  1225d0:	0001883a 	nop

}
  1225d4:	e037883a 	mov	sp,fp
  1225d8:	dfc00117 	ldw	ra,4(sp)
  1225dc:	df000017 	ldw	fp,0(sp)
  1225e0:	dec00204 	addi	sp,sp,8
  1225e4:	f800283a 	ret

001225e8 <plot_trace>:
   Last Modified:    May 9, 2006

*/

void  plot_trace(unsigned char *sample)
{
  1225e8:	defff304 	addi	sp,sp,-52
  1225ec:	dfc00c15 	stw	ra,48(sp)
  1225f0:	df000b15 	stw	fp,44(sp)
  1225f4:	dcc00a15 	stw	r19,40(sp)
  1225f8:	dc800915 	stw	r18,36(sp)
  1225fc:	dc400815 	stw	r17,32(sp)
  122600:	dc000715 	stw	r16,28(sp)
  122604:	df000704 	addi	fp,sp,28
  122608:	e13fff15 	stw	r4,-4(fp)
    /* variables */
    int  x = 0;				/* current x position to plot */
  12260c:	e03ff915 	stw	zero,-28(fp)
    int  x_pos = (PLOT_SIZE_X / 2);	/* "fine" x position for multiple point plotting */
  122610:	00803c04 	movi	r2,240
  122614:	e0bffa15 	stw	r2,-24(fp)
    int  j;



    /* first, clear the display to get rid of old plots */
    clear_display();
  122618:	012190c0 	call	12190c <clear_display>

    /* clear the saved areas too */
    clear_saved_areas();
  12261c:	01220cc0 	call	1220cc <clear_saved_areas>

    /* re-display the menu (if it was on) */
    refresh_menu();
  122620:	01207900 	call	120790 <refresh_menu>


    /* plot the sample */
    for (i = 0; i < sample_size; i++)  {
  122624:	e03ffc15 	stw	zero,-16(fp)
  122628:	00010b06 	br	122a58 <plot_trace+0x470>

        /* determine y position of point (note: screen coordinates invert) */
	y = (PLOT_SIZE_Y - 1) - ((sample[i] * (PLOT_SIZE_Y - 1)) / 255);
  12262c:	e0bffc17 	ldw	r2,-16(fp)
  122630:	e0ffff17 	ldw	r3,-4(fp)
  122634:	1885883a 	add	r2,r3,r2
  122638:	10800003 	ldbu	r2,0(r2)
  12263c:	10803fcc 	andi	r2,r2,255
  122640:	1009883a 	mov	r4,r2
  122644:	01401fc4 	movi	r5,127
  122648:	01234e80 	call	1234e8 <__mulsi3>
  12264c:	1009883a 	mov	r4,r2
  122650:	01403fc4 	movi	r5,255
  122654:	012342c0 	call	12342c <__divsi3>
  122658:	00c01fc4 	movi	r3,127
  12265c:	1885c83a 	sub	r2,r3,r2
  122660:	e0bffe15 	stw	r2,-8(fp)

        /* plot this point */
	plot_pixel(x, y, PIXEL_BLACK);
  122664:	e0fff917 	ldw	r3,-28(fp)
  122668:	e0bffe17 	ldw	r2,-8(fp)
  12266c:	1809883a 	mov	r4,r3
  122670:	100b883a 	mov	r5,r2
  122674:	01800044 	movi	r6,1
  122678:	012192c0 	call	12192c <plot_pixel>


	/* check if the point is in a save area */

	/* check if in the menu area */
	if ((x >= MENU_UL_X) && (x < (MENU_UL_X + MENU_SIZE_X)) &&
  12267c:	e0bff917 	ldw	r2,-28(fp)
  122680:	10805e90 	cmplti	r2,r2,378
  122684:	10002f1e 	bne	r2,zero,122744 <plot_trace+0x15c>
  122688:	e0bff917 	ldw	r2,-28(fp)
  12268c:	10807688 	cmpgei	r2,r2,474
  122690:	10002c1e 	bne	r2,zero,122744 <plot_trace+0x15c>
  122694:	e0bffe17 	ldw	r2,-8(fp)
  122698:	10002a16 	blt	r2,zero,122744 <plot_trace+0x15c>
	    (y >= MENU_UL_Y) && (y < (MENU_UL_Y + MENU_SIZE_Y)))
  12269c:	e0bffe17 	ldw	r2,-8(fp)
  1226a0:	10800e08 	cmpgei	r2,r2,56
  1226a4:	1000271e 	bne	r2,zero,122744 <plot_trace+0x15c>
	    /* point is in the menu area - save it */
	    saved_menu[y - MENU_UL_Y][(x - MENU_UL_X)/8] |= (0x80 >> ((x - MENU_UL_X) % 8));
  1226a8:	e0bff917 	ldw	r2,-28(fp)
  1226ac:	10bfa184 	addi	r2,r2,-378
  1226b0:	1000010e 	bge	r2,zero,1226b8 <plot_trace+0xd0>
  1226b4:	108001c4 	addi	r2,r2,7
  1226b8:	1005d0fa 	srai	r2,r2,3
  1226bc:	1021883a 	mov	r16,r2
  1226c0:	044004b4 	movhi	r17,18
  1226c4:	8c53fc04 	addi	r17,r17,20464
  1226c8:	e0bffe17 	ldw	r2,-8(fp)
  1226cc:	1009883a 	mov	r4,r2
  1226d0:	01400304 	movi	r5,12
  1226d4:	01234e80 	call	1234e8 <__mulsi3>
  1226d8:	1405883a 	add	r2,r2,r16
  1226dc:	8885883a 	add	r2,r17,r2
  1226e0:	10800003 	ldbu	r2,0(r2)
  1226e4:	1007883a 	mov	r3,r2
  1226e8:	e0bff917 	ldw	r2,-28(fp)
  1226ec:	113fa184 	addi	r4,r2,-378
  1226f0:	00a00034 	movhi	r2,32768
  1226f4:	108001c4 	addi	r2,r2,7
  1226f8:	2084703a 	and	r2,r4,r2
  1226fc:	1000040e 	bge	r2,zero,122710 <plot_trace+0x128>
  122700:	10bfffc4 	addi	r2,r2,-1
  122704:	013ffe04 	movi	r4,-8
  122708:	1104b03a 	or	r2,r2,r4
  12270c:	10800044 	addi	r2,r2,1
  122710:	01002004 	movi	r4,128
  122714:	2085d83a 	sra	r2,r4,r2
  122718:	1884b03a 	or	r2,r3,r2
  12271c:	1023883a 	mov	r17,r2
  122720:	048004b4 	movhi	r18,18
  122724:	9493fc04 	addi	r18,r18,20464
  122728:	e0bffe17 	ldw	r2,-8(fp)
  12272c:	1009883a 	mov	r4,r2
  122730:	01400304 	movi	r5,12
  122734:	01234e80 	call	1234e8 <__mulsi3>
  122738:	1405883a 	add	r2,r2,r16
  12273c:	9085883a 	add	r2,r18,r2
  122740:	14400005 	stb	r17,0(r2)

	/* check if in the saved area */
	if ((x >= saved_pos_x) && (x <= saved_end_x) && (y >= saved_pos_y) && (y <= saved_end_y))
  122744:	d0a01717 	ldw	r2,-32676(gp)
  122748:	e0fff917 	ldw	r3,-28(fp)
  12274c:	18803616 	blt	r3,r2,122828 <plot_trace+0x240>
  122750:	d0e01617 	ldw	r3,-32680(gp)
  122754:	e0bff917 	ldw	r2,-28(fp)
  122758:	18803316 	blt	r3,r2,122828 <plot_trace+0x240>
  12275c:	d0a01417 	ldw	r2,-32688(gp)
  122760:	e0fffe17 	ldw	r3,-8(fp)
  122764:	18803016 	blt	r3,r2,122828 <plot_trace+0x240>
  122768:	d0e01317 	ldw	r3,-32692(gp)
  12276c:	e0bffe17 	ldw	r2,-8(fp)
  122770:	18802d16 	blt	r3,r2,122828 <plot_trace+0x240>
	    /* point is in the save area - save it */
	    saved_area[y - saved_pos_y][(x - saved_pos_x)/8] |= (0x80 >> ((x - saved_pos_x) % 8));
  122774:	d0a01417 	ldw	r2,-32688(gp)
  122778:	e0fffe17 	ldw	r3,-8(fp)
  12277c:	18a3c83a 	sub	r17,r3,r2
  122780:	d0a01717 	ldw	r2,-32676(gp)
  122784:	e0fff917 	ldw	r3,-28(fp)
  122788:	1885c83a 	sub	r2,r3,r2
  12278c:	1000010e 	bge	r2,zero,122794 <plot_trace+0x1ac>
  122790:	108001c4 	addi	r2,r2,7
  122794:	1005d0fa 	srai	r2,r2,3
  122798:	1021883a 	mov	r16,r2
  12279c:	d0a01417 	ldw	r2,-32688(gp)
  1227a0:	e0fffe17 	ldw	r3,-8(fp)
  1227a4:	1885c83a 	sub	r2,r3,r2
  1227a8:	048004b4 	movhi	r18,18
  1227ac:	9494fd04 	addi	r18,r18,21492
  1227b0:	1009883a 	mov	r4,r2
  1227b4:	014003c4 	movi	r5,15
  1227b8:	01234e80 	call	1234e8 <__mulsi3>
  1227bc:	1405883a 	add	r2,r2,r16
  1227c0:	9085883a 	add	r2,r18,r2
  1227c4:	10800003 	ldbu	r2,0(r2)
  1227c8:	1007883a 	mov	r3,r2
  1227cc:	d0a01717 	ldw	r2,-32676(gp)
  1227d0:	e13ff917 	ldw	r4,-28(fp)
  1227d4:	2089c83a 	sub	r4,r4,r2
  1227d8:	00a00034 	movhi	r2,32768
  1227dc:	108001c4 	addi	r2,r2,7
  1227e0:	2084703a 	and	r2,r4,r2
  1227e4:	1000040e 	bge	r2,zero,1227f8 <plot_trace+0x210>
  1227e8:	10bfffc4 	addi	r2,r2,-1
  1227ec:	013ffe04 	movi	r4,-8
  1227f0:	1104b03a 	or	r2,r2,r4
  1227f4:	10800044 	addi	r2,r2,1
  1227f8:	01002004 	movi	r4,128
  1227fc:	2085d83a 	sra	r2,r4,r2
  122800:	1884b03a 	or	r2,r3,r2
  122804:	1025883a 	mov	r18,r2
  122808:	04c004b4 	movhi	r19,18
  12280c:	9cd4fd04 	addi	r19,r19,21492
  122810:	8809883a 	mov	r4,r17
  122814:	014003c4 	movi	r5,15
  122818:	01234e80 	call	1234e8 <__mulsi3>
  12281c:	1405883a 	add	r2,r2,r16
  122820:	9885883a 	add	r2,r19,r2
  122824:	14800005 	stb	r18,0(r2)

	/* check if on a grid line */
	/* go through all the horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  122828:	00bfffc4 	movi	r2,-1
  12282c:	e0bffd15 	stw	r2,-12(fp)
  122830:	00003a06 	br	12291c <plot_trace+0x334>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
  122834:	e13ffd17 	ldw	r4,-12(fp)
  122838:	01400c04 	movi	r5,48
  12283c:	01234e80 	call	1234e8 <__mulsi3>
  122840:	10801004 	addi	r2,r2,64
  122844:	e0bffb15 	stw	r2,-20(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
  122848:	e0bffb17 	ldw	r2,-20(fp)
  12284c:	10802010 	cmplti	r2,r2,128
  122850:	1000021e 	bne	r2,zero,12285c <plot_trace+0x274>
	        p = PLOT_SIZE_Y - 1;
  122854:	00801fc4 	movi	r2,127
  122858:	e0bffb15 	stw	r2,-20(fp)
	    if (p < 0)
  12285c:	e0bffb17 	ldw	r2,-20(fp)
  122860:	1000010e 	bge	r2,zero,122868 <plot_trace+0x280>
	        p = 0;
  122864:	e03ffb15 	stw	zero,-20(fp)

	    /* if the point is on this line, save it */
	    if (y == p)
  122868:	e0fffe17 	ldw	r3,-8(fp)
  12286c:	e0bffb17 	ldw	r2,-20(fp)
  122870:	1880271e 	bne	r3,r2,122910 <plot_trace+0x328>
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
  122874:	e0bffd17 	ldw	r2,-12(fp)
  122878:	14400044 	addi	r17,r2,1
  12287c:	e0bff917 	ldw	r2,-28(fp)
  122880:	1000010e 	bge	r2,zero,122888 <plot_trace+0x2a0>
  122884:	108001c4 	addi	r2,r2,7
  122888:	1005d0fa 	srai	r2,r2,3
  12288c:	1021883a 	mov	r16,r2
  122890:	e0bffd17 	ldw	r2,-12(fp)
  122894:	10800044 	addi	r2,r2,1
  122898:	048004b4 	movhi	r18,18
  12289c:	9494d004 	addi	r18,r18,21312
  1228a0:	1009883a 	mov	r4,r2
  1228a4:	01400f04 	movi	r5,60
  1228a8:	01234e80 	call	1234e8 <__mulsi3>
  1228ac:	1405883a 	add	r2,r2,r16
  1228b0:	9085883a 	add	r2,r18,r2
  1228b4:	10800003 	ldbu	r2,0(r2)
  1228b8:	1007883a 	mov	r3,r2
  1228bc:	e13ff917 	ldw	r4,-28(fp)
  1228c0:	00a00034 	movhi	r2,32768
  1228c4:	108001c4 	addi	r2,r2,7
  1228c8:	2084703a 	and	r2,r4,r2
  1228cc:	1000040e 	bge	r2,zero,1228e0 <plot_trace+0x2f8>
  1228d0:	10bfffc4 	addi	r2,r2,-1
  1228d4:	013ffe04 	movi	r4,-8
  1228d8:	1104b03a 	or	r2,r2,r4
  1228dc:	10800044 	addi	r2,r2,1
  1228e0:	01002004 	movi	r4,128
  1228e4:	2085d83a 	sra	r2,r4,r2
  1228e8:	1884b03a 	or	r2,r3,r2
  1228ec:	1025883a 	mov	r18,r2
  1228f0:	04c004b4 	movhi	r19,18
  1228f4:	9cd4d004 	addi	r19,r19,21312
  1228f8:	8809883a 	mov	r4,r17
  1228fc:	01400f04 	movi	r5,60
  122900:	01234e80 	call	1234e8 <__mulsi3>
  122904:	1405883a 	add	r2,r2,r16
  122908:	9885883a 	add	r2,r19,r2
  12290c:	14800005 	stb	r18,0(r2)
	    /* point is in the save area - save it */
	    saved_area[y - saved_pos_y][(x - saved_pos_x)/8] |= (0x80 >> ((x - saved_pos_x) % 8));

	/* check if on a grid line */
	/* go through all the horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
  122910:	e0bffd17 	ldw	r2,-12(fp)
  122914:	10800044 	addi	r2,r2,1
  122918:	e0bffd15 	stw	r2,-12(fp)
  12291c:	e0bffd17 	ldw	r2,-12(fp)
  122920:	10800090 	cmplti	r2,r2,2
  122924:	103fc31e 	bne	r2,zero,122834 <plot_trace+0x24c>
	    if (y == p)
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
	}

	/* go through all the vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  122928:	00bffec4 	movi	r2,-5
  12292c:	e0bffd15 	stw	r2,-12(fp)
  122930:	00003606 	br	122a0c <plot_trace+0x424>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
  122934:	e13ffd17 	ldw	r4,-12(fp)
  122938:	01400c04 	movi	r5,48
  12293c:	01234e80 	call	1234e8 <__mulsi3>
  122940:	10803c04 	addi	r2,r2,240
  122944:	e0bffb15 	stw	r2,-20(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
  122948:	e0bffb17 	ldw	r2,-20(fp)
  12294c:	10807810 	cmplti	r2,r2,480
  122950:	1000021e 	bne	r2,zero,12295c <plot_trace+0x374>
	        p = PLOT_SIZE_X - 1;
  122954:	008077c4 	movi	r2,479
  122958:	e0bffb15 	stw	r2,-20(fp)
	    if (p < 0)
  12295c:	e0bffb17 	ldw	r2,-20(fp)
  122960:	1000010e 	bge	r2,zero,122968 <plot_trace+0x380>
	        p = 0;
  122964:	e03ffb15 	stw	zero,-20(fp)

	    /* if the point is on this line, save it */
	    if (x == p)
  122968:	e0fff917 	ldw	r3,-28(fp)
  12296c:	e0bffb17 	ldw	r2,-20(fp)
  122970:	1880231e 	bne	r3,r2,122a00 <plot_trace+0x418>
		saved_axis_y[j + X_TICK_CNT][y / 8] |= (0x80 >> (y % 8));
  122974:	e0bffd17 	ldw	r2,-12(fp)
  122978:	11800144 	addi	r6,r2,5
  12297c:	e0bffe17 	ldw	r2,-8(fp)
  122980:	1000010e 	bge	r2,zero,122988 <plot_trace+0x3a0>
  122984:	108001c4 	addi	r2,r2,7
  122988:	1005d0fa 	srai	r2,r2,3
  12298c:	1007883a 	mov	r3,r2
  122990:	e0bffd17 	ldw	r2,-12(fp)
  122994:	10800144 	addi	r2,r2,5
  122998:	010004b4 	movhi	r4,18
  12299c:	2114a404 	addi	r4,r4,21136
  1229a0:	1004913a 	slli	r2,r2,4
  1229a4:	10c5883a 	add	r2,r2,r3
  1229a8:	2085883a 	add	r2,r4,r2
  1229ac:	10800003 	ldbu	r2,0(r2)
  1229b0:	1009883a 	mov	r4,r2
  1229b4:	e17ffe17 	ldw	r5,-8(fp)
  1229b8:	00a00034 	movhi	r2,32768
  1229bc:	108001c4 	addi	r2,r2,7
  1229c0:	2884703a 	and	r2,r5,r2
  1229c4:	1000040e 	bge	r2,zero,1229d8 <plot_trace+0x3f0>
  1229c8:	10bfffc4 	addi	r2,r2,-1
  1229cc:	017ffe04 	movi	r5,-8
  1229d0:	1144b03a 	or	r2,r2,r5
  1229d4:	10800044 	addi	r2,r2,1
  1229d8:	01402004 	movi	r5,128
  1229dc:	2885d83a 	sra	r2,r5,r2
  1229e0:	2084b03a 	or	r2,r4,r2
  1229e4:	1009883a 	mov	r4,r2
  1229e8:	014004b4 	movhi	r5,18
  1229ec:	2954a404 	addi	r5,r5,21136
  1229f0:	3004913a 	slli	r2,r6,4
  1229f4:	10c5883a 	add	r2,r2,r3
  1229f8:	2885883a 	add	r2,r5,r2
  1229fc:	11000005 	stb	r4,0(r2)
	    if (y == p)
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
	}

	/* go through all the vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
  122a00:	e0bffd17 	ldw	r2,-12(fp)
  122a04:	10800044 	addi	r2,r2,1
  122a08:	e0bffd15 	stw	r2,-12(fp)
  122a0c:	e0bffd17 	ldw	r2,-12(fp)
  122a10:	10800190 	cmplti	r2,r2,6
  122a14:	103fc71e 	bne	r2,zero,122934 <plot_trace+0x34c>
		saved_axis_y[j + X_TICK_CNT][y / 8] |= (0x80 >> (y % 8));
	}


	/* update x position */
	x_pos += PLOT_SIZE_X;
  122a18:	e0bffa17 	ldw	r2,-24(fp)
  122a1c:	10807804 	addi	r2,r2,480
  122a20:	e0bffa15 	stw	r2,-24(fp)
	/* check if at next horizontal position */
	if (x_pos >= sample_size)  {
  122a24:	d0a01517 	ldw	r2,-32684(gp)
  122a28:	e0fffa17 	ldw	r3,-24(fp)
  122a2c:	18800716 	blt	r3,r2,122a4c <plot_trace+0x464>
	    /* at next position - update positions */
	    x++;
  122a30:	e0bff917 	ldw	r2,-28(fp)
  122a34:	10800044 	addi	r2,r2,1
  122a38:	e0bff915 	stw	r2,-28(fp)
	    x_pos -= sample_size;
  122a3c:	d0a01517 	ldw	r2,-32684(gp)
  122a40:	e0fffa17 	ldw	r3,-24(fp)
  122a44:	1885c83a 	sub	r2,r3,r2
  122a48:	e0bffa15 	stw	r2,-24(fp)
    /* re-display the menu (if it was on) */
    refresh_menu();


    /* plot the sample */
    for (i = 0; i < sample_size; i++)  {
  122a4c:	e0bffc17 	ldw	r2,-16(fp)
  122a50:	10800044 	addi	r2,r2,1
  122a54:	e0bffc15 	stw	r2,-16(fp)
  122a58:	d0a01517 	ldw	r2,-32684(gp)
  122a5c:	e0fffc17 	ldw	r3,-16(fp)
  122a60:	18bef216 	blt	r3,r2,12262c <plot_trace+0x44>
	}
    }


    /* finally, output the scale if need be */
    set_display_scale(cur_scale);
  122a64:	d0a01117 	ldw	r2,-32700(gp)
  122a68:	1009883a 	mov	r4,r2
  122a6c:	0121cd40 	call	121cd4 <set_display_scale>


    /* done with plot, return */
    return;
  122a70:	0001883a 	nop

}
  122a74:	e037883a 	mov	sp,fp
  122a78:	dfc00517 	ldw	ra,20(sp)
  122a7c:	df000417 	ldw	fp,16(sp)
  122a80:	dcc00317 	ldw	r19,12(sp)
  122a84:	dc800217 	ldw	r18,8(sp)
  122a88:	dc400117 	ldw	r17,4(sp)
  122a8c:	dc000017 	ldw	r16,0(sp)
  122a90:	dec00604 	addi	sp,sp,24
  122a94:	f800283a 	ret

00122a98 <key_int_installer>:

.global key_int_installer
.type	key_int_installer, @function

key_int_installer:
	SAVE
  122a98:	deffff04 	addi	sp,sp,-4
  122a9c:	dfc00015 	stw	ra,0(sp)
  122aa0:	deffff04 	addi	sp,sp,-4
  122aa4:	df000015 	stw	fp,0(sp)
  122aa8:	d839883a 	mov	fp,sp
  122aac:	020004b4 	movhi	r8,18

	# asdf
	movia	r8, adc_speed
  122ab0:	42127004 	addi	r8,r8,18880
	movi	r9, 0x80
  122ab4:	02402004 	movi	r9,128
	stw		r9, (r8)
  122ab8:	42400015 	stw	r9,0(r8)
	# asdf

	# Enable all switch interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  122abc:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122ac0:	42046414 	ori	r8,r8,4496
	movhi	r9, %hi(SWITCH_ALL)
  122ac4:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  122ac8:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_IRQ_MASK(r8)
  122acc:	42400215 	stw	r9,8(r8)

	# Install the interrupt handler
	mov		r4, r0
  122ad0:	0009883a 	mov	r4,zero
	movi	r5, KEY_INPUT_IRQ
  122ad4:	01400144 	movi	r5,5
	movhi	r6, %hi(key_handler)
  122ad8:	018004b4 	movhi	r6,18
	ori		r6, r6, %lo(key_handler)
  122adc:	318ac414 	ori	r6,r6,11024
	mov		r7, r0
  122ae0:	000f883a 	mov	r7,zero
	PUSH	r0
  122ae4:	deffff04 	addi	sp,sp,-4
  122ae8:	d8000015 	stw	zero,0(sp)
	call	alt_ic_isr_register
  122aec:	01236500 	call	123650 <alt_ic_isr_register>
	POP		r0
  122af0:	d8000017 	ldw	zero,0(sp)
  122af4:	dec00104 	addi	sp,sp,4

00122af8 <key_int_installer_done>:

key_int_installer_done:
	RESTORE
  122af8:	e037883a 	mov	sp,fp
  122afc:	df000017 	ldw	fp,0(sp)
  122b00:	dec00104 	addi	sp,sp,4
  122b04:	dfc00017 	ldw	ra,0(sp)
  122b08:	dec00104 	addi	sp,sp,4
	ret
  122b0c:	f800283a 	ret

00122b10 <key_handler>:
 */

.type key_handler,@function

key_handler:
	SAVE
  122b10:	deffff04 	addi	sp,sp,-4
  122b14:	dfc00015 	stw	ra,0(sp)
  122b18:	deffff04 	addi	sp,sp,-4
  122b1c:	df000015 	stw	fp,0(sp)
  122b20:	d839883a 	mov	fp,sp

	# Key should now be available. Update key_press.
	movi	r8, 1
  122b24:	02000044 	movi	r8,1
  122b28:	024004b4 	movhi	r9,18
	movia	r9, key_press
  122b2c:	4a526c04 	addi	r9,r9,18864
	stb		r8, (r9)
  122b30:	4a000005 	stb	r8,0(r9)

	# Clear interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  122b34:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122b38:	42046414 	ori	r8,r8,4496
	stw		r0, PIO_IRQ_MASK(r8)
  122b3c:	40000215 	stw	zero,8(r8)

	# Get the edge capture register.
	movhi	r8, %hi(KEY_INPUT_BASE)
  122b40:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122b44:	42046414 	ori	r8,r8,4496
	ldw		r8, PIO_EDGE_CAP(r8)
  122b48:	42000317 	ldw	r8,12(r8)

	# Check each bit (starting at 0) and see if set.
	movi	r9, 1
  122b4c:	02400044 	movi	r9,1
	movi	r11, 0
  122b50:	02c00004 	movi	r11,0

00122b54 <loop_keys>:

loop_keys:
	and		r10, r8, r9
  122b54:	4254703a 	and	r10,r8,r9
	bne		r10, r0, key_lookup
  122b58:	5000031e 	bne	r10,zero,122b68 <key_lookup>
	slli	r9, r9, 1
  122b5c:	4812907a 	slli	r9,r9,1
	addi	r11, r11, 1
  122b60:	5ac00044 	addi	r11,r11,1
	br		loop_keys
  122b64:	003ffb06 	br	122b54 <loop_keys>

00122b68 <key_lookup>:
  122b68:	020004b4 	movhi	r8,18

	# Once the key is found (r11), use the lookup table to set key_value.
key_lookup:
	movia	r8, key_map
  122b6c:	420b3804 	addi	r8,r8,11488
	add		r8, r8, r11
  122b70:	42d1883a 	add	r8,r8,r11
	ldb		r8,	(r8)
  122b74:	42000007 	ldb	r8,0(r8)
  122b78:	028004b4 	movhi	r10,18

	movia	r10, key_value
  122b7c:	52926c44 	addi	r10,r10,18865
	stb		r8, (r10)
  122b80:	52000005 	stb	r8,0(r10)

	# Remove later!!!
	movi	r12, 10
  122b84:	03000284 	movi	r12,10
	beq		r11, r12, inc_speed
  122b88:	5b001f26 	beq	r11,r12,122c08 <inc_speed>
	movi	r12, 11
  122b8c:	030002c4 	movi	r12,11
	beq		r11, r12, dec_speed
  122b90:	5b001026 	beq	r11,r12,122bd4 <dec_speed>

00122b94 <key_lookup_cont>:
key_lookup_cont:
	# <END Remove later!!!>

	# Clear the edge capture register (write 1 to clear).
	movhi	r8, %hi(KEY_INPUT_BASE)
  122b94:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122b98:	42046414 	ori	r8,r8,4496
	movhi	r9, %hi(SWITCH_ALL)
  122b9c:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  122ba0:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  122ba4:	42400315 	stw	r9,12(r8)

	# Re-enable interrupts.
	movhi	r8, %hi(KEY_INPUT_BASE)
  122ba8:	02000574 	movhi	r8,21
	ori		r8, r8, %lo(KEY_INPUT_BASE)
  122bac:	42046414 	ori	r8,r8,4496
	movhi	r9, %hi(SWITCH_ALL)
  122bb0:	024003f4 	movhi	r9,15
	ori		r9, r9, %lo(SWITCH_ALL)
  122bb4:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_IRQ_MASK(r8)
  122bb8:	42400215 	stw	r9,8(r8)

00122bbc <key_hndler_done>:

key_hndler_done:
	RESTORE
  122bbc:	e037883a 	mov	sp,fp
  122bc0:	df000017 	ldw	fp,0(sp)
  122bc4:	dec00104 	addi	sp,sp,4
  122bc8:	dfc00017 	ldw	ra,0(sp)
  122bcc:	dec00104 	addi	sp,sp,4
	ret
  122bd0:	f800283a 	ret

00122bd4 <dec_speed>:
  122bd4:	034004b4 	movhi	r13,18

# hashtag
dec_speed:
	movia	r13, adc_speed
  122bd8:	6b527004 	addi	r13,r13,18880
	ldw		r14, (r13)
  122bdc:	6b800017 	ldw	r14,0(r13)
	slli	r14, r14, 1
  122be0:	701c907a 	slli	r14,r14,1
	MOVWI	r15, 0x00FFFFFF
  122be4:	03c03ff4 	movhi	r15,255
  122be8:	7bffffd4 	ori	r15,r15,65535
	and		r14, r14, r15
  122bec:	73dc703a 	and	r14,r14,r15
	beq		r14, r0, set_speed_2
  122bf0:	70001126 	beq	r14,zero,122c38 <set_speed_2>

00122bf4 <dec_speed_cont>:
dec_speed_cont:
	MOVWI	r15, ADC_RATE_BASE
  122bf4:	03c00574 	movhi	r15,21
  122bf8:	7bc45c14 	ori	r15,r15,4464
	stw		r14, (r15)
  122bfc:	7b800015 	stw	r14,0(r15)
	stw		r14, (r13)
  122c00:	6b800015 	stw	r14,0(r13)
	br		key_lookup_cont
  122c04:	003fe306 	br	122b94 <key_lookup_cont>

00122c08 <inc_speed>:
  122c08:	034004b4 	movhi	r13,18

inc_speed:
	movia	r13, adc_speed
  122c0c:	6b527004 	addi	r13,r13,18880
	ldwio	r14, (r13)
  122c10:	6b800037 	ldwio	r14,0(r13)
	srli	r14, r14, 1
  122c14:	701cd07a 	srli	r14,r14,1
	beq		r14, r0, set_speed_1
  122c18:	70000526 	beq	r14,zero,122c30 <set_speed_1>

00122c1c <inc_speed_cont>:
inc_speed_cont:
	MOVWI	r15, ADC_RATE_BASE
  122c1c:	03c00574 	movhi	r15,21
  122c20:	7bc45c14 	ori	r15,r15,4464
	stwio	r14, (r15)
  122c24:	7b800035 	stwio	r14,0(r15)
	stwio	r14, (r13)
  122c28:	6b800035 	stwio	r14,0(r13)
	br		key_lookup_cont
  122c2c:	003fd906 	br	122b94 <key_lookup_cont>

00122c30 <set_speed_1>:

set_speed_1:
	movi	r14, 1
  122c30:	03800044 	movi	r14,1
	br		inc_speed_cont
  122c34:	003ff906 	br	122c1c <inc_speed_cont>

00122c38 <set_speed_2>:

set_speed_2:
	MOVWI	r14, 0x00800000
  122c38:	03802034 	movhi	r14,128
  122c3c:	73802034 	orhi	r14,r14,128
	br		dec_speed_cont
  122c40:	003fec06 	br	122bf4 <dec_speed_cont>

00122c44 <key_available>:

.global key_available
.type	key_available, @function

key_available:
	SAVE
  122c44:	deffff04 	addi	sp,sp,-4
  122c48:	dfc00015 	stw	ra,0(sp)
  122c4c:	deffff04 	addi	sp,sp,-4
  122c50:	df000015 	stw	fp,0(sp)
  122c54:	d839883a 	mov	fp,sp
  122c58:	008004b4 	movhi	r2,18

	# Simply return the value in key_press.
	movia	r2, key_press
  122c5c:	10926c04 	addi	r2,r2,18864
	ldb		r2, (r2)
  122c60:	10800007 	ldb	r2,0(r2)

00122c64 <key_available_done>:

key_available_done:
	RESTORE
  122c64:	e037883a 	mov	sp,fp
  122c68:	df000017 	ldw	fp,0(sp)
  122c6c:	dec00104 	addi	sp,sp,4
  122c70:	dfc00017 	ldw	ra,0(sp)
  122c74:	dec00104 	addi	sp,sp,4
	ret
  122c78:	f800283a 	ret

00122c7c <getkey>:

.global	getkey
.type	getkey, @function

getkey:
	SAVE
  122c7c:	deffff04 	addi	sp,sp,-4
  122c80:	dfc00015 	stw	ra,0(sp)
  122c84:	deffff04 	addi	sp,sp,-4
  122c88:	df000015 	stw	fp,0(sp)
  122c8c:	d839883a 	mov	fp,sp
  122c90:	020004b4 	movhi	r8,18

	# Block until legal key arrives (which is also when key_press = TRUE).
	movia	r8, key_value
  122c94:	42126c44 	addi	r8,r8,18865
	ldb		r8, (r8)
  122c98:	42000007 	ldb	r8,0(r8)
	movi	r9, KEY_ILLEGAL
  122c9c:	02400184 	movi	r9,6
	beq		r8, r9, getkey
  122ca0:	427ff626 	beq	r8,r9,122c7c <getkey>
  122ca4:	008004b4 	movhi	r2,18

	# Get return value.
	movia	r2, key_value
  122ca8:	10926c44 	addi	r2,r2,18865
	ldb		r2, (r2)
  122cac:	10800007 	ldb	r2,0(r2)
  122cb0:	028004b4 	movhi	r10,18

	# Update key_value with KEY_ILLEGAL.
	movia	r10, key_value
  122cb4:	52926c44 	addi	r10,r10,18865
	stb		r9, (r10)
  122cb8:	52400005 	stb	r9,0(r10)
  122cbc:	028004b4 	movhi	r10,18

	# Update key_press with FALSE.
	movia	r10, key_press
  122cc0:	52926c04 	addi	r10,r10,18864
	stb		r0, (r10)
  122cc4:	50000005 	stb	zero,0(r10)

00122cc8 <getkey_done>:

getkey_done:
	RESTORE
  122cc8:	e037883a 	mov	sp,fp
  122ccc:	df000017 	ldw	fp,0(sp)
  122cd0:	dec00104 	addi	sp,sp,4
  122cd4:	dfc00017 	ldw	ra,0(sp)
  122cd8:	dec00104 	addi	sp,sp,4
	ret
  122cdc:	f800283a 	ret

00122ce0 <key_map>:
  122ce0:	03020100 	call	302010 <alt_irq_handler+0x1b9f24>
  122ce4:	00000004 	movi	zero,0
	...
  122cf0:	06000000 	call	600000 <alt_irq_handler+0x4b7f14>

00122cf4 <adc_int_installer>:

.global adc_int_installer
.type	adc_int_installer, @function

adc_int_installer:
	SAVE
  122cf4:	deffff04 	addi	sp,sp,-4
  122cf8:	dfc00015 	stw	ra,0(sp)
  122cfc:	deffff04 	addi	sp,sp,-4
  122d00:	df000015 	stw	fp,0(sp)
  122d04:	d839883a 	mov	fp,sp

	# Set FIFO speed
	STWI	ADC_RATE_BASE, 0x000080
  122d08:	deffff04 	addi	sp,sp,-4
  122d0c:	da400015 	stw	r9,0(sp)
  122d10:	deffff04 	addi	sp,sp,-4
  122d14:	da800015 	stw	r10,0(sp)
  122d18:	02400574 	movhi	r9,21
  122d1c:	4a445c14 	ori	r9,r9,4464
  122d20:	02800034 	movhi	r10,0
  122d24:	52802014 	ori	r10,r10,128
  122d28:	4a800035 	stwio	r10,0(r9)
  122d2c:	da800017 	ldw	r10,0(sp)
  122d30:	dec00104 	addi	sp,sp,4
  122d34:	da400017 	ldw	r9,0(sp)
  122d38:	dec00104 	addi	sp,sp,4

	# Set Trigger default level (2's complement), delay
	STWI	TRIG_LEVEL_BASE, 0
  122d3c:	deffff04 	addi	sp,sp,-4
  122d40:	da400015 	stw	r9,0(sp)
  122d44:	deffff04 	addi	sp,sp,-4
  122d48:	da800015 	stw	r10,0(sp)
  122d4c:	02400574 	movhi	r9,21
  122d50:	4a443014 	ori	r9,r9,4288
  122d54:	02800034 	movhi	r10,0
  122d58:	52800014 	ori	r10,r10,0
  122d5c:	4a800035 	stwio	r10,0(r9)
  122d60:	da800017 	ldw	r10,0(sp)
  122d64:	dec00104 	addi	sp,sp,4
  122d68:	da400017 	ldw	r9,0(sp)
  122d6c:	dec00104 	addi	sp,sp,4
	STWI	TRIG_DELAY_BASE, 10
  122d70:	deffff04 	addi	sp,sp,-4
  122d74:	da400015 	stw	r9,0(sp)
  122d78:	deffff04 	addi	sp,sp,-4
  122d7c:	da800015 	stw	r10,0(sp)
  122d80:	02400574 	movhi	r9,21
  122d84:	4a442814 	ori	r9,r9,4256
  122d88:	02800034 	movhi	r10,0
  122d8c:	52800294 	ori	r10,r10,10
  122d90:	4a800035 	stwio	r10,0(r9)
  122d94:	da800017 	ldw	r10,0(sp)
  122d98:	dec00104 	addi	sp,sp,4
  122d9c:	da400017 	ldw	r9,0(sp)
  122da0:	dec00104 	addi	sp,sp,4

	# Install the interrupt handler
	mov		r4, r0
  122da4:	0009883a 	mov	r4,zero
	movi	r5, 6
  122da8:	01400184 	movi	r5,6
	MOVWI	r6, adc_int_handler
  122dac:	018004b4 	movhi	r6,18
  122db0:	318bb714 	ori	r6,r6,11996
	mov		r7, r0
  122db4:	000f883a 	mov	r7,zero
	PUSH	r0
  122db8:	deffff04 	addi	sp,sp,-4
  122dbc:	d8000015 	stw	zero,0(sp)
	call	alt_ic_isr_register
  122dc0:	01236500 	call	123650 <alt_ic_isr_register>
	POP		r0
  122dc4:	d8000017 	ldw	zero,0(sp)
  122dc8:	dec00104 	addi	sp,sp,4

	# Clear the edge capture register (write 1 to clear).
	MOVWI	r8, TRIG_INT_BASE
  122dcc:	02000574 	movhi	r8,21
  122dd0:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0xFFFFFFFF
  122dd4:	027ffff4 	movhi	r9,65535
  122dd8:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  122ddc:	42400315 	stw	r9,12(r8)

	# Enable ADC interrupts. [TYPEOFINTERUPT]
	MOVWI	r8, TRIG_INT_BASE
  122de0:	02000574 	movhi	r8,21
  122de4:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0x00000002
  122de8:	02400034 	movhi	r9,0
  122dec:	4a400094 	ori	r9,r9,2
	stw		r9, PIO_IRQ_MASK(r8)
  122df0:	42400215 	stw	r9,8(r8)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  122df4:	deffff04 	addi	sp,sp,-4
  122df8:	da400015 	stw	r9,0(sp)
  122dfc:	deffff04 	addi	sp,sp,-4
  122e00:	da800015 	stw	r10,0(sp)
  122e04:	02400574 	movhi	r9,21
  122e08:	4a444014 	ori	r9,r9,4352
  122e0c:	02800034 	movhi	r10,0
  122e10:	52800254 	ori	r10,r10,9
  122e14:	4a800035 	stwio	r10,0(r9)
  122e18:	da800017 	ldw	r10,0(sp)
  122e1c:	dec00104 	addi	sp,sp,4
  122e20:	da400017 	ldw	r9,0(sp)
  122e24:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  122e28:	deffff04 	addi	sp,sp,-4
  122e2c:	da400015 	stw	r9,0(sp)
  122e30:	deffff04 	addi	sp,sp,-4
  122e34:	da800015 	stw	r10,0(sp)
  122e38:	02400574 	movhi	r9,21
  122e3c:	4a444014 	ori	r9,r9,4352
  122e40:	02800034 	movhi	r10,0
  122e44:	52800054 	ori	r10,r10,1
  122e48:	4a800035 	stwio	r10,0(r9)
  122e4c:	da800017 	ldw	r10,0(sp)
  122e50:	dec00104 	addi	sp,sp,4
  122e54:	da400017 	ldw	r9,0(sp)
  122e58:	dec00104 	addi	sp,sp,4

	# Reset trigger counter [ch. A], [+ slope]
	STWI	TRIG_CTRL_BASE, 0x04
  122e5c:	deffff04 	addi	sp,sp,-4
  122e60:	da400015 	stw	r9,0(sp)
  122e64:	deffff04 	addi	sp,sp,-4
  122e68:	da800015 	stw	r10,0(sp)
  122e6c:	02400574 	movhi	r9,21
  122e70:	4a443814 	ori	r9,r9,4320
  122e74:	02800034 	movhi	r10,0
  122e78:	52800114 	ori	r10,r10,4
  122e7c:	4a800035 	stwio	r10,0(r9)
  122e80:	da800017 	ldw	r10,0(sp)
  122e84:	dec00104 	addi	sp,sp,4
  122e88:	da400017 	ldw	r9,0(sp)
  122e8c:	dec00104 	addi	sp,sp,4
	STWI	TRIG_CTRL_BASE, 0x00
  122e90:	deffff04 	addi	sp,sp,-4
  122e94:	da400015 	stw	r9,0(sp)
  122e98:	deffff04 	addi	sp,sp,-4
  122e9c:	da800015 	stw	r10,0(sp)
  122ea0:	02400574 	movhi	r9,21
  122ea4:	4a443814 	ori	r9,r9,4320
  122ea8:	02800034 	movhi	r10,0
  122eac:	52800014 	ori	r10,r10,0
  122eb0:	4a800035 	stwio	r10,0(r9)
  122eb4:	da800017 	ldw	r10,0(sp)
  122eb8:	dec00104 	addi	sp,sp,4
  122ebc:	da400017 	ldw	r9,0(sp)
  122ec0:	dec00104 	addi	sp,sp,4

00122ec4 <adc_int_installer_done>:

adc_int_installer_done:
	RESTORE
  122ec4:	e037883a 	mov	sp,fp
  122ec8:	df000017 	ldw	fp,0(sp)
  122ecc:	dec00104 	addi	sp,sp,4
  122ed0:	dfc00017 	ldw	ra,0(sp)
  122ed4:	dec00104 	addi	sp,sp,4
	ret
  122ed8:	f800283a 	ret

00122edc <adc_int_handler>:

.global adc_int_handler
.type adc_int_handler, @function

adc_int_handler:
	SAVE
  122edc:	deffff04 	addi	sp,sp,-4
  122ee0:	dfc00015 	stw	ra,0(sp)
  122ee4:	deffff04 	addi	sp,sp,-4
  122ee8:	df000015 	stw	fp,0(sp)
  122eec:	d839883a 	mov	fp,sp

	# Clear interrupts.
	MOVWI	r8, TRIG_INT_BASE
  122ef0:	02000574 	movhi	r8,21
  122ef4:	42044814 	ori	r8,r8,4384
	stw		r0, PIO_IRQ_MASK(r8)
  122ef8:	40000215 	stw	zero,8(r8)

	# Get the edge capture register.
	MOVWI	r8, TRIG_INT_BASE
  122efc:	02000574 	movhi	r8,21
  122f00:	42044814 	ori	r8,r8,4384
	ldw		r8, PIO_EDGE_CAP(r8)
  122f04:	42000317 	ldw	r8,12(r8)

	# Only ch A trigger interrupts for now. [TYPEOFINTERRUPT]
	andi	r8, r8, 0x02
  122f08:	4200008c 	andi	r8,r8,2
	beq		r8, r0, adc_int_handler_done
  122f0c:	40006126 	beq	r8,zero,123094 <adc_int_handler_done>

	# Pause FIFO write, enable reading
	STWI	ADC_CTRL_BASE, 0x02
  122f10:	deffff04 	addi	sp,sp,-4
  122f14:	da400015 	stw	r9,0(sp)
  122f18:	deffff04 	addi	sp,sp,-4
  122f1c:	da800015 	stw	r10,0(sp)
  122f20:	02400574 	movhi	r9,21
  122f24:	4a444014 	ori	r9,r9,4352
  122f28:	02800034 	movhi	r10,0
  122f2c:	52800094 	ori	r10,r10,2
  122f30:	4a800035 	stwio	r10,0(r9)
  122f34:	da800017 	ldw	r10,0(sp)
  122f38:	dec00104 	addi	sp,sp,4
  122f3c:	da400017 	ldw	r9,0(sp)
  122f40:	dec00104 	addi	sp,sp,4

	mov		r10, r0
  122f44:	0015883a 	mov	r10,zero

00122f48 <adc_int_handler_clear_front>:
adc_int_handler_clear_front:
	# Bitbang clock pulse
	STWI	ADC_CTRL_BASE, 0x06
  122f48:	deffff04 	addi	sp,sp,-4
  122f4c:	da400015 	stw	r9,0(sp)
  122f50:	deffff04 	addi	sp,sp,-4
  122f54:	da800015 	stw	r10,0(sp)
  122f58:	02400574 	movhi	r9,21
  122f5c:	4a444014 	ori	r9,r9,4352
  122f60:	02800034 	movhi	r10,0
  122f64:	52800194 	ori	r10,r10,6
  122f68:	4a800035 	stwio	r10,0(r9)
  122f6c:	da800017 	ldw	r10,0(sp)
  122f70:	dec00104 	addi	sp,sp,4
  122f74:	da400017 	ldw	r9,0(sp)
  122f78:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  122f7c:	deffff04 	addi	sp,sp,-4
  122f80:	da400015 	stw	r9,0(sp)
  122f84:	deffff04 	addi	sp,sp,-4
  122f88:	da800015 	stw	r10,0(sp)
  122f8c:	02400574 	movhi	r9,21
  122f90:	4a444014 	ori	r9,r9,4352
  122f94:	02800034 	movhi	r10,0
  122f98:	52800094 	ori	r10,r10,2
  122f9c:	4a800035 	stwio	r10,0(r9)
  122fa0:	da800017 	ldw	r10,0(sp)
  122fa4:	dec00104 	addi	sp,sp,4
  122fa8:	da400017 	ldw	r9,0(sp)
  122fac:	dec00104 	addi	sp,sp,4

	addi	r10, r10, 1
  122fb0:	52800044 	addi	r10,r10,1
	movi	r13, 40
  122fb4:	03400a04 	movi	r13,40
	bltu	r10, r13, adc_int_handler_clear_front
  122fb8:	537fe336 	bltu	r10,r13,122f48 <adc_int_handler_clear_front>

	mov		r10, r0
  122fbc:	0015883a 	mov	r10,zero

00122fc0 <adc_int_handler_loop>:

adc_int_handler_loop:
	# Bitbang clock pulse
	STWI	ADC_CTRL_BASE, 0x06
  122fc0:	deffff04 	addi	sp,sp,-4
  122fc4:	da400015 	stw	r9,0(sp)
  122fc8:	deffff04 	addi	sp,sp,-4
  122fcc:	da800015 	stw	r10,0(sp)
  122fd0:	02400574 	movhi	r9,21
  122fd4:	4a444014 	ori	r9,r9,4352
  122fd8:	02800034 	movhi	r10,0
  122fdc:	52800194 	ori	r10,r10,6
  122fe0:	4a800035 	stwio	r10,0(r9)
  122fe4:	da800017 	ldw	r10,0(sp)
  122fe8:	dec00104 	addi	sp,sp,4
  122fec:	da400017 	ldw	r9,0(sp)
  122ff0:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x02
  122ff4:	deffff04 	addi	sp,sp,-4
  122ff8:	da400015 	stw	r9,0(sp)
  122ffc:	deffff04 	addi	sp,sp,-4
  123000:	da800015 	stw	r10,0(sp)
  123004:	02400574 	movhi	r9,21
  123008:	4a444014 	ori	r9,r9,4352
  12300c:	02800034 	movhi	r10,0
  123010:	52800094 	ori	r10,r10,2
  123014:	4a800035 	stwio	r10,0(r9)
  123018:	da800017 	ldw	r10,0(sp)
  12301c:	dec00104 	addi	sp,sp,4
  123020:	da400017 	ldw	r9,0(sp)
  123024:	dec00104 	addi	sp,sp,4

	MOVWI	r11, ADC_RAW_BASE
  123028:	02c00574 	movhi	r11,21
  12302c:	5ac46014 	ori	r11,r11,4480
	ldwio	r12, (r11)
  123030:	5b000037 	ldwio	r12,0(r11)
	andi	r12, r12, 0xFF
  123034:	63003fcc 	andi	r12,r12,255
	movui	r13, 127
  123038:	03401fd4 	movui	r13,127
	sub		r12, r13, r12
  12303c:	6b19c83a 	sub	r12,r13,r12
	andi	r12, r12, 0xFF
  123040:	63003fcc 	andi	r12,r12,255
	addi	r12, r12, 8
  123044:	63000204 	addi	r12,r12,8

00123048 <adc_int_handler_draw_col>:

adc_int_handler_draw_col:
	MOVWI	r9, VRAM_CTRL_BASE
  123048:	02400234 	movhi	r9,8
  12304c:	4a400234 	orhi	r9,r9,8
	add		r9, r9, r10
  123050:	4a93883a 	add	r9,r9,r10
	add		r9, r9, r10
  123054:	4a93883a 	add	r9,r9,r10
	mov		r11, r0
  123058:	0017883a 	mov	r11,zero

0012305c <adc_int_handler_draw_col_loop>:

adc_int_handler_draw_col_loop:
	movi	r14, 240
  12305c:	03803c04 	movi	r14,240
	beq		r10, r14, adc_int_handler_draw_vaxis
  123060:	53805626 	beq	r10,r14,1231bc <adc_int_handler_draw_vaxis>

	movui	r13, 0x003C
  123064:	03400f14 	movui	r13,60
	sthio 	r13, (r9)
  123068:	4b40002d 	sthio	r13,0(r9)

	movi	r14, 136
  12306c:	03802204 	movi	r14,136
	beq		r11, r14, adc_int_handler_draw_thresh
  123070:	5b804f26 	beq	r11,r14,1231b0 <adc_int_handler_draw_thresh>
	beq		r11, r12, adc_int_handler_draw_pt
  123074:	5b004b26 	beq	r11,r12,1231a4 <adc_int_handler_draw_pt>

00123078 <adc_int_handler_draw_col_loop_cont>:

adc_int_handler_draw_col_loop_cont:
	addi	r9, r9, 1024
  123078:	4a410004 	addi	r9,r9,1024
	addi	r11, r11, 1
  12307c:	5ac00044 	addi	r11,r11,1
	movi	r13, 272
  123080:	03404404 	movi	r13,272
	bltu	r11, r13, adc_int_handler_draw_col_loop
  123084:	5b7ff536 	bltu	r11,r13,12305c <adc_int_handler_draw_col_loop>

	addi	r10, r10, 1
  123088:	52800044 	addi	r10,r10,1
	movi	r13, 480
  12308c:	03407804 	movi	r13,480
	bltu	r10, r13, adc_int_handler_loop
  123090:	537fcb36 	bltu	r10,r13,122fc0 <adc_int_handler_loop>

00123094 <adc_int_handler_done>:

adc_int_handler_done:
	# Clear the edge capture register (write 1 to clear).
	MOVWI	r8, TRIG_INT_BASE
  123094:	02000574 	movhi	r8,21
  123098:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0xFFFFFFFF
  12309c:	027ffff4 	movhi	r9,65535
  1230a0:	4a7fffd4 	ori	r9,r9,65535
	stw		r9, PIO_EDGE_CAP(r8)
  1230a4:	42400315 	stw	r9,12(r8)

	# Re-enable interrupts. [TYPEOFINTERRUPT]
	MOVWI	r8, TRIG_INT_BASE
  1230a8:	02000574 	movhi	r8,21
  1230ac:	42044814 	ori	r8,r8,4384
	MOVWI	r9, 0x00000002
  1230b0:	02400034 	movhi	r9,0
  1230b4:	4a400094 	ori	r9,r9,2
	stw		r9, PIO_IRQ_MASK(r8)
  1230b8:	42400215 	stw	r9,8(r8)

	# Turn on FIFO write
	STWI	ADC_CTRL_BASE, 0x09
  1230bc:	deffff04 	addi	sp,sp,-4
  1230c0:	da400015 	stw	r9,0(sp)
  1230c4:	deffff04 	addi	sp,sp,-4
  1230c8:	da800015 	stw	r10,0(sp)
  1230cc:	02400574 	movhi	r9,21
  1230d0:	4a444014 	ori	r9,r9,4352
  1230d4:	02800034 	movhi	r10,0
  1230d8:	52800254 	ori	r10,r10,9
  1230dc:	4a800035 	stwio	r10,0(r9)
  1230e0:	da800017 	ldw	r10,0(sp)
  1230e4:	dec00104 	addi	sp,sp,4
  1230e8:	da400017 	ldw	r9,0(sp)
  1230ec:	dec00104 	addi	sp,sp,4
	STWI	ADC_CTRL_BASE, 0x01
  1230f0:	deffff04 	addi	sp,sp,-4
  1230f4:	da400015 	stw	r9,0(sp)
  1230f8:	deffff04 	addi	sp,sp,-4
  1230fc:	da800015 	stw	r10,0(sp)
  123100:	02400574 	movhi	r9,21
  123104:	4a444014 	ori	r9,r9,4352
  123108:	02800034 	movhi	r10,0
  12310c:	52800054 	ori	r10,r10,1
  123110:	4a800035 	stwio	r10,0(r9)
  123114:	da800017 	ldw	r10,0(sp)
  123118:	dec00104 	addi	sp,sp,4
  12311c:	da400017 	ldw	r9,0(sp)
  123120:	dec00104 	addi	sp,sp,4

	# Reset trigger counter [ch. A], [+ slope]
	STWI	TRIG_CTRL_BASE, 0x04
  123124:	deffff04 	addi	sp,sp,-4
  123128:	da400015 	stw	r9,0(sp)
  12312c:	deffff04 	addi	sp,sp,-4
  123130:	da800015 	stw	r10,0(sp)
  123134:	02400574 	movhi	r9,21
  123138:	4a443814 	ori	r9,r9,4320
  12313c:	02800034 	movhi	r10,0
  123140:	52800114 	ori	r10,r10,4
  123144:	4a800035 	stwio	r10,0(r9)
  123148:	da800017 	ldw	r10,0(sp)
  12314c:	dec00104 	addi	sp,sp,4
  123150:	da400017 	ldw	r9,0(sp)
  123154:	dec00104 	addi	sp,sp,4
	STWI	TRIG_CTRL_BASE, 0x00
  123158:	deffff04 	addi	sp,sp,-4
  12315c:	da400015 	stw	r9,0(sp)
  123160:	deffff04 	addi	sp,sp,-4
  123164:	da800015 	stw	r10,0(sp)
  123168:	02400574 	movhi	r9,21
  12316c:	4a443814 	ori	r9,r9,4320
  123170:	02800034 	movhi	r10,0
  123174:	52800014 	ori	r10,r10,0
  123178:	4a800035 	stwio	r10,0(r9)
  12317c:	da800017 	ldw	r10,0(sp)
  123180:	dec00104 	addi	sp,sp,4
  123184:	da400017 	ldw	r9,0(sp)
  123188:	dec00104 	addi	sp,sp,4

	RESTORE
  12318c:	e037883a 	mov	sp,fp
  123190:	df000017 	ldw	fp,0(sp)
  123194:	dec00104 	addi	sp,sp,4
  123198:	dfc00017 	ldw	ra,0(sp)
  12319c:	dec00104 	addi	sp,sp,4
	ret
  1231a0:	f800283a 	ret

001231a4 <adc_int_handler_draw_pt>:

adc_int_handler_draw_pt:
	movui	r13, 0xE003
  1231a4:	037800d4 	movui	r13,57347
	sthio 	r13, (r9)
  1231a8:	4b40002d 	sthio	r13,0(r9)
	br		adc_int_handler_draw_col_loop_cont
  1231ac:	003fb206 	br	123078 <adc_int_handler_draw_col_loop_cont>

001231b0 <adc_int_handler_draw_thresh>:

adc_int_handler_draw_thresh:
	movui	r13, 0x1F00
  1231b0:	0347c014 	movui	r13,7936
	sthio 	r13, (r9)
  1231b4:	4b40002d 	sthio	r13,0(r9)
	br		adc_int_handler_draw_col_loop_cont
  1231b8:	003faf06 	br	123078 <adc_int_handler_draw_col_loop_cont>

001231bc <adc_int_handler_draw_vaxis>:

adc_int_handler_draw_vaxis:
	movui	r13, 0x1F00
  1231bc:	0347c014 	movui	r13,7936
	sthio 	r13, (r9)
  1231c0:	4b40002d 	sthio	r13,0(r9)
	br		adc_int_handler_draw_col_loop_cont
  1231c4:	003fac06 	br	123078 <adc_int_handler_draw_col_loop_cont>

001231c8 <test_disp>:

.global test_disp
.type test_disp,@function

test_disp:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  1231c8:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  1231cc:	42000234 	orhi	r8,r8,8
	mov		r11, r0
  1231d0:	0017883a 	mov	r11,zero
	mov		r12, r0
  1231d4:	0019883a 	mov	r12,zero

001231d8 <disp>:

disp:
	movi	r13, 136
  1231d8:	03402204 	movi	r13,136
	bltu	r12, r13, draw_top
  1231dc:	63400836 	bltu	r12,r13,123200 <draw_top>
	br 		draw_bot
  1231e0:	00000a06 	br	12320c <draw_bot>

001231e4 <disp_cont>:
disp_cont:
	addi	r8, r8, 2
  1231e4:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  1231e8:	5ac00044 	addi	r11,r11,1
	movi	r13, 272
  1231ec:	03404404 	movi	r13,272
	bgeu	r12, r13, draw_border
  1231f0:	6340152e 	bgeu	r12,r13,123248 <draw_border>
	movi	r13, 0x0200
  1231f4:	03408004 	movi	r13,512
	bgeu	r11, r13, disp_reset
  1231f8:	5b403d2e 	bgeu	r11,r13,1232f0 <disp_reset>
	br		disp
  1231fc:	003ff606 	br	1231d8 <disp>

00123200 <draw_top>:

draw_top:
	movi	r13, 240
  123200:	03403c04 	movi	r13,240
	bltu	r11, r13, draw_red
  123204:	5b400436 	bltu	r11,r13,123218 <draw_red>
	br		draw_yellow
  123208:	00000606 	br	123224 <draw_yellow>

0012320c <draw_bot>:

draw_bot:
	movi	r13, 240
  12320c:	03403c04 	movi	r13,240
	bltu	r11, r13, draw_green
  123210:	5b400736 	bltu	r11,r13,123230 <draw_green>
	br		draw_blue
  123214:	00000906 	br	12323c <draw_blue>

00123218 <draw_red>:

draw_red:
	movi	r9, 0x1F00
  123218:	0247c004 	movi	r9,7936
	sthio	r9, (r8)
  12321c:	4240002d 	sthio	r9,0(r8)
	br 		disp_cont
  123220:	003ff006 	br	1231e4 <disp_cont>

00123224 <draw_yellow>:

draw_yellow:
	movui	r9, 0xFF03
  123224:	027fc0d4 	movui	r9,65283
	sthio 	r9, (r8)
  123228:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  12322c:	003fed06 	br	1231e4 <disp_cont>

00123230 <draw_green>:

draw_green:
	movui	r9, 0xE003
  123230:	027800d4 	movui	r9,57347
	sthio 	r9, (r8)
  123234:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  123238:	003fea06 	br	1231e4 <disp_cont>

0012323c <draw_blue>:

draw_blue:
	movi	r9, 0x007C
  12323c:	02401f04 	movi	r9,124
	sthio 	r9, (r8)
  123240:	4240002d 	sthio	r9,0(r8)
	br		disp_cont
  123244:	003fe706 	br	1231e4 <disp_cont>

00123248 <draw_border>:

draw_border:
	movi	r9, 0x1F7C
  123248:	0247df04 	movi	r9,8060
	movi	r12, 272
  12324c:	03004404 	movi	r12,272
	movi	r13, 480
  123250:	03407804 	movi	r13,480

00123254 <draw_border_top>:

draw_border_top:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  123254:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  123258:	42000234 	orhi	r8,r8,8
	addi	r8, r8, 0x0400
  12325c:	42010004 	addi	r8,r8,1024
	mov		r11, r0
  123260:	0017883a 	mov	r11,zero

00123264 <dbt_loop>:
dbt_loop:
	sthio	r9, (r8)
  123264:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 2
  123268:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  12326c:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r13, draw_border_bot
  123270:	5b40012e 	bgeu	r11,r13,123278 <draw_border_bot>
	br		dbt_loop
  123274:	003ffb06 	br	123264 <dbt_loop>

00123278 <draw_border_bot>:

draw_border_bot:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  123278:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  12327c:	42000234 	orhi	r8,r8,8
	movhi	r14, %hi(277504)
  123280:	03800134 	movhi	r14,4
	ori		r14, r14, %lo(277504)
  123284:	738f0014 	ori	r14,r14,15360
	add		r8, r8, r14
  123288:	4391883a 	add	r8,r8,r14
	mov		r11, r0
  12328c:	0017883a 	mov	r11,zero

00123290 <dbb_loop>:
dbb_loop:
	sthio	r9, (r8)
  123290:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 2
  123294:	42000084 	addi	r8,r8,2
	addi	r11, r11, 1
  123298:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r13, draw_border_left
  12329c:	5b40012e 	bgeu	r11,r13,1232a4 <draw_border_left>
	br		dbb_loop
  1232a0:	003ffb06 	br	123290 <dbb_loop>

001232a4 <draw_border_left>:

draw_border_left:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  1232a4:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  1232a8:	42000234 	orhi	r8,r8,8
	mov		r11, r0
  1232ac:	0017883a 	mov	r11,zero

001232b0 <dbl_loop>:
dbl_loop:
	sthio	r9, (r8)
  1232b0:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 0x0400
  1232b4:	42010004 	addi	r8,r8,1024
	addi	r11, r11, 1
  1232b8:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r12, draw_border_right
  1232bc:	5b00012e 	bgeu	r11,r12,1232c4 <draw_border_right>
	br		dbl_loop
  1232c0:	003ffb06 	br	1232b0 <dbl_loop>

001232c4 <draw_border_right>:

draw_border_right:
	movhi	r8, %hi(VRAM_CTRL_BASE)
  1232c4:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  1232c8:	42000234 	orhi	r8,r8,8
	add		r8, r8, r13
  1232cc:	4351883a 	add	r8,r8,r13
	add		r8, r8, r13
  1232d0:	4351883a 	add	r8,r8,r13
	subi	r8, r8, 1
  1232d4:	423fffc4 	addi	r8,r8,-1
	mov		r11, r0
  1232d8:	0017883a 	mov	r11,zero

001232dc <dbr_loop>:
dbr_loop:
	sthio	r9, (r8)
  1232dc:	4240002d 	sthio	r9,0(r8)
	addi	r8, r8, 0x0400
  1232e0:	42010004 	addi	r8,r8,1024
	addi	r11, r11, 1
  1232e4:	5ac00044 	addi	r11,r11,1
	bgeu	r11, r12, test_disp_done
  1232e8:	5b00042e 	bgeu	r11,r12,1232fc <test_disp_done>
	br		dbr_loop
  1232ec:	003ffb06 	br	1232dc <dbr_loop>

001232f0 <disp_reset>:

disp_reset:
	mov		r11, r0
  1232f0:	0017883a 	mov	r11,zero
	addi	r12, r12, 1
  1232f4:	63000044 	addi	r12,r12,1
	br		disp
  1232f8:	003fb706 	br	1231d8 <disp>

001232fc <test_disp_done>:

test_disp_done:
	ret
  1232fc:	f800283a 	ret

00123300 <test_vram>:

.global test_vram
.type test_vram,@function

test_vram:
	SAVE
  123300:	deffff04 	addi	sp,sp,-4
  123304:	dfc00015 	stw	ra,0(sp)
  123308:	deffff04 	addi	sp,sp,-4
  12330c:	df000015 	stw	fp,0(sp)
  123310:	d839883a 	mov	fp,sp

	movhi	r8, %hi(VRAM_CTRL_BASE)
  123314:	02000234 	movhi	r8,8
	ori		r8, r8, %lo(VRAM_CTRL_BASE)
  123318:	42000234 	orhi	r8,r8,8
	movhi	r9, %hi(VRAM_CTRL_SPAN)
  12331c:	02400234 	movhi	r9,8
	ori		r9, r9, %lo(VRAM_CTRL_SPAN)
  123320:	4a400234 	orhi	r9,r9,8
	add		r9, r8, r9
  123324:	4253883a 	add	r9,r8,r9
	movui	r12, 0x7000
  123328:	031c0014 	movui	r12,28672

	#call	write_read_all

	call	write_all
  12332c:	012335c0 	call	12335c <write_all>
	call	read_all
  123330:	01233880 	call	123388 <read_all>

	nop
  123334:	0001883a 	nop
	call	read_all
  123338:	01233880 	call	123388 <read_all>

0012333c <test_vram_fail>:

test_vram_fail:
	nop
  12333c:	0001883a 	nop
	br 		test_vram_fail
  123340:	003ffe06 	br	12333c <test_vram_fail>

00123344 <test_vram_done>:

test_vram_done:
	RESTORE
  123344:	e037883a 	mov	sp,fp
  123348:	df000017 	ldw	fp,0(sp)
  12334c:	dec00104 	addi	sp,sp,4
  123350:	dfc00017 	ldw	ra,0(sp)
  123354:	dec00104 	addi	sp,sp,4
	ret
  123358:	f800283a 	ret

0012335c <write_all>:


.type write_all, @function

write_all:
	mov		r10, r8
  12335c:	4015883a 	mov	r10,r8
	mov		r11, r0
  123360:	0017883a 	mov	r11,zero

00123364 <write_all_loop>:

write_all_loop:
	sthio	r11, (r10)
  123364:	52c0002d 	sthio	r11,0(r10)
	addi	r10, r10, 2
  123368:	52800084 	addi	r10,r10,2
	addi	r11, r11, 1
  12336c:	5ac00044 	addi	r11,r11,1
	bgeu	r10, r9, write_all_done
  123370:	5240042e 	bgeu	r10,r9,123384 <write_all_done>
	bgeu	r11, r12, write_all_reset_cnt
  123374:	5b00012e 	bgeu	r11,r12,12337c <write_all_reset_cnt>
	br		write_all_loop
  123378:	003ffa06 	br	123364 <write_all_loop>

0012337c <write_all_reset_cnt>:

write_all_reset_cnt:
	mov		r11, r0
  12337c:	0017883a 	mov	r11,zero
	br		write_all_loop
  123380:	003ff806 	br	123364 <write_all_loop>

00123384 <write_all_done>:

write_all_done:
	ret
  123384:	f800283a 	ret

00123388 <read_all>:


.type read_all, @function

read_all:
	mov		r10, r8
  123388:	4015883a 	mov	r10,r8
	mov		r11, r0
  12338c:	0017883a 	mov	r11,zero

00123390 <read_all_loop>:

read_all_loop:
	ldhio	r13, (r10)
  123390:	5340002f 	ldhio	r13,0(r10)
	bne		r13, r11, test_vram_fail
  123394:	6affe91e 	bne	r13,r11,12333c <test_vram_fail>
	addi	r10, r10, 2
  123398:	52800084 	addi	r10,r10,2
	addi	r11, r11, 1
  12339c:	5ac00044 	addi	r11,r11,1
	bgeu	r10, r9, read_all_done
  1233a0:	5240042e 	bgeu	r10,r9,1233b4 <read_all_done>
	bgeu	r11, r12, read_all_reset_cnt
  1233a4:	5b00012e 	bgeu	r11,r12,1233ac <read_all_reset_cnt>
	br		read_all_loop
  1233a8:	003ff906 	br	123390 <read_all_loop>

001233ac <read_all_reset_cnt>:

read_all_reset_cnt:
	mov		r11, r0
  1233ac:	0017883a 	mov	r11,zero
	br		write_all_loop
  1233b0:	003fec06 	br	123364 <write_all_loop>

001233b4 <read_all_done>:

read_all_done:
	ret
  1233b4:	f800283a 	ret

001233b8 <udivmodsi4>:
  1233b8:	2005883a 	mov	r2,r4
  1233bc:	2900182e 	bgeu	r5,r4,123420 <udivmodsi4+0x68>
  1233c0:	28001716 	blt	r5,zero,123420 <udivmodsi4+0x68>
  1233c4:	01000804 	movi	r4,32
  1233c8:	00c00044 	movi	r3,1
  1233cc:	00000206 	br	1233d8 <udivmodsi4+0x20>
  1233d0:	20001126 	beq	r4,zero,123418 <udivmodsi4+0x60>
  1233d4:	28000516 	blt	r5,zero,1233ec <udivmodsi4+0x34>
  1233d8:	294b883a 	add	r5,r5,r5
  1233dc:	213fffc4 	addi	r4,r4,-1
  1233e0:	18c7883a 	add	r3,r3,r3
  1233e4:	28bffa36 	bltu	r5,r2,1233d0 <udivmodsi4+0x18>
  1233e8:	18000b26 	beq	r3,zero,123418 <udivmodsi4+0x60>
  1233ec:	0009883a 	mov	r4,zero
  1233f0:	11400236 	bltu	r2,r5,1233fc <udivmodsi4+0x44>
  1233f4:	1145c83a 	sub	r2,r2,r5
  1233f8:	20c8b03a 	or	r4,r4,r3
  1233fc:	1806d07a 	srli	r3,r3,1
  123400:	280ad07a 	srli	r5,r5,1
  123404:	183ffa1e 	bne	r3,zero,1233f0 <udivmodsi4+0x38>
  123408:	3000021e 	bne	r6,zero,123414 <udivmodsi4+0x5c>
  12340c:	2005883a 	mov	r2,r4
  123410:	f800283a 	ret
  123414:	f800283a 	ret
  123418:	0009883a 	mov	r4,zero
  12341c:	003ffa06 	br	123408 <udivmodsi4+0x50>
  123420:	00c00044 	movi	r3,1
  123424:	0009883a 	mov	r4,zero
  123428:	003ff106 	br	1233f0 <udivmodsi4+0x38>

0012342c <__divsi3>:
  12342c:	defffe04 	addi	sp,sp,-8
  123430:	dfc00115 	stw	ra,4(sp)
  123434:	dc000015 	stw	r16,0(sp)
  123438:	20000a16 	blt	r4,zero,123464 <__divsi3+0x38>
  12343c:	0021883a 	mov	r16,zero
  123440:	28000b16 	blt	r5,zero,123470 <__divsi3+0x44>
  123444:	000d883a 	mov	r6,zero
  123448:	01233b80 	call	1233b8 <udivmodsi4>
  12344c:	80000126 	beq	r16,zero,123454 <__divsi3+0x28>
  123450:	0085c83a 	sub	r2,zero,r2
  123454:	dfc00117 	ldw	ra,4(sp)
  123458:	dc000017 	ldw	r16,0(sp)
  12345c:	dec00204 	addi	sp,sp,8
  123460:	f800283a 	ret
  123464:	0109c83a 	sub	r4,zero,r4
  123468:	04000044 	movi	r16,1
  12346c:	283ff50e 	bge	r5,zero,123444 <__divsi3+0x18>
  123470:	014bc83a 	sub	r5,zero,r5
  123474:	8400005c 	xori	r16,r16,1
  123478:	003ff206 	br	123444 <__divsi3+0x18>

0012347c <__modsi3>:
  12347c:	deffff04 	addi	sp,sp,-4
  123480:	dfc00015 	stw	ra,0(sp)
  123484:	20000516 	blt	r4,zero,12349c <__modsi3+0x20>
  123488:	28000c16 	blt	r5,zero,1234bc <__modsi3+0x40>
  12348c:	01800044 	movi	r6,1
  123490:	dfc00017 	ldw	ra,0(sp)
  123494:	dec00104 	addi	sp,sp,4
  123498:	01233b81 	jmpi	1233b8 <udivmodsi4>
  12349c:	0109c83a 	sub	r4,zero,r4
  1234a0:	28000b16 	blt	r5,zero,1234d0 <__modsi3+0x54>
  1234a4:	01800044 	movi	r6,1
  1234a8:	01233b80 	call	1233b8 <udivmodsi4>
  1234ac:	0085c83a 	sub	r2,zero,r2
  1234b0:	dfc00017 	ldw	ra,0(sp)
  1234b4:	dec00104 	addi	sp,sp,4
  1234b8:	f800283a 	ret
  1234bc:	014bc83a 	sub	r5,zero,r5
  1234c0:	01800044 	movi	r6,1
  1234c4:	dfc00017 	ldw	ra,0(sp)
  1234c8:	dec00104 	addi	sp,sp,4
  1234cc:	01233b81 	jmpi	1233b8 <udivmodsi4>
  1234d0:	014bc83a 	sub	r5,zero,r5
  1234d4:	003ff306 	br	1234a4 <__modsi3+0x28>

001234d8 <__udivsi3>:
  1234d8:	000d883a 	mov	r6,zero
  1234dc:	01233b81 	jmpi	1233b8 <udivmodsi4>

001234e0 <__umodsi3>:
  1234e0:	01800044 	movi	r6,1
  1234e4:	01233b81 	jmpi	1233b8 <udivmodsi4>

001234e8 <__mulsi3>:
  1234e8:	0005883a 	mov	r2,zero
  1234ec:	20000726 	beq	r4,zero,12350c <__mulsi3+0x24>
  1234f0:	20c0004c 	andi	r3,r4,1
  1234f4:	2008d07a 	srli	r4,r4,1
  1234f8:	18000126 	beq	r3,zero,123500 <__mulsi3+0x18>
  1234fc:	1145883a 	add	r2,r2,r5
  123500:	294b883a 	add	r5,r5,r5
  123504:	203ffa1e 	bne	r4,zero,1234f0 <__mulsi3+0x8>
  123508:	f800283a 	ret
  12350c:	f800283a 	ret

00123510 <memcpy>:
  123510:	defffb04 	addi	sp,sp,-20
  123514:	dc000015 	stw	r16,0(sp)
  123518:	dfc00415 	stw	ra,16(sp)
  12351c:	dcc00315 	stw	r19,12(sp)
  123520:	dc800215 	stw	r18,8(sp)
  123524:	dc400115 	stw	r17,4(sp)
  123528:	00c003c4 	movi	r3,15
  12352c:	2021883a 	mov	r16,r4
  123530:	3005883a 	mov	r2,r6
  123534:	1980032e 	bgeu	r3,r6,123544 <memcpy+0x34>
  123538:	2906b03a 	or	r3,r5,r4
  12353c:	18c000cc 	andi	r3,r3,3
  123540:	18001026 	beq	r3,zero,123584 <memcpy+0x74>
  123544:	8007883a 	mov	r3,r16
  123548:	288f883a 	add	r7,r5,r2
  12354c:	10000526 	beq	r2,zero,123564 <memcpy+0x54>
  123550:	29800003 	ldbu	r6,0(r5)
  123554:	18c00044 	addi	r3,r3,1
  123558:	29400044 	addi	r5,r5,1
  12355c:	19bfffc5 	stb	r6,-1(r3)
  123560:	29fffb1e 	bne	r5,r7,123550 <memcpy+0x40>
  123564:	8005883a 	mov	r2,r16
  123568:	dfc00417 	ldw	ra,16(sp)
  12356c:	dcc00317 	ldw	r19,12(sp)
  123570:	dc800217 	ldw	r18,8(sp)
  123574:	dc400117 	ldw	r17,4(sp)
  123578:	dc000017 	ldw	r16,0(sp)
  12357c:	dec00504 	addi	sp,sp,20
  123580:	f800283a 	ret
  123584:	32bffc04 	addi	r10,r6,-16
  123588:	5014d13a 	srli	r10,r10,4
  12358c:	20800404 	addi	r2,r4,16
  123590:	2007883a 	mov	r3,r4
  123594:	5008913a 	slli	r4,r10,4
  123598:	280f883a 	mov	r7,r5
  12359c:	1105883a 	add	r2,r2,r4
  1235a0:	3a000017 	ldw	r8,0(r7)
  1235a4:	18c00404 	addi	r3,r3,16
  1235a8:	39c00404 	addi	r7,r7,16
  1235ac:	1a3ffc15 	stw	r8,-16(r3)
  1235b0:	3a3ffd17 	ldw	r8,-12(r7)
  1235b4:	1a3ffd15 	stw	r8,-12(r3)
  1235b8:	3a3ffe17 	ldw	r8,-8(r7)
  1235bc:	1a3ffe15 	stw	r8,-8(r3)
  1235c0:	3a3fff17 	ldw	r8,-4(r7)
  1235c4:	1a3fff15 	stw	r8,-4(r3)
  1235c8:	18bff51e 	bne	r3,r2,1235a0 <memcpy+0x90>
  1235cc:	52800044 	addi	r10,r10,1
  1235d0:	5014913a 	slli	r10,r10,4
  1235d4:	308003cc 	andi	r2,r6,15
  1235d8:	010000c4 	movi	r4,3
  1235dc:	8287883a 	add	r3,r16,r10
  1235e0:	2a95883a 	add	r10,r5,r10
  1235e4:	2080182e 	bgeu	r4,r2,123648 <memcpy+0x138>
  1235e8:	147fff04 	addi	r17,r2,-4
  1235ec:	8808d0ba 	srli	r4,r17,2
  1235f0:	1a400104 	addi	r9,r3,4
  1235f4:	180d883a 	mov	r6,r3
  1235f8:	2105883a 	add	r2,r4,r4
  1235fc:	1085883a 	add	r2,r2,r2
  123600:	4893883a 	add	r9,r9,r2
  123604:	500f883a 	mov	r7,r10
  123608:	3a000017 	ldw	r8,0(r7)
  12360c:	31800104 	addi	r6,r6,4
  123610:	39c00104 	addi	r7,r7,4
  123614:	323fff15 	stw	r8,-4(r6)
  123618:	327ffb1e 	bne	r6,r9,123608 <memcpy+0xf8>
  12361c:	20800044 	addi	r2,r4,1
  123620:	1085883a 	add	r2,r2,r2
  123624:	1085883a 	add	r2,r2,r2
  123628:	017fff04 	movi	r5,-4
  12362c:	18a5883a 	add	r18,r3,r2
  123630:	50a7883a 	add	r19,r10,r2
  123634:	01234e80 	call	1234e8 <__mulsi3>
  123638:	1445883a 	add	r2,r2,r17
  12363c:	980b883a 	mov	r5,r19
  123640:	9007883a 	mov	r3,r18
  123644:	003fc006 	br	123548 <memcpy+0x38>
  123648:	500b883a 	mov	r5,r10
  12364c:	003fbe06 	br	123548 <memcpy+0x38>

00123650 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  123650:	defff904 	addi	sp,sp,-28
  123654:	dfc00615 	stw	ra,24(sp)
  123658:	df000515 	stw	fp,20(sp)
  12365c:	df000504 	addi	fp,sp,20
  123660:	e13ffc15 	stw	r4,-16(fp)
  123664:	e17ffd15 	stw	r5,-12(fp)
  123668:	e1bffe15 	stw	r6,-8(fp)
  12366c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  123670:	e0800217 	ldw	r2,8(fp)
  123674:	d8800015 	stw	r2,0(sp)
  123678:	e13ffc17 	ldw	r4,-16(fp)
  12367c:	e17ffd17 	ldw	r5,-12(fp)
  123680:	e1bffe17 	ldw	r6,-8(fp)
  123684:	e1ffff17 	ldw	r7,-4(fp)
  123688:	01238280 	call	123828 <alt_iic_isr_register>
}  
  12368c:	e037883a 	mov	sp,fp
  123690:	dfc00117 	ldw	ra,4(sp)
  123694:	df000017 	ldw	fp,0(sp)
  123698:	dec00204 	addi	sp,sp,8
  12369c:	f800283a 	ret

001236a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  1236a0:	defff904 	addi	sp,sp,-28
  1236a4:	df000615 	stw	fp,24(sp)
  1236a8:	df000604 	addi	fp,sp,24
  1236ac:	e13ffe15 	stw	r4,-8(fp)
  1236b0:	e17fff15 	stw	r5,-4(fp)
  1236b4:	e0bfff17 	ldw	r2,-4(fp)
  1236b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1236bc:	0005303a 	rdctl	r2,status
  1236c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1236c4:	e0fffb17 	ldw	r3,-20(fp)
  1236c8:	00bfff84 	movi	r2,-2
  1236cc:	1884703a 	and	r2,r3,r2
  1236d0:	1001703a 	wrctl	status,r2
  
  return context;
  1236d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  1236d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  1236dc:	e0bffa17 	ldw	r2,-24(fp)
  1236e0:	00c00044 	movi	r3,1
  1236e4:	1884983a 	sll	r2,r3,r2
  1236e8:	1007883a 	mov	r3,r2
  1236ec:	008004b4 	movhi	r2,18
  1236f0:	1093f704 	addi	r2,r2,20444
  1236f4:	10800017 	ldw	r2,0(r2)
  1236f8:	1886b03a 	or	r3,r3,r2
  1236fc:	008004b4 	movhi	r2,18
  123700:	1093f704 	addi	r2,r2,20444
  123704:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  123708:	008004b4 	movhi	r2,18
  12370c:	1093f704 	addi	r2,r2,20444
  123710:	10800017 	ldw	r2,0(r2)
  123714:	100170fa 	wrctl	ienable,r2
  123718:	e0bffc17 	ldw	r2,-16(fp)
  12371c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  123720:	e0bffd17 	ldw	r2,-12(fp)
  123724:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  123728:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  12372c:	e037883a 	mov	sp,fp
  123730:	df000017 	ldw	fp,0(sp)
  123734:	dec00104 	addi	sp,sp,4
  123738:	f800283a 	ret

0012373c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  12373c:	defff904 	addi	sp,sp,-28
  123740:	df000615 	stw	fp,24(sp)
  123744:	df000604 	addi	fp,sp,24
  123748:	e13ffe15 	stw	r4,-8(fp)
  12374c:	e17fff15 	stw	r5,-4(fp)
  123750:	e0bfff17 	ldw	r2,-4(fp)
  123754:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  123758:	0005303a 	rdctl	r2,status
  12375c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  123760:	e0fffb17 	ldw	r3,-20(fp)
  123764:	00bfff84 	movi	r2,-2
  123768:	1884703a 	and	r2,r3,r2
  12376c:	1001703a 	wrctl	status,r2
  
  return context;
  123770:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  123774:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  123778:	e0bffa17 	ldw	r2,-24(fp)
  12377c:	00c00044 	movi	r3,1
  123780:	1884983a 	sll	r2,r3,r2
  123784:	0084303a 	nor	r2,zero,r2
  123788:	1007883a 	mov	r3,r2
  12378c:	008004b4 	movhi	r2,18
  123790:	1093f704 	addi	r2,r2,20444
  123794:	10800017 	ldw	r2,0(r2)
  123798:	1886703a 	and	r3,r3,r2
  12379c:	008004b4 	movhi	r2,18
  1237a0:	1093f704 	addi	r2,r2,20444
  1237a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  1237a8:	008004b4 	movhi	r2,18
  1237ac:	1093f704 	addi	r2,r2,20444
  1237b0:	10800017 	ldw	r2,0(r2)
  1237b4:	100170fa 	wrctl	ienable,r2
  1237b8:	e0bffc17 	ldw	r2,-16(fp)
  1237bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1237c0:	e0bffd17 	ldw	r2,-12(fp)
  1237c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  1237c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  1237cc:	e037883a 	mov	sp,fp
  1237d0:	df000017 	ldw	fp,0(sp)
  1237d4:	dec00104 	addi	sp,sp,4
  1237d8:	f800283a 	ret

001237dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  1237dc:	defffc04 	addi	sp,sp,-16
  1237e0:	df000315 	stw	fp,12(sp)
  1237e4:	df000304 	addi	fp,sp,12
  1237e8:	e13ffe15 	stw	r4,-8(fp)
  1237ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  1237f0:	000530fa 	rdctl	r2,ienable
  1237f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  1237f8:	e0bfff17 	ldw	r2,-4(fp)
  1237fc:	00c00044 	movi	r3,1
  123800:	1884983a 	sll	r2,r3,r2
  123804:	1007883a 	mov	r3,r2
  123808:	e0bffd17 	ldw	r2,-12(fp)
  12380c:	1884703a 	and	r2,r3,r2
  123810:	1004c03a 	cmpne	r2,r2,zero
  123814:	10803fcc 	andi	r2,r2,255
}
  123818:	e037883a 	mov	sp,fp
  12381c:	df000017 	ldw	fp,0(sp)
  123820:	dec00104 	addi	sp,sp,4
  123824:	f800283a 	ret

00123828 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  123828:	defff504 	addi	sp,sp,-44
  12382c:	dfc00a15 	stw	ra,40(sp)
  123830:	df000915 	stw	fp,36(sp)
  123834:	df000904 	addi	fp,sp,36
  123838:	e13ffc15 	stw	r4,-16(fp)
  12383c:	e17ffd15 	stw	r5,-12(fp)
  123840:	e1bffe15 	stw	r6,-8(fp)
  123844:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  123848:	00bffa84 	movi	r2,-22
  12384c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  123850:	e0bffd17 	ldw	r2,-12(fp)
  123854:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  123858:	e0bff817 	ldw	r2,-32(fp)
  12385c:	10800808 	cmpgei	r2,r2,32
  123860:	1000271e 	bne	r2,zero,123900 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  123864:	0005303a 	rdctl	r2,status
  123868:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  12386c:	e0fffa17 	ldw	r3,-24(fp)
  123870:	00bfff84 	movi	r2,-2
  123874:	1884703a 	and	r2,r3,r2
  123878:	1001703a 	wrctl	status,r2
  
  return context;
  12387c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  123880:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  123884:	00c004b4 	movhi	r3,18
  123888:	18d53904 	addi	r3,r3,21732
  12388c:	e0bff817 	ldw	r2,-32(fp)
  123890:	100490fa 	slli	r2,r2,3
  123894:	1885883a 	add	r2,r3,r2
  123898:	e0fffe17 	ldw	r3,-8(fp)
  12389c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  1238a0:	00c004b4 	movhi	r3,18
  1238a4:	18d53904 	addi	r3,r3,21732
  1238a8:	e0bff817 	ldw	r2,-32(fp)
  1238ac:	100490fa 	slli	r2,r2,3
  1238b0:	1885883a 	add	r2,r3,r2
  1238b4:	10800104 	addi	r2,r2,4
  1238b8:	e0ffff17 	ldw	r3,-4(fp)
  1238bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  1238c0:	e0bffe17 	ldw	r2,-8(fp)
  1238c4:	10000526 	beq	r2,zero,1238dc <alt_iic_isr_register+0xb4>
  1238c8:	e0bff817 	ldw	r2,-32(fp)
  1238cc:	e13ffc17 	ldw	r4,-16(fp)
  1238d0:	100b883a 	mov	r5,r2
  1238d4:	01236a00 	call	1236a0 <alt_ic_irq_enable>
  1238d8:	00000406 	br	1238ec <alt_iic_isr_register+0xc4>
  1238dc:	e0bff817 	ldw	r2,-32(fp)
  1238e0:	e13ffc17 	ldw	r4,-16(fp)
  1238e4:	100b883a 	mov	r5,r2
  1238e8:	012373c0 	call	12373c <alt_ic_irq_disable>
  1238ec:	e0bff715 	stw	r2,-36(fp)
  1238f0:	e0bff917 	ldw	r2,-28(fp)
  1238f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1238f8:	e0bffb17 	ldw	r2,-20(fp)
  1238fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  123900:	e0bff717 	ldw	r2,-36(fp)
}
  123904:	e037883a 	mov	sp,fp
  123908:	dfc00117 	ldw	ra,4(sp)
  12390c:	df000017 	ldw	fp,0(sp)
  123910:	dec00204 	addi	sp,sp,8
  123914:	f800283a 	ret

00123918 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  123918:	defffd04 	addi	sp,sp,-12
  12391c:	dfc00215 	stw	ra,8(sp)
  123920:	df000115 	stw	fp,4(sp)
  123924:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  123928:	0009883a 	mov	r4,zero
  12392c:	01239740 	call	123974 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  123930:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  123934:	01239a80 	call	1239a8 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  123938:	0123b100 	call	123b10 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  12393c:	010004b4 	movhi	r4,18
  123940:	210edb04 	addi	r4,r4,15212
  123944:	0123c680 	call	123c68 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  123948:	d1201a17 	ldw	r4,-32664(gp)
  12394c:	d0e01b17 	ldw	r3,-32660(gp)
  123950:	d0a01c17 	ldw	r2,-32656(gp)
  123954:	180b883a 	mov	r5,r3
  123958:	100d883a 	mov	r6,r2
  12395c:	012057c0 	call	12057c <main>
  123960:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  123964:	01000044 	movi	r4,1
  123968:	0123a180 	call	123a18 <close>
  exit (result);
  12396c:	e13fff17 	ldw	r4,-4(fp)
  123970:	0123c7c0 	call	123c7c <exit>

00123974 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  123974:	defffd04 	addi	sp,sp,-12
  123978:	dfc00215 	stw	ra,8(sp)
  12397c:	df000115 	stw	fp,4(sp)
  123980:	df000104 	addi	fp,sp,4
  123984:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( PROC, PROC);
  123988:	0123c480 	call	123c48 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  12398c:	00800044 	movi	r2,1
  123990:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  123994:	e037883a 	mov	sp,fp
  123998:	dfc00117 	ldw	ra,4(sp)
  12399c:	df000017 	ldw	fp,0(sp)
  1239a0:	dec00204 	addi	sp,sp,8
  1239a4:	f800283a 	ret

001239a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  1239a8:	deffff04 	addi	sp,sp,-4
  1239ac:	df000015 	stw	fp,0(sp)
  1239b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  1239b4:	0001883a 	nop
}
  1239b8:	e037883a 	mov	sp,fp
  1239bc:	df000017 	ldw	fp,0(sp)
  1239c0:	dec00104 	addi	sp,sp,4
  1239c4:	f800283a 	ret

001239c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1239c8:	defffe04 	addi	sp,sp,-8
  1239cc:	dfc00115 	stw	ra,4(sp)
  1239d0:	df000015 	stw	fp,0(sp)
  1239d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1239d8:	008004b4 	movhi	r2,18
  1239dc:	1093e404 	addi	r2,r2,20368
  1239e0:	10800017 	ldw	r2,0(r2)
  1239e4:	10000526 	beq	r2,zero,1239fc <alt_get_errno+0x34>
  1239e8:	008004b4 	movhi	r2,18
  1239ec:	1093e404 	addi	r2,r2,20368
  1239f0:	10800017 	ldw	r2,0(r2)
  1239f4:	103ee83a 	callr	r2
  1239f8:	00000206 	br	123a04 <alt_get_errno+0x3c>
  1239fc:	008004b4 	movhi	r2,18
  123a00:	1093fb04 	addi	r2,r2,20460
}
  123a04:	e037883a 	mov	sp,fp
  123a08:	dfc00117 	ldw	ra,4(sp)
  123a0c:	df000017 	ldw	fp,0(sp)
  123a10:	dec00204 	addi	sp,sp,8
  123a14:	f800283a 	ret

00123a18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  123a18:	defffb04 	addi	sp,sp,-20
  123a1c:	dfc00415 	stw	ra,16(sp)
  123a20:	df000315 	stw	fp,12(sp)
  123a24:	df000304 	addi	fp,sp,12
  123a28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  123a2c:	e0bfff17 	ldw	r2,-4(fp)
  123a30:	10000716 	blt	r2,zero,123a50 <close+0x38>
  123a34:	e13fff17 	ldw	r4,-4(fp)
  123a38:	01400304 	movi	r5,12
  123a3c:	01234e80 	call	1234e8 <__mulsi3>
  123a40:	00c004b4 	movhi	r3,18
  123a44:	18d27e04 	addi	r3,r3,18936
  123a48:	10c5883a 	add	r2,r2,r3
  123a4c:	00000106 	br	123a54 <close+0x3c>
  123a50:	0005883a 	mov	r2,zero
  123a54:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  123a58:	e0bffd17 	ldw	r2,-12(fp)
  123a5c:	10001826 	beq	r2,zero,123ac0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  123a60:	e0bffd17 	ldw	r2,-12(fp)
  123a64:	10800017 	ldw	r2,0(r2)
  123a68:	10800417 	ldw	r2,16(r2)
  123a6c:	10000626 	beq	r2,zero,123a88 <close+0x70>
  123a70:	e0bffd17 	ldw	r2,-12(fp)
  123a74:	10800017 	ldw	r2,0(r2)
  123a78:	10800417 	ldw	r2,16(r2)
  123a7c:	e13ffd17 	ldw	r4,-12(fp)
  123a80:	103ee83a 	callr	r2
  123a84:	00000106 	br	123a8c <close+0x74>
  123a88:	0005883a 	mov	r2,zero
  123a8c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  123a90:	e13fff17 	ldw	r4,-4(fp)
  123a94:	0123bc80 	call	123bc8 <alt_release_fd>
    if (rval < 0)
  123a98:	e0bffe17 	ldw	r2,-8(fp)
  123a9c:	1000060e 	bge	r2,zero,123ab8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  123aa0:	01239c80 	call	1239c8 <alt_get_errno>
  123aa4:	e0fffe17 	ldw	r3,-8(fp)
  123aa8:	00c7c83a 	sub	r3,zero,r3
  123aac:	10c00015 	stw	r3,0(r2)
      return -1;
  123ab0:	00bfffc4 	movi	r2,-1
  123ab4:	00000606 	br	123ad0 <close+0xb8>
    }
    return 0;
  123ab8:	0005883a 	mov	r2,zero
  123abc:	00000406 	br	123ad0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  123ac0:	01239c80 	call	1239c8 <alt_get_errno>
  123ac4:	00c01444 	movi	r3,81
  123ac8:	10c00015 	stw	r3,0(r2)
    return -1;
  123acc:	00bfffc4 	movi	r2,-1
  }
}
  123ad0:	e037883a 	mov	sp,fp
  123ad4:	dfc00117 	ldw	ra,4(sp)
  123ad8:	df000017 	ldw	fp,0(sp)
  123adc:	dec00204 	addi	sp,sp,8
  123ae0:	f800283a 	ret

00123ae4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  123ae4:	defffc04 	addi	sp,sp,-16
  123ae8:	df000315 	stw	fp,12(sp)
  123aec:	df000304 	addi	fp,sp,12
  123af0:	e13ffd15 	stw	r4,-12(fp)
  123af4:	e17ffe15 	stw	r5,-8(fp)
  123af8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  123afc:	e0bfff17 	ldw	r2,-4(fp)
}
  123b00:	e037883a 	mov	sp,fp
  123b04:	df000017 	ldw	fp,0(sp)
  123b08:	dec00104 	addi	sp,sp,4
  123b0c:	f800283a 	ret

00123b10 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  123b10:	defffd04 	addi	sp,sp,-12
  123b14:	dfc00215 	stw	ra,8(sp)
  123b18:	df000115 	stw	fp,4(sp)
  123b1c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  123b20:	008004b4 	movhi	r2,18
  123b24:	108fef04 	addi	r2,r2,16316
  123b28:	e0bfff15 	stw	r2,-4(fp)
  123b2c:	00000606 	br	123b48 <_do_ctors+0x38>
        (*ctor) (); 
  123b30:	e0bfff17 	ldw	r2,-4(fp)
  123b34:	10800017 	ldw	r2,0(r2)
  123b38:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  123b3c:	e0bfff17 	ldw	r2,-4(fp)
  123b40:	10bfff04 	addi	r2,r2,-4
  123b44:	e0bfff15 	stw	r2,-4(fp)
  123b48:	e0ffff17 	ldw	r3,-4(fp)
  123b4c:	008004b4 	movhi	r2,18
  123b50:	108ff004 	addi	r2,r2,16320
  123b54:	18bff62e 	bgeu	r3,r2,123b30 <_do_ctors+0x20>
        (*ctor) (); 
}
  123b58:	e037883a 	mov	sp,fp
  123b5c:	dfc00117 	ldw	ra,4(sp)
  123b60:	df000017 	ldw	fp,0(sp)
  123b64:	dec00204 	addi	sp,sp,8
  123b68:	f800283a 	ret

00123b6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  123b6c:	defffd04 	addi	sp,sp,-12
  123b70:	dfc00215 	stw	ra,8(sp)
  123b74:	df000115 	stw	fp,4(sp)
  123b78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  123b7c:	008004b4 	movhi	r2,18
  123b80:	108fef04 	addi	r2,r2,16316
  123b84:	e0bfff15 	stw	r2,-4(fp)
  123b88:	00000606 	br	123ba4 <_do_dtors+0x38>
        (*dtor) (); 
  123b8c:	e0bfff17 	ldw	r2,-4(fp)
  123b90:	10800017 	ldw	r2,0(r2)
  123b94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  123b98:	e0bfff17 	ldw	r2,-4(fp)
  123b9c:	10bfff04 	addi	r2,r2,-4
  123ba0:	e0bfff15 	stw	r2,-4(fp)
  123ba4:	e0ffff17 	ldw	r3,-4(fp)
  123ba8:	008004b4 	movhi	r2,18
  123bac:	108ff004 	addi	r2,r2,16320
  123bb0:	18bff62e 	bgeu	r3,r2,123b8c <_do_dtors+0x20>
        (*dtor) (); 
}
  123bb4:	e037883a 	mov	sp,fp
  123bb8:	dfc00117 	ldw	ra,4(sp)
  123bbc:	df000017 	ldw	fp,0(sp)
  123bc0:	dec00204 	addi	sp,sp,8
  123bc4:	f800283a 	ret

00123bc8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  123bc8:	defffc04 	addi	sp,sp,-16
  123bcc:	dfc00315 	stw	ra,12(sp)
  123bd0:	df000215 	stw	fp,8(sp)
  123bd4:	dc000115 	stw	r16,4(sp)
  123bd8:	df000104 	addi	fp,sp,4
  123bdc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  123be0:	e0bfff17 	ldw	r2,-4(fp)
  123be4:	108000d0 	cmplti	r2,r2,3
  123be8:	1000111e 	bne	r2,zero,123c30 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  123bec:	040004b4 	movhi	r16,18
  123bf0:	84127e04 	addi	r16,r16,18936
  123bf4:	e0bfff17 	ldw	r2,-4(fp)
  123bf8:	1009883a 	mov	r4,r2
  123bfc:	01400304 	movi	r5,12
  123c00:	01234e80 	call	1234e8 <__mulsi3>
  123c04:	8085883a 	add	r2,r16,r2
  123c08:	10800204 	addi	r2,r2,8
  123c0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  123c10:	040004b4 	movhi	r16,18
  123c14:	84127e04 	addi	r16,r16,18936
  123c18:	e0bfff17 	ldw	r2,-4(fp)
  123c1c:	1009883a 	mov	r4,r2
  123c20:	01400304 	movi	r5,12
  123c24:	01234e80 	call	1234e8 <__mulsi3>
  123c28:	8085883a 	add	r2,r16,r2
  123c2c:	10000015 	stw	zero,0(r2)
  }
}
  123c30:	e037883a 	mov	sp,fp
  123c34:	dfc00217 	ldw	ra,8(sp)
  123c38:	df000117 	ldw	fp,4(sp)
  123c3c:	dc000017 	ldw	r16,0(sp)
  123c40:	dec00304 	addi	sp,sp,12
  123c44:	f800283a 	ret

00123c48 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  123c48:	deffff04 	addi	sp,sp,-4
  123c4c:	df000015 	stw	fp,0(sp)
  123c50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  123c54:	000170fa 	wrctl	ienable,zero
}
  123c58:	e037883a 	mov	sp,fp
  123c5c:	df000017 	ldw	fp,0(sp)
  123c60:	dec00104 	addi	sp,sp,4
  123c64:	f800283a 	ret

00123c68 <atexit>:
  123c68:	200b883a 	mov	r5,r4
  123c6c:	000d883a 	mov	r6,zero
  123c70:	0009883a 	mov	r4,zero
  123c74:	000f883a 	mov	r7,zero
  123c78:	0123cb41 	jmpi	123cb4 <__register_exitproc>

00123c7c <exit>:
  123c7c:	defffe04 	addi	sp,sp,-8
  123c80:	000b883a 	mov	r5,zero
  123c84:	dc000015 	stw	r16,0(sp)
  123c88:	dfc00115 	stw	ra,4(sp)
  123c8c:	2021883a 	mov	r16,r4
  123c90:	0123de40 	call	123de4 <__call_exitprocs>
  123c94:	008004b4 	movhi	r2,18
  123c98:	1093e504 	addi	r2,r2,20372
  123c9c:	11000017 	ldw	r4,0(r2)
  123ca0:	20800f17 	ldw	r2,60(r4)
  123ca4:	10000126 	beq	r2,zero,123cac <exit+0x30>
  123ca8:	103ee83a 	callr	r2
  123cac:	8009883a 	mov	r4,r16
  123cb0:	0123f840 	call	123f84 <_exit>

00123cb4 <__register_exitproc>:
  123cb4:	defffa04 	addi	sp,sp,-24
  123cb8:	008004b4 	movhi	r2,18
  123cbc:	1093e504 	addi	r2,r2,20372
  123cc0:	dc000315 	stw	r16,12(sp)
  123cc4:	14000017 	ldw	r16,0(r2)
  123cc8:	dc400415 	stw	r17,16(sp)
  123ccc:	dfc00515 	stw	ra,20(sp)
  123cd0:	80805217 	ldw	r2,328(r16)
  123cd4:	2023883a 	mov	r17,r4
  123cd8:	10003e26 	beq	r2,zero,123dd4 <__register_exitproc+0x120>
  123cdc:	10c00117 	ldw	r3,4(r2)
  123ce0:	020007c4 	movi	r8,31
  123ce4:	40c0180e 	bge	r8,r3,123d48 <__register_exitproc+0x94>
  123ce8:	00800034 	movhi	r2,0
  123cec:	10800004 	addi	r2,r2,0
  123cf0:	1000061e 	bne	r2,zero,123d0c <__register_exitproc+0x58>
  123cf4:	00bfffc4 	movi	r2,-1
  123cf8:	dfc00517 	ldw	ra,20(sp)
  123cfc:	dc400417 	ldw	r17,16(sp)
  123d00:	dc000317 	ldw	r16,12(sp)
  123d04:	dec00604 	addi	sp,sp,24
  123d08:	f800283a 	ret
  123d0c:	01006404 	movi	r4,400
  123d10:	d9400015 	stw	r5,0(sp)
  123d14:	d9800115 	stw	r6,4(sp)
  123d18:	d9c00215 	stw	r7,8(sp)
  123d1c:	00000000 	call	0 <PIO_IRQ_MASK-0x8>
  123d20:	d9400017 	ldw	r5,0(sp)
  123d24:	d9800117 	ldw	r6,4(sp)
  123d28:	d9c00217 	ldw	r7,8(sp)
  123d2c:	103ff126 	beq	r2,zero,123cf4 <__register_exitproc+0x40>
  123d30:	80c05217 	ldw	r3,328(r16)
  123d34:	10000115 	stw	zero,4(r2)
  123d38:	10c00015 	stw	r3,0(r2)
  123d3c:	80805215 	stw	r2,328(r16)
  123d40:	10006215 	stw	zero,392(r2)
  123d44:	10006315 	stw	zero,396(r2)
  123d48:	10c00117 	ldw	r3,4(r2)
  123d4c:	88000d1e 	bne	r17,zero,123d84 <__register_exitproc+0xd0>
  123d50:	19000084 	addi	r4,r3,2
  123d54:	2109883a 	add	r4,r4,r4
  123d58:	18c00044 	addi	r3,r3,1
  123d5c:	2109883a 	add	r4,r4,r4
  123d60:	1109883a 	add	r4,r2,r4
  123d64:	10c00115 	stw	r3,4(r2)
  123d68:	0005883a 	mov	r2,zero
  123d6c:	21400015 	stw	r5,0(r4)
  123d70:	dfc00517 	ldw	ra,20(sp)
  123d74:	dc400417 	ldw	r17,16(sp)
  123d78:	dc000317 	ldw	r16,12(sp)
  123d7c:	dec00604 	addi	sp,sp,24
  123d80:	f800283a 	ret
  123d84:	02400044 	movi	r9,1
  123d88:	12806217 	ldw	r10,392(r2)
  123d8c:	48d2983a 	sll	r9,r9,r3
  123d90:	19000804 	addi	r4,r3,32
  123d94:	18d1883a 	add	r8,r3,r3
  123d98:	2109883a 	add	r4,r4,r4
  123d9c:	4211883a 	add	r8,r8,r8
  123da0:	2109883a 	add	r4,r4,r4
  123da4:	1109883a 	add	r4,r2,r4
  123da8:	1211883a 	add	r8,r2,r8
  123dac:	5254b03a 	or	r10,r10,r9
  123db0:	21c02215 	stw	r7,136(r4)
  123db4:	41802215 	stw	r6,136(r8)
  123db8:	12806215 	stw	r10,392(r2)
  123dbc:	01000084 	movi	r4,2
  123dc0:	893fe31e 	bne	r17,r4,123d50 <__register_exitproc+0x9c>
  123dc4:	11006317 	ldw	r4,396(r2)
  123dc8:	2252b03a 	or	r9,r4,r9
  123dcc:	12406315 	stw	r9,396(r2)
  123dd0:	003fdf06 	br	123d50 <__register_exitproc+0x9c>
  123dd4:	008004b4 	movhi	r2,18
  123dd8:	10957904 	addi	r2,r2,21988
  123ddc:	80805215 	stw	r2,328(r16)
  123de0:	003fbe06 	br	123cdc <__register_exitproc+0x28>

00123de4 <__call_exitprocs>:
  123de4:	008004b4 	movhi	r2,18
  123de8:	1093e504 	addi	r2,r2,20372
  123dec:	10800017 	ldw	r2,0(r2)
  123df0:	defff304 	addi	sp,sp,-52
  123df4:	df000b15 	stw	fp,44(sp)
  123df8:	d8800015 	stw	r2,0(sp)
  123dfc:	10805204 	addi	r2,r2,328
  123e00:	dd400815 	stw	r21,32(sp)
  123e04:	dfc00c15 	stw	ra,48(sp)
  123e08:	ddc00a15 	stw	r23,40(sp)
  123e0c:	dd800915 	stw	r22,36(sp)
  123e10:	dd000715 	stw	r20,28(sp)
  123e14:	dcc00615 	stw	r19,24(sp)
  123e18:	dc800515 	stw	r18,20(sp)
  123e1c:	dc400415 	stw	r17,16(sp)
  123e20:	dc000315 	stw	r16,12(sp)
  123e24:	d9000115 	stw	r4,4(sp)
  123e28:	2839883a 	mov	fp,r5
  123e2c:	d8800215 	stw	r2,8(sp)
  123e30:	057fffc4 	movi	r21,-1
  123e34:	d8800017 	ldw	r2,0(sp)
  123e38:	ddc00217 	ldw	r23,8(sp)
  123e3c:	14805217 	ldw	r18,328(r2)
  123e40:	90001726 	beq	r18,zero,123ea0 <__call_exitprocs+0xbc>
  123e44:	94400117 	ldw	r17,4(r18)
  123e48:	8c3fffc4 	addi	r16,r17,-1
  123e4c:	80001116 	blt	r16,zero,123e94 <__call_exitprocs+0xb0>
  123e50:	8c400044 	addi	r17,r17,1
  123e54:	8427883a 	add	r19,r16,r16
  123e58:	8c63883a 	add	r17,r17,r17
  123e5c:	95802204 	addi	r22,r18,136
  123e60:	9ce7883a 	add	r19,r19,r19
  123e64:	8c63883a 	add	r17,r17,r17
  123e68:	b4e7883a 	add	r19,r22,r19
  123e6c:	9463883a 	add	r17,r18,r17
  123e70:	e0001726 	beq	fp,zero,123ed0 <__call_exitprocs+0xec>
  123e74:	8c87c83a 	sub	r3,r17,r18
  123e78:	b0c7883a 	add	r3,r22,r3
  123e7c:	18c01e17 	ldw	r3,120(r3)
  123e80:	1f001326 	beq	r3,fp,123ed0 <__call_exitprocs+0xec>
  123e84:	843fffc4 	addi	r16,r16,-1
  123e88:	9cffff04 	addi	r19,r19,-4
  123e8c:	8c7fff04 	addi	r17,r17,-4
  123e90:	857ff71e 	bne	r16,r21,123e70 <__call_exitprocs+0x8c>
  123e94:	00800034 	movhi	r2,0
  123e98:	10800004 	addi	r2,r2,0
  123e9c:	10002a1e 	bne	r2,zero,123f48 <__call_exitprocs+0x164>
  123ea0:	dfc00c17 	ldw	ra,48(sp)
  123ea4:	df000b17 	ldw	fp,44(sp)
  123ea8:	ddc00a17 	ldw	r23,40(sp)
  123eac:	dd800917 	ldw	r22,36(sp)
  123eb0:	dd400817 	ldw	r21,32(sp)
  123eb4:	dd000717 	ldw	r20,28(sp)
  123eb8:	dcc00617 	ldw	r19,24(sp)
  123ebc:	dc800517 	ldw	r18,20(sp)
  123ec0:	dc400417 	ldw	r17,16(sp)
  123ec4:	dc000317 	ldw	r16,12(sp)
  123ec8:	dec00d04 	addi	sp,sp,52
  123ecc:	f800283a 	ret
  123ed0:	91000117 	ldw	r4,4(r18)
  123ed4:	88c00017 	ldw	r3,0(r17)
  123ed8:	213fffc4 	addi	r4,r4,-1
  123edc:	24001526 	beq	r4,r16,123f34 <__call_exitprocs+0x150>
  123ee0:	88000015 	stw	zero,0(r17)
  123ee4:	183fe726 	beq	r3,zero,123e84 <__call_exitprocs+0xa0>
  123ee8:	00800044 	movi	r2,1
  123eec:	1408983a 	sll	r4,r2,r16
  123ef0:	91406217 	ldw	r5,392(r18)
  123ef4:	95000117 	ldw	r20,4(r18)
  123ef8:	214a703a 	and	r5,r4,r5
  123efc:	28000b26 	beq	r5,zero,123f2c <__call_exitprocs+0x148>
  123f00:	91406317 	ldw	r5,396(r18)
  123f04:	2148703a 	and	r4,r4,r5
  123f08:	20000c1e 	bne	r4,zero,123f3c <__call_exitprocs+0x158>
  123f0c:	99400017 	ldw	r5,0(r19)
  123f10:	d9000117 	ldw	r4,4(sp)
  123f14:	183ee83a 	callr	r3
  123f18:	90c00117 	ldw	r3,4(r18)
  123f1c:	1d3fc51e 	bne	r3,r20,123e34 <__call_exitprocs+0x50>
  123f20:	b8c00017 	ldw	r3,0(r23)
  123f24:	1cbfd726 	beq	r3,r18,123e84 <__call_exitprocs+0xa0>
  123f28:	003fc206 	br	123e34 <__call_exitprocs+0x50>
  123f2c:	183ee83a 	callr	r3
  123f30:	003ff906 	br	123f18 <__call_exitprocs+0x134>
  123f34:	94000115 	stw	r16,4(r18)
  123f38:	003fea06 	br	123ee4 <__call_exitprocs+0x100>
  123f3c:	99000017 	ldw	r4,0(r19)
  123f40:	183ee83a 	callr	r3
  123f44:	003ff406 	br	123f18 <__call_exitprocs+0x134>
  123f48:	90c00117 	ldw	r3,4(r18)
  123f4c:	1800071e 	bne	r3,zero,123f6c <__call_exitprocs+0x188>
  123f50:	90c00017 	ldw	r3,0(r18)
  123f54:	18000926 	beq	r3,zero,123f7c <__call_exitprocs+0x198>
  123f58:	9009883a 	mov	r4,r18
  123f5c:	b8c00015 	stw	r3,0(r23)
  123f60:	00000000 	call	0 <PIO_IRQ_MASK-0x8>
  123f64:	bc800017 	ldw	r18,0(r23)
  123f68:	003fb506 	br	123e40 <__call_exitprocs+0x5c>
  123f6c:	90c00017 	ldw	r3,0(r18)
  123f70:	902f883a 	mov	r23,r18
  123f74:	1825883a 	mov	r18,r3
  123f78:	003fb106 	br	123e40 <__call_exitprocs+0x5c>
  123f7c:	0007883a 	mov	r3,zero
  123f80:	003ffb06 	br	123f70 <__call_exitprocs+0x18c>

00123f84 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  123f84:	defffc04 	addi	sp,sp,-16
  123f88:	df000315 	stw	fp,12(sp)
  123f8c:	df000304 	addi	fp,sp,12
  123f90:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  123f94:	0001883a 	nop
  123f98:	e0bfff17 	ldw	r2,-4(fp)
  123f9c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  123fa0:	e0bffd17 	ldw	r2,-12(fp)
  123fa4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  123fa8:	e0bffe17 	ldw	r2,-8(fp)
  123fac:	10000226 	beq	r2,zero,123fb8 <_exit+0x34>
    ALT_SIM_FAIL();
  123fb0:	002af070 	cmpltui	zero,zero,43969
  123fb4:	00000106 	br	123fbc <_exit+0x38>
  } else {
    ALT_SIM_PASS();
  123fb8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  123fbc:	003fff06 	br	123fbc <_exit+0x38>
